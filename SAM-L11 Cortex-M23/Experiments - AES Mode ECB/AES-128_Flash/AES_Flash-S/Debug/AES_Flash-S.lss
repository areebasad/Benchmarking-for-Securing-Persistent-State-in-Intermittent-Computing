
AES_Flash-S.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004b04  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .gnu.sgstubs  00000020  0000fb00  0000fb00  0002fb00  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .relocate     00000068  20000000  00004b04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000260  20000068  00004b6c  00020068  2**2
                  ALLOC
  4 .heap         00000200  200002c8  00004dcc  00020068  2**0
                  ALLOC
  5 .stack        00000400  200004c8  00004fcc  00020068  2**0
                  ALLOC
  6 .userRowBlock 00000020  00804000  00804000  00034000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.attributes 0000002c  00000000  00000000  00034020  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0003404c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000feea  00000000  00000000  000340a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000028e5  00000000  00000000  00043f8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006b84  00000000  00000000  00046874  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000418  00000000  00000000  0004d3f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000c20  00000000  00000000  0004d810  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0001b0b1  00000000  00000000  0004e430  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000c4f1  00000000  00000000  000694e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0008f39a  00000000  00000000  000759d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00000b20  00000000  00000000  00104d6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	c8 08 00 20 55 1a 00 00 51 1a 00 00 51 1a 00 00     ... U...Q...Q...
	...
      2c:	51 1a 00 00 00 00 00 00 00 00 00 00 51 1a 00 00     Q...........Q...
      3c:	51 1a 00 00 51 1a 00 00 51 1a 00 00 51 1a 00 00     Q...Q...Q...Q...
      4c:	51 1a 00 00 51 1a 00 00 51 1a 00 00 51 1a 00 00     Q...Q...Q...Q...
      5c:	51 1a 00 00 51 1a 00 00 51 1a 00 00 51 1a 00 00     Q...Q...Q...Q...
      6c:	51 1a 00 00 51 1a 00 00 51 1a 00 00 51 1a 00 00     Q...Q...Q...Q...
      7c:	51 1a 00 00 51 1a 00 00 51 1a 00 00 51 1a 00 00     Q...Q...Q...Q...
      8c:	51 1a 00 00 51 1a 00 00 51 1a 00 00 51 1a 00 00     Q...Q...Q...Q...
      9c:	51 1a 00 00 51 1a 00 00 51 1a 00 00 51 1a 00 00     Q...Q...Q...Q...
      ac:	51 1a 00 00 51 1a 00 00 51 1a 00 00 51 1a 00 00     Q...Q...Q...Q...
      bc:	51 1a 00 00 51 1a 00 00 51 1a 00 00 51 1a 00 00     Q...Q...Q...Q...
      cc:	51 1a 00 00 51 1a 00 00 51 1a 00 00 51 1a 00 00     Q...Q...Q...Q...
      dc:	51 1a 00 00 51 1a 00 00 51 1a 00 00 51 1a 00 00     Q...Q...Q...Q...
      ec:	51 1a 00 00 51 1a 00 00                             Q...Q...

000000f4 <__acle_se_nsc_periph_clock_init>:
#if defined(__ICCARM__) /* IAR EWARM */
__cmse_nonsecure_entry int32_t nsc_periph_clock_init(uint32_t gclk_id, uint32_t gclk_src)
#else /* GCC, Keil MDK with ARM Compiler 6 */
int32_t __attribute__((cmse_nonsecure_entry)) nsc_periph_clock_init(uint32_t gclk_id, uint32_t gclk_src)
#endif
{
      f4:	f641 4200 	movw	r2, #7168	; 0x1c00
      f8:	23ff      	movs	r3, #255	; 0xff
      fa:	f2c4 0200 	movt	r2, #16384	; 0x4000
      fe:	4694      	mov	ip, r2
}

static inline bool hri_gclk_get_PCHCTRL_CHEN_bit(const void *const hw, uint8_t index)
{
	uint32_t tmp;
	tmp = ((Gclk *)hw)->PCHCTRL[index].reg;
     100:	2280      	movs	r2, #128	; 0x80
     102:	4003      	ands	r3, r0
     104:	009b      	lsls	r3, r3, #2
     106:	4463      	add	r3, ip
     108:	b510      	push	{r4, lr}
     10a:	589c      	ldr	r4, [r3, r2]
	if (hri_gclk_get_PCHCTRL_CHEN_bit(GCLK, gclk_id)) {
		return 1; /* Already enabled */
     10c:	2001      	movs	r0, #1
	if (hri_gclk_get_PCHCTRL_CHEN_bit(GCLK, gclk_id)) {
     10e:	0664      	lsls	r4, r4, #25
     110:	d403      	bmi.n	11a <__acle_se_nsc_periph_clock_init+0x26>
	} else {
		hri_gclk_write_PCHCTRL_reg(GCLK, gclk_id, gclk_src | (1 << GCLK_PCHCTRL_CHEN_Pos));
     112:	303f      	adds	r0, #63	; 0x3f
     114:	4301      	orrs	r1, r0
	}
	return 0;
     116:	2000      	movs	r0, #0
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     118:	5099      	str	r1, [r3, r2]
}
     11a:	0001      	movs	r1, r0
     11c:	0002      	movs	r2, r0
     11e:	0003      	movs	r3, r0
     120:	4684      	mov	ip, r0
     122:	bc10      	pop	{r4}
     124:	bc02      	pop	{r1}
     126:	4686      	mov	lr, r0
     128:	f381 8800 	msr	CPSR_f, r1
     12c:	470c      	bxns	r1
     12e:	46c0      	nop			; (mov r8, r8)

00000130 <__acle_se_nsc_ext_irq_init>:
#if defined(__ICCARM__) /* IAR EWARM */
__cmse_nonsecure_entry int32_t nsc_ext_irq_init(struct ext_irq_setting irq_setting)
#else /* GCC, Keil MDK with ARM Compiler 6 */
int32_t __attribute__((cmse_nonsecure_entry)) nsc_ext_irq_init(struct ext_irq_setting irq_setting)
#endif
{
     130:	b5f0      	push	{r4, r5, r6, r7, lr}
     132:	b087      	sub	sp, #28
     134:	9305      	str	r3, [sp, #20]
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_evctrl_reg_t hri_eic_read_EVCTRL_reg(const void *const hw)
{
	return ((Eic *)hw)->EVCTRL.reg;
     136:	f642 2300 	movw	r3, #10752	; 0x2a00
     13a:	9002      	str	r0, [sp, #8]
     13c:	9204      	str	r2, [sp, #16]
     13e:	9103      	str	r1, [sp, #12]
     140:	f2c4 0300 	movt	r3, #16384	; 0x4000
     144:	689c      	ldr	r4, [r3, #8]
	uint32_t config_val         = hri_eic_read_CONFIG_reg(EIC_SEC, 0);
	uint32_t nonsec_mask        = hri_eic_read_NONSEC_reg(EIC_SEC);
	uint32_t config_nonsec_mask = 0;

	/* Calculate external interrupt settings with non-secure part  */
	evctrl_val    = (evctrl_val & (~nonsec_mask)) | (irq_setting.evctrl & nonsec_mask);
     146:	9e02      	ldr	r6, [sp, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_asynch_reg_t hri_eic_read_ASYNCH_reg(const void *const hw)
{
	return ((Eic *)hw)->ASYNCH.reg;
     148:	6998      	ldr	r0, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_debouncen_reg_t hri_eic_read_DEBOUNCEN_reg(const void *const hw)
{
	return ((Eic *)hw)->DEBOUNCEN.reg;
     14a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	return ((Eic *)hw)->CONFIG[index].reg;
     14c:	69d9      	ldr	r1, [r3, #28]
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_nonsec_reg_t hri_eic_read_NONSEC_reg(const void *const hw)
{
	return ((Eic *)hw)->NONSEC.reg;
     14e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
     150:	4066      	eors	r6, r4
     152:	401e      	ands	r6, r3
     154:	4066      	eors	r6, r4
	asynch_val    = (asynch_val & (~nonsec_mask)) | (irq_setting.asynch & nonsec_mask);
     156:	9c04      	ldr	r4, [sp, #16]
     158:	0025      	movs	r5, r4
     15a:	4045      	eors	r5, r0
     15c:	401d      	ands	r5, r3
     15e:	4045      	eors	r5, r0
	debouncen_val = (debouncen_val & (~nonsec_mask)) | (irq_setting.debouncen & nonsec_mask);
     160:	9805      	ldr	r0, [sp, #20]
     162:	0004      	movs	r4, r0
     164:	4054      	eors	r4, r2
     166:	401c      	ands	r4, r3
     168:	4054      	eors	r4, r2
     16a:	9001      	str	r0, [sp, #4]
     16c:	2200      	movs	r2, #0
     16e:	07d8      	lsls	r0, r3, #31
     170:	d500      	bpl.n	174 <__acle_se_nsc_ext_irq_init+0x44>
     172:	320f      	adds	r2, #15
     174:	20f0      	movs	r0, #240	; 0xf0
     176:	4310      	orrs	r0, r2
     178:	079f      	lsls	r7, r3, #30
     17a:	d400      	bmi.n	17e <__acle_se_nsc_ext_irq_init+0x4e>
     17c:	0010      	movs	r0, r2
     17e:	f640 7200 	movw	r2, #3840	; 0xf00
     182:	4302      	orrs	r2, r0
     184:	075f      	lsls	r7, r3, #29
     186:	d400      	bmi.n	18a <__acle_se_nsc_ext_irq_init+0x5a>
     188:	0002      	movs	r2, r0
     18a:	f24f 0000 	movw	r0, #61440	; 0xf000
     18e:	4310      	orrs	r0, r2
     190:	071f      	lsls	r7, r3, #28
     192:	d400      	bmi.n	196 <__acle_se_nsc_ext_irq_init+0x66>
     194:	0010      	movs	r0, r2
     196:	22f0      	movs	r2, #240	; 0xf0
     198:	0312      	lsls	r2, r2, #12
     19a:	4302      	orrs	r2, r0
     19c:	06df      	lsls	r7, r3, #27
     19e:	d400      	bmi.n	1a2 <__acle_se_nsc_ext_irq_init+0x72>
     1a0:	0002      	movs	r2, r0
     1a2:	20f0      	movs	r0, #240	; 0xf0
     1a4:	0400      	lsls	r0, r0, #16
     1a6:	4310      	orrs	r0, r2
     1a8:	069f      	lsls	r7, r3, #26
     1aa:	d400      	bmi.n	1ae <__acle_se_nsc_ext_irq_init+0x7e>
     1ac:	0010      	movs	r0, r2
     1ae:	22f0      	movs	r2, #240	; 0xf0
     1b0:	0512      	lsls	r2, r2, #20
     1b2:	4302      	orrs	r2, r0
     1b4:	065f      	lsls	r7, r3, #25
     1b6:	d400      	bmi.n	1ba <__acle_se_nsc_ext_irq_init+0x8a>
     1b8:	0002      	movs	r2, r0
	for (i = 0; i < 8; i++) {
		if (nonsec_mask & (1u << i)) {
			config_nonsec_mask |= (0xFu << (i * 4));
     1ba:	20f0      	movs	r0, #240	; 0xf0
     1bc:	0600      	lsls	r0, r0, #24
     1be:	4310      	orrs	r0, r2
		}
	}
	config_val = (config_val & (~config_nonsec_mask)) | (irq_setting.config[0] & config_nonsec_mask);
     1c0:	061b      	lsls	r3, r3, #24
     1c2:	d500      	bpl.n	1c6 <__acle_se_nsc_ext_irq_init+0x96>
     1c4:	0002      	movs	r2, r0
     1c6:	9803      	ldr	r0, [sp, #12]
     1c8:	4048      	eors	r0, r1
     1ca:	4010      	ands	r0, r2
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE_Msk;
     1cc:	f642 2200 	movw	r2, #10752	; 0x2a00
     1d0:	4048      	eors	r0, r1
     1d2:	2102      	movs	r1, #2
     1d4:	f2c4 0200 	movt	r2, #16384	; 0x4000
     1d8:	7813      	ldrb	r3, [r2, #0]
     1da:	438b      	bics	r3, r1
     1dc:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
     1de:	3101      	adds	r1, #1
     1e0:	6853      	ldr	r3, [r2, #4]
     1e2:	4219      	tst	r1, r3
     1e4:	d1fc      	bne.n	1e0 <__acle_se_nsc_ext_irq_init+0xb0>
     1e6:	f642 2200 	movw	r2, #10752	; 0x2a00
     1ea:	2102      	movs	r1, #2
     1ec:	f2c4 0200 	movt	r2, #16384	; 0x4000
     1f0:	6853      	ldr	r3, [r2, #4]
     1f2:	4219      	tst	r1, r3
     1f4:	d1fc      	bne.n	1f0 <__acle_se_nsc_ext_irq_init+0xc0>
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE_Msk;
     1f6:	2102      	movs	r1, #2
	((Eic *)hw)->EVCTRL.reg = data;
     1f8:	6096      	str	r6, [r2, #8]
	((Eic *)hw)->ASYNCH.reg = data;
     1fa:	6195      	str	r5, [r2, #24]
	((Eic *)hw)->DEBOUNCEN.reg = data;
     1fc:	6314      	str	r4, [r2, #48]	; 0x30
	((Eic *)hw)->CONFIG[index].reg = data;
     1fe:	61d0      	str	r0, [r2, #28]
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE_Msk;
     200:	7813      	ldrb	r3, [r2, #0]
     202:	430b      	orrs	r3, r1
     204:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
     206:	f642 2200 	movw	r2, #10752	; 0x2a00
     20a:	3101      	adds	r1, #1
     20c:	f2c4 0200 	movt	r2, #16384	; 0x4000
     210:	6853      	ldr	r3, [r2, #4]
     212:	4219      	tst	r1, r3
     214:	d1fc      	bne.n	210 <HEAP_SIZE+0x10>

	/* Enable EIC */
	hri_eic_set_CTRLA_ENABLE_bit(EIC_SEC);

	return 0;
}
     216:	2000      	movs	r0, #0
     218:	b007      	add	sp, #28
     21a:	0001      	movs	r1, r0
     21c:	0002      	movs	r2, r0
     21e:	0003      	movs	r3, r0
     220:	4684      	mov	ip, r0
     222:	bcf0      	pop	{r4, r5, r6, r7}
     224:	bc02      	pop	{r1}
     226:	4686      	mov	lr, r0
     228:	f381 8800 	msr	CPSR_f, r1
     22c:	470c      	bxns	r1
     22e:	46c0      	nop			; (mov r8, r8)

00000230 <__do_global_dtors_aux>:
     230:	b510      	push	{r4, lr}
     232:	f240 0468 	movw	r4, #104	; 0x68
     236:	f2c2 0400 	movt	r4, #8192	; 0x2000
     23a:	7823      	ldrb	r3, [r4, #0]
     23c:	b963      	cbnz	r3, 258 <__do_global_dtors_aux+0x28>
     23e:	f240 0300 	movw	r3, #0
     242:	f2c0 0300 	movt	r3, #0
     246:	b12b      	cbz	r3, 254 <__do_global_dtors_aux+0x24>
     248:	f244 0020 	movw	r0, #16416	; 0x4020
     24c:	f2c0 0080 	movt	r0, #128	; 0x80
     250:	e000      	b.n	254 <__do_global_dtors_aux+0x24>
     252:	bf00      	nop
     254:	2301      	movs	r3, #1
     256:	7023      	strb	r3, [r4, #0]
     258:	bd10      	pop	{r4, pc}
     25a:	46c0      	nop			; (mov r8, r8)

0000025c <frame_dummy>:
     25c:	f240 0300 	movw	r3, #0
     260:	f2c0 0300 	movt	r3, #0
     264:	b510      	push	{r4, lr}
     266:	b14b      	cbz	r3, 27c <frame_dummy+0x20>
     268:	f240 016c 	movw	r1, #108	; 0x6c
     26c:	f244 0020 	movw	r0, #16416	; 0x4020
     270:	f2c2 0100 	movt	r1, #8192	; 0x2000
     274:	f2c0 0080 	movt	r0, #128	; 0x80
     278:	e000      	b.n	27c <frame_dummy+0x20>
     27a:	bf00      	nop
     27c:	f244 0020 	movw	r0, #16416	; 0x4020
     280:	f2c0 0080 	movt	r0, #128	; 0x80
     284:	6803      	ldr	r3, [r0, #0]
     286:	b903      	cbnz	r3, 28a <frame_dummy+0x2e>
     288:	bd10      	pop	{r4, pc}
     28a:	f240 0300 	movw	r3, #0
     28e:	f2c0 0300 	movt	r3, #0
     292:	2b00      	cmp	r3, #0
     294:	d0f8      	beq.n	288 <frame_dummy+0x2c>
     296:	4798      	blx	r3
     298:	e7f6      	b.n	288 <frame_dummy+0x2c>
     29a:	46c0      	nop			; (mov r8, r8)

0000029c <gpio_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     29c:	f240 2200 	movw	r2, #512	; 0x200
     2a0:	2180      	movs	r1, #128	; 0x80
     2a2:	2080      	movs	r0, #128	; 0x80

#include "driver_init.h"
#include "gpio_init.h"

void gpio_init(void)
{
     2a4:	b570      	push	{r4, r5, r6, lr}
     2a6:	f240 4300 	movw	r3, #1024	; 0x400
     2aa:	f640 0500 	movw	r5, #2048	; 0x800
     2ae:	f2c6 0200 	movt	r2, #24576	; 0x6000
     2b2:	0409      	lsls	r1, r1, #16
     2b4:	0500      	lsls	r0, r0, #20
     2b6:	6153      	str	r3, [r2, #20]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     2b8:	f240 4400 	movw	r4, #1024	; 0x400
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2bc:	6155      	str	r5, [r2, #20]
     2be:	6151      	str	r1, [r2, #20]
     2c0:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     2c2:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     2c4:	f243 2300 	movw	r3, #12800	; 0x3200
     2c8:	f2c4 0400 	movt	r4, #16384	; 0x4000
     2cc:	f2c4 0300 	movt	r3, #16384	; 0x4000
     2d0:	629c      	str	r4, [r3, #40]	; 0x28
     2d2:	24c0      	movs	r4, #192	; 0xc0
     2d4:	0624      	lsls	r4, r4, #24
     2d6:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     2d8:	6095      	str	r5, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     2da:	f2c4 0500 	movt	r5, #16384	; 0x4000
     2de:	629d      	str	r5, [r3, #40]	; 0x28
     2e0:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     2e2:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     2e4:	2480      	movs	r4, #128	; 0x80
     2e6:	2180      	movs	r1, #128	; 0x80
     2e8:	f2cc 0400 	movt	r4, #49152	; 0xc000
     2ec:	05c9      	lsls	r1, r1, #23
     2ee:	6299      	str	r1, [r3, #40]	; 0x28
     2f0:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     2f2:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     2f4:	f640 0200 	movw	r2, #2048	; 0x800
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2f8:	204a      	movs	r0, #74	; 0x4a
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     2fa:	f2cc 0200 	movt	r2, #49152	; 0xc000
     2fe:	6299      	str	r1, [r3, #40]	; 0x28
     300:	629a      	str	r2, [r3, #40]	; 0x28
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
     302:	2201      	movs	r2, #1
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     304:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
     306:	4391      	bics	r1, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     308:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     30a:	3001      	adds	r0, #1
     30c:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
     30e:	4391      	bics	r1, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     310:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     312:	300c      	adds	r0, #12
     314:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
     316:	4391      	bics	r1, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     318:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     31a:	3004      	adds	r0, #4
     31c:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
     31e:	4391      	bics	r1, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     320:	5419      	strb	r1, [r3, r0]
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
#endif

	delay_ms(10);
     322:	f641 3311 	movw	r3, #6929	; 0x1b11
     326:	3851      	subs	r0, #81	; 0x51
     328:	f2c0 0300 	movt	r3, #0
     32c:	4798      	blx	r3
     32e:	bd70      	pop	{r4, r5, r6, pc}

00000330 <mbedtls_aes_setkey_enc>:
        u = i >> 1;
        keybits = 128 + u * 64;
        mode = i & 1;

        if( verbose != 0 )
            mbedtls_printf( "  AES-CFB128-%3d (%s): ", keybits,
     330:	b5f0      	push	{r4, r5, r6, r7, lr}
     332:	46de      	mov	lr, fp
     334:	4657      	mov	r7, sl
     336:	464e      	mov	r6, r9
     338:	4645      	mov	r5, r8
     33a:	b5e0      	push	{r5, r6, r7, lr}
     33c:	4683      	mov	fp, r0
     33e:	b085      	sub	sp, #20
     340:	2ac0      	cmp	r2, #192	; 0xc0
     342:	d03a      	beq.n	3ba <mbedtls_aes_setkey_enc+0x8a>
     344:	f240 1300 	movw	r3, #256	; 0x100
     348:	429a      	cmp	r2, r3
     34a:	d031      	beq.n	3b0 <mbedtls_aes_setkey_enc+0x80>
                            ( mode == MBEDTLS_AES_DECRYPT ) ? "dec" : "enc" );

        memcpy( iv,  aes_test_cfb128_iv, 16 );
     34c:	2a80      	cmp	r2, #128	; 0x80
     34e:	d008      	beq.n	362 <mbedtls_aes_setkey_enc+0x32>
     350:	2020      	movs	r0, #32
     352:	4240      	negs	r0, r0
     354:	b005      	add	sp, #20
        memcpy( key, aes_test_cfb128_key[u], keybits / 8 );
     356:	bc3c      	pop	{r2, r3, r4, r5}
        memcpy( iv,  aes_test_cfb128_iv, 16 );
     358:	4690      	mov	r8, r2
        memcpy( key, aes_test_cfb128_key[u], keybits / 8 );
     35a:	4699      	mov	r9, r3
     35c:	46a2      	mov	sl, r4
     35e:	46ab      	mov	fp, r5
     360:	bdf0      	pop	{r4, r5, r6, r7, pc}
     362:	f240 080a 	movw	r8, #10
     366:	3bf6      	subs	r3, #246	; 0xf6

        offset = 0;
        ret = mbedtls_aes_setkey_enc( &ctx, key, keybits );
     368:	6003      	str	r3, [r0, #0]
     36a:	465d      	mov	r5, fp
     36c:	0953      	lsrs	r3, r2, #5
     36e:	3508      	adds	r5, #8
     370:	4658      	mov	r0, fp
        /*
         * AES-192 is an optional feature that may be unavailable when
         * there is an alternative underlying implementation i.e. when
         * MBEDTLS_AES_ALT is defined.
         */
        if( ret == MBEDTLS_ERR_PLATFORM_FEATURE_UNSUPPORTED && keybits == 192 )
     372:	002a      	movs	r2, r5
     374:	2700      	movs	r7, #0
     376:	001e      	movs	r6, r3
     378:	6045      	str	r5, [r0, #4]
        {
            mbedtls_printf( "skipped\n" );
            continue;
        }
        else if( ret != 0 )
     37a:	784b      	ldrb	r3, [r1, #1]
     37c:	788c      	ldrb	r4, [r1, #2]
     37e:	021b      	lsls	r3, r3, #8
        {
            goto exit;
        }

        if( mode == MBEDTLS_AES_DECRYPT )
     380:	0424      	lsls	r4, r4, #16
     382:	4323      	orrs	r3, r4
     384:	780c      	ldrb	r4, [r1, #0]
        {
            memcpy( buf, aes_test_cfb128_ct[u], 64 );
     386:	3701      	adds	r7, #1
     388:	4323      	orrs	r3, r4
     38a:	78cc      	ldrb	r4, [r1, #3]
     38c:	3104      	adds	r1, #4
     38e:	0624      	lsls	r4, r4, #24
     390:	4323      	orrs	r3, r4
     392:	c208      	stmia	r2!, {r3}
     394:	42b7      	cmp	r7, r6
     396:	d3f0      	bcc.n	37a <mbedtls_aes_setkey_enc+0x4a>
     398:	4643      	mov	r3, r8
     39a:	4683      	mov	fp, r0
     39c:	2b0c      	cmp	r3, #12
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
     39e:	d100      	bne.n	3a2 <mbedtls_aes_setkey_enc+0x72>
     3a0:	e1bc      	b.n	71c <STACK_SIZE+0x31c>
     3a2:	2b0e      	cmp	r3, #14
     3a4:	d100      	bne.n	3a8 <mbedtls_aes_setkey_enc+0x78>
     3a6:	e153      	b.n	650 <STACK_SIZE+0x250>
            memcpy( buf, aes_test_cfb128_ct[u], 64 );
     3a8:	2b0a      	cmp	r3, #10
            n = ( n + 1 ) & 0x0F;
     3aa:	d00b      	beq.n	3c4 <mbedtls_aes_setkey_enc+0x94>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
     3ac:	2000      	movs	r0, #0
     3ae:	e7d1      	b.n	354 <mbedtls_aes_setkey_enc+0x24>
            if( n == 0 )
     3b0:	230e      	movs	r3, #14
     3b2:	f240 080e 	movw	r8, #14
            *output++ = (unsigned char)( c ^ iv[n] );
     3b6:	6003      	str	r3, [r0, #0]
     3b8:	e7d7      	b.n	36a <mbedtls_aes_setkey_enc+0x3a>
            c = *input++;
     3ba:	230c      	movs	r3, #12
            *output++ = (unsigned char)( c ^ iv[n] );
     3bc:	f240 080c 	movw	r8, #12
     3c0:	6003      	str	r3, [r0, #0]
     3c2:	e7d2      	b.n	36a <mbedtls_aes_setkey_enc+0x3a>
     3c4:	22ff      	movs	r2, #255	; 0xff
            iv[n] = (unsigned char) c;
     3c6:	f242 14e0 	movw	r4, #8672	; 0x21e0
        while( length-- )
     3ca:	6943      	ldr	r3, [r0, #20]
     3cc:	f2c0 0400 	movt	r4, #0
            aes_tests = aes_test_cfb128_pt;
     3d0:	0a19      	lsrs	r1, r3, #8
     3d2:	4011      	ands	r1, r2
     3d4:	5c65      	ldrb	r5, [r4, r1]
     3d6:	2101      	movs	r1, #1

        ret = mbedtls_aes_crypt_cfb128( &ctx, mode, 64, &offset, iv, buf, buf );
        if( ret != 0 )
            goto exit;

        if( memcmp( buf, aes_tests, 64 ) != 0 )
     3d8:	f240 0c02 	movw	ip, #2
     3dc:	0006      	movs	r6, r0
     3de:	6880      	ldr	r0, [r0, #8]
     3e0:	46b3      	mov	fp, r6
     3e2:	4041      	eors	r1, r0
     3e4:	404d      	eors	r5, r1
     3e6:	0e19      	lsrs	r1, r3, #24
     3e8:	5c61      	ldrb	r1, [r4, r1]
     3ea:	4660      	mov	r0, ip
     3ec:	0409      	lsls	r1, r1, #16
        {
            ret = 1;
            goto exit;
        }

        if( verbose != 0 )
     3ee:	404d      	eors	r5, r1
     3f0:	0011      	movs	r1, r2
     3f2:	4019      	ands	r1, r3
     3f4:	5c61      	ldrb	r1, [r4, r1]
    for( i = 0; i < 6; i++ )
     3f6:	6937      	ldr	r7, [r6, #16]
     3f8:	0609      	lsls	r1, r1, #24
     3fa:	404d      	eors	r5, r1
     3fc:	0c19      	lsrs	r1, r3, #16
     3fe:	4011      	ands	r1, r2
     400:	5c61      	ldrb	r1, [r4, r1]
     402:	f240 0c04 	movw	ip, #4
            mbedtls_printf( "passed\n" );
    }

    if( verbose != 0 )
     406:	0209      	lsls	r1, r1, #8
     408:	404d      	eors	r5, r1
     40a:	68f1      	ldr	r1, [r6, #12]
     40c:	61b5      	str	r5, [r6, #24]
     40e:	4069      	eors	r1, r5
     410:	404f      	eors	r7, r1
            aes_tests = aes_test_cfb128_pt;
     412:	407b      	eors	r3, r7
     414:	61f1      	str	r1, [r6, #28]
     416:	6237      	str	r7, [r6, #32]
     418:	6273      	str	r3, [r6, #36]	; 0x24
     41a:	0a1e      	lsrs	r6, r3, #8
     41c:	4016      	ands	r6, r2
     41e:	5da6      	ldrb	r6, [r4, r6]
    /*
     * OFB mode
     */
    for( i = 0; i < 6; i++ )
    {
        u = i >> 1;
     420:	4045      	eors	r5, r0
     422:	4075      	eors	r5, r6
        keybits = 128 + u * 64;
     424:	0e1e      	lsrs	r6, r3, #24
        u = i >> 1;
     426:	5da6      	ldrb	r6, [r4, r6]
        mode = i & 1;
     428:	4658      	mov	r0, fp
     42a:	0436      	lsls	r6, r6, #16
     42c:	406e      	eors	r6, r5

        if( verbose != 0 )
     42e:	0015      	movs	r5, r2
        keybits = 128 + u * 64;
     430:	401d      	ands	r5, r3
        mode = i & 1;
     432:	5d65      	ldrb	r5, [r4, r5]
        if( verbose != 0 )
     434:	062d      	lsls	r5, r5, #24
            mbedtls_printf( "  AES-OFB-%3d (%s): ", keybits,
     436:	406e      	eors	r6, r5
     438:	0c1d      	lsrs	r5, r3, #16
     43a:	4015      	ands	r5, r2
     43c:	5d65      	ldrb	r5, [r4, r5]
     43e:	022d      	lsls	r5, r5, #8
     440:	406e      	eors	r6, r5
     442:	4071      	eors	r1, r6
     444:	404f      	eors	r7, r1
     446:	407b      	eors	r3, r7
     448:	6286      	str	r6, [r0, #40]	; 0x28
     44a:	62c1      	str	r1, [r0, #44]	; 0x2c
     44c:	6307      	str	r7, [r0, #48]	; 0x30
     44e:	6343      	str	r3, [r0, #52]	; 0x34
     450:	4660      	mov	r0, ip
     452:	0a1d      	lsrs	r5, r3, #8
     454:	4015      	ands	r5, r2
     456:	5d65      	ldrb	r5, [r4, r5]
                            ( mode == MBEDTLS_AES_DECRYPT ) ? "dec" : "enc" );

        memcpy( iv,  aes_test_ofb_iv, 16 );
     458:	4046      	eors	r6, r0
     45a:	4075      	eors	r5, r6
     45c:	0e1e      	lsrs	r6, r3, #24
     45e:	5da6      	ldrb	r6, [r4, r6]
     460:	4658      	mov	r0, fp
     462:	0436      	lsls	r6, r6, #16
     464:	4075      	eors	r5, r6
        memcpy( key, aes_test_ofb_key[u], keybits / 8 );
     466:	0016      	movs	r6, r2
        memcpy( iv,  aes_test_ofb_iv, 16 );
     468:	f240 0c08 	movw	ip, #8
        memcpy( key, aes_test_ofb_key[u], keybits / 8 );
     46c:	401e      	ands	r6, r3
     46e:	5da6      	ldrb	r6, [r4, r6]
     470:	0636      	lsls	r6, r6, #24
     472:	4075      	eors	r5, r6
     474:	0c1e      	lsrs	r6, r3, #16
     476:	4016      	ands	r6, r2

        offset = 0;
        ret = mbedtls_aes_setkey_enc( &ctx, key, keybits );
     478:	5da6      	ldrb	r6, [r4, r6]
     47a:	0236      	lsls	r6, r6, #8
     47c:	4075      	eors	r5, r6
     47e:	4069      	eors	r1, r5
     480:	404f      	eors	r7, r1
        /*
         * AES-192 is an optional feature that may be unavailable when
         * there is an alternative underlying implementation i.e. when
         * MBEDTLS_AES_ALT is defined.
         */
        if( ret == MBEDTLS_ERR_PLATFORM_FEATURE_UNSUPPORTED && keybits == 192 )
     482:	407b      	eors	r3, r7
     484:	6385      	str	r5, [r0, #56]	; 0x38
     486:	63c1      	str	r1, [r0, #60]	; 0x3c
     488:	6407      	str	r7, [r0, #64]	; 0x40
        {
            mbedtls_printf( "skipped\n" );
            continue;
        }
        else if( ret != 0 )
     48a:	6443      	str	r3, [r0, #68]	; 0x44
     48c:	4660      	mov	r0, ip
     48e:	0a1e      	lsrs	r6, r3, #8
        {
            goto exit;
        }

        if( mode == MBEDTLS_AES_DECRYPT )
     490:	4016      	ands	r6, r2
     492:	5da6      	ldrb	r6, [r4, r6]
     494:	4045      	eors	r5, r0
     496:	406e      	eors	r6, r5
        {
            memcpy( buf, aes_test_ofb_ct[u], 64 );
     498:	0e1d      	lsrs	r5, r3, #24
     49a:	5d65      	ldrb	r5, [r4, r5]
     49c:	4658      	mov	r0, fp
     49e:	042d      	lsls	r5, r5, #16
     4a0:	406e      	eors	r6, r5
     4a2:	0015      	movs	r5, r2
     4a4:	401d      	ands	r5, r3
     4a6:	5d65      	ldrb	r5, [r4, r5]
     4a8:	f240 0c10 	movw	ip, #16
     4ac:	062d      	lsls	r5, r5, #24
     4ae:	406e      	eors	r6, r5
     4b0:	0c1d      	lsrs	r5, r3, #16
            aes_tests = aes_test_ofb_pt;
     4b2:	4015      	ands	r5, r2
     4b4:	5d65      	ldrb	r5, [r4, r5]
     4b6:	022d      	lsls	r5, r5, #8
     4b8:	406e      	eors	r6, r5
     4ba:	003d      	movs	r5, r7
     4bc:	4071      	eors	r1, r6
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
     4be:	404d      	eors	r5, r1
     4c0:	406b      	eors	r3, r5
            aes_tests = aes_test_ofb_pt;
     4c2:	6486      	str	r6, [r0, #72]	; 0x48
     4c4:	64c1      	str	r1, [r0, #76]	; 0x4c
        n = ( n + 1 ) & 0x0F;
     4c6:	6505      	str	r5, [r0, #80]	; 0x50
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
     4c8:	6543      	str	r3, [r0, #84]	; 0x54
     4ca:	4660      	mov	r0, ip
        if( n == 0 )
     4cc:	0a1f      	lsrs	r7, r3, #8
     4ce:	4017      	ands	r7, r2
     4d0:	5de7      	ldrb	r7, [r4, r7]
        *output++ =  *input++ ^ iv[n];
     4d2:	4046      	eors	r6, r0
     4d4:	4077      	eors	r7, r6
     4d6:	0e1e      	lsrs	r6, r3, #24
     4d8:	5da6      	ldrb	r6, [r4, r6]
     4da:	4658      	mov	r0, fp
     4dc:	0436      	lsls	r6, r6, #16
     4de:	4077      	eors	r7, r6
     4e0:	0016      	movs	r6, r2
        n = ( n + 1 ) & 0x0F;
     4e2:	f240 0c20 	movw	ip, #32
        *output++ =  *input++ ^ iv[n];
     4e6:	401e      	ands	r6, r3
     4e8:	5da6      	ldrb	r6, [r4, r6]
        n = ( n + 1 ) & 0x0F;
     4ea:	0636      	lsls	r6, r6, #24
    while( length-- )
     4ec:	4077      	eors	r7, r6
     4ee:	0c1e      	lsrs	r6, r3, #16

        ret = mbedtls_aes_crypt_ofb( &ctx, 64, &offset, iv, buf, buf );
        if( ret != 0 )
            goto exit;

        if( memcmp( buf, aes_tests, 64 ) != 0 )
     4f0:	4016      	ands	r6, r2
     4f2:	5da6      	ldrb	r6, [r4, r6]
     4f4:	0236      	lsls	r6, r6, #8
     4f6:	4077      	eors	r7, r6
     4f8:	4079      	eors	r1, r7
     4fa:	404d      	eors	r5, r1
     4fc:	406b      	eors	r3, r5
     4fe:	6587      	str	r7, [r0, #88]	; 0x58
     500:	65c1      	str	r1, [r0, #92]	; 0x5c
     502:	6605      	str	r5, [r0, #96]	; 0x60
     504:	6643      	str	r3, [r0, #100]	; 0x64
        {
            ret = 1;
            goto exit;
        }

        if( verbose != 0 )
     506:	4660      	mov	r0, ip
     508:	0a1e      	lsrs	r6, r3, #8
     50a:	4016      	ands	r6, r2
     50c:	5da6      	ldrb	r6, [r4, r6]
    for( i = 0; i < 6; i++ )
     50e:	4047      	eors	r7, r0
     510:	407e      	eors	r6, r7
     512:	0e1f      	lsrs	r7, r3, #24
     514:	5de7      	ldrb	r7, [r4, r7]
     516:	4658      	mov	r0, fp
     518:	043f      	lsls	r7, r7, #16
     51a:	407e      	eors	r6, r7
     51c:	0017      	movs	r7, r2
            mbedtls_printf( "passed\n" );
    }

    if( verbose != 0 )
     51e:	f240 0c40 	movw	ip, #64	; 0x40
        mbedtls_printf( "\n" );
     522:	401f      	ands	r7, r3
     524:	5de7      	ldrb	r7, [r4, r7]
     526:	063f      	lsls	r7, r7, #24
     528:	407e      	eors	r6, r7
     52a:	0c1f      	lsrs	r7, r3, #16
     52c:	4017      	ands	r7, r2
            aes_tests = aes_test_ofb_pt;
     52e:	5de7      	ldrb	r7, [r4, r7]
     530:	023f      	lsls	r7, r7, #8
     532:	407e      	eors	r6, r7
     534:	4071      	eors	r1, r6
     536:	404d      	eors	r5, r1
     * CTR mode
     */
    for( i = 0; i < 6; i++ )
    {
        u = i >> 1;
        mode = i & 1;
     538:	406b      	eors	r3, r5
     53a:	6686      	str	r6, [r0, #104]	; 0x68
     53c:	66c1      	str	r1, [r0, #108]	; 0x6c
     53e:	6705      	str	r5, [r0, #112]	; 0x70
     540:	6743      	str	r3, [r0, #116]	; 0x74
     542:	4660      	mov	r0, ip
     544:	0a1f      	lsrs	r7, r3, #8
     546:	4017      	ands	r7, r2
        u = i >> 1;
     548:	5de7      	ldrb	r7, [r4, r7]
        mode = i & 1;
     54a:	4046      	eors	r6, r0

        if( verbose != 0 )
     54c:	407e      	eors	r6, r7
        mode = i & 1;
     54e:	0e1f      	lsrs	r7, r3, #24
        if( verbose != 0 )
     550:	5de7      	ldrb	r7, [r4, r7]
            mbedtls_printf( "  AES-CTR-128 (%s): ",
     552:	f240 0c80 	movw	ip, #128	; 0x80
     556:	043f      	lsls	r7, r7, #16
     558:	407e      	eors	r6, r7
     55a:	0017      	movs	r7, r2
     55c:	401f      	ands	r7, r3
     55e:	5de7      	ldrb	r7, [r4, r7]
     560:	4660      	mov	r0, ip
     562:	063f      	lsls	r7, r7, #24
     564:	407e      	eors	r6, r7
     566:	0c1f      	lsrs	r7, r3, #16
     568:	4017      	ands	r7, r2
     56a:	5de7      	ldrb	r7, [r4, r7]
     56c:	023f      	lsls	r7, r7, #8
     56e:	4077      	eors	r7, r6
     570:	465e      	mov	r6, fp
                            ( mode == MBEDTLS_AES_DECRYPT ) ? "dec" : "enc" );

        memcpy( nonce_counter, aes_test_ctr_nonce_counter[u], 16 );
     572:	4079      	eors	r1, r7
     574:	404d      	eors	r5, r1
     576:	67b7      	str	r7, [r6, #120]	; 0x78
     578:	67f1      	str	r1, [r6, #124]	; 0x7c
     57a:	5035      	str	r5, [r6, r0]
     57c:	2684      	movs	r6, #132	; 0x84
     57e:	4658      	mov	r0, fp
     580:	406b      	eors	r3, r5
     582:	5183      	str	r3, [r0, r6]
     584:	4660      	mov	r0, ip
     586:	0a1e      	lsrs	r6, r3, #8
     588:	4016      	ands	r6, r2
        memcpy( key, aes_test_ctr_key[u], 16 );
     58a:	5da6      	ldrb	r6, [r4, r6]
     58c:	4047      	eors	r7, r0
     58e:	407e      	eors	r6, r7
     590:	0e1f      	lsrs	r7, r3, #24
     592:	5de7      	ldrb	r7, [r4, r7]
     594:	4658      	mov	r0, fp
     596:	043f      	lsls	r7, r7, #16

        offset = 0;
        if( ( ret = mbedtls_aes_setkey_enc( &ctx, key, 128 ) ) != 0 )
     598:	407e      	eors	r6, r7
        memcpy( key, aes_test_ctr_key[u], 16 );
     59a:	0017      	movs	r7, r2
        if( ( ret = mbedtls_aes_setkey_enc( &ctx, key, 128 ) ) != 0 )
     59c:	401f      	ands	r7, r3
     59e:	5de7      	ldrb	r7, [r4, r7]
     5a0:	f240 0c1b 	movw	ip, #27
     5a4:	063f      	lsls	r7, r7, #24
     5a6:	407e      	eors	r6, r7
     5a8:	0c1f      	lsrs	r7, r3, #16
     5aa:	4017      	ands	r7, r2
            goto exit;

        len = aes_test_ctr_len[u];
     5ac:	5de7      	ldrb	r7, [r4, r7]
     5ae:	023f      	lsls	r7, r7, #8
     5b0:	407e      	eors	r6, r7
     5b2:	2788      	movs	r7, #136	; 0x88
     5b4:	4071      	eors	r1, r6
     5b6:	51c6      	str	r6, [r0, r7]
     5b8:	3704      	adds	r7, #4
     5ba:	51c1      	str	r1, [r0, r7]
     5bc:	404d      	eors	r5, r1

        if( mode == MBEDTLS_AES_DECRYPT )
     5be:	3704      	adds	r7, #4
     5c0:	51c5      	str	r5, [r0, r7]
     5c2:	406b      	eors	r3, r5
     5c4:	3704      	adds	r7, #4
        {
            memcpy( buf, aes_test_ctr_ct[u], len );
     5c6:	51c3      	str	r3, [r0, r7]
     5c8:	4660      	mov	r0, ip
     5ca:	0a1f      	lsrs	r7, r3, #8
     5cc:	4017      	ands	r7, r2
     5ce:	5de7      	ldrb	r7, [r4, r7]
     5d0:	4046      	eors	r6, r0
     5d2:	4077      	eors	r7, r6
     5d4:	0e1e      	lsrs	r6, r3, #24
     5d6:	5da6      	ldrb	r6, [r4, r6]
     5d8:	4658      	mov	r0, fp
            aes_tests = aes_test_ctr_pt[u];
     5da:	0436      	lsls	r6, r6, #16
     5dc:	4077      	eors	r7, r6
     5de:	0016      	movs	r6, r2
     5e0:	401e      	ands	r6, r3
     5e2:	5da6      	ldrb	r6, [r4, r6]
     5e4:	f240 0c36 	movw	ip, #54	; 0x36
    while( length-- )
     5e8:	0636      	lsls	r6, r6, #24
     5ea:	4077      	eors	r7, r6
     5ec:	0c1e      	lsrs	r6, r3, #16
     5ee:	4016      	ands	r6, r2
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
     5f0:	5da6      	ldrb	r6, [r4, r6]
     5f2:	0236      	lsls	r6, r6, #8
                if( ++nonce_counter[i - 1] != 0 )
     5f4:	4077      	eors	r7, r6
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
     5f6:	2698      	movs	r6, #152	; 0x98
     5f8:	4079      	eors	r1, r7
                if( ++nonce_counter[i - 1] != 0 )
     5fa:	5187      	str	r7, [r0, r6]
        if( n == 0 ) {
     5fc:	3604      	adds	r6, #4
     5fe:	5181      	str	r1, [r0, r6]
     600:	404d      	eors	r5, r1
        *output++ = (unsigned char)( c ^ stream_block[n] );
     602:	3604      	adds	r6, #4
     604:	5185      	str	r5, [r0, r6]
     606:	406b      	eors	r3, r5
     608:	3604      	adds	r6, #4
     60a:	5183      	str	r3, [r0, r6]
     60c:	4660      	mov	r0, ip
     60e:	0a1e      	lsrs	r6, r3, #8
     610:	4016      	ands	r6, r2
        n = ( n + 1 ) & 0x0F;
     612:	5da6      	ldrb	r6, [r4, r6]
        *output++ = (unsigned char)( c ^ stream_block[n] );
     614:	4047      	eors	r7, r0
     616:	407e      	eors	r6, r7
        n = ( n + 1 ) & 0x0F;
     618:	0e1f      	lsrs	r7, r3, #24
     61a:	5de7      	ldrb	r7, [r4, r7]
     61c:	4658      	mov	r0, fp
    while( length-- )
     61e:	043f      	lsls	r7, r7, #16
     620:	407e      	eors	r6, r7
        ret = mbedtls_aes_crypt_ctr( &ctx, len, &offset, nonce_counter,
                                     stream_block, buf, buf );
        if( ret != 0 )
            goto exit;

        if( memcmp( buf, aes_tests, len ) != 0 )
     622:	0017      	movs	r7, r2
     624:	401f      	ands	r7, r3
     626:	5de7      	ldrb	r7, [r4, r7]
     628:	063f      	lsls	r7, r7, #24
     62a:	407e      	eors	r6, r7
     62c:	0c1f      	lsrs	r7, r3, #16
     62e:	403a      	ands	r2, r7
     630:	5ca2      	ldrb	r2, [r4, r2]
     632:	24a8      	movs	r4, #168	; 0xa8
     634:	0212      	lsls	r2, r2, #8
     636:	4072      	eors	r2, r6
     638:	5102      	str	r2, [r0, r4]
        {
            ret = 1;
            goto exit;
        }

        if( verbose != 0 )
     63a:	4051      	eors	r1, r2
     63c:	22ac      	movs	r2, #172	; 0xac
     63e:	404d      	eors	r5, r1
     640:	5081      	str	r1, [r0, r2]
     642:	3204      	adds	r2, #4
     644:	5085      	str	r5, [r0, r2]
     646:	405d      	eors	r5, r3
     648:	23b4      	movs	r3, #180	; 0xb4
     64a:	50c5      	str	r5, [r0, r3]
    for( i = 0; i < 6; i++ )
     64c:	2000      	movs	r0, #0
     64e:	e681      	b.n	354 <mbedtls_aes_setkey_enc+0x24>
     650:	f242 22e0 	movw	r2, #8928	; 0x22e0
     654:	f240 0800 	movw	r8, #0
     658:	6a03      	ldr	r3, [r0, #32]
     65a:	f2c0 0200 	movt	r2, #0
            mbedtls_printf( "passed\n" );
    }

    if( verbose != 0 )
     65e:	469b      	mov	fp, r3
        mbedtls_printf( "\n" );
     660:	69c3      	ldr	r3, [r0, #28]
     662:	6984      	ldr	r4, [r0, #24]
     664:	469a      	mov	sl, r3
     666:	6903      	ldr	r3, [r0, #16]
     668:	6947      	ldr	r7, [r0, #20]
     66a:	4699      	mov	r9, r3
    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
     66c:	68c3      	ldr	r3, [r0, #12]
     66e:	6a46      	ldr	r6, [r0, #36]	; 0x24
     670:	9301      	str	r3, [sp, #4]
     672:	9203      	str	r2, [sp, #12]
     674:	6883      	ldr	r3, [r0, #8]
     676:	4642      	mov	r2, r8
     678:	f242 10e0 	movw	r0, #8672	; 0x21e0
     67c:	f240 0cff 	movw	ip, #255	; 0xff
     680:	f2c0 0000 	movt	r0, #0
     684:	9200      	str	r2, [sp, #0]
     686:	4661      	mov	r1, ip
     688:	0a32      	lsrs	r2, r6, #8
     68a:	400a      	ands	r2, r1
     68c:	0e31      	lsrs	r1, r6, #24

    for( i = 0; i < num_tests << 1; i++ )
    {
        const unsigned char *data_unit;
        u = i >> 1;
        mode = i & 1;
     68e:	5c41      	ldrb	r1, [r0, r1]
     690:	5c82      	ldrb	r2, [r0, r2]
        u = i >> 1;
     692:	0409      	lsls	r1, r1, #16
        mode = i & 1;
     694:	404a      	eors	r2, r1
        u = i >> 1;
     696:	4053      	eors	r3, r2

        if( verbose != 0 )
     698:	4662      	mov	r2, ip
        mode = i & 1;
     69a:	4661      	mov	r1, ip
        if( verbose != 0 )
     69c:	4032      	ands	r2, r6
            mbedtls_printf( "  AES-XTS-128 (%s): ",
     69e:	5c82      	ldrb	r2, [r0, r2]
     6a0:	3520      	adds	r5, #32
     6a2:	0612      	lsls	r2, r2, #24
     6a4:	4053      	eors	r3, r2
     6a6:	0c32      	lsrs	r2, r6, #16
     6a8:	400a      	ands	r2, r1
     6aa:	5c82      	ldrb	r2, [r0, r2]
     6ac:	9900      	ldr	r1, [sp, #0]
     6ae:	0212      	lsls	r2, r2, #8
     6b0:	4053      	eors	r3, r2
     6b2:	9a03      	ldr	r2, [sp, #12]
     6b4:	5852      	ldr	r2, [r2, r1]
     6b6:	4649      	mov	r1, r9
     6b8:	4053      	eors	r3, r2
     6ba:	9202      	str	r2, [sp, #8]
     6bc:	9a01      	ldr	r2, [sp, #4]
                            ( mode == MBEDTLS_AES_DECRYPT ) ? "dec" : "enc" );

        memset( key, 0, sizeof( key ) );
        memcpy( key, aes_test_xts_key[u], 32 );
     6be:	602b      	str	r3, [r5, #0]
     6c0:	405a      	eors	r2, r3
     6c2:	4051      	eors	r1, r2
     6c4:	606a      	str	r2, [r5, #4]
     6c6:	9201      	str	r2, [sp, #4]
     6c8:	4662      	mov	r2, ip
     6ca:	404f      	eors	r7, r1
     6cc:	60a9      	str	r1, [r5, #8]
     6ce:	4689      	mov	r9, r1
     6d0:	4661      	mov	r1, ip
     6d2:	403a      	ands	r2, r7
     6d4:	5c82      	ldrb	r2, [r0, r2]
     6d6:	60ef      	str	r7, [r5, #12]
     6d8:	4054      	eors	r4, r2
        data_unit = aes_test_xts_data_unit[u];
     6da:	0e3a      	lsrs	r2, r7, #24

        len = sizeof( *aes_test_xts_ct32 );

        if( mode == MBEDTLS_AES_DECRYPT )
     6dc:	5c82      	ldrb	r2, [r0, r2]
        data_unit = aes_test_xts_data_unit[u];
     6de:	0612      	lsls	r2, r2, #24
     6e0:	4054      	eors	r4, r2
     6e2:	0a3a      	lsrs	r2, r7, #8
    ret = mbedtls_aes_setkey_enc( &ctx->tweak, key2, key2bits );
     6e4:	400a      	ands	r2, r1
     6e6:	5c82      	ldrb	r2, [r0, r2]
     6e8:	0212      	lsls	r2, r2, #8
        if( mode == MBEDTLS_AES_DECRYPT )
     6ea:	4062      	eors	r2, r4
     6ec:	0c3c      	lsrs	r4, r7, #16
     6ee:	400c      	ands	r4, r1
    ret = mbedtls_aes_setkey_enc( &ctx->tweak, key2, key2bits );
     6f0:	5d04      	ldrb	r4, [r0, r4]
     6f2:	0424      	lsls	r4, r4, #16
     6f4:	4054      	eors	r4, r2
    if( ret != 0 )
     6f6:	4652      	mov	r2, sl
     6f8:	4062      	eors	r2, r4
     6fa:	4692      	mov	sl, r2
    return mbedtls_aes_setkey_dec( &ctx->crypt, key1, key1bits );
     6fc:	616a      	str	r2, [r5, #20]
     6fe:	4651      	mov	r1, sl
     700:	465a      	mov	r2, fp
     702:	404a      	eors	r2, r1
     704:	61aa      	str	r2, [r5, #24]
     706:	4056      	eors	r6, r2
     708:	4693      	mov	fp, r2
     70a:	9a00      	ldr	r2, [sp, #0]
     70c:	612c      	str	r4, [r5, #16]
        {
            ret = mbedtls_aes_xts_setkey_dec( &ctx_xts, key, 256 );
            if( ret != 0)
     70e:	3204      	adds	r2, #4
     710:	61ee      	str	r6, [r5, #28]
     712:	9200      	str	r2, [sp, #0]
                goto exit;
            memcpy( buf, aes_test_xts_ct32[u], len );
     714:	2a1c      	cmp	r2, #28
     716:	d1b6      	bne.n	686 <STACK_SIZE+0x286>
     718:	2000      	movs	r0, #0
     71a:	e61b      	b.n	354 <mbedtls_aes_setkey_enc+0x24>
     71c:	f242 1ce0 	movw	ip, #8672	; 0x21e0
     720:	23ff      	movs	r3, #255	; 0xff
     722:	f2c0 0c00 	movt	ip, #0
     726:	69c1      	ldr	r1, [r0, #28]
            aes_tests = aes_test_xts_pt32[u];
     728:	0005      	movs	r5, r0
     72a:	4660      	mov	r0, ip
     72c:	2401      	movs	r4, #1
     72e:	0a0a      	lsrs	r2, r1, #8
     730:	401a      	ands	r2, r3
     732:	5c82      	ldrb	r2, [r0, r2]
     734:	68a8      	ldr	r0, [r5, #8]
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
     736:	68ef      	ldr	r7, [r5, #12]
     738:	4044      	eors	r4, r0
     73a:	4660      	mov	r0, ip
     73c:	4062      	eors	r2, r4
     73e:	0e0c      	lsrs	r4, r1, #24
     740:	5d04      	ldrb	r4, [r0, r4]
     742:	692e      	ldr	r6, [r5, #16]
     744:	0424      	lsls	r4, r4, #16
     746:	4062      	eors	r2, r4
     748:	001c      	movs	r4, r3
    if( ret != 0 )
     74a:	400c      	ands	r4, r1
     74c:	5d04      	ldrb	r4, [r0, r4]
     74e:	f240 0902 	movw	r9, #2
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
     752:	0624      	lsls	r4, r4, #24
        mbedtls_gf128mul_x_ble( tweak, tweak );
     754:	4062      	eors	r2, r4
     756:	0c0c      	lsrs	r4, r1, #16
    if( ret != 0 )
     758:	401c      	ands	r4, r3
    while( blocks-- )
     75a:	5d04      	ldrb	r4, [r0, r4]
     75c:	0224      	lsls	r4, r4, #8
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
     75e:	4062      	eors	r2, r4
     760:	4692      	mov	sl, r2
        mbedtls_gf128mul_x_ble( tweak, tweak );
     762:	4650      	mov	r0, sl
     764:	465a      	mov	r2, fp
            tmp[i] = input[i] ^ tweak[i];
     766:	4047      	eors	r7, r0
     768:	407e      	eors	r6, r7
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
     76a:	6228      	str	r0, [r5, #32]
            tmp[i] = input[i] ^ tweak[i];
     76c:	626f      	str	r7, [r5, #36]	; 0x24
     76e:	62ae      	str	r6, [r5, #40]	; 0x28
     770:	696d      	ldr	r5, [r5, #20]
     772:	6994      	ldr	r4, [r2, #24]
     774:	4075      	eors	r5, r6
     776:	406c      	eors	r4, r5
     778:	4061      	eors	r1, r4
     77a:	0a08      	lsrs	r0, r1, #8
     77c:	4018      	ands	r0, r3
     77e:	4680      	mov	r8, r0
     780:	62d5      	str	r5, [r2, #44]	; 0x2c
     782:	6314      	str	r4, [r2, #48]	; 0x30
     784:	6351      	str	r1, [r2, #52]	; 0x34
     786:	4660      	mov	r0, ip
     788:	4642      	mov	r2, r8
     78a:	5c82      	ldrb	r2, [r0, r2]
     78c:	4650      	mov	r0, sl
     78e:	4690      	mov	r8, r2
     790:	464a      	mov	r2, r9
     792:	4050      	eors	r0, r2
     794:	0002      	movs	r2, r0
     796:	4640      	mov	r0, r8
     798:	4042      	eors	r2, r0
     79a:	0e08      	lsrs	r0, r1, #24
     79c:	4680      	mov	r8, r0
     79e:	4691      	mov	r9, r2
     7a0:	4660      	mov	r0, ip
     7a2:	4642      	mov	r2, r8
     7a4:	5c82      	ldrb	r2, [r0, r2]
     7a6:	4648      	mov	r0, r9
     7a8:	0412      	lsls	r2, r2, #16
     7aa:	4050      	eors	r0, r2
     7ac:	4681      	mov	r9, r0
     7ae:	0018      	movs	r0, r3
     7b0:	4008      	ands	r0, r1
     7b2:	4680      	mov	r8, r0
     7b4:	4660      	mov	r0, ip
     7b6:	4642      	mov	r2, r8
     7b8:	5c82      	ldrb	r2, [r0, r2]
     7ba:	4648      	mov	r0, r9
     7bc:	0612      	lsls	r2, r2, #24
     7be:	4050      	eors	r0, r2
     7c0:	4681      	mov	r9, r0
     7c2:	0c08      	lsrs	r0, r1, #16
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
     7c4:	4018      	ands	r0, r3
            tmp[i] = input[i] ^ tweak[i];
     7c6:	4680      	mov	r8, r0
     7c8:	4660      	mov	r0, ip
     7ca:	4642      	mov	r2, r8
     7cc:	5c82      	ldrb	r2, [r0, r2]
     7ce:	4648      	mov	r0, r9
     7d0:	0212      	lsls	r2, r2, #8
     7d2:	4050      	eors	r0, r2
     7d4:	465a      	mov	r2, fp
     7d6:	4047      	eors	r7, r0
     7d8:	407e      	eors	r6, r7
     7da:	4075      	eors	r5, r6
     7dc:	406c      	eors	r4, r5
     7de:	4061      	eors	r1, r4
     7e0:	4682      	mov	sl, r0
     7e2:	6390      	str	r0, [r2, #56]	; 0x38
     7e4:	0a08      	lsrs	r0, r1, #8
     7e6:	4018      	ands	r0, r3
     7e8:	4680      	mov	r8, r0
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
     7ea:	63d7      	str	r7, [r2, #60]	; 0x3c
    if( mode == MBEDTLS_AES_ENCRYPT )
     7ec:	6416      	str	r6, [r2, #64]	; 0x40
     7ee:	6455      	str	r5, [r2, #68]	; 0x44
     7f0:	6494      	str	r4, [r2, #72]	; 0x48
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
     7f2:	64d1      	str	r1, [r2, #76]	; 0x4c
        if( ret != 0 )
     7f4:	4660      	mov	r0, ip
     7f6:	4642      	mov	r2, r8
     7f8:	f240 0904 	movw	r9, #4
            output[i] = tmp[i] ^ tweak[i];
     7fc:	5c82      	ldrb	r2, [r0, r2]
        mbedtls_gf128mul_x_ble( tweak, tweak );
     7fe:	4650      	mov	r0, sl
            output[i] = tmp[i] ^ tweak[i];
     800:	4690      	mov	r8, r2
     802:	464a      	mov	r2, r9
     804:	4050      	eors	r0, r2
     806:	0002      	movs	r2, r0
        mbedtls_gf128mul_x_ble( tweak, tweak );
     808:	4640      	mov	r0, r8
            output[i] = tmp[i] ^ tweak[i];
     80a:	4042      	eors	r2, r0
     80c:	0e08      	lsrs	r0, r1, #24
     80e:	4680      	mov	r8, r0
     810:	4691      	mov	r9, r2
     812:	4660      	mov	r0, ip
     814:	4642      	mov	r2, r8
     816:	5c82      	ldrb	r2, [r0, r2]
     818:	4648      	mov	r0, r9
     81a:	0412      	lsls	r2, r2, #16
     81c:	4050      	eors	r0, r2
     81e:	4681      	mov	r9, r0
     820:	0018      	movs	r0, r3
     822:	4008      	ands	r0, r1
     824:	4680      	mov	r8, r0
     826:	4660      	mov	r0, ip
     828:	4642      	mov	r2, r8
     82a:	5c82      	ldrb	r2, [r0, r2]
     82c:	4648      	mov	r0, r9
     82e:	0612      	lsls	r2, r2, #24
     830:	4050      	eors	r0, r2
     832:	4681      	mov	r9, r0
     834:	0c08      	lsrs	r0, r1, #16
     836:	4018      	ands	r0, r3
     838:	4680      	mov	r8, r0
     83a:	4660      	mov	r0, ip
     83c:	4642      	mov	r2, r8
     83e:	5c82      	ldrb	r2, [r0, r2]
     840:	4648      	mov	r0, r9
     842:	0212      	lsls	r2, r2, #8
     844:	4050      	eors	r0, r2
     846:	465a      	mov	r2, fp
     848:	4047      	eors	r7, r0
     84a:	407e      	eors	r6, r7
     84c:	4075      	eors	r5, r6
     84e:	406c      	eors	r4, r5
     850:	4061      	eors	r1, r4
     852:	4682      	mov	sl, r0
     854:	6510      	str	r0, [r2, #80]	; 0x50
     856:	0a08      	lsrs	r0, r1, #8
     858:	4018      	ands	r0, r3
     85a:	4680      	mov	r8, r0
     85c:	6557      	str	r7, [r2, #84]	; 0x54
     85e:	4660      	mov	r0, ip
     860:	6596      	str	r6, [r2, #88]	; 0x58
     862:	65d5      	str	r5, [r2, #92]	; 0x5c
     864:	6614      	str	r4, [r2, #96]	; 0x60
     866:	6651      	str	r1, [r2, #100]	; 0x64
     868:	4642      	mov	r2, r8
     86a:	f240 0908 	movw	r9, #8
     86e:	5c82      	ldrb	r2, [r0, r2]
     870:	4650      	mov	r0, sl
     872:	4690      	mov	r8, r2
     874:	464a      	mov	r2, r9
     876:	4050      	eors	r0, r2
     878:	0002      	movs	r2, r0
     87a:	4640      	mov	r0, r8
     87c:	4042      	eors	r2, r0
        mbedtls_gf128mul_x_ble( tweak, tweak );
     87e:	0e08      	lsrs	r0, r1, #24
        output += 16;
     880:	4680      	mov	r8, r0
    while( blocks-- )
     882:	4691      	mov	r9, r2
     884:	4660      	mov	r0, ip
     886:	4642      	mov	r2, r8
     888:	5c82      	ldrb	r2, [r0, r2]
        ret = mbedtls_aes_crypt_xts( &ctx_xts, mode, len, data_unit,
                                     buf, buf );
        if( ret != 0 )
            goto exit;

        if( memcmp( buf, aes_tests, len ) != 0 )
     88a:	4648      	mov	r0, r9
     88c:	0412      	lsls	r2, r2, #16
     88e:	4050      	eors	r0, r2
     890:	4681      	mov	r9, r0
     892:	0018      	movs	r0, r3
     894:	4008      	ands	r0, r1
     896:	4680      	mov	r8, r0
     898:	4660      	mov	r0, ip
     89a:	4642      	mov	r2, r8
     89c:	5c82      	ldrb	r2, [r0, r2]
     89e:	4648      	mov	r0, r9
     8a0:	0612      	lsls	r2, r2, #24
        {
            ret = 1;
            goto exit;
        }

        if( verbose != 0 )
     8a2:	4050      	eors	r0, r2
     8a4:	4681      	mov	r9, r0
     8a6:	0c08      	lsrs	r0, r1, #16
     8a8:	4018      	ands	r0, r3
    for( i = 0; i < num_tests << 1; i++ )
     8aa:	4680      	mov	r8, r0
     8ac:	4660      	mov	r0, ip
     8ae:	4642      	mov	r2, r8
     8b0:	5c82      	ldrb	r2, [r0, r2]
     8b2:	4648      	mov	r0, r9
     8b4:	0212      	lsls	r2, r2, #8
            mbedtls_printf( "passed\n" );
    }

    if( verbose != 0 )
     8b6:	4050      	eors	r0, r2
     8b8:	465a      	mov	r2, fp
     8ba:	4047      	eors	r7, r0
     8bc:	407e      	eors	r6, r7
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_aes_context ) );
     8be:	4075      	eors	r5, r6
     8c0:	406c      	eors	r4, r5
     8c2:	4061      	eors	r1, r4
     8c4:	6690      	str	r0, [r2, #104]	; 0x68
     8c6:	4682      	mov	sl, r0
     8c8:	0a08      	lsrs	r0, r1, #8
     8ca:	4018      	ands	r0, r3
     8cc:	4680      	mov	r8, r0
     8ce:	66d7      	str	r7, [r2, #108]	; 0x6c
     8d0:	6716      	str	r6, [r2, #112]	; 0x70
     8d2:	6755      	str	r5, [r2, #116]	; 0x74
     8d4:	6794      	str	r4, [r2, #120]	; 0x78
     8d6:	67d1      	str	r1, [r2, #124]	; 0x7c
     8d8:	4660      	mov	r0, ip
        mbedtls_printf( "\n" );
     8da:	4642      	mov	r2, r8
     8dc:	f240 0910 	movw	r9, #16
     8e0:	5c82      	ldrb	r2, [r0, r2]
     8e2:	4650      	mov	r0, sl
     8e4:	4690      	mov	r8, r2
     8e6:	464a      	mov	r2, r9
            mbedtls_printf( "passed\n" );
     8e8:	4050      	eors	r0, r2
     8ea:	0002      	movs	r2, r0
     8ec:	4640      	mov	r0, r8
     8ee:	4042      	eors	r2, r0
     8f0:	0e08      	lsrs	r0, r1, #24
     8f2:	4680      	mov	r8, r0
     8f4:	4691      	mov	r9, r2
     8f6:	4660      	mov	r0, ip
     8f8:	4642      	mov	r2, r8
     8fa:	5c82      	ldrb	r2, [r0, r2]
            mbedtls_printf( "  AES-CBC-%3d (%s): ", keybits,
     8fc:	4648      	mov	r0, r9
     8fe:	0412      	lsls	r2, r2, #16
     900:	4050      	eors	r0, r2
     902:	4681      	mov	r9, r0
     904:	0018      	movs	r0, r3
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
     906:	4008      	ands	r0, r1
     908:	4680      	mov	r8, r0
     90a:	4660      	mov	r0, ip
     90c:	4642      	mov	r2, r8
            if( ret != 0 )
     90e:	5c82      	ldrb	r2, [r0, r2]
     910:	4648      	mov	r0, r9
     912:	0612      	lsls	r2, r2, #24
     914:	4050      	eors	r0, r2
     916:	4681      	mov	r9, r0
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
     918:	0c08      	lsrs	r0, r1, #16
     91a:	4018      	ands	r0, r3
     91c:	4680      	mov	r8, r0
                if( ++nonce_counter[i - 1] != 0 )
     91e:	4660      	mov	r0, ip
     920:	4642      	mov	r2, r8
     922:	5c82      	ldrb	r2, [r0, r2]
     924:	4648      	mov	r0, r9
     926:	0212      	lsls	r2, r2, #8
     928:	4050      	eors	r0, r2
     92a:	9400      	str	r4, [sp, #0]
     92c:	f240 0880 	movw	r8, #128	; 0x80
     930:	465c      	mov	r4, fp
     932:	4683      	mov	fp, r0
     934:	0022      	movs	r2, r4
     936:	4640      	mov	r0, r8
     938:	465c      	mov	r4, fp
     93a:	f240 0984 	movw	r9, #132	; 0x84
     93e:	5014      	str	r4, [r2, r0]
     940:	4648      	mov	r0, r9
     942:	f240 0988 	movw	r9, #136	; 0x88
     946:	4067      	eors	r7, r4
     948:	5017      	str	r7, [r2, r0]
     94a:	4648      	mov	r0, r9
     94c:	f240 098c 	movw	r9, #140	; 0x8c
     950:	407e      	eors	r6, r7
     952:	5016      	str	r6, [r2, r0]
     954:	4648      	mov	r0, r9
     956:	f240 0990 	movw	r9, #144	; 0x90
     95a:	4075      	eors	r5, r6
     95c:	5015      	str	r5, [r2, r0]
     95e:	9800      	ldr	r0, [sp, #0]
     960:	f240 0a20 	movw	sl, #32
     964:	4068      	eors	r0, r5
     966:	9000      	str	r0, [sp, #0]
     968:	4648      	mov	r0, r9
     96a:	f240 0994 	movw	r9, #148	; 0x94
     96e:	9c00      	ldr	r4, [sp, #0]
     970:	5014      	str	r4, [r2, r0]
     972:	4648      	mov	r0, r9
     974:	4061      	eors	r1, r4
     976:	5011      	str	r1, [r2, r0]
     978:	0a08      	lsrs	r0, r1, #8
     97a:	4018      	ands	r0, r3
     97c:	4681      	mov	r9, r0
     97e:	0014      	movs	r4, r2
     980:	4660      	mov	r0, ip
     982:	464a      	mov	r2, r9
     984:	5c82      	ldrb	r2, [r0, r2]
     986:	4658      	mov	r0, fp
     988:	4691      	mov	r9, r2
     98a:	4652      	mov	r2, sl
     98c:	4050      	eors	r0, r2
     98e:	0002      	movs	r2, r0
     990:	4648      	mov	r0, r9
     992:	4042      	eors	r2, r0
     994:	0e08      	lsrs	r0, r1, #24
     996:	4681      	mov	r9, r0
     998:	4692      	mov	sl, r2
     99a:	4660      	mov	r0, ip
     99c:	464a      	mov	r2, r9
     99e:	5c82      	ldrb	r2, [r0, r2]
     9a0:	4650      	mov	r0, sl
     9a2:	0412      	lsls	r2, r2, #16
     9a4:	4050      	eors	r0, r2
     9a6:	4682      	mov	sl, r0
     9a8:	0018      	movs	r0, r3
     9aa:	4008      	ands	r0, r1
     9ac:	4681      	mov	r9, r0
     9ae:	4660      	mov	r0, ip
     9b0:	464a      	mov	r2, r9
     9b2:	5c82      	ldrb	r2, [r0, r2]
     9b4:	4650      	mov	r0, sl
     9b6:	0612      	lsls	r2, r2, #24
     9b8:	4050      	eors	r0, r2
     9ba:	4682      	mov	sl, r0
     9bc:	0c08      	lsrs	r0, r1, #16
     9be:	4018      	ands	r0, r3
     9c0:	4681      	mov	r9, r0
     9c2:	4660      	mov	r0, ip
     9c4:	464a      	mov	r2, r9
     9c6:	5c82      	ldrb	r2, [r0, r2]
     9c8:	4650      	mov	r0, sl
     9ca:	0212      	lsls	r2, r2, #8
     9cc:	4050      	eors	r0, r2
     9ce:	4683      	mov	fp, r0
     9d0:	f240 0998 	movw	r9, #152	; 0x98
     9d4:	0022      	movs	r2, r4
     9d6:	4648      	mov	r0, r9
     9d8:	465c      	mov	r4, fp
     9da:	f240 099c 	movw	r9, #156	; 0x9c
     9de:	5014      	str	r4, [r2, r0]
     9e0:	4648      	mov	r0, r9
     9e2:	f240 09a0 	movw	r9, #160	; 0xa0
     9e6:	4067      	eors	r7, r4
     9e8:	5017      	str	r7, [r2, r0]
     9ea:	4648      	mov	r0, r9
     9ec:	f240 09a4 	movw	r9, #164	; 0xa4
     9f0:	407e      	eors	r6, r7
     9f2:	5016      	str	r6, [r2, r0]
     9f4:	4648      	mov	r0, r9
     9f6:	f240 09a8 	movw	r9, #168	; 0xa8
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
     9fa:	4075      	eors	r5, r6
     9fc:	5015      	str	r5, [r2, r0]
     9fe:	0014      	movs	r4, r2
     a00:	4648      	mov	r0, r9
     a02:	f240 09ac 	movw	r9, #172	; 0xac
     a06:	9a00      	ldr	r2, [sp, #0]
            memcpy( buf, aes_test_cfb128_pt, 64 );
     a08:	f240 0a40 	movw	sl, #64	; 0x40
     a0c:	406a      	eors	r2, r5
     a0e:	5022      	str	r2, [r4, r0]
     a10:	4648      	mov	r0, r9
     a12:	4051      	eors	r1, r2
     a14:	5021      	str	r1, [r4, r0]
     a16:	0a08      	lsrs	r0, r1, #8
     a18:	4018      	ands	r0, r3
            aes_tests = aes_test_cfb128_ct[u];
     a1a:	4681      	mov	r9, r0
     a1c:	9200      	str	r2, [sp, #0]
     a1e:	4660      	mov	r0, ip
     a20:	464a      	mov	r2, r9
     a22:	5c82      	ldrb	r2, [r0, r2]
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
     a24:	4658      	mov	r0, fp
     a26:	4691      	mov	r9, r2
            aes_tests = aes_test_cfb128_ct[u];
     a28:	4652      	mov	r2, sl
     a2a:	4050      	eors	r0, r2
     a2c:	0002      	movs	r2, r0
     a2e:	4648      	mov	r0, r9
     a30:	4042      	eors	r2, r0
     a32:	0e08      	lsrs	r0, r1, #24
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
     a34:	4681      	mov	r9, r0
     a36:	4692      	mov	sl, r2
            n = ( n + 1 ) & 0x0F;
     a38:	4660      	mov	r0, ip
            if( n == 0 )
     a3a:	464a      	mov	r2, r9
            iv[n] = *output++ = (unsigned char)( iv[n] ^ *input++ );
     a3c:	5c82      	ldrb	r2, [r0, r2]
     a3e:	4650      	mov	r0, sl
     a40:	0412      	lsls	r2, r2, #16
     a42:	4050      	eors	r0, r2
            n = ( n + 1 ) & 0x0F;
     a44:	4682      	mov	sl, r0
            iv[n] = *output++ = (unsigned char)( iv[n] ^ *input++ );
     a46:	0018      	movs	r0, r3
     a48:	4008      	ands	r0, r1
     a4a:	4681      	mov	r9, r0
     a4c:	4660      	mov	r0, ip
            n = ( n + 1 ) & 0x0F;
     a4e:	464a      	mov	r2, r9
        while( length-- )
     a50:	5c82      	ldrb	r2, [r0, r2]
     a52:	4650      	mov	r0, sl
     a54:	0612      	lsls	r2, r2, #24
            if( n == 0 )
     a56:	4050      	eors	r0, r2
     a58:	4682      	mov	sl, r0
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
     a5a:	0c08      	lsrs	r0, r1, #16
     a5c:	4018      	ands	r0, r3
     a5e:	4681      	mov	r9, r0
     a60:	4660      	mov	r0, ip
     a62:	464a      	mov	r2, r9
            memcpy( buf, aes_test_ofb_pt, 64 );
     a64:	5c82      	ldrb	r2, [r0, r2]
     a66:	0212      	lsls	r2, r2, #8
     a68:	0010      	movs	r0, r2
     a6a:	4652      	mov	r2, sl
     a6c:	4050      	eors	r0, r2
     a6e:	22b0      	movs	r2, #176	; 0xb0
     a70:	50a0      	str	r0, [r4, r2]
     a72:	22b4      	movs	r2, #180	; 0xb4
     a74:	4047      	eors	r7, r0
            aes_tests = aes_test_ofb_ct[u];
     a76:	4681      	mov	r9, r0
     a78:	0020      	movs	r0, r4
     a7a:	50a7      	str	r7, [r4, r2]
     a7c:	407e      	eors	r6, r7
     a7e:	3204      	adds	r2, #4
     a80:	50a6      	str	r6, [r4, r2]
            mbedtls_printf( "skipped\n" );
     a82:	4075      	eors	r5, r6
     a84:	3204      	adds	r2, #4
     a86:	50a5      	str	r5, [r4, r2]
     a88:	9c00      	ldr	r4, [sp, #0]
     a8a:	3204      	adds	r2, #4
     a8c:	406c      	eors	r4, r5
     a8e:	5084      	str	r4, [r0, r2]
     a90:	4061      	eors	r1, r4
     a92:	3204      	adds	r2, #4
            continue;
     a94:	5081      	str	r1, [r0, r2]
     a96:	4683      	mov	fp, r0
        if( ret == MBEDTLS_ERR_PLATFORM_FEATURE_UNSUPPORTED && keybits == 192 )
     a98:	4660      	mov	r0, ip
     a9a:	0a0a      	lsrs	r2, r1, #8
     a9c:	401a      	ands	r2, r3
     a9e:	5c82      	ldrb	r2, [r0, r2]
            mbedtls_printf( "skipped\n" );
     aa0:	4640      	mov	r0, r8
     aa2:	4692      	mov	sl, r2
     aa4:	464a      	mov	r2, r9
     aa6:	4050      	eors	r0, r2
     aa8:	0002      	movs	r2, r0
     aaa:	4650      	mov	r0, sl
     aac:	4050      	eors	r0, r2
     aae:	4681      	mov	r9, r0
     ab0:	0e08      	lsrs	r0, r1, #24
            continue;
     ab2:	4680      	mov	r8, r0
            mbedtls_printf( "  AES-CFB128-%3d (%s): ", keybits,
     ab4:	4660      	mov	r0, ip
     ab6:	4642      	mov	r2, r8
     ab8:	5c82      	ldrb	r2, [r0, r2]
     aba:	4648      	mov	r0, r9
     abc:	0412      	lsls	r2, r2, #16
     abe:	4050      	eors	r0, r2
     ac0:	4681      	mov	r9, r0
            memcpy( buf, aes_test_ctr_pt[u], len );
     ac2:	0018      	movs	r0, r3
     ac4:	4008      	ands	r0, r1
     ac6:	4680      	mov	r8, r0
     ac8:	4660      	mov	r0, ip
     aca:	4642      	mov	r2, r8
     acc:	5c82      	ldrb	r2, [r0, r2]
     ace:	4648      	mov	r0, r9
     ad0:	0612      	lsls	r2, r2, #24
     ad2:	4050      	eors	r0, r2
     ad4:	0002      	movs	r2, r0
            aes_tests = aes_test_ctr_ct[u];
     ad6:	0c08      	lsrs	r0, r1, #16
            memcpy( buf, aes_test_ctr_pt[u], len );
     ad8:	4003      	ands	r3, r0
            aes_tests = aes_test_ctr_ct[u];
     ada:	4660      	mov	r0, ip
     adc:	5cc3      	ldrb	r3, [r0, r3]
     ade:	4658      	mov	r0, fp
            mbedtls_printf( "passed\n" );
     ae0:	021b      	lsls	r3, r3, #8
     ae2:	4053      	eors	r3, r2
     ae4:	22c8      	movs	r2, #200	; 0xc8
     ae6:	5083      	str	r3, [r0, r2]
     ae8:	407b      	eors	r3, r7
     aea:	3204      	adds	r2, #4
     aec:	5083      	str	r3, [r0, r2]
     aee:	4073      	eors	r3, r6
     af0:	3204      	adds	r2, #4
     af2:	5083      	str	r3, [r0, r2]
        if( memcmp( buf, aes_tests, 16 ) != 0 )
     af4:	406b      	eors	r3, r5
     af6:	3204      	adds	r2, #4
     af8:	5083      	str	r3, [r0, r2]
     afa:	4063      	eors	r3, r4
     afc:	3204      	adds	r2, #4
     afe:	5083      	str	r3, [r0, r2]
     b00:	404b      	eors	r3, r1
     b02:	3204      	adds	r2, #4
     b04:	5083      	str	r3, [r0, r2]
     b06:	2000      	movs	r0, #0
        if( verbose != 0 )
     b08:	e424      	b.n	354 <mbedtls_aes_setkey_enc+0x24>
     b0a:	46c0      	nop			; (mov r8, r8)

00000b0c <mbedtls_aes_setkey_dec>:
     b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
     b0e:	46de      	mov	lr, fp
     b10:	464e      	mov	r6, r9
            mbedtls_printf( "passed\n" );
     b12:	4645      	mov	r5, r8
     b14:	4657      	mov	r7, sl
     b16:	f242 035b 	movw	r3, #8283	; 0x205b
     b1a:	b5e0      	push	{r5, r6, r7, lr}
     b1c:	0005      	movs	r5, r0
     b1e:	b0c9      	sub	sp, #292	; 0x124
     b20:	000c      	movs	r4, r1
     b22:	0016      	movs	r6, r2
     b24:	2100      	movs	r1, #0
     b26:	f240 1218 	movw	r2, #280	; 0x118
        if( ret == MBEDTLS_ERR_PLATFORM_FEATURE_UNSUPPORTED && keybits == 192 )
     b2a:	f2c0 0300 	movt	r3, #0
     b2e:	a802      	add	r0, sp, #8
            mbedtls_printf( "skipped\n" );
     b30:	4798      	blx	r3
     b32:	002b      	movs	r3, r5
     b34:	3308      	adds	r3, #8
     b36:	606b      	str	r3, [r5, #4]
     b38:	f240 3331 	movw	r3, #817	; 0x331
     b3c:	0032      	movs	r2, r6
     b3e:	0021      	movs	r1, r4
     b40:	a802      	add	r0, sp, #8
            continue;
     b42:	f2c0 0300 	movt	r3, #0
    ret = mbedtls_aes_setkey_enc( &ctx->tweak, key2, key2bits );
     b46:	4798      	blx	r3
     b48:	4683      	mov	fp, r0
    if( ret != 0 )
     b4a:	2800      	cmp	r0, #0
     b4c:	d000      	beq.n	b50 <mbedtls_aes_setkey_dec+0x44>
     b4e:	e10b      	b.n	d68 <mbedtls_aes_setkey_dec+0x25c>
     b50:	9b02      	ldr	r3, [sp, #8]
    return mbedtls_aes_setkey_enc( &ctx->crypt, key1, key1bits );
     b52:	469c      	mov	ip, r3
     b54:	602b      	str	r3, [r5, #0]
     b56:	011b      	lsls	r3, r3, #4
     b58:	001a      	movs	r2, r3
     b5a:	4690      	mov	r8, r2
     b5c:	9301      	str	r3, [sp, #4]
            if( ret != 0)
     b5e:	9b03      	ldr	r3, [sp, #12]
     b60:	4443      	add	r3, r8
     b62:	001f      	movs	r7, r3
     b64:	681b      	ldr	r3, [r3, #0]
            memcpy( buf, aes_test_xts_pt32[u], len );
     b66:	f240 0818 	movw	r8, #24
     b6a:	60ab      	str	r3, [r5, #8]
     b6c:	687b      	ldr	r3, [r7, #4]
     b6e:	3f10      	subs	r7, #16
     b70:	60eb      	str	r3, [r5, #12]
     b72:	69bb      	ldr	r3, [r7, #24]
     b74:	44a8      	add	r8, r5
     b76:	612b      	str	r3, [r5, #16]
     b78:	69fb      	ldr	r3, [r7, #28]
     b7a:	9700      	str	r7, [sp, #0]
     b7c:	616b      	str	r3, [r5, #20]
     b7e:	4663      	mov	r3, ip
            aes_tests = aes_test_xts_ct32[u];
     b80:	1e5e      	subs	r6, r3, #1
     b82:	2e00      	cmp	r6, #0
     b84:	dc00      	bgt.n	b88 <mbedtls_aes_setkey_dec+0x7c>
     b86:	e0e5      	b.n	d54 <mbedtls_aes_setkey_dec+0x248>
     b88:	f242 13e0 	movw	r3, #8672	; 0x21e0
            mbedtls_printf( "passed\n" );
     b8c:	003d      	movs	r5, r7
     b8e:	4640      	mov	r0, r8
     b90:	22ff      	movs	r2, #255	; 0xff
     b92:	f2c0 0300 	movt	r3, #0
     b96:	0014      	movs	r4, r2
     b98:	6829      	ldr	r1, [r5, #0]
     b9a:	f242 67e0 	movw	r7, #9952	; 0x26e0
            mbedtls_printf( "  AES-OFB-%3d (%s): ", keybits,
     b9e:	400c      	ands	r4, r1
     ba0:	5d1c      	ldrb	r4, [r3, r4]
     ba2:	f2c0 0700 	movt	r7, #0
     ba6:	00a4      	lsls	r4, r4, #2
            mbedtls_printf( "passed\n" );
     ba8:	46a2      	mov	sl, r4
     baa:	f242 24e0 	movw	r4, #8928	; 0x22e0
     bae:	f2c0 0400 	movt	r4, #0
     bb2:	46a1      	mov	r9, r4
     bb4:	44ca      	add	sl, r9
     bb6:	46b9      	mov	r9, r7
     bb8:	4657      	mov	r7, sl
     bba:	0e0c      	lsrs	r4, r1, #24
            mbedtls_printf( "  AES-CTR-128 (%s): ",
     bbc:	5d1c      	ldrb	r4, [r3, r4]
     bbe:	6abf      	ldr	r7, [r7, #40]	; 0x28
     bc0:	00a4      	lsls	r4, r4, #2
     bc2:	444c      	add	r4, r9
     bc4:	6aa4      	ldr	r4, [r4, #40]	; 0x28
            mbedtls_printf( "passed\n" );
     bc6:	3e01      	subs	r6, #1
     bc8:	4067      	eors	r7, r4
     bca:	46ba      	mov	sl, r7
     bcc:	f642 27e0 	movw	r7, #10976	; 0x2ae0
     bd0:	f2c0 0700 	movt	r7, #0
     bd4:	46b9      	mov	r9, r7
     bd6:	4657      	mov	r7, sl
     bd8:	0a0c      	lsrs	r4, r1, #8
            ret = 1;
     bda:	4014      	ands	r4, r2
     bdc:	5d1c      	ldrb	r4, [r3, r4]
     bde:	0c09      	lsrs	r1, r1, #16
            mbedtls_printf( "  AES-XTS-128 (%s): ",
     be0:	00a4      	lsls	r4, r4, #2
     be2:	444c      	add	r4, r9
     be4:	6aa4      	ldr	r4, [r4, #40]	; 0x28
     be6:	4011      	ands	r1, r2
     be8:	407c      	eors	r4, r7
        mbedtls_printf( "\n" );
     bea:	f642 67e0 	movw	r7, #12000	; 0x2ee0
     bee:	f2c0 0700 	movt	r7, #0
     bf2:	46b9      	mov	r9, r7
     bf4:	5c59      	ldrb	r1, [r3, r1]
     bf6:	f242 67e0 	movw	r7, #9952	; 0x26e0
        mbedtls_printf( "\n" );
     bfa:	0089      	lsls	r1, r1, #2
     bfc:	4449      	add	r1, r9
     bfe:	6a89      	ldr	r1, [r1, #40]	; 0x28
     c00:	f2c0 0700 	movt	r7, #0
     c04:	4061      	eors	r1, r4
     c06:	0014      	movs	r4, r2
     c08:	6001      	str	r1, [r0, #0]
        mbedtls_printf( "\n" );
     c0a:	6869      	ldr	r1, [r5, #4]
     c0c:	3d10      	subs	r5, #16
     c0e:	400c      	ands	r4, r1
     c10:	5d1c      	ldrb	r4, [r3, r4]
     c12:	00a4      	lsls	r4, r4, #2
     c14:	46a2      	mov	sl, r4
     c16:	f242 24e0 	movw	r4, #8928	; 0x22e0
     c1a:	f2c0 0400 	movt	r4, #0
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
     c1e:	46a1      	mov	r9, r4
     c20:	44ca      	add	sl, r9
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
     c22:	46b9      	mov	r9, r7
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
     c24:	4657      	mov	r7, sl
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
     c26:	0e0c      	lsrs	r4, r1, #24
     c28:	5d1c      	ldrb	r4, [r3, r4]
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
     c2a:	6abf      	ldr	r7, [r7, #40]	; 0x28
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
     c2c:	00a4      	lsls	r4, r4, #2
     c2e:	444c      	add	r4, r9
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
     c30:	6aa4      	ldr	r4, [r4, #40]	; 0x28
     c32:	4067      	eors	r7, r4
     c34:	46ba      	mov	sl, r7
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
     c36:	f642 27e0 	movw	r7, #10976	; 0x2ae0
     c3a:	f2c0 0700 	movt	r7, #0
     c3e:	46b9      	mov	r9, r7
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
     c40:	4657      	mov	r7, sl
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
     c42:	0a0c      	lsrs	r4, r1, #8
     c44:	4014      	ands	r4, r2
     c46:	5d1c      	ldrb	r4, [r3, r4]
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
     c48:	0c09      	lsrs	r1, r1, #16
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
     c4a:	00a4      	lsls	r4, r4, #2
     c4c:	444c      	add	r4, r9
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
     c4e:	6aa4      	ldr	r4, [r4, #40]	; 0x28
     c50:	4011      	ands	r1, r2
     c52:	407c      	eors	r4, r7
     c54:	f642 67e0 	movw	r7, #12000	; 0x2ee0
     c58:	f2c0 0700 	movt	r7, #0
     c5c:	46b9      	mov	r9, r7
     c5e:	5c59      	ldrb	r1, [r3, r1]
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
     c60:	f242 67e0 	movw	r7, #9952	; 0x26e0
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
     c64:	0089      	lsls	r1, r1, #2
     c66:	4449      	add	r1, r9
     c68:	6a89      	ldr	r1, [r1, #40]	; 0x28
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
     c6a:	f2c0 0700 	movt	r7, #0
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
     c6e:	4061      	eors	r1, r4
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
     c70:	0014      	movs	r4, r2
     c72:	6041      	str	r1, [r0, #4]
     c74:	69a9      	ldr	r1, [r5, #24]
     c76:	400c      	ands	r4, r1
     c78:	5d1c      	ldrb	r4, [r3, r4]
     c7a:	00a4      	lsls	r4, r4, #2
     c7c:	46a2      	mov	sl, r4
     c7e:	f242 24e0 	movw	r4, #8928	; 0x22e0
     c82:	f2c0 0400 	movt	r4, #0
     c86:	46a1      	mov	r9, r4
     c88:	44ca      	add	sl, r9
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
     c8a:	46b9      	mov	r9, r7
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
     c8c:	4657      	mov	r7, sl
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
     c8e:	0e0c      	lsrs	r4, r1, #24
     c90:	5d1c      	ldrb	r4, [r3, r4]
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
     c92:	6abf      	ldr	r7, [r7, #40]	; 0x28
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
     c94:	00a4      	lsls	r4, r4, #2
     c96:	444c      	add	r4, r9
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
     c98:	6aa4      	ldr	r4, [r4, #40]	; 0x28
     c9a:	4067      	eors	r7, r4
     c9c:	46ba      	mov	sl, r7
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
     c9e:	f642 27e0 	movw	r7, #10976	; 0x2ae0
     ca2:	f2c0 0700 	movt	r7, #0
     ca6:	46b9      	mov	r9, r7
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
     ca8:	4657      	mov	r7, sl
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
     caa:	0a0c      	lsrs	r4, r1, #8
     cac:	4014      	ands	r4, r2
     cae:	5d1c      	ldrb	r4, [r3, r4]
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
     cb0:	0c09      	lsrs	r1, r1, #16
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
     cb2:	00a4      	lsls	r4, r4, #2
     cb4:	444c      	add	r4, r9
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
     cb6:	6aa4      	ldr	r4, [r4, #40]	; 0x28
     cb8:	4011      	ands	r1, r2
     cba:	407c      	eors	r4, r7
     cbc:	f642 67e0 	movw	r7, #12000	; 0x2ee0
     cc0:	f2c0 0700 	movt	r7, #0
     cc4:	46b9      	mov	r9, r7
     cc6:	5c59      	ldrb	r1, [r3, r1]
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
     cc8:	f242 67e0 	movw	r7, #9952	; 0x26e0
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
     ccc:	0089      	lsls	r1, r1, #2
     cce:	4449      	add	r1, r9
     cd0:	6a89      	ldr	r1, [r1, #40]	; 0x28
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
     cd2:	f2c0 0700 	movt	r7, #0
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
     cd6:	4061      	eors	r1, r4
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
     cd8:	0014      	movs	r4, r2
     cda:	6081      	str	r1, [r0, #8]
     cdc:	69e9      	ldr	r1, [r5, #28]
     cde:	400c      	ands	r4, r1
     ce0:	5d1c      	ldrb	r4, [r3, r4]
     ce2:	00a4      	lsls	r4, r4, #2
     ce4:	46a2      	mov	sl, r4
     ce6:	f242 24e0 	movw	r4, #8928	; 0x22e0
     cea:	f2c0 0400 	movt	r4, #0
     cee:	46a1      	mov	r9, r4
     cf0:	44ca      	add	sl, r9
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
     cf2:	46b9      	mov	r9, r7
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
     cf4:	4657      	mov	r7, sl
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
     cf6:	0e0c      	lsrs	r4, r1, #24
     cf8:	5d1c      	ldrb	r4, [r3, r4]
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
     cfa:	6abf      	ldr	r7, [r7, #40]	; 0x28
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
     cfc:	00a4      	lsls	r4, r4, #2
     cfe:	444c      	add	r4, r9
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
     d00:	6aa4      	ldr	r4, [r4, #40]	; 0x28
     d02:	4067      	eors	r7, r4
     d04:	46ba      	mov	sl, r7
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
     d06:	f642 27e0 	movw	r7, #10976	; 0x2ae0
     d0a:	f2c0 0700 	movt	r7, #0
     d0e:	46b9      	mov	r9, r7
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
     d10:	4657      	mov	r7, sl
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
     d12:	0a0c      	lsrs	r4, r1, #8
     d14:	4014      	ands	r4, r2
     d16:	5d1c      	ldrb	r4, [r3, r4]
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
     d18:	0c09      	lsrs	r1, r1, #16
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
     d1a:	00a4      	lsls	r4, r4, #2
     d1c:	444c      	add	r4, r9
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
     d1e:	6aa4      	ldr	r4, [r4, #40]	; 0x28
     d20:	4011      	ands	r1, r2
     d22:	407c      	eors	r4, r7
     d24:	f642 67e0 	movw	r7, #12000	; 0x2ee0
     d28:	f2c0 0700 	movt	r7, #0
     d2c:	46b9      	mov	r9, r7
     d2e:	5c59      	ldrb	r1, [r3, r1]
     d30:	0089      	lsls	r1, r1, #2
     d32:	4449      	add	r1, r9
     d34:	6a89      	ldr	r1, [r1, #40]	; 0x28
     d36:	4061      	eors	r1, r4
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
     d38:	60c1      	str	r1, [r0, #12]
     d3a:	3010      	adds	r0, #16
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
     d3c:	2e00      	cmp	r6, #0
     d3e:	d000      	beq.n	d42 <mbedtls_aes_setkey_dec+0x236>
     d40:	e729      	b.n	b96 <mbedtls_aes_setkey_dec+0x8a>
     d42:	4663      	mov	r3, ip
     d44:	9a00      	ldr	r2, [sp, #0]
     d46:	011b      	lsls	r3, r3, #4
     d48:	1ad7      	subs	r7, r2, r3
     d4a:	9b01      	ldr	r3, [sp, #4]
     d4c:	3710      	adds	r7, #16
     d4e:	3b10      	subs	r3, #16
     d50:	9700      	str	r7, [sp, #0]
     d52:	4498      	add	r8, r3
    *RK++ = *SK++;
     d54:	4643      	mov	r3, r8
     d56:	9900      	ldr	r1, [sp, #0]
     d58:	680a      	ldr	r2, [r1, #0]
     d5a:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
     d5c:	684a      	ldr	r2, [r1, #4]
     d5e:	605a      	str	r2, [r3, #4]
    *RK++ = *SK++;
     d60:	688a      	ldr	r2, [r1, #8]
     d62:	609a      	str	r2, [r3, #8]
    *RK++ = *SK++;
     d64:	68ca      	ldr	r2, [r1, #12]
     d66:	60da      	str	r2, [r3, #12]
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_aes_context ) );
     d68:	f641 2305 	movw	r3, #6661	; 0x1a05
     d6c:	a802      	add	r0, sp, #8
     d6e:	f240 1118 	movw	r1, #280	; 0x118
     d72:	f2c0 0300 	movt	r3, #0
     d76:	4798      	blx	r3
}
     d78:	4658      	mov	r0, fp
     d7a:	b049      	add	sp, #292	; 0x124
     d7c:	bc3c      	pop	{r2, r3, r4, r5}
     d7e:	4690      	mov	r8, r2
     d80:	4699      	mov	r9, r3
     d82:	46a2      	mov	sl, r4
     d84:	46ab      	mov	fp, r5
     d86:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000d88 <mbedtls_internal_aes_encrypt>:
{
     d88:	b5f0      	push	{r4, r5, r6, r7, lr}
     d8a:	4657      	mov	r7, sl
     d8c:	464e      	mov	r6, r9
     d8e:	4645      	mov	r5, r8
     d90:	46de      	mov	lr, fp
     d92:	b5e0      	push	{r5, r6, r7, lr}
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
     d94:	784b      	ldrb	r3, [r1, #1]
     d96:	780c      	ldrb	r4, [r1, #0]
     d98:	021b      	lsls	r3, r3, #8
     d9a:	4323      	orrs	r3, r4
     d9c:	788c      	ldrb	r4, [r1, #2]
{
     d9e:	4691      	mov	r9, r2
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
     da0:	0424      	lsls	r4, r4, #16
     da2:	4323      	orrs	r3, r4
     da4:	78cc      	ldrb	r4, [r1, #3]
    RK = ctx->rk;
     da6:	6842      	ldr	r2, [r0, #4]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
     da8:	0624      	lsls	r4, r4, #24
     daa:	431c      	orrs	r4, r3
     dac:	6813      	ldr	r3, [r2, #0]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
     dae:	794d      	ldrb	r5, [r1, #5]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
     db0:	405c      	eors	r4, r3
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
     db2:	790b      	ldrb	r3, [r1, #4]
     db4:	022d      	lsls	r5, r5, #8
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
     db6:	f240 0a10 	movw	sl, #16
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
     dba:	431d      	orrs	r5, r3
     dbc:	798b      	ldrb	r3, [r1, #6]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
     dbe:	7a4e      	ldrb	r6, [r1, #9]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
     dc0:	041b      	lsls	r3, r3, #16
     dc2:	431d      	orrs	r5, r3
     dc4:	79cb      	ldrb	r3, [r1, #7]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
     dc6:	0236      	lsls	r6, r6, #8
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
     dc8:	061b      	lsls	r3, r3, #24
     dca:	432b      	orrs	r3, r5
     dcc:	6855      	ldr	r5, [r2, #4]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
     dce:	7b4f      	ldrb	r7, [r1, #13]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
     dd0:	406b      	eors	r3, r5
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
     dd2:	7a0d      	ldrb	r5, [r1, #8]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
     dd4:	023f      	lsls	r7, r7, #8
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
     dd6:	432e      	orrs	r6, r5
     dd8:	7a8d      	ldrb	r5, [r1, #10]
{
     dda:	b085      	sub	sp, #20
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
     ddc:	042d      	lsls	r5, r5, #16
     dde:	432e      	orrs	r6, r5
     de0:	7acd      	ldrb	r5, [r1, #11]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
     de2:	4492      	add	sl, r2
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
     de4:	062d      	lsls	r5, r5, #24
     de6:	4335      	orrs	r5, r6
     de8:	6896      	ldr	r6, [r2, #8]
     dea:	4075      	eors	r5, r6
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
     dec:	7b0e      	ldrb	r6, [r1, #12]
     dee:	4337      	orrs	r7, r6
     df0:	7b8e      	ldrb	r6, [r1, #14]
     df2:	0436      	lsls	r6, r6, #16
     df4:	4337      	orrs	r7, r6
     df6:	7bce      	ldrb	r6, [r1, #15]
     df8:	68d1      	ldr	r1, [r2, #12]
     dfa:	0636      	lsls	r6, r6, #24
     dfc:	433e      	orrs	r6, r7
     dfe:	404e      	eors	r6, r1
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
     e00:	6801      	ldr	r1, [r0, #0]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
     e02:	6910      	ldr	r0, [r2, #16]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
     e04:	1049      	asrs	r1, r1, #1
     e06:	9102      	str	r1, [sp, #8]
     e08:	3901      	subs	r1, #1
     e0a:	4688      	mov	r8, r1
     e0c:	2900      	cmp	r1, #0
     e0e:	dc00      	bgt.n	e12 <mbedtls_internal_aes_encrypt+0x8a>
     e10:	e18d      	b.n	112e <mbedtls_internal_aes_encrypt+0x3a6>
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
     e12:	4649      	mov	r1, r9
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
     e14:	46d4      	mov	ip, sl
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
     e16:	22ff      	movs	r2, #255	; 0xff
     e18:	9401      	str	r4, [sp, #4]
     e1a:	9103      	str	r1, [sp, #12]
     e1c:	0017      	movs	r7, r2
     e1e:	f243 21e0 	movw	r1, #13024	; 0x32e0
     e22:	9c01      	ldr	r4, [sp, #4]
     e24:	f2c0 0100 	movt	r1, #0
     e28:	4027      	ands	r7, r4
     e2a:	f243 64e0 	movw	r4, #14048	; 0x36e0
     e2e:	468b      	mov	fp, r1
     e30:	f2c0 0400 	movt	r4, #0
     e34:	00bf      	lsls	r7, r7, #2
     e36:	445f      	add	r7, fp
     e38:	46a3      	mov	fp, r4
     e3a:	f643 24e0 	movw	r4, #15072	; 0x3ae0
     e3e:	0e31      	lsrs	r1, r6, #24
     e40:	f2c0 0400 	movt	r4, #0
     e44:	0089      	lsls	r1, r1, #2
     e46:	4459      	add	r1, fp
     e48:	46a3      	mov	fp, r4
     e4a:	f643 64e0 	movw	r4, #16096	; 0x3ee0
     e4e:	6abf      	ldr	r7, [r7, #40]	; 0x28
     e50:	6a89      	ldr	r1, [r1, #40]	; 0x28
     e52:	f2c0 0400 	movt	r4, #0
     e56:	4079      	eors	r1, r7
     e58:	4048      	eors	r0, r1
     e5a:	0a19      	lsrs	r1, r3, #8
     e5c:	4011      	ands	r1, r2
     e5e:	0089      	lsls	r1, r1, #2
     e60:	4459      	add	r1, fp
     e62:	46a3      	mov	fp, r4
     e64:	f243 24e0 	movw	r4, #13024	; 0x32e0
     e68:	6a89      	ldr	r1, [r1, #40]	; 0x28
     e6a:	f2c0 0400 	movt	r4, #0
     e6e:	4048      	eors	r0, r1
     e70:	0c29      	lsrs	r1, r5, #16
     e72:	4011      	ands	r1, r2
     e74:	0089      	lsls	r1, r1, #2
     e76:	4459      	add	r1, fp
     e78:	6a89      	ldr	r1, [r1, #40]	; 0x28
     e7a:	46a3      	mov	fp, r4
     e7c:	9c01      	ldr	r4, [sp, #4]
     e7e:	4048      	eors	r0, r1
     e80:	0011      	movs	r1, r2
     e82:	0e27      	lsrs	r7, r4, #24
     e84:	f243 64e0 	movw	r4, #14048	; 0x36e0
     e88:	4019      	ands	r1, r3
     e8a:	f2c0 0400 	movt	r4, #0
     e8e:	0089      	lsls	r1, r1, #2
     e90:	4459      	add	r1, fp
     e92:	46a3      	mov	fp, r4
     e94:	4664      	mov	r4, ip
     e96:	00bf      	lsls	r7, r7, #2
     e98:	445f      	add	r7, fp
     e9a:	6abf      	ldr	r7, [r7, #40]	; 0x28
     e9c:	6a89      	ldr	r1, [r1, #40]	; 0x28
     e9e:	6864      	ldr	r4, [r4, #4]
     ea0:	4079      	eors	r1, r7
     ea2:	4061      	eors	r1, r4
     ea4:	f643 24e0 	movw	r4, #15072	; 0x3ae0
     ea8:	f2c0 0400 	movt	r4, #0
     eac:	46a3      	mov	fp, r4
     eae:	f643 64e0 	movw	r4, #16096	; 0x3ee0
     eb2:	0a2f      	lsrs	r7, r5, #8
     eb4:	4017      	ands	r7, r2
     eb6:	f2c0 0400 	movt	r4, #0
     eba:	00bf      	lsls	r7, r7, #2
     ebc:	445f      	add	r7, fp
     ebe:	46a3      	mov	fp, r4
     ec0:	f243 24e0 	movw	r4, #13024	; 0x32e0
     ec4:	6abf      	ldr	r7, [r7, #40]	; 0x28
     ec6:	f2c0 0400 	movt	r4, #0
     eca:	4079      	eors	r1, r7
     ecc:	0c37      	lsrs	r7, r6, #16
     ece:	4017      	ands	r7, r2
     ed0:	00bf      	lsls	r7, r7, #2
     ed2:	445f      	add	r7, fp
     ed4:	6abf      	ldr	r7, [r7, #40]	; 0x28
     ed6:	46a3      	mov	fp, r4
     ed8:	4079      	eors	r1, r7
     eda:	0017      	movs	r7, r2
     edc:	f243 64e0 	movw	r4, #14048	; 0x36e0
     ee0:	402f      	ands	r7, r5
     ee2:	00bf      	lsls	r7, r7, #2
     ee4:	f2c0 0400 	movt	r4, #0
     ee8:	44bb      	add	fp, r7
     eea:	46a1      	mov	r9, r4
     eec:	465c      	mov	r4, fp
     eee:	0e1f      	lsrs	r7, r3, #24
     ef0:	00bf      	lsls	r7, r7, #2
     ef2:	444f      	add	r7, r9
     ef4:	6aa4      	ldr	r4, [r4, #40]	; 0x28
     ef6:	6abf      	ldr	r7, [r7, #40]	; 0x28
     ef8:	0e2d      	lsrs	r5, r5, #24
     efa:	4067      	eors	r7, r4
     efc:	4664      	mov	r4, ip
     efe:	68a4      	ldr	r4, [r4, #8]
     f00:	00ad      	lsls	r5, r5, #2
     f02:	4067      	eors	r7, r4
     f04:	0a34      	lsrs	r4, r6, #8
     f06:	4014      	ands	r4, r2
     f08:	00a4      	lsls	r4, r4, #2
     f0a:	46a3      	mov	fp, r4
     f0c:	f643 24e0 	movw	r4, #15072	; 0x3ae0
     f10:	f2c0 0400 	movt	r4, #0
     f14:	46a1      	mov	r9, r4
     f16:	44cb      	add	fp, r9
     f18:	465c      	mov	r4, fp
     f1a:	6aa4      	ldr	r4, [r4, #40]	; 0x28
     f1c:	4016      	ands	r6, r2
     f1e:	4067      	eors	r7, r4
     f20:	9c01      	ldr	r4, [sp, #4]
     f22:	00b6      	lsls	r6, r6, #2
     f24:	0c24      	lsrs	r4, r4, #16
     f26:	4014      	ands	r4, r2
     f28:	00a4      	lsls	r4, r4, #2
     f2a:	46a3      	mov	fp, r4
     f2c:	f643 64e0 	movw	r4, #16096	; 0x3ee0
     f30:	f2c0 0400 	movt	r4, #0
     f34:	46a1      	mov	r9, r4
     f36:	44cb      	add	fp, r9
     f38:	465c      	mov	r4, fp
     f3a:	6aa4      	ldr	r4, [r4, #40]	; 0x28
     f3c:	0c1b      	lsrs	r3, r3, #16
     f3e:	4067      	eors	r7, r4
     f40:	f243 24e0 	movw	r4, #13024	; 0x32e0
     f44:	f2c0 0400 	movt	r4, #0
     f48:	46a1      	mov	r9, r4
     f4a:	f243 64e0 	movw	r4, #14048	; 0x36e0
     f4e:	f2c0 0400 	movt	r4, #0
     f52:	444e      	add	r6, r9
     f54:	46a1      	mov	r9, r4
     f56:	444d      	add	r5, r9
     f58:	6aad      	ldr	r5, [r5, #40]	; 0x28
     f5a:	6ab6      	ldr	r6, [r6, #40]	; 0x28
     f5c:	4664      	mov	r4, ip
     f5e:	406e      	eors	r6, r5
     f60:	f643 25e0 	movw	r5, #15072	; 0x3ae0
     f64:	f2c0 0500 	movt	r5, #0
     f68:	46a9      	mov	r9, r5
     f6a:	68e4      	ldr	r4, [r4, #12]
     f6c:	4013      	ands	r3, r2
     f6e:	4066      	eors	r6, r4
     f70:	9c01      	ldr	r4, [sp, #4]
     f72:	009b      	lsls	r3, r3, #2
     f74:	0a24      	lsrs	r4, r4, #8
     f76:	4014      	ands	r4, r2
     f78:	00a4      	lsls	r4, r4, #2
     f7a:	444c      	add	r4, r9
     f7c:	6aa4      	ldr	r4, [r4, #40]	; 0x28
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
     f7e:	f243 65e0 	movw	r5, #14048	; 0x36e0
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
     f82:	4066      	eors	r6, r4
     f84:	f643 64e0 	movw	r4, #16096	; 0x3ee0
     f88:	f2c0 0400 	movt	r4, #0
     f8c:	46a1      	mov	r9, r4
     f8e:	444b      	add	r3, r9
     f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
     f92:	0014      	movs	r4, r2
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
     f94:	405e      	eors	r6, r3
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
     f96:	f243 23e0 	movw	r3, #13024	; 0x32e0
     f9a:	f2c0 0300 	movt	r3, #0
     f9e:	4699      	mov	r9, r3
     fa0:	4004      	ands	r4, r0
     fa2:	f2c0 0500 	movt	r5, #0
     fa6:	00a4      	lsls	r4, r4, #2
     fa8:	444c      	add	r4, r9
     faa:	46a9      	mov	r9, r5
     fac:	f643 25e0 	movw	r5, #15072	; 0x3ae0
     fb0:	0e33      	lsrs	r3, r6, #24
     fb2:	009b      	lsls	r3, r3, #2
     fb4:	444b      	add	r3, r9
     fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     fb8:	6aa4      	ldr	r4, [r4, #40]	; 0x28
     fba:	f2c0 0500 	movt	r5, #0
     fbe:	405c      	eors	r4, r3
     fc0:	4663      	mov	r3, ip
     fc2:	46a9      	mov	r9, r5
     fc4:	f643 65e0 	movw	r5, #16096	; 0x3ee0
     fc8:	691b      	ldr	r3, [r3, #16]
     fca:	f2c0 0500 	movt	r5, #0
     fce:	405c      	eors	r4, r3
     fd0:	0a0b      	lsrs	r3, r1, #8
     fd2:	4013      	ands	r3, r2
     fd4:	009b      	lsls	r3, r3, #2
     fd6:	444b      	add	r3, r9
     fd8:	46a9      	mov	r9, r5
     fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     fdc:	0e05      	lsrs	r5, r0, #24
     fde:	405c      	eors	r4, r3
     fe0:	0c3b      	lsrs	r3, r7, #16
     fe2:	4013      	ands	r3, r2
     fe4:	009b      	lsls	r3, r3, #2
     fe6:	444b      	add	r3, r9
     fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     fea:	00ad      	lsls	r5, r5, #2
     fec:	405c      	eors	r4, r3
     fee:	9401      	str	r4, [sp, #4]
     ff0:	f243 24e0 	movw	r4, #13024	; 0x32e0
     ff4:	0013      	movs	r3, r2
     ff6:	f2c0 0400 	movt	r4, #0
     ffa:	46a1      	mov	r9, r4
     ffc:	f243 64e0 	movw	r4, #14048	; 0x36e0
    1000:	400b      	ands	r3, r1
    1002:	f2c0 0400 	movt	r4, #0
    1006:	009b      	lsls	r3, r3, #2
    1008:	444b      	add	r3, r9
    100a:	46a1      	mov	r9, r4
    100c:	4664      	mov	r4, ip
    100e:	444d      	add	r5, r9
    1010:	6aad      	ldr	r5, [r5, #40]	; 0x28
    1012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1014:	6964      	ldr	r4, [r4, #20]
    1016:	406b      	eors	r3, r5
    1018:	4063      	eors	r3, r4
    101a:	f643 24e0 	movw	r4, #15072	; 0x3ae0
    101e:	f2c0 0400 	movt	r4, #0
    1022:	46a1      	mov	r9, r4
    1024:	f643 64e0 	movw	r4, #16096	; 0x3ee0
    1028:	0a3d      	lsrs	r5, r7, #8
    102a:	4015      	ands	r5, r2
    102c:	f2c0 0400 	movt	r4, #0
    1030:	00ad      	lsls	r5, r5, #2
    1032:	444d      	add	r5, r9
    1034:	46a1      	mov	r9, r4
    1036:	f243 24e0 	movw	r4, #13024	; 0x32e0
    103a:	6aad      	ldr	r5, [r5, #40]	; 0x28
    103c:	f2c0 0400 	movt	r4, #0
    1040:	406b      	eors	r3, r5
    1042:	0c35      	lsrs	r5, r6, #16
    1044:	4015      	ands	r5, r2
    1046:	00ad      	lsls	r5, r5, #2
    1048:	444d      	add	r5, r9
    104a:	6aad      	ldr	r5, [r5, #40]	; 0x28
    104c:	46a3      	mov	fp, r4
    104e:	406b      	eors	r3, r5
    1050:	0015      	movs	r5, r2
    1052:	f243 64e0 	movw	r4, #14048	; 0x36e0
    1056:	403d      	ands	r5, r7
    1058:	00ad      	lsls	r5, r5, #2
    105a:	f2c0 0400 	movt	r4, #0
    105e:	44ab      	add	fp, r5
    1060:	46a1      	mov	r9, r4
    1062:	465c      	mov	r4, fp
    1064:	0e0d      	lsrs	r5, r1, #24
    1066:	00ad      	lsls	r5, r5, #2
    1068:	444d      	add	r5, r9
    106a:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    106c:	6aad      	ldr	r5, [r5, #40]	; 0x28
    106e:	0e3f      	lsrs	r7, r7, #24
    1070:	4065      	eors	r5, r4
    1072:	4664      	mov	r4, ip
    1074:	69a4      	ldr	r4, [r4, #24]
    1076:	00bf      	lsls	r7, r7, #2
    1078:	4065      	eors	r5, r4
    107a:	0a34      	lsrs	r4, r6, #8
    107c:	4014      	ands	r4, r2
    107e:	00a4      	lsls	r4, r4, #2
    1080:	46a3      	mov	fp, r4
    1082:	f643 24e0 	movw	r4, #15072	; 0x3ae0
    1086:	f2c0 0400 	movt	r4, #0
    108a:	46a1      	mov	r9, r4
    108c:	44cb      	add	fp, r9
    108e:	465c      	mov	r4, fp
    1090:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    1092:	4016      	ands	r6, r2
    1094:	4065      	eors	r5, r4
    1096:	0c04      	lsrs	r4, r0, #16
    1098:	4014      	ands	r4, r2
    109a:	00a4      	lsls	r4, r4, #2
    109c:	46a3      	mov	fp, r4
    109e:	f643 64e0 	movw	r4, #16096	; 0x3ee0
    10a2:	f2c0 0400 	movt	r4, #0
    10a6:	46a1      	mov	r9, r4
    10a8:	44cb      	add	fp, r9
    10aa:	465c      	mov	r4, fp
    10ac:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    10ae:	00b6      	lsls	r6, r6, #2
    10b0:	4065      	eors	r5, r4
    10b2:	f243 24e0 	movw	r4, #13024	; 0x32e0
    10b6:	f2c0 0400 	movt	r4, #0
    10ba:	46a1      	mov	r9, r4
    10bc:	f243 64e0 	movw	r4, #14048	; 0x36e0
    10c0:	f2c0 0400 	movt	r4, #0
    10c4:	444e      	add	r6, r9
    10c6:	46a1      	mov	r9, r4
    10c8:	4664      	mov	r4, ip
    10ca:	444f      	add	r7, r9
    10cc:	6ab6      	ldr	r6, [r6, #40]	; 0x28
    10ce:	6abf      	ldr	r7, [r7, #40]	; 0x28
    10d0:	69e4      	ldr	r4, [r4, #28]
    10d2:	407e      	eors	r6, r7
    10d4:	4066      	eors	r6, r4
    10d6:	f643 24e0 	movw	r4, #15072	; 0x3ae0
    10da:	f2c0 0400 	movt	r4, #0
    10de:	46a1      	mov	r9, r4
    10e0:	0a00      	lsrs	r0, r0, #8
    10e2:	4010      	ands	r0, r2
    10e4:	0080      	lsls	r0, r0, #2
    10e6:	4448      	add	r0, r9
    10e8:	6a80      	ldr	r0, [r0, #40]	; 0x28
    10ea:	0c09      	lsrs	r1, r1, #16
    10ec:	4046      	eors	r6, r0
    10ee:	f643 60e0 	movw	r0, #16096	; 0x3ee0
    10f2:	f2c0 0000 	movt	r0, #0
    10f6:	4681      	mov	r9, r0
    10f8:	4011      	ands	r1, r2
    10fa:	0089      	lsls	r1, r1, #2
    10fc:	4449      	add	r1, r9
    10fe:	6a89      	ldr	r1, [r1, #40]	; 0x28
    1100:	404e      	eors	r6, r1
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    1102:	2101      	movs	r1, #1
    1104:	4249      	negs	r1, r1
    1106:	4689      	mov	r9, r1
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    1108:	4661      	mov	r1, ip
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    110a:	44c8      	add	r8, r9
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    110c:	6a08      	ldr	r0, [r1, #32]
    110e:	f240 0920 	movw	r9, #32
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    1112:	4641      	mov	r1, r8
    1114:	44cc      	add	ip, r9
    1116:	2900      	cmp	r1, #0
    1118:	d000      	beq.n	111c <mbedtls_internal_aes_encrypt+0x394>
    111a:	e67f      	b.n	e1c <mbedtls_internal_aes_encrypt+0x94>
    111c:	49a2      	ldr	r1, [pc, #648]	; (13a8 <mbedtls_internal_aes_encrypt+0x620>)
    111e:	9a03      	ldr	r2, [sp, #12]
    1120:	468c      	mov	ip, r1
    1122:	4691      	mov	r9, r2
    1124:	9a02      	ldr	r2, [sp, #8]
    1126:	9c01      	ldr	r4, [sp, #4]
    1128:	4462      	add	r2, ip
    112a:	0152      	lsls	r2, r2, #5
    112c:	4492      	add	sl, r2
    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
    112e:	22ff      	movs	r2, #255	; 0xff
    1130:	f243 27e0 	movw	r7, #13024	; 0x32e0
    1134:	0011      	movs	r1, r2
    1136:	f2c0 0700 	movt	r7, #0
    113a:	46bc      	mov	ip, r7
    113c:	4021      	ands	r1, r4
    113e:	0089      	lsls	r1, r1, #2
    1140:	4461      	add	r1, ip
    1142:	4688      	mov	r8, r1
    1144:	f243 61e0 	movw	r1, #14048	; 0x36e0
    1148:	f2c0 0100 	movt	r1, #0
    114c:	468c      	mov	ip, r1
    114e:	4641      	mov	r1, r8
    1150:	0e37      	lsrs	r7, r6, #24
    1152:	00bf      	lsls	r7, r7, #2
    1154:	4467      	add	r7, ip
    1156:	6abf      	ldr	r7, [r7, #40]	; 0x28
    1158:	6a89      	ldr	r1, [r1, #40]	; 0x28
    115a:	4079      	eors	r1, r7
    115c:	f643 27e0 	movw	r7, #15072	; 0x3ae0
    1160:	f2c0 0700 	movt	r7, #0
    1164:	46bc      	mov	ip, r7
    1166:	f643 67e0 	movw	r7, #16096	; 0x3ee0
    116a:	4041      	eors	r1, r0
    116c:	0a18      	lsrs	r0, r3, #8
    116e:	4010      	ands	r0, r2
    1170:	f2c0 0700 	movt	r7, #0
    1174:	0080      	lsls	r0, r0, #2
    1176:	4460      	add	r0, ip
    1178:	46bc      	mov	ip, r7
    117a:	6a80      	ldr	r0, [r0, #40]	; 0x28
    117c:	0e27      	lsrs	r7, r4, #24
    117e:	4041      	eors	r1, r0
    1180:	0c28      	lsrs	r0, r5, #16
    1182:	4010      	ands	r0, r2
    1184:	0080      	lsls	r0, r0, #2
    1186:	4460      	add	r0, ip
    1188:	6a80      	ldr	r0, [r0, #40]	; 0x28
    118a:	00bf      	lsls	r7, r7, #2
    118c:	4041      	eors	r1, r0
    118e:	468b      	mov	fp, r1
    1190:	f243 21e0 	movw	r1, #13024	; 0x32e0
    1194:	0010      	movs	r0, r2
    1196:	f2c0 0100 	movt	r1, #0
    119a:	468c      	mov	ip, r1
    119c:	f243 61e0 	movw	r1, #14048	; 0x36e0
    11a0:	4018      	ands	r0, r3
    11a2:	f2c0 0100 	movt	r1, #0
    11a6:	0080      	lsls	r0, r0, #2
    11a8:	4460      	add	r0, ip
    11aa:	468c      	mov	ip, r1
    11ac:	4651      	mov	r1, sl
    11ae:	4467      	add	r7, ip
    11b0:	6abf      	ldr	r7, [r7, #40]	; 0x28
    11b2:	6a80      	ldr	r0, [r0, #40]	; 0x28
    11b4:	6849      	ldr	r1, [r1, #4]
    11b6:	4078      	eors	r0, r7
    11b8:	4048      	eors	r0, r1
    11ba:	f643 21e0 	movw	r1, #15072	; 0x3ae0
    11be:	f2c0 0100 	movt	r1, #0
    11c2:	468c      	mov	ip, r1
    11c4:	f643 61e0 	movw	r1, #16096	; 0x3ee0
    11c8:	0a2f      	lsrs	r7, r5, #8
    11ca:	4017      	ands	r7, r2
    11cc:	f2c0 0100 	movt	r1, #0
    11d0:	00bf      	lsls	r7, r7, #2
    11d2:	4467      	add	r7, ip
    11d4:	468c      	mov	ip, r1
    11d6:	f243 21e0 	movw	r1, #13024	; 0x32e0
    11da:	6abf      	ldr	r7, [r7, #40]	; 0x28
    11dc:	f2c0 0100 	movt	r1, #0
    11e0:	4078      	eors	r0, r7
    11e2:	0c37      	lsrs	r7, r6, #16
    11e4:	4017      	ands	r7, r2
    11e6:	00bf      	lsls	r7, r7, #2
    11e8:	4467      	add	r7, ip
    11ea:	6abf      	ldr	r7, [r7, #40]	; 0x28
    11ec:	468c      	mov	ip, r1
    11ee:	4078      	eors	r0, r7
    11f0:	0017      	movs	r7, r2
    11f2:	f243 61e0 	movw	r1, #14048	; 0x36e0
    11f6:	402f      	ands	r7, r5
    11f8:	00bf      	lsls	r7, r7, #2
    11fa:	f2c0 0100 	movt	r1, #0
    11fe:	44bc      	add	ip, r7
    1200:	4688      	mov	r8, r1
    1202:	4661      	mov	r1, ip
    1204:	0e1f      	lsrs	r7, r3, #24
    1206:	00bf      	lsls	r7, r7, #2
    1208:	4447      	add	r7, r8
    120a:	6a89      	ldr	r1, [r1, #40]	; 0x28
    120c:	6abf      	ldr	r7, [r7, #40]	; 0x28
    120e:	0e2d      	lsrs	r5, r5, #24
    1210:	404f      	eors	r7, r1
    1212:	4651      	mov	r1, sl
    1214:	6889      	ldr	r1, [r1, #8]
    1216:	00ad      	lsls	r5, r5, #2
    1218:	404f      	eors	r7, r1
    121a:	0a31      	lsrs	r1, r6, #8
    121c:	4011      	ands	r1, r2
    121e:	0089      	lsls	r1, r1, #2
    1220:	468c      	mov	ip, r1
    1222:	f643 21e0 	movw	r1, #15072	; 0x3ae0
    1226:	f2c0 0100 	movt	r1, #0
    122a:	4688      	mov	r8, r1
    122c:	44c4      	add	ip, r8
    122e:	4661      	mov	r1, ip
    1230:	6a89      	ldr	r1, [r1, #40]	; 0x28
    1232:	4016      	ands	r6, r2
    1234:	404f      	eors	r7, r1
    1236:	0c21      	lsrs	r1, r4, #16
    1238:	4011      	ands	r1, r2
    123a:	0089      	lsls	r1, r1, #2
    123c:	468c      	mov	ip, r1
    123e:	f643 61e0 	movw	r1, #16096	; 0x3ee0
    1242:	f2c0 0100 	movt	r1, #0
    1246:	4688      	mov	r8, r1
    1248:	44c4      	add	ip, r8
    124a:	4661      	mov	r1, ip
    124c:	6a89      	ldr	r1, [r1, #40]	; 0x28
    124e:	00b6      	lsls	r6, r6, #2
    1250:	404f      	eors	r7, r1
    1252:	f243 21e0 	movw	r1, #13024	; 0x32e0
    1256:	f2c0 0100 	movt	r1, #0
    125a:	468c      	mov	ip, r1
    125c:	f243 61e0 	movw	r1, #14048	; 0x36e0
    1260:	f2c0 0100 	movt	r1, #0
    1264:	4466      	add	r6, ip
    1266:	468c      	mov	ip, r1
    1268:	4651      	mov	r1, sl
    126a:	4465      	add	r5, ip
    126c:	6ab6      	ldr	r6, [r6, #40]	; 0x28
    126e:	6aad      	ldr	r5, [r5, #40]	; 0x28
    1270:	68c9      	ldr	r1, [r1, #12]
    1272:	4075      	eors	r5, r6
    1274:	404d      	eors	r5, r1
    1276:	f643 21e0 	movw	r1, #15072	; 0x3ae0
    127a:	f2c0 0100 	movt	r1, #0
    127e:	468c      	mov	ip, r1
    1280:	0a24      	lsrs	r4, r4, #8
    1282:	4014      	ands	r4, r2
    1284:	0c1b      	lsrs	r3, r3, #16
    1286:	4013      	ands	r3, r2
    1288:	00a4      	lsls	r4, r4, #2
    128a:	4464      	add	r4, ip
    128c:	009b      	lsls	r3, r3, #2
    128e:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    1290:	4443      	add	r3, r8
    1292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1294:	406c      	eors	r4, r5
    1296:	405c      	eors	r4, r3
    1298:	46a4      	mov	ip, r4
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
    129a:	4659      	mov	r1, fp
    129c:	0014      	movs	r4, r2
    129e:	f242 13e0 	movw	r3, #8672	; 0x21e0
    12a2:	400c      	ands	r4, r1
    X0 = *RK++ ^ \
    12a4:	4651      	mov	r1, sl
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
    12a6:	f2c0 0300 	movt	r3, #0
    12aa:	5d1e      	ldrb	r6, [r3, r4]
    X0 = *RK++ ^ \
    12ac:	6909      	ldr	r1, [r1, #16]
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
    12ae:	9001      	str	r0, [sp, #4]
    X0 = *RK++ ^ \
    12b0:	404e      	eors	r6, r1
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
    12b2:	4661      	mov	r1, ip
    12b4:	0e0c      	lsrs	r4, r1, #24
    12b6:	5d1c      	ldrb	r4, [r3, r4]
    X1 = *RK++ ^ \
    12b8:	4651      	mov	r1, sl
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
    12ba:	0624      	lsls	r4, r4, #24
    X0 = *RK++ ^ \
    12bc:	4066      	eors	r6, r4
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
    12be:	0a04      	lsrs	r4, r0, #8
    12c0:	4014      	ands	r4, r2
    12c2:	5d1c      	ldrb	r4, [r3, r4]
    X1 = *RK++ ^ \
    12c4:	6949      	ldr	r1, [r1, #20]
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
    12c6:	0224      	lsls	r4, r4, #8
    X0 = *RK++ ^ \
    12c8:	4066      	eors	r6, r4
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
    12ca:	0c3c      	lsrs	r4, r7, #16
    12cc:	4014      	ands	r4, r2
    12ce:	5d1c      	ldrb	r4, [r3, r4]
    12d0:	0424      	lsls	r4, r4, #16
    X0 = *RK++ ^ \
    12d2:	4066      	eors	r6, r4
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
    12d4:	0014      	movs	r4, r2
    12d6:	4004      	ands	r4, r0
    12d8:	5d1d      	ldrb	r5, [r3, r4]
    X1 = *RK++ ^ \
    12da:	404d      	eors	r5, r1
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
    12dc:	4659      	mov	r1, fp
    12de:	0e0c      	lsrs	r4, r1, #24
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
    12e0:	4661      	mov	r1, ip
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
    12e2:	5d1c      	ldrb	r4, [r3, r4]
    12e4:	0624      	lsls	r4, r4, #24
    X1 = *RK++ ^ \
    12e6:	4065      	eors	r5, r4
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
    12e8:	0a3c      	lsrs	r4, r7, #8
    12ea:	4014      	ands	r4, r2
    12ec:	5d1c      	ldrb	r4, [r3, r4]
    12ee:	0224      	lsls	r4, r4, #8
    X1 = *RK++ ^ \
    12f0:	4065      	eors	r5, r4
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
    12f2:	0c0c      	lsrs	r4, r1, #16
    12f4:	4014      	ands	r4, r2
    12f6:	5d1c      	ldrb	r4, [r3, r4]
    X2 = *RK++ ^ \
    12f8:	4651      	mov	r1, sl
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
    12fa:	0424      	lsls	r4, r4, #16
    X1 = *RK++ ^ \
    12fc:	4065      	eors	r5, r4
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
    12fe:	0014      	movs	r4, r2
    1300:	403c      	ands	r4, r7
    1302:	5d1c      	ldrb	r4, [r3, r4]
    X2 = *RK++ ^ \
    1304:	6989      	ldr	r1, [r1, #24]
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
    1306:	0e3f      	lsrs	r7, r7, #24
    X2 = *RK++ ^ \
    1308:	4061      	eors	r1, r4
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
    130a:	0e04      	lsrs	r4, r0, #24
    130c:	5d1c      	ldrb	r4, [r3, r4]
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
    130e:	5ddf      	ldrb	r7, [r3, r7]
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
    1310:	0624      	lsls	r4, r4, #24
    X2 = *RK++ ^ \
    1312:	404c      	eors	r4, r1
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
    1314:	4661      	mov	r1, ip
    1316:	0a09      	lsrs	r1, r1, #8
    1318:	4011      	ands	r1, r2
    131a:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
    131c:	063f      	lsls	r7, r7, #24
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
    131e:	0209      	lsls	r1, r1, #8
    X2 = *RK++ ^ \
    1320:	404c      	eors	r4, r1
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
    1322:	4659      	mov	r1, fp
    1324:	0c09      	lsrs	r1, r1, #16
    1326:	4011      	ands	r1, r2
    1328:	5c59      	ldrb	r1, [r3, r1]
    132a:	0409      	lsls	r1, r1, #16
    X2 = *RK++ ^ \
    132c:	404c      	eors	r4, r1
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
    132e:	4661      	mov	r1, ip
    1330:	4011      	ands	r1, r2
    1332:	5c59      	ldrb	r1, [r3, r1]
    1334:	468c      	mov	ip, r1
    X3 = *RK++ ^ \
    1336:	4651      	mov	r1, sl
    1338:	69c9      	ldr	r1, [r1, #28]
    133a:	4688      	mov	r8, r1
    133c:	4661      	mov	r1, ip
    133e:	4640      	mov	r0, r8
    1340:	4041      	eors	r1, r0
    1342:	404f      	eors	r7, r1
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
    1344:	4659      	mov	r1, fp
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
    1346:	9801      	ldr	r0, [sp, #4]
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
    1348:	0a09      	lsrs	r1, r1, #8
    134a:	4011      	ands	r1, r2
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
    134c:	0c00      	lsrs	r0, r0, #16
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
    134e:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
    1350:	4002      	ands	r2, r0
    1352:	5c9b      	ldrb	r3, [r3, r2]
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
    1354:	0209      	lsls	r1, r1, #8
    X3 = *RK++ ^ \
    1356:	4079      	eors	r1, r7
    PUT_UINT32_LE( X0, output,  0 );
    1358:	464a      	mov	r2, r9
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
    135a:	041b      	lsls	r3, r3, #16
    X3 = *RK++ ^ \
    135c:	404b      	eors	r3, r1
    PUT_UINT32_LE( X0, output,  0 );
    135e:	4649      	mov	r1, r9
}
    1360:	2000      	movs	r0, #0
    PUT_UINT32_LE( X0, output,  0 );
    1362:	7016      	strb	r6, [r2, #0]
    1364:	0a32      	lsrs	r2, r6, #8
    1366:	704a      	strb	r2, [r1, #1]
    1368:	0c32      	lsrs	r2, r6, #16
    136a:	708a      	strb	r2, [r1, #2]
    PUT_UINT32_LE( X1, output,  4 );
    136c:	0a2a      	lsrs	r2, r5, #8
    136e:	714a      	strb	r2, [r1, #5]
    1370:	0c2a      	lsrs	r2, r5, #16
    1372:	718a      	strb	r2, [r1, #6]
    PUT_UINT32_LE( X2, output,  8 );
    1374:	0a22      	lsrs	r2, r4, #8
    1376:	724a      	strb	r2, [r1, #9]
    1378:	0c22      	lsrs	r2, r4, #16
    137a:	728a      	strb	r2, [r1, #10]
    PUT_UINT32_LE( X3, output, 12 );
    137c:	0a1a      	lsrs	r2, r3, #8
    PUT_UINT32_LE( X0, output,  0 );
    137e:	0e36      	lsrs	r6, r6, #24
    PUT_UINT32_LE( X1, output,  4 );
    1380:	710d      	strb	r5, [r1, #4]
    PUT_UINT32_LE( X2, output,  8 );
    1382:	720c      	strb	r4, [r1, #8]
    PUT_UINT32_LE( X1, output,  4 );
    1384:	0e2d      	lsrs	r5, r5, #24
    PUT_UINT32_LE( X2, output,  8 );
    1386:	0e24      	lsrs	r4, r4, #24
    PUT_UINT32_LE( X3, output, 12 );
    1388:	730b      	strb	r3, [r1, #12]
    138a:	734a      	strb	r2, [r1, #13]
    138c:	0c1a      	lsrs	r2, r3, #16
    138e:	0e1b      	lsrs	r3, r3, #24
    PUT_UINT32_LE( X0, output,  0 );
    1390:	70ce      	strb	r6, [r1, #3]
    PUT_UINT32_LE( X1, output,  4 );
    1392:	71cd      	strb	r5, [r1, #7]
    PUT_UINT32_LE( X2, output,  8 );
    1394:	72cc      	strb	r4, [r1, #11]
    PUT_UINT32_LE( X3, output, 12 );
    1396:	738a      	strb	r2, [r1, #14]
    1398:	73cb      	strb	r3, [r1, #15]
}
    139a:	b005      	add	sp, #20
    139c:	bc3c      	pop	{r2, r3, r4, r5}
    139e:	4690      	mov	r8, r2
    13a0:	4699      	mov	r9, r3
    13a2:	46a2      	mov	sl, r4
    13a4:	46ab      	mov	fp, r5
    13a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    13a8:	07ffffff 	.word	0x07ffffff

000013ac <mbedtls_internal_aes_decrypt>:
{
    13ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    13ae:	4657      	mov	r7, sl
    13b0:	464e      	mov	r6, r9
    13b2:	4645      	mov	r5, r8
    13b4:	46de      	mov	lr, fp
    13b6:	b5e0      	push	{r5, r6, r7, lr}
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    13b8:	784b      	ldrb	r3, [r1, #1]
    13ba:	780d      	ldrb	r5, [r1, #0]
    13bc:	021b      	lsls	r3, r3, #8
    13be:	432b      	orrs	r3, r5
    13c0:	788d      	ldrb	r5, [r1, #2]
{
    13c2:	4691      	mov	r9, r2
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    13c4:	042d      	lsls	r5, r5, #16
    13c6:	432b      	orrs	r3, r5
    13c8:	78cd      	ldrb	r5, [r1, #3]
    RK = ctx->rk;
    13ca:	6842      	ldr	r2, [r0, #4]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    13cc:	062d      	lsls	r5, r5, #24
    13ce:	431d      	orrs	r5, r3
    13d0:	6813      	ldr	r3, [r2, #0]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    13d2:	794c      	ldrb	r4, [r1, #5]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    13d4:	405d      	eors	r5, r3
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    13d6:	790b      	ldrb	r3, [r1, #4]
    13d8:	0224      	lsls	r4, r4, #8
    13da:	431c      	orrs	r4, r3
    13dc:	798b      	ldrb	r3, [r1, #6]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    13de:	7a4e      	ldrb	r6, [r1, #9]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    13e0:	041b      	lsls	r3, r3, #16
    13e2:	431c      	orrs	r4, r3
    13e4:	79cb      	ldrb	r3, [r1, #7]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    13e6:	0236      	lsls	r6, r6, #8
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    13e8:	061b      	lsls	r3, r3, #24
    13ea:	4323      	orrs	r3, r4
    13ec:	6854      	ldr	r4, [r2, #4]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
    13ee:	7b4f      	ldrb	r7, [r1, #13]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    13f0:	4063      	eors	r3, r4
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    13f2:	7a0c      	ldrb	r4, [r1, #8]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
    13f4:	023f      	lsls	r7, r7, #8
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    13f6:	4326      	orrs	r6, r4
    13f8:	7a8c      	ldrb	r4, [r1, #10]
{
    13fa:	b085      	sub	sp, #20
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    13fc:	0424      	lsls	r4, r4, #16
    13fe:	4326      	orrs	r6, r4
    1400:	7acc      	ldrb	r4, [r1, #11]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
    1402:	f240 0a10 	movw	sl, #16
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    1406:	0624      	lsls	r4, r4, #24
    1408:	4334      	orrs	r4, r6
    140a:	6896      	ldr	r6, [r2, #8]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
    140c:	4492      	add	sl, r2
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    140e:	4074      	eors	r4, r6
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
    1410:	7b0e      	ldrb	r6, [r1, #12]
    1412:	4337      	orrs	r7, r6
    1414:	7b8e      	ldrb	r6, [r1, #14]
    1416:	0436      	lsls	r6, r6, #16
    1418:	4337      	orrs	r7, r6
    141a:	7bce      	ldrb	r6, [r1, #15]
    141c:	68d1      	ldr	r1, [r2, #12]
    141e:	0636      	lsls	r6, r6, #24
    1420:	433e      	orrs	r6, r7
    1422:	404e      	eors	r6, r1
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    1424:	6801      	ldr	r1, [r0, #0]
    1426:	1049      	asrs	r1, r1, #1
    1428:	9102      	str	r1, [sp, #8]
    142a:	3901      	subs	r1, #1
    142c:	4688      	mov	r8, r1
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
    142e:	6911      	ldr	r1, [r2, #16]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    1430:	4642      	mov	r2, r8
    1432:	2a00      	cmp	r2, #0
    1434:	dc00      	bgt.n	1438 <mbedtls_internal_aes_decrypt+0x8c>
    1436:	e18f      	b.n	1758 <mbedtls_internal_aes_decrypt+0x3ac>
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
    1438:	4648      	mov	r0, r9
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    143a:	46d4      	mov	ip, sl
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
    143c:	22ff      	movs	r2, #255	; 0xff
    143e:	9501      	str	r5, [sp, #4]
    1440:	9003      	str	r0, [sp, #12]
    1442:	0017      	movs	r7, r2
    1444:	f242 20e0 	movw	r0, #8928	; 0x22e0
    1448:	9d01      	ldr	r5, [sp, #4]
    144a:	f2c0 0000 	movt	r0, #0
    144e:	402f      	ands	r7, r5
    1450:	f242 65e0 	movw	r5, #9952	; 0x26e0
    1454:	4683      	mov	fp, r0
    1456:	f2c0 0500 	movt	r5, #0
    145a:	00bf      	lsls	r7, r7, #2
    145c:	445f      	add	r7, fp
    145e:	46ab      	mov	fp, r5
    1460:	f642 25e0 	movw	r5, #10976	; 0x2ae0
    1464:	0e18      	lsrs	r0, r3, #24
    1466:	f2c0 0500 	movt	r5, #0
    146a:	0080      	lsls	r0, r0, #2
    146c:	4458      	add	r0, fp
    146e:	46ab      	mov	fp, r5
    1470:	f642 65e0 	movw	r5, #12000	; 0x2ee0
    1474:	6abf      	ldr	r7, [r7, #40]	; 0x28
    1476:	6a80      	ldr	r0, [r0, #40]	; 0x28
    1478:	f2c0 0500 	movt	r5, #0
    147c:	4078      	eors	r0, r7
    147e:	4041      	eors	r1, r0
    1480:	0a30      	lsrs	r0, r6, #8
    1482:	4010      	ands	r0, r2
    1484:	0080      	lsls	r0, r0, #2
    1486:	4458      	add	r0, fp
    1488:	46ab      	mov	fp, r5
    148a:	f242 25e0 	movw	r5, #8928	; 0x22e0
    148e:	6a80      	ldr	r0, [r0, #40]	; 0x28
    1490:	f2c0 0500 	movt	r5, #0
    1494:	4041      	eors	r1, r0
    1496:	0c20      	lsrs	r0, r4, #16
    1498:	4010      	ands	r0, r2
    149a:	0080      	lsls	r0, r0, #2
    149c:	4458      	add	r0, fp
    149e:	6a80      	ldr	r0, [r0, #40]	; 0x28
    14a0:	46ab      	mov	fp, r5
    14a2:	4041      	eors	r1, r0
    14a4:	0010      	movs	r0, r2
    14a6:	f242 65e0 	movw	r5, #9952	; 0x26e0
    14aa:	4018      	ands	r0, r3
    14ac:	f2c0 0500 	movt	r5, #0
    14b0:	0080      	lsls	r0, r0, #2
    14b2:	4458      	add	r0, fp
    14b4:	46ab      	mov	fp, r5
    14b6:	4665      	mov	r5, ip
    14b8:	0e27      	lsrs	r7, r4, #24
    14ba:	00bf      	lsls	r7, r7, #2
    14bc:	445f      	add	r7, fp
    14be:	6abf      	ldr	r7, [r7, #40]	; 0x28
    14c0:	6a80      	ldr	r0, [r0, #40]	; 0x28
    14c2:	686d      	ldr	r5, [r5, #4]
    14c4:	4078      	eors	r0, r7
    14c6:	4068      	eors	r0, r5
    14c8:	9d01      	ldr	r5, [sp, #4]
    14ca:	0a2f      	lsrs	r7, r5, #8
    14cc:	f642 25e0 	movw	r5, #10976	; 0x2ae0
    14d0:	f2c0 0500 	movt	r5, #0
    14d4:	46ab      	mov	fp, r5
    14d6:	f642 65e0 	movw	r5, #12000	; 0x2ee0
    14da:	4017      	ands	r7, r2
    14dc:	f2c0 0500 	movt	r5, #0
    14e0:	00bf      	lsls	r7, r7, #2
    14e2:	445f      	add	r7, fp
    14e4:	46ab      	mov	fp, r5
    14e6:	f242 25e0 	movw	r5, #8928	; 0x22e0
    14ea:	6abf      	ldr	r7, [r7, #40]	; 0x28
    14ec:	f2c0 0500 	movt	r5, #0
    14f0:	4078      	eors	r0, r7
    14f2:	0c37      	lsrs	r7, r6, #16
    14f4:	4017      	ands	r7, r2
    14f6:	00bf      	lsls	r7, r7, #2
    14f8:	445f      	add	r7, fp
    14fa:	6abf      	ldr	r7, [r7, #40]	; 0x28
    14fc:	46ab      	mov	fp, r5
    14fe:	4078      	eors	r0, r7
    1500:	0017      	movs	r7, r2
    1502:	f242 65e0 	movw	r5, #9952	; 0x26e0
    1506:	4027      	ands	r7, r4
    1508:	00bf      	lsls	r7, r7, #2
    150a:	f2c0 0500 	movt	r5, #0
    150e:	44bb      	add	fp, r7
    1510:	46a9      	mov	r9, r5
    1512:	465d      	mov	r5, fp
    1514:	0e37      	lsrs	r7, r6, #24
    1516:	00bf      	lsls	r7, r7, #2
    1518:	444f      	add	r7, r9
    151a:	6aad      	ldr	r5, [r5, #40]	; 0x28
    151c:	6abf      	ldr	r7, [r7, #40]	; 0x28
    151e:	4016      	ands	r6, r2
    1520:	406f      	eors	r7, r5
    1522:	4665      	mov	r5, ip
    1524:	68ad      	ldr	r5, [r5, #8]
    1526:	00b6      	lsls	r6, r6, #2
    1528:	406f      	eors	r7, r5
    152a:	0a1d      	lsrs	r5, r3, #8
    152c:	4015      	ands	r5, r2
    152e:	00ad      	lsls	r5, r5, #2
    1530:	46ab      	mov	fp, r5
    1532:	f642 25e0 	movw	r5, #10976	; 0x2ae0
    1536:	f2c0 0500 	movt	r5, #0
    153a:	46a9      	mov	r9, r5
    153c:	44cb      	add	fp, r9
    153e:	465d      	mov	r5, fp
    1540:	6aad      	ldr	r5, [r5, #40]	; 0x28
    1542:	0a24      	lsrs	r4, r4, #8
    1544:	406f      	eors	r7, r5
    1546:	9d01      	ldr	r5, [sp, #4]
    1548:	4014      	ands	r4, r2
    154a:	0c2d      	lsrs	r5, r5, #16
    154c:	4015      	ands	r5, r2
    154e:	00ad      	lsls	r5, r5, #2
    1550:	46ab      	mov	fp, r5
    1552:	f642 65e0 	movw	r5, #12000	; 0x2ee0
    1556:	f2c0 0500 	movt	r5, #0
    155a:	46a9      	mov	r9, r5
    155c:	44cb      	add	fp, r9
    155e:	465d      	mov	r5, fp
    1560:	6aad      	ldr	r5, [r5, #40]	; 0x28
    1562:	00a4      	lsls	r4, r4, #2
    1564:	406f      	eors	r7, r5
    1566:	f242 25e0 	movw	r5, #8928	; 0x22e0
    156a:	f2c0 0500 	movt	r5, #0
    156e:	46a9      	mov	r9, r5
    1570:	9d01      	ldr	r5, [sp, #4]
    1572:	444e      	add	r6, r9
    1574:	0e2d      	lsrs	r5, r5, #24
    1576:	00ad      	lsls	r5, r5, #2
    1578:	46ab      	mov	fp, r5
    157a:	f242 65e0 	movw	r5, #9952	; 0x26e0
    157e:	f2c0 0500 	movt	r5, #0
    1582:	46a9      	mov	r9, r5
    1584:	465d      	mov	r5, fp
    1586:	444d      	add	r5, r9
    1588:	6aad      	ldr	r5, [r5, #40]	; 0x28
    158a:	6ab6      	ldr	r6, [r6, #40]	; 0x28
    158c:	0c1b      	lsrs	r3, r3, #16
    158e:	406e      	eors	r6, r5
    1590:	4665      	mov	r5, ip
    1592:	68ed      	ldr	r5, [r5, #12]
    1594:	4013      	ands	r3, r2
    1596:	406e      	eors	r6, r5
    1598:	f642 25e0 	movw	r5, #10976	; 0x2ae0
    159c:	f2c0 0500 	movt	r5, #0
    15a0:	46a9      	mov	r9, r5
    15a2:	444c      	add	r4, r9
    15a4:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    15a6:	009b      	lsls	r3, r3, #2
    15a8:	4066      	eors	r6, r4
    15aa:	f642 64e0 	movw	r4, #12000	; 0x2ee0
    15ae:	f2c0 0400 	movt	r4, #0
    15b2:	46a1      	mov	r9, r4
    15b4:	444b      	add	r3, r9
    15b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    15b8:	0014      	movs	r4, r2
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
    15ba:	405e      	eors	r6, r3
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    15bc:	f242 23e0 	movw	r3, #8928	; 0x22e0
    15c0:	f242 65e0 	movw	r5, #9952	; 0x26e0
    15c4:	f2c0 0300 	movt	r3, #0
    15c8:	4699      	mov	r9, r3
    15ca:	400c      	ands	r4, r1
    15cc:	f2c0 0500 	movt	r5, #0
    15d0:	00a4      	lsls	r4, r4, #2
    15d2:	444c      	add	r4, r9
    15d4:	46a9      	mov	r9, r5
    15d6:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    15d8:	f642 24e0 	movw	r4, #10976	; 0x2ae0
    15dc:	0e03      	lsrs	r3, r0, #24
    15de:	009b      	lsls	r3, r3, #2
    15e0:	444b      	add	r3, r9
    15e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    15e4:	f2c0 0400 	movt	r4, #0
    15e8:	405d      	eors	r5, r3
    15ea:	4663      	mov	r3, ip
    15ec:	46a1      	mov	r9, r4
    15ee:	f642 64e0 	movw	r4, #12000	; 0x2ee0
    15f2:	691b      	ldr	r3, [r3, #16]
    15f4:	f2c0 0400 	movt	r4, #0
    15f8:	405d      	eors	r5, r3
    15fa:	0a33      	lsrs	r3, r6, #8
    15fc:	4013      	ands	r3, r2
    15fe:	009b      	lsls	r3, r3, #2
    1600:	444b      	add	r3, r9
    1602:	46a1      	mov	r9, r4
    1604:	f242 24e0 	movw	r4, #8928	; 0x22e0
    1608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    160a:	f2c0 0400 	movt	r4, #0
    160e:	405d      	eors	r5, r3
    1610:	0c3b      	lsrs	r3, r7, #16
    1612:	4013      	ands	r3, r2
    1614:	009b      	lsls	r3, r3, #2
    1616:	444b      	add	r3, r9
    1618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    161a:	46a1      	mov	r9, r4
    161c:	405d      	eors	r5, r3
    161e:	0013      	movs	r3, r2
    1620:	9501      	str	r5, [sp, #4]
    1622:	f242 65e0 	movw	r5, #9952	; 0x26e0
    1626:	4003      	ands	r3, r0
    1628:	f2c0 0500 	movt	r5, #0
    162c:	009b      	lsls	r3, r3, #2
    162e:	444b      	add	r3, r9
    1630:	46a9      	mov	r9, r5
    1632:	f642 25e0 	movw	r5, #10976	; 0x2ae0
    1636:	0e3c      	lsrs	r4, r7, #24
    1638:	00a4      	lsls	r4, r4, #2
    163a:	444c      	add	r4, r9
    163c:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    163e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1640:	f2c0 0500 	movt	r5, #0
    1644:	4063      	eors	r3, r4
    1646:	4664      	mov	r4, ip
    1648:	46a9      	mov	r9, r5
    164a:	f642 65e0 	movw	r5, #12000	; 0x2ee0
    164e:	6964      	ldr	r4, [r4, #20]
    1650:	f2c0 0500 	movt	r5, #0
    1654:	4063      	eors	r3, r4
    1656:	0a0c      	lsrs	r4, r1, #8
    1658:	4014      	ands	r4, r2
    165a:	00a4      	lsls	r4, r4, #2
    165c:	444c      	add	r4, r9
    165e:	46a9      	mov	r9, r5
    1660:	f242 25e0 	movw	r5, #8928	; 0x22e0
    1664:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    1666:	f2c0 0500 	movt	r5, #0
    166a:	4063      	eors	r3, r4
    166c:	0c34      	lsrs	r4, r6, #16
    166e:	4014      	ands	r4, r2
    1670:	00a4      	lsls	r4, r4, #2
    1672:	444c      	add	r4, r9
    1674:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    1676:	46ab      	mov	fp, r5
    1678:	4063      	eors	r3, r4
    167a:	0014      	movs	r4, r2
    167c:	f242 65e0 	movw	r5, #9952	; 0x26e0
    1680:	403c      	ands	r4, r7
    1682:	00a4      	lsls	r4, r4, #2
    1684:	f2c0 0500 	movt	r5, #0
    1688:	44a3      	add	fp, r4
    168a:	46a9      	mov	r9, r5
    168c:	465d      	mov	r5, fp
    168e:	0e34      	lsrs	r4, r6, #24
    1690:	00a4      	lsls	r4, r4, #2
    1692:	444c      	add	r4, r9
    1694:	6aad      	ldr	r5, [r5, #40]	; 0x28
    1696:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    1698:	4016      	ands	r6, r2
    169a:	406c      	eors	r4, r5
    169c:	4665      	mov	r5, ip
    169e:	69ad      	ldr	r5, [r5, #24]
    16a0:	00b6      	lsls	r6, r6, #2
    16a2:	406c      	eors	r4, r5
    16a4:	0a05      	lsrs	r5, r0, #8
    16a6:	4015      	ands	r5, r2
    16a8:	00ad      	lsls	r5, r5, #2
    16aa:	46ab      	mov	fp, r5
    16ac:	f642 25e0 	movw	r5, #10976	; 0x2ae0
    16b0:	f2c0 0500 	movt	r5, #0
    16b4:	46a9      	mov	r9, r5
    16b6:	44cb      	add	fp, r9
    16b8:	465d      	mov	r5, fp
    16ba:	6aad      	ldr	r5, [r5, #40]	; 0x28
    16bc:	0a3f      	lsrs	r7, r7, #8
    16be:	406c      	eors	r4, r5
    16c0:	0c0d      	lsrs	r5, r1, #16
    16c2:	4015      	ands	r5, r2
    16c4:	00ad      	lsls	r5, r5, #2
    16c6:	46ab      	mov	fp, r5
    16c8:	f642 65e0 	movw	r5, #12000	; 0x2ee0
    16cc:	f2c0 0500 	movt	r5, #0
    16d0:	46a9      	mov	r9, r5
    16d2:	44cb      	add	fp, r9
    16d4:	465d      	mov	r5, fp
    16d6:	6aad      	ldr	r5, [r5, #40]	; 0x28
    16d8:	0e09      	lsrs	r1, r1, #24
    16da:	406c      	eors	r4, r5
    16dc:	f242 25e0 	movw	r5, #8928	; 0x22e0
    16e0:	f2c0 0500 	movt	r5, #0
    16e4:	46a9      	mov	r9, r5
    16e6:	f242 65e0 	movw	r5, #9952	; 0x26e0
    16ea:	f2c0 0500 	movt	r5, #0
    16ee:	444e      	add	r6, r9
    16f0:	46a9      	mov	r9, r5
    16f2:	0089      	lsls	r1, r1, #2
    16f4:	4449      	add	r1, r9
    16f6:	6a89      	ldr	r1, [r1, #40]	; 0x28
    16f8:	6ab6      	ldr	r6, [r6, #40]	; 0x28
    16fa:	4017      	ands	r7, r2
    16fc:	404e      	eors	r6, r1
    16fe:	4661      	mov	r1, ip
    1700:	69c9      	ldr	r1, [r1, #28]
    1702:	00bf      	lsls	r7, r7, #2
    1704:	404e      	eors	r6, r1
    1706:	f642 21e0 	movw	r1, #10976	; 0x2ae0
    170a:	f2c0 0100 	movt	r1, #0
    170e:	4689      	mov	r9, r1
    1710:	444f      	add	r7, r9
    1712:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    1714:	0c00      	lsrs	r0, r0, #16
    1716:	404e      	eors	r6, r1
    1718:	f642 61e0 	movw	r1, #12000	; 0x2ee0
    171c:	f2c0 0100 	movt	r1, #0
    1720:	4689      	mov	r9, r1
    1722:	4010      	ands	r0, r2
    1724:	0080      	lsls	r0, r0, #2
    1726:	4448      	add	r0, r9
    1728:	6a81      	ldr	r1, [r0, #40]	; 0x28
    172a:	404e      	eors	r6, r1
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    172c:	2101      	movs	r1, #1
    172e:	4249      	negs	r1, r1
    1730:	4689      	mov	r9, r1
    1732:	44c8      	add	r8, r9
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    1734:	4661      	mov	r1, ip
    1736:	f240 0920 	movw	r9, #32
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    173a:	4640      	mov	r0, r8
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    173c:	6a09      	ldr	r1, [r1, #32]
    173e:	44cc      	add	ip, r9
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    1740:	2800      	cmp	r0, #0
    1742:	d000      	beq.n	1746 <mbedtls_internal_aes_decrypt+0x39a>
    1744:	e67d      	b.n	1442 <mbedtls_internal_aes_decrypt+0x96>
    1746:	48a4      	ldr	r0, [pc, #656]	; (19d8 <mbedtls_internal_aes_decrypt+0x62c>)
    1748:	9a03      	ldr	r2, [sp, #12]
    174a:	4684      	mov	ip, r0
    174c:	4691      	mov	r9, r2
    174e:	9a02      	ldr	r2, [sp, #8]
    1750:	9d01      	ldr	r5, [sp, #4]
    1752:	4462      	add	r2, ip
    1754:	0152      	lsls	r2, r2, #5
    1756:	4492      	add	sl, r2
    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
    1758:	f242 20e0 	movw	r0, #8928	; 0x22e0
    175c:	22ff      	movs	r2, #255	; 0xff
    175e:	f2c0 0000 	movt	r0, #0
    1762:	4684      	mov	ip, r0
    1764:	0e18      	lsrs	r0, r3, #24
    1766:	0017      	movs	r7, r2
    1768:	0080      	lsls	r0, r0, #2
    176a:	4680      	mov	r8, r0
    176c:	f242 60e0 	movw	r0, #9952	; 0x26e0
    1770:	402f      	ands	r7, r5
    1772:	f2c0 0000 	movt	r0, #0
    1776:	00bf      	lsls	r7, r7, #2
    1778:	4467      	add	r7, ip
    177a:	4684      	mov	ip, r0
    177c:	4640      	mov	r0, r8
    177e:	4460      	add	r0, ip
    1780:	6a80      	ldr	r0, [r0, #40]	; 0x28
    1782:	6abf      	ldr	r7, [r7, #40]	; 0x28
    1784:	4047      	eors	r7, r0
    1786:	f642 20e0 	movw	r0, #10976	; 0x2ae0
    178a:	f2c0 0000 	movt	r0, #0
    178e:	4684      	mov	ip, r0
    1790:	f642 60e0 	movw	r0, #12000	; 0x2ee0
    1794:	404f      	eors	r7, r1
    1796:	0a31      	lsrs	r1, r6, #8
    1798:	4011      	ands	r1, r2
    179a:	f2c0 0000 	movt	r0, #0
    179e:	0089      	lsls	r1, r1, #2
    17a0:	4461      	add	r1, ip
    17a2:	4684      	mov	ip, r0
    17a4:	6a89      	ldr	r1, [r1, #40]	; 0x28
    17a6:	0010      	movs	r0, r2
    17a8:	404f      	eors	r7, r1
    17aa:	0c21      	lsrs	r1, r4, #16
    17ac:	4011      	ands	r1, r2
    17ae:	0089      	lsls	r1, r1, #2
    17b0:	4461      	add	r1, ip
    17b2:	6a89      	ldr	r1, [r1, #40]	; 0x28
    17b4:	4018      	ands	r0, r3
    17b6:	404f      	eors	r7, r1
    17b8:	f242 21e0 	movw	r1, #8928	; 0x22e0
    17bc:	46bb      	mov	fp, r7
    17be:	f2c0 0100 	movt	r1, #0
    17c2:	f242 67e0 	movw	r7, #9952	; 0x26e0
    17c6:	468c      	mov	ip, r1
    17c8:	f2c0 0700 	movt	r7, #0
    17cc:	0080      	lsls	r0, r0, #2
    17ce:	4460      	add	r0, ip
    17d0:	46bc      	mov	ip, r7
    17d2:	f642 27e0 	movw	r7, #10976	; 0x2ae0
    17d6:	0e21      	lsrs	r1, r4, #24
    17d8:	0089      	lsls	r1, r1, #2
    17da:	4461      	add	r1, ip
    17dc:	6a89      	ldr	r1, [r1, #40]	; 0x28
    17de:	6a80      	ldr	r0, [r0, #40]	; 0x28
    17e0:	f2c0 0700 	movt	r7, #0
    17e4:	4048      	eors	r0, r1
    17e6:	4651      	mov	r1, sl
    17e8:	46bc      	mov	ip, r7
    17ea:	f642 67e0 	movw	r7, #12000	; 0x2ee0
    17ee:	6849      	ldr	r1, [r1, #4]
    17f0:	f2c0 0700 	movt	r7, #0
    17f4:	4048      	eors	r0, r1
    17f6:	0a29      	lsrs	r1, r5, #8
    17f8:	4011      	ands	r1, r2
    17fa:	0089      	lsls	r1, r1, #2
    17fc:	4461      	add	r1, ip
    17fe:	46bc      	mov	ip, r7
    1800:	f242 27e0 	movw	r7, #8928	; 0x22e0
    1804:	6a89      	ldr	r1, [r1, #40]	; 0x28
    1806:	f2c0 0700 	movt	r7, #0
    180a:	4048      	eors	r0, r1
    180c:	0c31      	lsrs	r1, r6, #16
    180e:	4011      	ands	r1, r2
    1810:	0089      	lsls	r1, r1, #2
    1812:	4461      	add	r1, ip
    1814:	6a89      	ldr	r1, [r1, #40]	; 0x28
    1816:	46bc      	mov	ip, r7
    1818:	4048      	eors	r0, r1
    181a:	0011      	movs	r1, r2
    181c:	f242 67e0 	movw	r7, #9952	; 0x26e0
    1820:	4021      	ands	r1, r4
    1822:	0089      	lsls	r1, r1, #2
    1824:	f2c0 0700 	movt	r7, #0
    1828:	448c      	add	ip, r1
    182a:	46b8      	mov	r8, r7
    182c:	4667      	mov	r7, ip
    182e:	0e31      	lsrs	r1, r6, #24
    1830:	0089      	lsls	r1, r1, #2
    1832:	4441      	add	r1, r8
    1834:	6abf      	ldr	r7, [r7, #40]	; 0x28
    1836:	6a89      	ldr	r1, [r1, #40]	; 0x28
    1838:	4016      	ands	r6, r2
    183a:	4079      	eors	r1, r7
    183c:	4657      	mov	r7, sl
    183e:	68bf      	ldr	r7, [r7, #8]
    1840:	00b6      	lsls	r6, r6, #2
    1842:	4079      	eors	r1, r7
    1844:	0a1f      	lsrs	r7, r3, #8
    1846:	4017      	ands	r7, r2
    1848:	00bf      	lsls	r7, r7, #2
    184a:	46bc      	mov	ip, r7
    184c:	f642 27e0 	movw	r7, #10976	; 0x2ae0
    1850:	f2c0 0700 	movt	r7, #0
    1854:	46b8      	mov	r8, r7
    1856:	44c4      	add	ip, r8
    1858:	4667      	mov	r7, ip
    185a:	6abf      	ldr	r7, [r7, #40]	; 0x28
    185c:	0a24      	lsrs	r4, r4, #8
    185e:	4079      	eors	r1, r7
    1860:	0c2f      	lsrs	r7, r5, #16
    1862:	4017      	ands	r7, r2
    1864:	00bf      	lsls	r7, r7, #2
    1866:	46bc      	mov	ip, r7
    1868:	f642 67e0 	movw	r7, #12000	; 0x2ee0
    186c:	f2c0 0700 	movt	r7, #0
    1870:	46b8      	mov	r8, r7
    1872:	44c4      	add	ip, r8
    1874:	4667      	mov	r7, ip
    1876:	6abf      	ldr	r7, [r7, #40]	; 0x28
    1878:	0e2d      	lsrs	r5, r5, #24
    187a:	4079      	eors	r1, r7
    187c:	f242 27e0 	movw	r7, #8928	; 0x22e0
    1880:	f2c0 0700 	movt	r7, #0
    1884:	46bc      	mov	ip, r7
    1886:	f242 67e0 	movw	r7, #9952	; 0x26e0
    188a:	f2c0 0700 	movt	r7, #0
    188e:	4466      	add	r6, ip
    1890:	46bc      	mov	ip, r7
    1892:	00ad      	lsls	r5, r5, #2
    1894:	4465      	add	r5, ip
    1896:	6ab6      	ldr	r6, [r6, #40]	; 0x28
    1898:	6aad      	ldr	r5, [r5, #40]	; 0x28
    189a:	4014      	ands	r4, r2
    189c:	4075      	eors	r5, r6
    189e:	4656      	mov	r6, sl
    18a0:	68f6      	ldr	r6, [r6, #12]
    18a2:	0c1b      	lsrs	r3, r3, #16
    18a4:	4075      	eors	r5, r6
    18a6:	f642 26e0 	movw	r6, #10976	; 0x2ae0
    18aa:	f2c0 0600 	movt	r6, #0
    18ae:	46b4      	mov	ip, r6
    18b0:	4013      	ands	r3, r2
    18b2:	00a4      	lsls	r4, r4, #2
    18b4:	4464      	add	r4, ip
    18b6:	009b      	lsls	r3, r3, #2
    18b8:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    18ba:	4443      	add	r3, r8
    18bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    18be:	406c      	eors	r4, r5
    18c0:	405c      	eors	r4, r3
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
    18c2:	f244 23e0 	movw	r3, #17120	; 0x42e0
    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
    18c6:	46a4      	mov	ip, r4
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
    18c8:	465d      	mov	r5, fp
    18ca:	0014      	movs	r4, r2
    18cc:	f2c0 0300 	movt	r3, #0
    18d0:	3328      	adds	r3, #40	; 0x28
    18d2:	402c      	ands	r4, r5
    18d4:	5d1e      	ldrb	r6, [r3, r4]
    X0 = *RK++ ^ \
    18d6:	4654      	mov	r4, sl
    18d8:	6924      	ldr	r4, [r4, #16]
    X2 = *RK++ ^ \
    18da:	4657      	mov	r7, sl
    X0 = *RK++ ^ \
    18dc:	4066      	eors	r6, r4
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
    18de:	0e04      	lsrs	r4, r0, #24
    18e0:	5d1c      	ldrb	r4, [r3, r4]
    X2 = *RK++ ^ \
    18e2:	69bf      	ldr	r7, [r7, #24]
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
    18e4:	0624      	lsls	r4, r4, #24
    X0 = *RK++ ^ \
    18e6:	4066      	eors	r6, r4
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
    18e8:	4664      	mov	r4, ip
    18ea:	0a24      	lsrs	r4, r4, #8
    18ec:	4014      	ands	r4, r2
    18ee:	5d1c      	ldrb	r4, [r3, r4]
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
    18f0:	9101      	str	r1, [sp, #4]
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
    18f2:	0224      	lsls	r4, r4, #8
    X0 = *RK++ ^ \
    18f4:	4066      	eors	r6, r4
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
    18f6:	0c0c      	lsrs	r4, r1, #16
    18f8:	4014      	ands	r4, r2
    18fa:	5d1c      	ldrb	r4, [r3, r4]
    18fc:	0424      	lsls	r4, r4, #16
    X0 = *RK++ ^ \
    18fe:	4066      	eors	r6, r4
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
    1900:	0014      	movs	r4, r2
    1902:	4004      	ands	r4, r0
    1904:	5d1d      	ldrb	r5, [r3, r4]
    X1 = *RK++ ^ \
    1906:	4654      	mov	r4, sl
    1908:	6964      	ldr	r4, [r4, #20]
    190a:	4065      	eors	r5, r4
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
    190c:	0e0c      	lsrs	r4, r1, #24
    190e:	5d1c      	ldrb	r4, [r3, r4]
    1910:	0624      	lsls	r4, r4, #24
    X1 = *RK++ ^ \
    1912:	4065      	eors	r5, r4
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
    1914:	465c      	mov	r4, fp
    1916:	0a24      	lsrs	r4, r4, #8
    1918:	4014      	ands	r4, r2
    191a:	5d1c      	ldrb	r4, [r3, r4]
    191c:	0224      	lsls	r4, r4, #8
    X1 = *RK++ ^ \
    191e:	4065      	eors	r5, r4
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
    1920:	4664      	mov	r4, ip
    1922:	0c24      	lsrs	r4, r4, #16
    1924:	4014      	ands	r4, r2
    1926:	5d1c      	ldrb	r4, [r3, r4]
    1928:	0424      	lsls	r4, r4, #16
    X1 = *RK++ ^ \
    192a:	4065      	eors	r5, r4
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
    192c:	0014      	movs	r4, r2
    192e:	400c      	ands	r4, r1
    1930:	5d1c      	ldrb	r4, [r3, r4]
    X2 = *RK++ ^ \
    1932:	4067      	eors	r7, r4
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
    1934:	4664      	mov	r4, ip
    1936:	0e24      	lsrs	r4, r4, #24
    1938:	5d1c      	ldrb	r4, [r3, r4]
    193a:	0624      	lsls	r4, r4, #24
    X2 = *RK++ ^ \
    193c:	407c      	eors	r4, r7
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
    193e:	0a07      	lsrs	r7, r0, #8
    1940:	4017      	ands	r7, r2
    1942:	5ddf      	ldrb	r7, [r3, r7]
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
    1944:	0c00      	lsrs	r0, r0, #16
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
    1946:	023f      	lsls	r7, r7, #8
    X2 = *RK++ ^ \
    1948:	407c      	eors	r4, r7
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
    194a:	465f      	mov	r7, fp
    194c:	0c3f      	lsrs	r7, r7, #16
    194e:	4017      	ands	r7, r2
    1950:	5ddf      	ldrb	r7, [r3, r7]
    1952:	043f      	lsls	r7, r7, #16
    X2 = *RK++ ^ \
    1954:	407c      	eors	r4, r7
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
    1956:	4667      	mov	r7, ip
    1958:	4017      	ands	r7, r2
    195a:	5ddf      	ldrb	r7, [r3, r7]
    195c:	46bc      	mov	ip, r7
    X3 = *RK++ ^ \
    195e:	4657      	mov	r7, sl
    1960:	69ff      	ldr	r7, [r7, #28]
    1962:	46b8      	mov	r8, r7
    1964:	4667      	mov	r7, ip
    1966:	4641      	mov	r1, r8
    1968:	404f      	eors	r7, r1
    196a:	46bc      	mov	ip, r7
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
    196c:	465f      	mov	r7, fp
    X3 = *RK++ ^ \
    196e:	4661      	mov	r1, ip
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
    1970:	0e3f      	lsrs	r7, r7, #24
    1972:	5ddf      	ldrb	r7, [r3, r7]
    1974:	063f      	lsls	r7, r7, #24
    X3 = *RK++ ^ \
    1976:	404f      	eors	r7, r1
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
    1978:	9901      	ldr	r1, [sp, #4]
    197a:	0a09      	lsrs	r1, r1, #8
    197c:	4011      	ands	r1, r2
    197e:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
    1980:	4002      	ands	r2, r0
    1982:	5c9b      	ldrb	r3, [r3, r2]
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
    1984:	0209      	lsls	r1, r1, #8
    X3 = *RK++ ^ \
    1986:	4079      	eors	r1, r7
    PUT_UINT32_LE( X0, output,  0 );
    1988:	464a      	mov	r2, r9
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
    198a:	041b      	lsls	r3, r3, #16
    X3 = *RK++ ^ \
    198c:	404b      	eors	r3, r1
    PUT_UINT32_LE( X0, output,  0 );
    198e:	4649      	mov	r1, r9
}
    1990:	2000      	movs	r0, #0
    PUT_UINT32_LE( X0, output,  0 );
    1992:	7016      	strb	r6, [r2, #0]
    1994:	0a32      	lsrs	r2, r6, #8
    1996:	704a      	strb	r2, [r1, #1]
    1998:	0c32      	lsrs	r2, r6, #16
    199a:	708a      	strb	r2, [r1, #2]
    PUT_UINT32_LE( X1, output,  4 );
    199c:	0a2a      	lsrs	r2, r5, #8
    199e:	714a      	strb	r2, [r1, #5]
    19a0:	0c2a      	lsrs	r2, r5, #16
    19a2:	718a      	strb	r2, [r1, #6]
    PUT_UINT32_LE( X2, output,  8 );
    19a4:	0a22      	lsrs	r2, r4, #8
    19a6:	724a      	strb	r2, [r1, #9]
    19a8:	0c22      	lsrs	r2, r4, #16
    19aa:	728a      	strb	r2, [r1, #10]
    PUT_UINT32_LE( X3, output, 12 );
    19ac:	0a1a      	lsrs	r2, r3, #8
    PUT_UINT32_LE( X0, output,  0 );
    19ae:	0e36      	lsrs	r6, r6, #24
    PUT_UINT32_LE( X1, output,  4 );
    19b0:	710d      	strb	r5, [r1, #4]
    PUT_UINT32_LE( X2, output,  8 );
    19b2:	720c      	strb	r4, [r1, #8]
    PUT_UINT32_LE( X1, output,  4 );
    19b4:	0e2d      	lsrs	r5, r5, #24
    PUT_UINT32_LE( X2, output,  8 );
    19b6:	0e24      	lsrs	r4, r4, #24
    PUT_UINT32_LE( X3, output, 12 );
    19b8:	730b      	strb	r3, [r1, #12]
    19ba:	734a      	strb	r2, [r1, #13]
    19bc:	0c1a      	lsrs	r2, r3, #16
    19be:	0e1b      	lsrs	r3, r3, #24
    PUT_UINT32_LE( X0, output,  0 );
    19c0:	70ce      	strb	r6, [r1, #3]
    PUT_UINT32_LE( X1, output,  4 );
    19c2:	71cd      	strb	r5, [r1, #7]
    PUT_UINT32_LE( X2, output,  8 );
    19c4:	72cc      	strb	r4, [r1, #11]
    PUT_UINT32_LE( X3, output, 12 );
    19c6:	738a      	strb	r2, [r1, #14]
    19c8:	73cb      	strb	r3, [r1, #15]
}
    19ca:	b005      	add	sp, #20
    19cc:	bc3c      	pop	{r2, r3, r4, r5}
    19ce:	4690      	mov	r8, r2
    19d0:	4699      	mov	r9, r3
    19d2:	46a2      	mov	sl, r4
    19d4:	46ab      	mov	fp, r5
    19d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    19d8:	07ffffff 	.word	0x07ffffff

000019dc <mbedtls_aes_crypt_ecb>:
{
    19dc:	b510      	push	{r4, lr}
    19de:	0014      	movs	r4, r2
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
    19e0:	001a      	movs	r2, r3
    if( mode == MBEDTLS_AES_ENCRYPT )
    19e2:	2901      	cmp	r1, #1
    19e4:	d006      	beq.n	19f4 <mbedtls_aes_crypt_ecb+0x18>
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
    19e6:	f241 33ad 	movw	r3, #5037	; 0x13ad
    19ea:	0021      	movs	r1, r4
    19ec:	f2c0 0300 	movt	r3, #0
    19f0:	4798      	blx	r3
}
    19f2:	bd10      	pop	{r4, pc}
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
    19f4:	f640 5389 	movw	r3, #3465	; 0xd89
    19f8:	0021      	movs	r1, r4
    19fa:	f2c0 0300 	movt	r3, #0
    19fe:	4798      	blx	r3
    1a00:	e7f7      	b.n	19f2 <mbedtls_aes_crypt_ecb+0x16>
    1a02:	46c0      	nop			; (mov r8, r8)

00001a04 <mbedtls_platform_zeroize>:
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
    memset_func( buf, 0, len );
    1a04:	f240 0300 	movw	r3, #0
{
    1a08:	b510      	push	{r4, lr}
    memset_func( buf, 0, len );
    1a0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
{
    1a0e:	000a      	movs	r2, r1
    memset_func( buf, 0, len );
    1a10:	681b      	ldr	r3, [r3, #0]
    1a12:	2100      	movs	r1, #0
    1a14:	4798      	blx	r3
}
    1a16:	bd10      	pop	{r4, pc}

00001a18 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
    1a18:	f641 23e1 	movw	r3, #6881	; 0x1ae1
{
    1a1c:	b510      	push	{r4, lr}
	system_init();
    1a1e:	f2c0 0300 	movt	r3, #0
    1a22:	4798      	blx	r3
 * \brief TrustZone Manager Initialization.
 */
static inline void trustzone_manager_init(void)
{
	/* Setup Port Security Attribution of I/O Pins */
	PORT_SEC->Group[0].NONSEC.reg = CONF_PORT_INIT_NONSEC0_VAL;
    1a24:	f243 2300 	movw	r3, #12800	; 0x3200
    1a28:	2200      	movs	r2, #0
    1a2a:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1a2e:	66da      	str	r2, [r3, #108]	; 0x6c

	/* Setup NVIC Interrupt Target Non-Secure state */
	NVIC->ITNS[0] = CONF_NVIC_INIT_ITNS0_VAL;
    1a30:	f24e 1300 	movw	r3, #57600	; 0xe100
    1a34:	f240 2180 	movw	r1, #640	; 0x280
    1a38:	f2ce 0300 	movt	r3, #57344	; 0xe000
    1a3c:	505a      	str	r2, [r3, r1]
	NVIC->ITNS[1] = CONF_NVIC_INIT_ITNS1_VAL;
    1a3e:	3104      	adds	r1, #4
    1a40:	505a      	str	r2, [r3, r1]
	trustzone_manager_init();
	
	gpio_init();
    1a42:	f240 239d 	movw	r3, #669	; 0x29d
    1a46:	f2c0 0300 	movt	r3, #0
    1a4a:	4798      	blx	r3
}
    1a4c:	bd10      	pop	{r4, pc}
    1a4e:	46c0      	nop			; (mov r8, r8)

00001a50 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1a50:	e7fe      	b.n	1a50 <Dummy_Handler>
    1a52:	46c0      	nop			; (mov r8, r8)

00001a54 <Reset_Handler>:
        if (pSrc != pDest) {
    1a54:	f644 3104 	movw	r1, #19204	; 0x4b04
    1a58:	f240 0000 	movw	r0, #0
    1a5c:	f2c0 0100 	movt	r1, #0
    1a60:	f2c2 0000 	movt	r0, #8192	; 0x2000
{
    1a64:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    1a66:	4281      	cmp	r1, r0
    1a68:	d00f      	beq.n	1a8a <Reset_Handler+0x36>
                for (; pDest < &_erelocate;) {
    1a6a:	f240 0368 	movw	r3, #104	; 0x68
    1a6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1a72:	4298      	cmp	r0, r3
    1a74:	d209      	bcs.n	1a8a <Reset_Handler+0x36>
                        *pDest++ = *pSrc++;
    1a76:	43c2      	mvns	r2, r0
    1a78:	18d2      	adds	r2, r2, r3
    1a7a:	f242 0349 	movw	r3, #8265	; 0x2049
    1a7e:	0892      	lsrs	r2, r2, #2
    1a80:	3201      	adds	r2, #1
    1a82:	0092      	lsls	r2, r2, #2
    1a84:	f2c0 0300 	movt	r3, #0
    1a88:	4798      	blx	r3
        for (pDest = &_szero; pDest < &_ezero;) {
    1a8a:	f240 0068 	movw	r0, #104	; 0x68
    1a8e:	f240 23c8 	movw	r3, #712	; 0x2c8
    1a92:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1a96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1a9a:	4298      	cmp	r0, r3
    1a9c:	d20a      	bcs.n	1ab4 <Reset_Handler+0x60>
                *pDest++ = 0;
    1a9e:	43c2      	mvns	r2, r0
    1aa0:	18d2      	adds	r2, r2, r3
    1aa2:	f242 035b 	movw	r3, #8283	; 0x205b
    1aa6:	0892      	lsrs	r2, r2, #2
    1aa8:	3201      	adds	r2, #1
    1aaa:	0092      	lsls	r2, r2, #2
    1aac:	2100      	movs	r1, #0
    1aae:	f2c0 0300 	movt	r3, #0
    1ab2:	4798      	blx	r3
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1ab4:	f240 0300 	movw	r3, #0
    1ab8:	227f      	movs	r2, #127	; 0x7f
    1aba:	f2c0 0300 	movt	r3, #0
    1abe:	4393      	bics	r3, r2
    1ac0:	f64e 5200 	movw	r2, #60672	; 0xed00
    1ac4:	f2ce 0200 	movt	r2, #57344	; 0xe000
    1ac8:	6093      	str	r3, [r2, #8]
        __libc_init_array();
    1aca:	f641 73d1 	movw	r3, #8145	; 0x1fd1
    1ace:	f2c0 0300 	movt	r3, #0
    1ad2:	4798      	blx	r3
        main();
    1ad4:	f641 53c5 	movw	r3, #7621	; 0x1dc5
    1ad8:	f2c0 0300 	movt	r3, #0
    1adc:	4798      	blx	r3
    1ade:	e7fe      	b.n	1ade <Reset_Handler+0x8a>

00001ae0 <system_init>:
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    1ae0:	f641 3379 	movw	r3, #7033	; 0x1b79
	hri_mclk_set_APBBMASK_NVMCTRL_bit(MCLK);
#endif
}

void system_init(void)
{
    1ae4:	b510      	push	{r4, lr}
    1ae6:	f2c0 0300 	movt	r3, #0
    1aea:	4798      	blx	r3
}

static inline void hri_mclk_set_AHBMASK_NVMCTRL_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
    1aec:	f640 0300 	movw	r3, #2048	; 0x800
    1af0:	2180      	movs	r1, #128	; 0x80
    1af2:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1af6:	691a      	ldr	r2, [r3, #16]
    1af8:	430a      	orrs	r2, r1
    1afa:	611a      	str	r2, [r3, #16]
}

static inline void hri_mclk_set_APBBMASK_NVMCTRL_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_NVMCTRL;
    1afc:	699a      	ldr	r2, [r3, #24]
    1afe:	397c      	subs	r1, #124	; 0x7c
    1b00:	430a      	orrs	r2, r1
    1b02:	619a      	str	r2, [r3, #24]
	/* Only initialize MCU clock when the project is TrustZone secure project  */
	init_mcu();
#endif

	FLASH_0_clock_init();
	FLASH_0_init();
    1b04:	f641 33f9 	movw	r3, #7161	; 0x1bf9
    1b08:	f2c0 0300 	movt	r3, #0
    1b0c:	4798      	blx	r3
}
    1b0e:	bd10      	pop	{r4, pc}

00001b10 <delay_ms>:
/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    1b10:	f240 0384 	movw	r3, #132	; 0x84
    1b14:	f2c2 0300 	movt	r3, #8192	; 0x2000
{
    1b18:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    1b1a:	681c      	ldr	r4, [r3, #0]
    1b1c:	f641 3359 	movw	r3, #7001	; 0x1b59
    1b20:	f2c0 0300 	movt	r3, #0
    1b24:	4798      	blx	r3
    1b26:	f641 3371 	movw	r3, #7025	; 0x1b71
    1b2a:	0001      	movs	r1, r0
    1b2c:	f2c0 0300 	movt	r3, #0
    1b30:	0020      	movs	r0, r4
    1b32:	4798      	blx	r3
}
    1b34:	bd10      	pop	{r4, pc}
    1b36:	46c0      	nop			; (mov r8, r8)

00001b38 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    1b38:	f240 0388 	movw	r3, #136	; 0x88
    1b3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1b40:	681a      	ldr	r2, [r3, #0]
    1b42:	b11a      	cbz	r2, 1b4c <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	heap += incr;
    1b44:	1810      	adds	r0, r2, r0
    1b46:	6018      	str	r0, [r3, #0]

	return (caddr_t)prev_heap;
}
    1b48:	0010      	movs	r0, r2
    1b4a:	4770      	bx	lr
    1b4c:	f640 02c8 	movw	r2, #2248	; 0x8c8
    1b50:	f2c2 0200 	movt	r2, #8192	; 0x2000
    1b54:	e7f6      	b.n	1b44 <_sbrk+0xc>
    1b56:	46c0      	nop			; (mov r8, r8)

00001b58 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    1b58:	0003      	movs	r3, r0
		return (ms * (freq / 10000) + 2) / 3 * 10;
    1b5a:	f240 1090 	movw	r0, #400	; 0x190
    1b5e:	4358      	muls	r0, r3
    1b60:	2303      	movs	r3, #3
    1b62:	3002      	adds	r0, #2
    1b64:	fbb0 f0f3 	udiv	r0, r0, r3
    1b68:	0083      	lsls	r3, r0, #2
    1b6a:	1818      	adds	r0, r3, r0
    1b6c:	0040      	lsls	r0, r0, #1
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    1b6e:	4770      	bx	lr

00001b70 <_delay_cycles>:
#if defined(__GNUC__) && (__ARMCOMPILER_VERSION > 6000000) /*  Keil MDK with ARM Compiler 6 */
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    1b70:	3901      	subs	r1, #1
    1b72:	d8fd      	bhi.n	1b70 <_delay_cycles>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#endif
#endif
}
    1b74:	4770      	bx	lr
    1b76:	46c0      	nop			; (mov r8, r8)

00001b78 <_init_chip>:
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    1b78:	f245 0300 	movw	r3, #20480	; 0x5000

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1b7c:	b510      	push	{r4, lr}
    1b7e:	f2c4 1300 	movt	r3, #16640	; 0x4100
    1b82:	685a      	ldr	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL_SEC, CONF_NVM_WAIT_STATE);
#else
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
#endif

	_set_performance_level(CONF_PERFORMANCE_LEVEL);
    1b84:	2000      	movs	r0, #0
    1b86:	605a      	str	r2, [r3, #4]
    1b88:	f641 539d 	movw	r3, #7581	; 0x1d9d
    1b8c:	f2c0 0300 	movt	r3, #0
    1b90:	4798      	blx	r3

	_osc32kctrl_init_sources();
    1b92:	f641 5361 	movw	r3, #7521	; 0x1d61
    1b96:	f2c0 0300 	movt	r3, #0
    1b9a:	4798      	blx	r3
	_oscctrl_init_sources();
    1b9c:	f641 5379 	movw	r3, #7545	; 0x1d79
    1ba0:	f2c0 0300 	movt	r3, #0
    1ba4:	4798      	blx	r3
	_mclk_init();
    1ba6:	f641 33e9 	movw	r3, #7145	; 0x1be9
    1baa:	f2c0 0300 	movt	r3, #0
    1bae:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    1bb0:	f641 5399 	movw	r3, #7577	; 0x1d99
    1bb4:	f2c0 0300 	movt	r3, #0
    1bb8:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    1bba:	f641 33c9 	movw	r3, #7113	; 0x1bc9
    1bbe:	201f      	movs	r0, #31
    1bc0:	f2c0 0300 	movt	r3, #0
    1bc4:	4798      	blx	r3
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
    1bc6:	bd10      	pop	{r4, pc}

00001bc8 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1bc8:	07c3      	lsls	r3, r0, #31
    1bca:	d50c      	bpl.n	1be6 <_gclk_init_generators_by_fref+0x1e>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1bcc:	f641 4200 	movw	r2, #7168	; 0x1c00
    1bd0:	f240 1305 	movw	r3, #261	; 0x105
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1bd4:	217d      	movs	r1, #125	; 0x7d
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1bd6:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1bda:	f2c0 0301 	movt	r3, #1
    1bde:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1be0:	6853      	ldr	r3, [r2, #4]
    1be2:	4219      	tst	r1, r3
    1be4:	d1fc      	bne.n	1be0 <_gclk_init_generators_by_fref+0x18>
		        | (CONF_GCLK_GEN_4_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_4_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_4_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_4_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif
}
    1be6:	4770      	bx	lr

00001be8 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    1be8:	f640 0300 	movw	r3, #2048	; 0x800
    1bec:	2201      	movs	r2, #1
    1bee:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1bf2:	711a      	strb	r2, [r3, #4]
 */
void _mclk_init(void)
{
	void *hw = (void *)MCLK;
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
}
    1bf4:	4770      	bx	lr
    1bf6:	46c0      	nop			; (mov r8, r8)

00001bf8 <FLASH_0_init>:
	//		 | 0 << NVMCTRL_SECCTRL_DSCEN_Pos /* Setting: disabled */
	//		 | 0 << NVMCTRL_SECCTRL_SILACC_Pos /* Setting: disabled */
	//		 | 0 << NVMCTRL_SECCTRL_TAMPEEN_Pos); /* Setting: disabled */

	return ERR_NONE;
}
    1bf8:	2000      	movs	r0, #0
    1bfa:	4770      	bx	lr

00001bfc <FLASH_0_erase_row>:
	return (((Nvmctrl *)hw)->STATUS.reg & NVMCTRL_STATUS_READY_Msk) >> NVMCTRL_STATUS_READY_Pos;
    1bfc:	f245 0200 	movw	r2, #20480	; 0x5000
 * \brief Execute a command on the NVM controller
 */
int32_t FLASH_0_exec_cmd(const enum nvm_cmd cmd, uint32_t dst_addr)
{
	/* Wait until this module isn't busy */
	while (!hri_nvmctrl_get_STATUS_READY_bit(_NVMCTRL)) {
    1c00:	2104      	movs	r1, #4
    1c02:	f2c4 1200 	movt	r2, #16640	; 0x4100
    1c06:	8b13      	ldrh	r3, [r2, #24]
    1c08:	4219      	tst	r1, r3
    1c0a:	d0fc      	beq.n	1c06 <FLASH_0_erase_row+0xa>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    1c0c:	233f      	movs	r3, #63	; 0x3f
    1c0e:	7513      	strb	r3, [r2, #20]
}

static inline void hri_nvmctrl_write_CTRLA_reg(const void *const hw, hri_nvmctrl_ctrla_reg_t data)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg = data;
    1c10:	4b0a      	ldr	r3, [pc, #40]	; (1c3c <FLASH_0_erase_row+0x40>)
	((Nvmctrl *)hw)->ADDR.reg = data;
    1c12:	61d0      	str	r0, [r2, #28]
	((Nvmctrl *)hw)->CTRLA.reg = data;
    1c14:	8013      	strh	r3, [r2, #0]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE_Msk) >> NVMCTRL_INTFLAG_DONE_Pos;
    1c16:	f245 0300 	movw	r3, #20480	; 0x5000

	/* Set command */
	hri_nvmctrl_write_CTRLA_reg(_NVMCTRL, cmd | NVMCTRL_CTRLA_CMDEX_KEY);

	/* Wait until the command done */
	while (!hri_nvmctrl_get_interrupt_DONE_bit(_NVMCTRL)) {
    1c1a:	2101      	movs	r1, #1
    1c1c:	f2c4 1300 	movt	r3, #16640	; 0x4100
	tmp &= mask;
    1c20:	201e      	movs	r0, #30
    1c22:	e002      	b.n	1c2a <FLASH_0_erase_row+0x2e>
	tmp = ((Nvmctrl *)hw)->INTFLAG.reg;
    1c24:	7d1a      	ldrb	r2, [r3, #20]
		/* Check if there is error in NVM erase operation */
		if (hri_nvmctrl_get_INTFLAG_reg(
    1c26:	4210      	tst	r0, r2
    1c28:	d104      	bne.n	1c34 <FLASH_0_erase_row+0x38>
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE_Msk) >> NVMCTRL_INTFLAG_DONE_Pos;
    1c2a:	7d1a      	ldrb	r2, [r3, #20]
	while (!hri_nvmctrl_get_interrupt_DONE_bit(_NVMCTRL)) {
    1c2c:	4211      	tst	r1, r2
    1c2e:	d0f9      	beq.n	1c24 <FLASH_0_erase_row+0x28>
		    != 0) {
			return ERR_FAILURE;
		}
	}

	return ERR_NONE;
    1c30:	2000      	movs	r0, #0
 * \brief Erase a row in NVM memory
 */
int32_t FLASH_0_erase_row(const uint32_t dst_addr)
{
	return FLASH_0_exec_cmd(NVM_CMD_ERASE_ROW, dst_addr);
}
    1c32:	4770      	bx	lr
			return ERR_FAILURE;
    1c34:	201e      	movs	r0, #30
    1c36:	4240      	negs	r0, r0
	return FLASH_0_exec_cmd(NVM_CMD_ERASE_ROW, dst_addr);
    1c38:	e7fb      	b.n	1c32 <FLASH_0_erase_row+0x36>
    1c3a:	46c0      	nop			; (mov r8, r8)
    1c3c:	ffffa502 	.word	0xffffa502

00001c40 <FLASH_0_write_page>:

/**
 * \brief Write (program) a page in NVM memory
 */
int32_t FLASH_0_write_page(const uint32_t dst_addr, const uint8_t *buffer, const uint16_t length)
{
    1c40:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (dst_addr & (NVMCTRL_PAGE_SIZE - 1)) {
    1c42:	0683      	lsls	r3, r0, #26
    1c44:	d101      	bne.n	1c4a <FLASH_0_write_page+0xa>
	if (length > NVMCTRL_PAGE_SIZE) {
    1c46:	2a40      	cmp	r2, #64	; 0x40
    1c48:	d902      	bls.n	1c50 <FLASH_0_write_page+0x10>
    1c4a:	200d      	movs	r0, #13
    1c4c:	4240      	negs	r0, r0
			rc = FLASH_0_exec_cmd(NVM_CMD_WRITE_PAGE, dst_addr);
		}
	}

	return rc;
}
    1c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (((Nvmctrl *)hw)->STATUS.reg & NVMCTRL_STATUS_READY_Msk) >> NVMCTRL_STATUS_READY_Pos;
    1c50:	f245 0400 	movw	r4, #20480	; 0x5000
	while (!hri_nvmctrl_get_STATUS_READY_bit(_NVMCTRL)) {
    1c54:	2504      	movs	r5, #4
    1c56:	f2c4 1400 	movt	r4, #16640	; 0x4100
    1c5a:	8b23      	ldrh	r3, [r4, #24]
    1c5c:	421d      	tst	r5, r3
    1c5e:	d0fc      	beq.n	1c5a <FLASH_0_write_page+0x1a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    1c60:	233f      	movs	r3, #63	; 0x3f
    1c62:	7523      	strb	r3, [r4, #20]
	((Nvmctrl *)hw)->CTRLA.reg = data;
    1c64:	4b28      	ldr	r3, [pc, #160]	; (1d08 <FLASH_0_write_page+0xc8>)
	while (!hri_nvmctrl_get_interrupt_DONE_bit(_NVMCTRL)) {
    1c66:	2501      	movs	r5, #1
    1c68:	8023      	strh	r3, [r4, #0]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE_Msk) >> NVMCTRL_INTFLAG_DONE_Pos;
    1c6a:	f245 0300 	movw	r3, #20480	; 0x5000
	tmp &= mask;
    1c6e:	261e      	movs	r6, #30
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE_Msk) >> NVMCTRL_INTFLAG_DONE_Pos;
    1c70:	f2c4 1300 	movt	r3, #16640	; 0x4100
    1c74:	e002      	b.n	1c7c <FLASH_0_write_page+0x3c>
	tmp = ((Nvmctrl *)hw)->INTFLAG.reg;
    1c76:	7d1c      	ldrb	r4, [r3, #20]
		if (hri_nvmctrl_get_INTFLAG_reg(
    1c78:	4226      	tst	r6, r4
    1c7a:	d102      	bne.n	1c82 <FLASH_0_write_page+0x42>
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE_Msk) >> NVMCTRL_INTFLAG_DONE_Pos;
    1c7c:	7d1c      	ldrb	r4, [r3, #20]
	while (!hri_nvmctrl_get_interrupt_DONE_bit(_NVMCTRL)) {
    1c7e:	4225      	tst	r5, r4
    1c80:	d0f9      	beq.n	1c76 <FLASH_0_write_page+0x36>
	uint32_t nvm_addr = dst_addr / 2;
    1c82:	0846      	lsrs	r6, r0, #1
	for (uint16_t i = 0; i < length; i += 2) {
    1c84:	b1c2      	cbz	r2, 1cb8 <FLASH_0_write_page+0x78>
    1c86:	1e57      	subs	r7, r2, #1
    1c88:	0076      	lsls	r6, r6, #1
    1c8a:	2300      	movs	r3, #0
    1c8c:	e007      	b.n	1c9e <FLASH_0_write_page+0x5e>
		data = buffer[i];
    1c8e:	b2ac      	uxth	r4, r5
    1c90:	18f5      	adds	r5, r6, r3
    1c92:	3302      	adds	r3, #2
		NVM_MEMORY[nvm_addr++] = data;
    1c94:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    1c96:	b29c      	uxth	r4, r3
    1c98:	3102      	adds	r1, #2
    1c9a:	42a2      	cmp	r2, r4
    1c9c:	d90c      	bls.n	1cb8 <FLASH_0_write_page+0x78>
		data = buffer[i];
    1c9e:	780d      	ldrb	r5, [r1, #0]
		if (i < (length - 1)) {
    1ca0:	429f      	cmp	r7, r3
    1ca2:	ddf4      	ble.n	1c8e <FLASH_0_write_page+0x4e>
			data |= (buffer[i + 1] << 8);
    1ca4:	784c      	ldrb	r4, [r1, #1]
    1ca6:	3102      	adds	r1, #2
    1ca8:	0224      	lsls	r4, r4, #8
    1caa:	432c      	orrs	r4, r5
    1cac:	18f5      	adds	r5, r6, r3
    1cae:	3302      	adds	r3, #2
		NVM_MEMORY[nvm_addr++] = data;
    1cb0:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    1cb2:	b29c      	uxth	r4, r3
    1cb4:	42a2      	cmp	r2, r4
    1cb6:	d8f2      	bhi.n	1c9e <FLASH_0_write_page+0x5e>
	tmp = ((Nvmctrl *)hw)->CTRLC.reg;
    1cb8:	f245 0300 	movw	r3, #20480	; 0x5000
    1cbc:	f2c4 1300 	movt	r3, #16640	; 0x4100
    1cc0:	7a1b      	ldrb	r3, [r3, #8]
		if ((hri_nvmctrl_get_CTRLC_MANW_bit(_NVMCTRL) == 1) || (length < NVMCTRL_PAGE_SIZE)) {
    1cc2:	07db      	lsls	r3, r3, #31
    1cc4:	d401      	bmi.n	1cca <FLASH_0_write_page+0x8a>
    1cc6:	2a40      	cmp	r2, #64	; 0x40
    1cc8:	d019      	beq.n	1cfe <FLASH_0_write_page+0xbe>
	return (((Nvmctrl *)hw)->STATUS.reg & NVMCTRL_STATUS_READY_Msk) >> NVMCTRL_STATUS_READY_Pos;
    1cca:	f245 0200 	movw	r2, #20480	; 0x5000
	while (!hri_nvmctrl_get_STATUS_READY_bit(_NVMCTRL)) {
    1cce:	2104      	movs	r1, #4
    1cd0:	f2c4 1200 	movt	r2, #16640	; 0x4100
    1cd4:	8b13      	ldrh	r3, [r2, #24]
    1cd6:	4219      	tst	r1, r3
    1cd8:	d0fc      	beq.n	1cd4 <FLASH_0_write_page+0x94>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    1cda:	233f      	movs	r3, #63	; 0x3f
    1cdc:	7513      	strb	r3, [r2, #20]
	((Nvmctrl *)hw)->CTRLA.reg = data;
    1cde:	4b0b      	ldr	r3, [pc, #44]	; (1d0c <FLASH_0_write_page+0xcc>)
	((Nvmctrl *)hw)->ADDR.reg = data;
    1ce0:	61d0      	str	r0, [r2, #28]
	((Nvmctrl *)hw)->CTRLA.reg = data;
    1ce2:	8013      	strh	r3, [r2, #0]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE_Msk) >> NVMCTRL_INTFLAG_DONE_Pos;
    1ce4:	f245 0300 	movw	r3, #20480	; 0x5000
	while (!hri_nvmctrl_get_interrupt_DONE_bit(_NVMCTRL)) {
    1ce8:	2101      	movs	r1, #1
    1cea:	f2c4 1300 	movt	r3, #16640	; 0x4100
	tmp &= mask;
    1cee:	201e      	movs	r0, #30
    1cf0:	e002      	b.n	1cf8 <FLASH_0_write_page+0xb8>
	tmp = ((Nvmctrl *)hw)->INTFLAG.reg;
    1cf2:	7d1a      	ldrb	r2, [r3, #20]
		if (hri_nvmctrl_get_INTFLAG_reg(
    1cf4:	4210      	tst	r0, r2
    1cf6:	d104      	bne.n	1d02 <FLASH_0_write_page+0xc2>
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE_Msk) >> NVMCTRL_INTFLAG_DONE_Pos;
    1cf8:	7d1a      	ldrb	r2, [r3, #20]
	while (!hri_nvmctrl_get_interrupt_DONE_bit(_NVMCTRL)) {
    1cfa:	4211      	tst	r1, r2
    1cfc:	d0f9      	beq.n	1cf2 <FLASH_0_write_page+0xb2>
			return ERR_FAILURE;
    1cfe:	2000      	movs	r0, #0
    1d00:	e7a5      	b.n	1c4e <FLASH_0_write_page+0xe>
    1d02:	201e      	movs	r0, #30
    1d04:	4240      	negs	r0, r0
    1d06:	e7a2      	b.n	1c4e <FLASH_0_write_page+0xe>
    1d08:	ffffa544 	.word	0xffffa544
    1d0c:	ffffa504 	.word	0xffffa504

00001d10 <FLASH_0_read>:

/**
 * \brief Read a number of bytes from a page in the NVM memory
 */
int32_t FLASH_0_read(uint32_t src_addr, uint8_t *buffer, uint32_t length)
{
    1d10:	b570      	push	{r4, r5, r6, lr}
	return (((Nvmctrl *)hw)->STATUS.reg & NVMCTRL_STATUS_READY_Msk) >> NVMCTRL_STATUS_READY_Pos;
    1d12:	f245 0400 	movw	r4, #20480	; 0x5000
	uint32_t nvm_addr = src_addr / 2;
	uint32_t i;
	uint16_t data;

	/* Wait until this module isn't busy */
	while (!hri_nvmctrl_get_STATUS_READY_bit(_NVMCTRL)) {
    1d16:	2604      	movs	r6, #4
	uint32_t nvm_addr = src_addr / 2;
    1d18:	0845      	lsrs	r5, r0, #1
    1d1a:	f2c4 1400 	movt	r4, #16640	; 0x4100
    1d1e:	8b23      	ldrh	r3, [r4, #24]
	while (!hri_nvmctrl_get_STATUS_READY_bit(_NVMCTRL)) {
    1d20:	421e      	tst	r6, r3
    1d22:	d0fc      	beq.n	1d1e <FLASH_0_read+0xe>
	}

	/* Check whether byte address is word-aligned*/
	if (src_addr % 2) {
    1d24:	2301      	movs	r3, #1
		data      = NVM_MEMORY[nvm_addr++];
		buffer[0] = data >> 8;
		i         = 1;
	} else {
		i = 0;
    1d26:	2400      	movs	r4, #0
	if (src_addr % 2) {
    1d28:	4203      	tst	r3, r0
    1d2a:	d005      	beq.n	1d38 <FLASH_0_read+0x28>
		data      = NVM_MEMORY[nvm_addr++];
    1d2c:	4398      	bics	r0, r3
    1d2e:	8803      	ldrh	r3, [r0, #0]
    1d30:	3501      	adds	r5, #1
		buffer[0] = data >> 8;
    1d32:	0a1b      	lsrs	r3, r3, #8
    1d34:	700b      	strb	r3, [r1, #0]
		i         = 1;
    1d36:	3401      	adds	r4, #1
	}

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	while (i < length) {
    1d38:	42a2      	cmp	r2, r4
    1d3a:	d90f      	bls.n	1d5c <FLASH_0_read+0x4c>
    1d3c:	006d      	lsls	r5, r5, #1
    1d3e:	1e56      	subs	r6, r2, #1
    1d40:	1909      	adds	r1, r1, r4
    1d42:	1b2d      	subs	r5, r5, r4
    1d44:	1963      	adds	r3, r4, r5
		data      = NVM_MEMORY[nvm_addr++];
    1d46:	881b      	ldrh	r3, [r3, #0]
    1d48:	b29b      	uxth	r3, r3
		buffer[i] = (data & 0xFF);
    1d4a:	700b      	strb	r3, [r1, #0]
		if (i < (length - 1)) {
    1d4c:	42a6      	cmp	r6, r4
    1d4e:	d901      	bls.n	1d54 <FLASH_0_read+0x44>
			buffer[i + 1] = (data >> 8);
    1d50:	0a1b      	lsrs	r3, r3, #8
    1d52:	704b      	strb	r3, [r1, #1]
		}
		i += 2;
    1d54:	3402      	adds	r4, #2
    1d56:	3102      	adds	r1, #2
	while (i < length) {
    1d58:	42a2      	cmp	r2, r4
    1d5a:	d8f3      	bhi.n	1d44 <FLASH_0_read+0x34>
	}

	return ERR_NONE;
}
    1d5c:	2000      	movs	r0, #0
    1d5e:	bd70      	pop	{r4, r5, r6, pc}

00001d60 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    1d60:	f241 4300 	movw	r3, #5120	; 0x1400
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSC32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSC32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    1d64:	f641 7100 	movw	r1, #7936	; 0x1f00
    1d68:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1d6c:	69da      	ldr	r2, [r3, #28]
    1d6e:	400a      	ands	r2, r1
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    1d70:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    1d72:	2200      	movs	r2, #0
    1d74:	741a      	strb	r2, [r3, #16]
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
    1d76:	4770      	bx	lr

00001d78 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_OSC16MCTRL_reg(const void *const hw, hri_oscctrl_osc16mctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC16MCTRL.reg = data;
    1d78:	f241 0200 	movw	r2, #4096	; 0x1000
    1d7c:	2302      	movs	r3, #2
#endif
#endif

#if CONF_OSC16M_CONFIG == 1
#if CONF_OSC16M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC16MRDY_bit(hw))
    1d7e:	2110      	movs	r1, #16
    1d80:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1d84:	7613      	strb	r3, [r2, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC16MRDY_Msk) >> OSCCTRL_STATUS_OSC16MRDY_Pos;
    1d86:	6913      	ldr	r3, [r2, #16]
    1d88:	4219      	tst	r1, r3
    1d8a:	d0fc      	beq.n	1d86 <_oscctrl_init_sources+0xe>
	((Oscctrl *)hw)->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND_Msk;
    1d8c:	2180      	movs	r1, #128	; 0x80
    1d8e:	7e13      	ldrb	r3, [r2, #24]
    1d90:	430b      	orrs	r3, r1
    1d92:	7613      	strb	r3, [r2, #24]
#if CONF_OSC16M_ONDEMAND == 1
	hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
    1d94:	4770      	bx	lr
    1d96:	46c0      	nop			; (mov r8, r8)

00001d98 <_oscctrl_init_referenced_generators>:
#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
		;
#endif
	(void)hw, (void)tmp;
}
    1d98:	4770      	bx	lr
    1d9a:	46c0      	nop			; (mov r8, r8)

00001d9c <_set_performance_level>:
}

static inline hri_pm_plcfg_reg_t hri_pm_get_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Pm *)hw)->PLCFG.reg;
    1d9c:	f240 4200 	movw	r2, #1024	; 0x400
	tmp = (tmp & PM_PLCFG_PLSEL(mask)) >> PM_PLCFG_PLSEL_Pos;
    1da0:	2303      	movs	r3, #3
	tmp = ((Pm *)hw)->PLCFG.reg;
    1da2:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1da6:	7891      	ldrb	r1, [r2, #2]
/**
 * \brief Set performance level
 */
void _set_performance_level(const uint8_t level)
{
	if (hri_pm_get_PLCFG_PLSEL_bf(PM, PM_PLCFG_PLSEL_Msk) != level) {
    1da8:	4019      	ands	r1, r3
    1daa:	4288      	cmp	r0, r1
    1dac:	d009      	beq.n	1dc2 <_set_performance_level+0x26>
	((Pm *)hw)->INTFLAG.reg = mask;
    1dae:	21ff      	movs	r1, #255	; 0xff
    1db0:	7191      	strb	r1, [r2, #6]

static inline void hri_pm_write_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t data)
{
	uint8_t tmp;
	PM_CRITICAL_SECTION_ENTER();
	tmp = ((Pm *)hw)->PLCFG.reg;
    1db2:	7891      	ldrb	r1, [r2, #2]
	tmp &= ~PM_PLCFG_PLSEL_Msk;
    1db4:	4399      	bics	r1, r3
	tmp |= PM_PLCFG_PLSEL(data);
    1db6:	4003      	ands	r3, r0
    1db8:	430b      	orrs	r3, r1
	((Pm *)hw)->PLCFG.reg = tmp;
    1dba:	7093      	strb	r3, [r2, #2]
	return ((Pm *)hw)->INTFLAG.reg;
    1dbc:	7993      	ldrb	r3, [r2, #6]
		hri_pm_clear_INTFLAG_reg(PM, 0xFF);
		hri_pm_write_PLCFG_PLSEL_bf(PM, level);
		while (!hri_pm_read_INTFLAG_reg(PM))
    1dbe:	2b00      	cmp	r3, #0
    1dc0:	d0fc      	beq.n	1dbc <_set_performance_level+0x20>
			;
	}
}
    1dc2:	4770      	bx	lr

00001dc4 <main>:

static uint8_t iv[16] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };
static uint8_t iv2[16] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };

int main(void)
{
    1dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1dc6:	46de      	mov	lr, fp
    1dc8:	4657      	mov	r7, sl
    1dca:	464e      	mov	r6, r9
    1dcc:	4645      	mov	r5, r8
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    1dce:	f641 2319 	movw	r3, #6681	; 0x1a19
{
    1dd2:	b5e0      	push	{r5, r6, r7, lr}
	atmel_start_init();
    1dd4:	f2c0 0300 	movt	r3, #0
{
    1dd8:	b089      	sub	sp, #36	; 0x24
	atmel_start_init();
    1dda:	4798      	blx	r3
	
	mbedtls_aes_setkey_enc( &aes, key, AES_KEY_SIZE );
    1ddc:	f644 2174 	movw	r1, #19060	; 0x4a74
    1de0:	f240 008c 	movw	r0, #140	; 0x8c
    1de4:	f240 3331 	movw	r3, #817	; 0x331
    1de8:	2280      	movs	r2, #128	; 0x80
    1dea:	f2c0 0100 	movt	r1, #0
    1dee:	f2c0 0300 	movt	r3, #0
    1df2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1df6:	4798      	blx	r3
	mbedtls_aes_setkey_dec( &aes2, key, AES_KEY_SIZE );
    1df8:	f240 138c 	movw	r3, #396	; 0x18c
    1dfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1e00:	9305      	str	r3, [sp, #20]
    1e02:	3318      	adds	r3, #24
    1e04:	0018      	movs	r0, r3
    1e06:	f644 2174 	movw	r1, #19060	; 0x4a74
    1e0a:	f640 330d 	movw	r3, #2829	; 0xb0d
    1e0e:	2280      	movs	r2, #128	; 0x80
    1e10:	f2c0 0100 	movt	r1, #0
    1e14:	f2c0 0300 	movt	r3, #0
    1e18:	4798      	blx	r3
	
	// Allocate MAX_AES_BLOCKS * MBEDTLS_AES_BLOCK_SIZE bytes.
	uint8_t *input = malloc(sizeof(uint8_t) * MAX_NUM_BYTES);
    1e1a:	f242 0321 	movw	r3, #8225	; 0x2021
    1e1e:	f241 7070 	movw	r0, #6000	; 0x1770
    1e22:	f2c0 0300 	movt	r3, #0
    1e26:	4798      	blx	r3
	
	delay_ms(10);
    1e28:	f641 3311 	movw	r3, #6929	; 0x1b11
	uint8_t *input = malloc(sizeof(uint8_t) * MAX_NUM_BYTES);
    1e2c:	4682      	mov	sl, r0
	delay_ms(10);
    1e2e:	f2c0 0300 	movt	r3, #0
    1e32:	200a      	movs	r0, #10
    1e34:	9302      	str	r3, [sp, #8]
    1e36:	4798      	blx	r3
    1e38:	f242 035b 	movw	r3, #8283	; 0x205b
    1e3c:	f2c0 0300 	movt	r3, #0
    1e40:	9307      	str	r3, [sp, #28]
    1e42:	f641 5311 	movw	r3, #7441	; 0x1d11
    1e46:	f2c0 0300 	movt	r3, #0
    1e4a:	9306      	str	r3, [sp, #24]
    1e4c:	f641 4341 	movw	r3, #7233	; 0x1c41
    1e50:	f641 19dd 	movw	r9, #6621	; 0x19dd
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1e54:	f240 2800 	movw	r8, #512	; 0x200
	
	for (size_t num_bytes = MIN_NUM_BYTES; num_bytes <= MAX_NUM_BYTES; num_bytes += STEP_SIZE) {
    1e58:	2710      	movs	r7, #16
    1e5a:	f2c0 0300 	movt	r3, #0
    1e5e:	f2c0 0900 	movt	r9, #0
    1e62:	9301      	str	r3, [sp, #4]
    1e64:	f2c6 0800 	movt	r8, #24576	; 0x6000
{
    1e68:	2300      	movs	r3, #0
    1e6a:	4652      	mov	r2, sl
		//size_t num_bytes = MAX_AES_BLOCKS * MBEDTLS_AES_BLOCK_SIZE;
		// Fill with sequential data.
		for (size_t byte = 0; byte < num_bytes; byte++) {
			input[byte] = byte; // Will wrap at 0xff.
    1e6c:	54d3      	strb	r3, [r2, r3]
		for (size_t byte = 0; byte < num_bytes; byte++) {
    1e6e:	3301      	adds	r3, #1
    1e70:	42bb      	cmp	r3, r7
    1e72:	d1fb      	bne.n	1e6c <main+0xa8>
			//input[byte] = 0xfa;
		}

		START_MEASURE(DGI_GPIO2);
    1e74:	9b02      	ldr	r3, [sp, #8]
    1e76:	2002      	movs	r0, #2
    1e78:	4692      	mov	sl, r2
    1e7a:	4798      	blx	r3
    1e7c:	2280      	movs	r2, #128	; 0x80
    1e7e:	4643      	mov	r3, r8
		// Encrypt in place.
		for (size_t count = 0;  count < num_bytes/STEP_SIZE; count++) {
    1e80:	093e      	lsrs	r6, r7, #4
    1e82:	0412      	lsls	r2, r2, #16
    1e84:	619a      	str	r2, [r3, #24]
    1e86:	0133      	lsls	r3, r6, #4
    1e88:	9304      	str	r3, [sp, #16]
    1e8a:	4453      	add	r3, sl
    1e8c:	4654      	mov	r4, sl
    1e8e:	001d      	movs	r5, r3
    1e90:	464e      	mov	r6, r9
			mbedtls_aes_crypt_ecb( &aes, MBEDTLS_AES_ENCRYPT,input + (count*STEP_SIZE), input + (count*STEP_SIZE));
    1e92:	f240 008c 	movw	r0, #140	; 0x8c
    1e96:	0023      	movs	r3, r4
    1e98:	0022      	movs	r2, r4
    1e9a:	2101      	movs	r1, #1
    1e9c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1ea0:	3410      	adds	r4, #16
    1ea2:	47b0      	blx	r6
		for (size_t count = 0;  count < num_bytes/STEP_SIZE; count++) {
    1ea4:	42a5      	cmp	r5, r4
    1ea6:	d1f4      	bne.n	1e92 <main+0xce>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1ea8:	2280      	movs	r2, #128	; 0x80
    1eaa:	4643      	mov	r3, r8
    1eac:	0412      	lsls	r2, r2, #16
    1eae:	615a      	str	r2, [r3, #20]
		}
		//mbedtls_aes_crypt_ecb( &aes, MBEDTLS_AES_ENCRYPT, input, input);
		STOP_MEASURE(DGI_GPIO2);
    1eb0:	9c02      	ldr	r4, [sp, #8]
    1eb2:	2002      	movs	r0, #2
    1eb4:	47a0      	blx	r4
		
		START_MEASURE(DGI_GPIO3);
    1eb6:	2002      	movs	r0, #2
    1eb8:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1eba:	2280      	movs	r2, #128	; 0x80
    1ebc:	4643      	mov	r3, r8
    1ebe:	0512      	lsls	r2, r2, #20
    1ec0:	619a      	str	r2, [r3, #24]
		// Save to flash
		// Put data at end of flash.
		uint32_t target_addr = FLASH_ADDR + FLASH_SIZE - num_bytes;
		target_addr -= target_addr % NVMCTRL_ROW_SIZE;
    1ec2:	2380      	movs	r3, #128	; 0x80
    1ec4:	22ff      	movs	r2, #255	; 0xff
	
		for (uint32_t page_index = 0; page_index * FLASH_PAGE_SIZE < num_bytes; page_index += 1) {
			if (page_index % NVMCTRL_ROW_PAGES == 0) {
				/* Erase row in flash */
				FLASH_0_erase_row(target_addr + page_index * FLASH_PAGE_SIZE);
    1ec6:	f641 3bfd 	movw	fp, #7165	; 0x1bfd
		target_addr -= target_addr % NVMCTRL_ROW_SIZE;
    1eca:	025b      	lsls	r3, r3, #9
    1ecc:	1bdb      	subs	r3, r3, r7
    1ece:	4393      	bics	r3, r2
    1ed0:	46b1      	mov	r9, r6
    1ed2:	9303      	str	r3, [sp, #12]
    1ed4:	4656      	mov	r6, sl
    1ed6:	001d      	movs	r5, r3
    1ed8:	2400      	movs	r4, #0
				FLASH_0_erase_row(target_addr + page_index * FLASH_PAGE_SIZE);
    1eda:	f2c0 0b00 	movt	fp, #0
    1ede:	e00a      	b.n	1ef6 <main+0x132>
			}
			FLASH_0_write_page(target_addr + page_index * FLASH_PAGE_SIZE, &input[page_index * FLASH_PAGE_SIZE], FLASH_PAGE_SIZE);
    1ee0:	0031      	movs	r1, r6
    1ee2:	0028      	movs	r0, r5
    1ee4:	9b01      	ldr	r3, [sp, #4]
    1ee6:	2240      	movs	r2, #64	; 0x40
		for (uint32_t page_index = 0; page_index * FLASH_PAGE_SIZE < num_bytes; page_index += 1) {
    1ee8:	3401      	adds	r4, #1
			FLASH_0_write_page(target_addr + page_index * FLASH_PAGE_SIZE, &input[page_index * FLASH_PAGE_SIZE], FLASH_PAGE_SIZE);
    1eea:	4798      	blx	r3
    1eec:	3540      	adds	r5, #64	; 0x40
    1eee:	3640      	adds	r6, #64	; 0x40
		for (uint32_t page_index = 0; page_index * FLASH_PAGE_SIZE < num_bytes; page_index += 1) {
    1ef0:	01a3      	lsls	r3, r4, #6
    1ef2:	42bb      	cmp	r3, r7
    1ef4:	d205      	bcs.n	1f02 <main+0x13e>
			if (page_index % NVMCTRL_ROW_PAGES == 0) {
    1ef6:	2303      	movs	r3, #3
    1ef8:	4223      	tst	r3, r4
    1efa:	d1f1      	bne.n	1ee0 <main+0x11c>
				FLASH_0_erase_row(target_addr + page_index * FLASH_PAGE_SIZE);
    1efc:	0028      	movs	r0, r5
    1efe:	47d8      	blx	fp
    1f00:	e7ee      	b.n	1ee0 <main+0x11c>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1f02:	2280      	movs	r2, #128	; 0x80
    1f04:	4643      	mov	r3, r8
    1f06:	0512      	lsls	r2, r2, #20
    1f08:	615a      	str	r2, [r3, #20]
			// TODO: decrease FLASH_PAGE_SIZE to correct number on last write if not multiple of FLASH_PAGE_SIZE.
		}
		STOP_MEASURE(DGI_GPIO3);
    1f0a:	9c02      	ldr	r4, [sp, #8]
    1f0c:	2002      	movs	r0, #2
    1f0e:	47a0      	blx	r4
	
		SLEEP
    1f10:	2002      	movs	r0, #2
    1f12:	47a0      	blx	r4
    1f14:	003a      	movs	r2, r7
    1f16:	21fe      	movs	r1, #254	; 0xfe
    1f18:	9b07      	ldr	r3, [sp, #28]
    1f1a:	4650      	mov	r0, sl
    1f1c:	4798      	blx	r3
		// Overwrite the memory
		for (size_t byte = 0; byte < num_bytes; byte++) {
			input[byte] = 0xfe;
		}
		
		START_MEASURE(DGI_GPIO3);
    1f1e:	2002      	movs	r0, #2
    1f20:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1f22:	2280      	movs	r2, #128	; 0x80
    1f24:	4643      	mov	r3, r8
    1f26:	0512      	lsls	r2, r2, #20
    1f28:	619a      	str	r2, [r3, #24]
		// Read from flash
		FLASH_0_read(target_addr, input, num_bytes);
    1f2a:	4651      	mov	r1, sl
    1f2c:	003a      	movs	r2, r7
    1f2e:	9b06      	ldr	r3, [sp, #24]
    1f30:	9803      	ldr	r0, [sp, #12]
    1f32:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1f34:	2280      	movs	r2, #128	; 0x80
    1f36:	4643      	mov	r3, r8
    1f38:	0512      	lsls	r2, r2, #20
    1f3a:	615a      	str	r2, [r3, #20]
		STOP_MEASURE(DGI_GPIO3);
    1f3c:	2002      	movs	r0, #2
    1f3e:	47a0      	blx	r4
		
		START_MEASURE(DGI_GPIO2);
    1f40:	2002      	movs	r0, #2
    1f42:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1f44:	2280      	movs	r2, #128	; 0x80
    1f46:	4643      	mov	r3, r8
    1f48:	0412      	lsls	r2, r2, #16
    1f4a:	619a      	str	r2, [r3, #24]
    1f4c:	9b04      	ldr	r3, [sp, #16]
    1f4e:	4654      	mov	r4, sl
    1f50:	4453      	add	r3, sl
    1f52:	001e      	movs	r6, r3
    1f54:	464b      	mov	r3, r9
    1f56:	46b9      	mov	r9, r7
    1f58:	001f      	movs	r7, r3
		// Decrypt in place.
		for (size_t count = 0;  count < num_bytes/STEP_SIZE; count++) {
			mbedtls_aes_crypt_ecb( &aes2, MBEDTLS_AES_DECRYPT,input + (count*STEP_SIZE), input + (count*STEP_SIZE));
    1f5a:	9d05      	ldr	r5, [sp, #20]
    1f5c:	3518      	adds	r5, #24
    1f5e:	0023      	movs	r3, r4
    1f60:	0022      	movs	r2, r4
    1f62:	2100      	movs	r1, #0
    1f64:	0028      	movs	r0, r5
    1f66:	3410      	adds	r4, #16
    1f68:	47b8      	blx	r7
		for (size_t count = 0;  count < num_bytes/STEP_SIZE; count++) {
    1f6a:	42a6      	cmp	r6, r4
    1f6c:	d1f7      	bne.n	1f5e <main+0x19a>
    1f6e:	003b      	movs	r3, r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1f70:	2280      	movs	r2, #128	; 0x80
    1f72:	464f      	mov	r7, r9
    1f74:	4699      	mov	r9, r3
    1f76:	4643      	mov	r3, r8
    1f78:	0412      	lsls	r2, r2, #16
    1f7a:	615a      	str	r2, [r3, #20]
		}
		//mbedtls_aes_crypt_ecb( &aes2, MBEDTLS_AES_DECRYPT, input, input);
		STOP_MEASURE(DGI_GPIO2);
    1f7c:	9b02      	ldr	r3, [sp, #8]
    1f7e:	2002      	movs	r0, #2
    1f80:	4798      	blx	r3
	for (size_t num_bytes = MIN_NUM_BYTES; num_bytes <= MAX_NUM_BYTES; num_bytes += STEP_SIZE) {
    1f82:	f241 7380 	movw	r3, #6016	; 0x1780
    1f86:	3710      	adds	r7, #16
    1f88:	429f      	cmp	r7, r3
    1f8a:	d000      	beq.n	1f8e <main+0x1ca>
    1f8c:	e76c      	b.n	1e68 <main+0xa4>
		//	}
		//}
	}
	
	// Free the memory
	free(input);
    1f8e:	f242 0335 	movw	r3, #8245	; 0x2035
    1f92:	4650      	mov	r0, sl
    1f94:	f2c0 0300 	movt	r3, #0
    1f98:	4798      	blx	r3

	END_MEASUREMENT;
    1f9a:	9b02      	ldr	r3, [sp, #8]
    1f9c:	200a      	movs	r0, #10
    1f9e:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1fa0:	4642      	mov	r2, r8
    1fa2:	f240 4300 	movw	r3, #1024	; 0x400
    1fa6:	6193      	str	r3, [r2, #24]
    1fa8:	f640 0300 	movw	r3, #2048	; 0x800
    1fac:	6193      	str	r3, [r2, #24]
    1fae:	2280      	movs	r2, #128	; 0x80
    1fb0:	4643      	mov	r3, r8
    1fb2:	0412      	lsls	r2, r2, #16
    1fb4:	619a      	str	r2, [r3, #24]
    1fb6:	2380      	movs	r3, #128	; 0x80
    1fb8:	4642      	mov	r2, r8
}
    1fba:	2000      	movs	r0, #0
    1fbc:	051b      	lsls	r3, r3, #20
    1fbe:	6193      	str	r3, [r2, #24]
    1fc0:	b009      	add	sp, #36	; 0x24
    1fc2:	bc3c      	pop	{r2, r3, r4, r5}
    1fc4:	4690      	mov	r8, r2
    1fc6:	4699      	mov	r9, r3
    1fc8:	46a2      	mov	sl, r4
    1fca:	46ab      	mov	fp, r5
    1fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1fce:	46c0      	nop			; (mov r8, r8)

00001fd0 <__libc_init_array>:
    1fd0:	b570      	push	{r4, r5, r6, lr}
    1fd2:	2500      	movs	r5, #0
    1fd4:	4b0e      	ldr	r3, [pc, #56]	; (2010 <__libc_init_array+0x40>)
    1fd6:	4c0f      	ldr	r4, [pc, #60]	; (2014 <__libc_init_array+0x44>)
    1fd8:	1ae4      	subs	r4, r4, r3
    1fda:	10a4      	asrs	r4, r4, #2
    1fdc:	42a5      	cmp	r5, r4
    1fde:	d109      	bne.n	1ff4 <__libc_init_array+0x24>
    1fe0:	2500      	movs	r5, #0
    1fe2:	f002 fd7f 	bl	4ae4 <_init>
    1fe6:	4c0c      	ldr	r4, [pc, #48]	; (2018 <__libc_init_array+0x48>)
    1fe8:	4b0c      	ldr	r3, [pc, #48]	; (201c <__libc_init_array+0x4c>)
    1fea:	1ae4      	subs	r4, r4, r3
    1fec:	10a4      	asrs	r4, r4, #2
    1fee:	42a5      	cmp	r5, r4
    1ff0:	d107      	bne.n	2002 <__libc_init_array+0x32>
    1ff2:	bd70      	pop	{r4, r5, r6, pc}
    1ff4:	4a06      	ldr	r2, [pc, #24]	; (2010 <__libc_init_array+0x40>)
    1ff6:	00ab      	lsls	r3, r5, #2
    1ff8:	189b      	adds	r3, r3, r2
    1ffa:	681b      	ldr	r3, [r3, #0]
    1ffc:	4798      	blx	r3
    1ffe:	3501      	adds	r5, #1
    2000:	e7ec      	b.n	1fdc <__libc_init_array+0xc>
    2002:	4a06      	ldr	r2, [pc, #24]	; (201c <__libc_init_array+0x4c>)
    2004:	00ab      	lsls	r3, r5, #2
    2006:	189b      	adds	r3, r3, r2
    2008:	681b      	ldr	r3, [r3, #0]
    200a:	4798      	blx	r3
    200c:	3501      	adds	r5, #1
    200e:	e7ee      	b.n	1fee <__libc_init_array+0x1e>
    2010:	00004af0 	.word	0x00004af0
    2014:	00004af0 	.word	0x00004af0
    2018:	00004af4 	.word	0x00004af4
    201c:	00004af0 	.word	0x00004af0

00002020 <malloc>:
    2020:	b510      	push	{r4, lr}
    2022:	4b03      	ldr	r3, [pc, #12]	; (2030 <malloc+0x10>)
    2024:	0001      	movs	r1, r0
    2026:	6818      	ldr	r0, [r3, #0]
    2028:	f000 f86a 	bl	2100 <_malloc_r>
    202c:	bd10      	pop	{r4, pc}
    202e:	46c0      	nop			; (mov r8, r8)
    2030:	20000004 	.word	0x20000004

00002034 <free>:
    2034:	b510      	push	{r4, lr}
    2036:	4b03      	ldr	r3, [pc, #12]	; (2044 <free+0x10>)
    2038:	0001      	movs	r1, r0
    203a:	6818      	ldr	r0, [r3, #0]
    203c:	f000 f816 	bl	206c <_free_r>
    2040:	bd10      	pop	{r4, pc}
    2042:	46c0      	nop			; (mov r8, r8)
    2044:	20000004 	.word	0x20000004

00002048 <memcpy>:
    2048:	2300      	movs	r3, #0
    204a:	b510      	push	{r4, lr}
    204c:	429a      	cmp	r2, r3
    204e:	d100      	bne.n	2052 <memcpy+0xa>
    2050:	bd10      	pop	{r4, pc}
    2052:	5ccc      	ldrb	r4, [r1, r3]
    2054:	54c4      	strb	r4, [r0, r3]
    2056:	3301      	adds	r3, #1
    2058:	e7f8      	b.n	204c <memcpy+0x4>

0000205a <memset>:
    205a:	0003      	movs	r3, r0
    205c:	1882      	adds	r2, r0, r2
    205e:	4293      	cmp	r3, r2
    2060:	d100      	bne.n	2064 <memset+0xa>
    2062:	4770      	bx	lr
    2064:	7019      	strb	r1, [r3, #0]
    2066:	3301      	adds	r3, #1
    2068:	e7f9      	b.n	205e <memset+0x4>
	...

0000206c <_free_r>:
    206c:	b570      	push	{r4, r5, r6, lr}
    206e:	0005      	movs	r5, r0
    2070:	b181      	cbz	r1, 2094 <_free_r+0x28>
    2072:	1f0c      	subs	r4, r1, #4
    2074:	6823      	ldr	r3, [r4, #0]
    2076:	2b00      	cmp	r3, #0
    2078:	da00      	bge.n	207c <_free_r+0x10>
    207a:	18e4      	adds	r4, r4, r3
    207c:	0028      	movs	r0, r5
    207e:	f000 f8ad 	bl	21dc <__malloc_lock>
    2082:	4a1e      	ldr	r2, [pc, #120]	; (20fc <_free_r+0x90>)
    2084:	6813      	ldr	r3, [r2, #0]
    2086:	0011      	movs	r1, r2
    2088:	b92b      	cbnz	r3, 2096 <_free_r+0x2a>
    208a:	6063      	str	r3, [r4, #4]
    208c:	6014      	str	r4, [r2, #0]
    208e:	0028      	movs	r0, r5
    2090:	f000 f8a5 	bl	21de <__malloc_unlock>
    2094:	bd70      	pop	{r4, r5, r6, pc}
    2096:	42a3      	cmp	r3, r4
    2098:	d90b      	bls.n	20b2 <_free_r+0x46>
    209a:	6822      	ldr	r2, [r4, #0]
    209c:	18a0      	adds	r0, r4, r2
    209e:	4283      	cmp	r3, r0
    20a0:	d103      	bne.n	20aa <_free_r+0x3e>
    20a2:	6818      	ldr	r0, [r3, #0]
    20a4:	685b      	ldr	r3, [r3, #4]
    20a6:	1882      	adds	r2, r0, r2
    20a8:	6022      	str	r2, [r4, #0]
    20aa:	6063      	str	r3, [r4, #4]
    20ac:	600c      	str	r4, [r1, #0]
    20ae:	e7ee      	b.n	208e <_free_r+0x22>
    20b0:	0013      	movs	r3, r2
    20b2:	685a      	ldr	r2, [r3, #4]
    20b4:	b10a      	cbz	r2, 20ba <_free_r+0x4e>
    20b6:	42a2      	cmp	r2, r4
    20b8:	d9fa      	bls.n	20b0 <_free_r+0x44>
    20ba:	6819      	ldr	r1, [r3, #0]
    20bc:	1858      	adds	r0, r3, r1
    20be:	42a0      	cmp	r0, r4
    20c0:	d10b      	bne.n	20da <_free_r+0x6e>
    20c2:	6820      	ldr	r0, [r4, #0]
    20c4:	1809      	adds	r1, r1, r0
    20c6:	1858      	adds	r0, r3, r1
    20c8:	6019      	str	r1, [r3, #0]
    20ca:	4282      	cmp	r2, r0
    20cc:	d1df      	bne.n	208e <_free_r+0x22>
    20ce:	6810      	ldr	r0, [r2, #0]
    20d0:	6852      	ldr	r2, [r2, #4]
    20d2:	1841      	adds	r1, r0, r1
    20d4:	6019      	str	r1, [r3, #0]
    20d6:	605a      	str	r2, [r3, #4]
    20d8:	e7d9      	b.n	208e <_free_r+0x22>
    20da:	42a0      	cmp	r0, r4
    20dc:	d902      	bls.n	20e4 <_free_r+0x78>
    20de:	230c      	movs	r3, #12
    20e0:	602b      	str	r3, [r5, #0]
    20e2:	e7d4      	b.n	208e <_free_r+0x22>
    20e4:	6821      	ldr	r1, [r4, #0]
    20e6:	1860      	adds	r0, r4, r1
    20e8:	4282      	cmp	r2, r0
    20ea:	d103      	bne.n	20f4 <_free_r+0x88>
    20ec:	6810      	ldr	r0, [r2, #0]
    20ee:	6852      	ldr	r2, [r2, #4]
    20f0:	1841      	adds	r1, r0, r1
    20f2:	6021      	str	r1, [r4, #0]
    20f4:	6062      	str	r2, [r4, #4]
    20f6:	605c      	str	r4, [r3, #4]
    20f8:	e7c9      	b.n	208e <_free_r+0x22>
    20fa:	46c0      	nop			; (mov r8, r8)
    20fc:	200002bc 	.word	0x200002bc

00002100 <_malloc_r>:
    2100:	2303      	movs	r3, #3
    2102:	b570      	push	{r4, r5, r6, lr}
    2104:	1ccd      	adds	r5, r1, #3
    2106:	439d      	bics	r5, r3
    2108:	3508      	adds	r5, #8
    210a:	0006      	movs	r6, r0
    210c:	2d0c      	cmp	r5, #12
    210e:	d21c      	bcs.n	214a <_malloc_r+0x4a>
    2110:	250c      	movs	r5, #12
    2112:	42a9      	cmp	r1, r5
    2114:	d81b      	bhi.n	214e <_malloc_r+0x4e>
    2116:	0030      	movs	r0, r6
    2118:	f000 f860 	bl	21dc <__malloc_lock>
    211c:	4a25      	ldr	r2, [pc, #148]	; (21b4 <_malloc_r+0xb4>)
    211e:	6814      	ldr	r4, [r2, #0]
    2120:	0021      	movs	r1, r4
    2122:	b9c1      	cbnz	r1, 2156 <_malloc_r+0x56>
    2124:	4c24      	ldr	r4, [pc, #144]	; (21b8 <_malloc_r+0xb8>)
    2126:	6823      	ldr	r3, [r4, #0]
    2128:	b91b      	cbnz	r3, 2132 <_malloc_r+0x32>
    212a:	0030      	movs	r0, r6
    212c:	f000 f846 	bl	21bc <_sbrk_r>
    2130:	6020      	str	r0, [r4, #0]
    2132:	0029      	movs	r1, r5
    2134:	0030      	movs	r0, r6
    2136:	f000 f841 	bl	21bc <_sbrk_r>
    213a:	1c43      	adds	r3, r0, #1
    213c:	d12d      	bne.n	219a <_malloc_r+0x9a>
    213e:	230c      	movs	r3, #12
    2140:	0030      	movs	r0, r6
    2142:	6033      	str	r3, [r6, #0]
    2144:	f000 f84b 	bl	21de <__malloc_unlock>
    2148:	e003      	b.n	2152 <_malloc_r+0x52>
    214a:	2d00      	cmp	r5, #0
    214c:	dae1      	bge.n	2112 <_malloc_r+0x12>
    214e:	230c      	movs	r3, #12
    2150:	6033      	str	r3, [r6, #0]
    2152:	2000      	movs	r0, #0
    2154:	bd70      	pop	{r4, r5, r6, pc}
    2156:	680b      	ldr	r3, [r1, #0]
    2158:	1b5b      	subs	r3, r3, r5
    215a:	d41b      	bmi.n	2194 <_malloc_r+0x94>
    215c:	2b0b      	cmp	r3, #11
    215e:	d903      	bls.n	2168 <_malloc_r+0x68>
    2160:	600b      	str	r3, [r1, #0]
    2162:	18cc      	adds	r4, r1, r3
    2164:	6025      	str	r5, [r4, #0]
    2166:	e003      	b.n	2170 <_malloc_r+0x70>
    2168:	428c      	cmp	r4, r1
    216a:	d10f      	bne.n	218c <_malloc_r+0x8c>
    216c:	6863      	ldr	r3, [r4, #4]
    216e:	6013      	str	r3, [r2, #0]
    2170:	0030      	movs	r0, r6
    2172:	f000 f834 	bl	21de <__malloc_unlock>
    2176:	0020      	movs	r0, r4
    2178:	2207      	movs	r2, #7
    217a:	300b      	adds	r0, #11
    217c:	1d23      	adds	r3, r4, #4
    217e:	4390      	bics	r0, r2
    2180:	1ac3      	subs	r3, r0, r3
    2182:	2b00      	cmp	r3, #0
    2184:	d0e6      	beq.n	2154 <_malloc_r+0x54>
    2186:	425a      	negs	r2, r3
    2188:	50e2      	str	r2, [r4, r3]
    218a:	e7e3      	b.n	2154 <_malloc_r+0x54>
    218c:	684b      	ldr	r3, [r1, #4]
    218e:	6063      	str	r3, [r4, #4]
    2190:	000c      	movs	r4, r1
    2192:	e7ed      	b.n	2170 <_malloc_r+0x70>
    2194:	000c      	movs	r4, r1
    2196:	6849      	ldr	r1, [r1, #4]
    2198:	e7c3      	b.n	2122 <_malloc_r+0x22>
    219a:	2303      	movs	r3, #3
    219c:	1cc4      	adds	r4, r0, #3
    219e:	439c      	bics	r4, r3
    21a0:	42a0      	cmp	r0, r4
    21a2:	d0df      	beq.n	2164 <_malloc_r+0x64>
    21a4:	1a21      	subs	r1, r4, r0
    21a6:	0030      	movs	r0, r6
    21a8:	f000 f808 	bl	21bc <_sbrk_r>
    21ac:	1c43      	adds	r3, r0, #1
    21ae:	d1d9      	bne.n	2164 <_malloc_r+0x64>
    21b0:	e7c5      	b.n	213e <_malloc_r+0x3e>
    21b2:	46c0      	nop			; (mov r8, r8)
    21b4:	200002bc 	.word	0x200002bc
    21b8:	200002c0 	.word	0x200002c0

000021bc <_sbrk_r>:
    21bc:	2300      	movs	r3, #0
    21be:	b570      	push	{r4, r5, r6, lr}
    21c0:	4c05      	ldr	r4, [pc, #20]	; (21d8 <_sbrk_r+0x1c>)
    21c2:	0005      	movs	r5, r0
    21c4:	0008      	movs	r0, r1
    21c6:	6023      	str	r3, [r4, #0]
    21c8:	f7ff fcb6 	bl	1b38 <_sbrk>
    21cc:	1c43      	adds	r3, r0, #1
    21ce:	d102      	bne.n	21d6 <_sbrk_r+0x1a>
    21d0:	6823      	ldr	r3, [r4, #0]
    21d2:	b103      	cbz	r3, 21d6 <_sbrk_r+0x1a>
    21d4:	602b      	str	r3, [r5, #0]
    21d6:	bd70      	pop	{r4, r5, r6, pc}
    21d8:	200002c4 	.word	0x200002c4

000021dc <__malloc_lock>:
    21dc:	4770      	bx	lr

000021de <__malloc_unlock>:
    21de:	4770      	bx	lr

000021e0 <FSb>:
    21e0:	7c63 7b77 6bf2 c56f 0130 2b67 d7fe 76ab     c|w{.ko.0.g+...v
    21f0:	82ca 7dc9 59fa f047 d4ad afa2 a49c c072     ...}.YG.......r.
    2200:	fdb7 2693 3f36 ccf7 a534 f1e5 d871 1531     ...&6?..4...q.1.
    2210:	c704 c323 9618 9a05 1207 e280 27eb 75b2     ..#..........'.u
    2220:	8309 1a2c 6e1b a05a 3b52 b3d6 e329 842f     ..,..nZ.R;..)./.
    2230:	d153 ed00 fc20 5bb1 cb6a 39be 4c4a cf58     S... ..[j..9JLX.
    2240:	efd0 fbaa 4d43 8533 f945 7f02 3c50 a89f     ....CM3.E...P<..
    2250:	a351 8f40 9d92 f538 b6bc 21da ff10 d2f3     Q.@...8....!....
    2260:	0ccd ec13 975f 1744 a7c4 3d7e 5d64 7319     ...._.D...~=d].s
    2270:	8160 dc4f 2a22 8890 ee46 14b8 5ede db0b     `.O."*..F....^..
    2280:	32e0 0a3a 0649 5c24 d3c2 62ac 9591 79e4     .2:.I.$\...b...y
    2290:	c8e7 6d37 d58d a94e 566c eaf4 7a65 08ae     ..7m..N.lV..ez..
    22a0:	78ba 2e25 a61c c6b4 dde8 1f74 bd4b 8a8b     .x%.......t.K...
    22b0:	3e70 66b5 0348 0ef6 3561 b957 c186 9e1d     p>.fH...a5W.....
    22c0:	f8e1 1198 d969 948e 1e9b e987 55ce df28     ....i........U(.
    22d0:	a18c 0d89 e6bf 6842 9941 0f2d 54b0 16bb     ......BhA.-..T..

000022e0 <RCON>:
    22e0:	0001 0000 0002 0000 0004 0000 0008 0000     ................
    22f0:	0010 0000 0020 0000 0040 0000 0080 0000     .... ...@.......
    2300:	001b 0000 0036 0000                         ....6...

00002308 <RT0>:
    2308:	f451 50a7 417e 5365 171a c3a4 273a 965e     Q..P~AeS....:'^.
    2318:	ab3b cb6b 9d1f f145 faac ab58 e34b 9303     ;.k...E...X.K...
    2328:	3020 55fa 76ad f66d cc88 9176 02f5 254c      0.U.vm...v...L%
    2338:	e54f fcd7 2ac5 d7cb 3526 8044 62b5 8fa3     O....*..&5D..b..
    2348:	b1de 495a ba25 671b ea45 980e fe5d e1c0     ..ZI%..gE...]...
    2358:	2fc3 0275 4c81 12f0 468d a397 d36b c6f9     ./u..L...F..k...
    2368:	8f03 e75f 9215 959c 6dbf eb7a 5295 da59     .._......mz..RY.
    2378:	bed4 2d83 7458 d321 e049 2969 c98e 44c8     ...-Xt!.I.i)...D
    2388:	c275 6a89 8ef4 7879 5899 6b3e b927 dd71     u..j..yx.X>k'.q.
    2398:	e1be b64f 88f0 17ad 20c9 66ac ce7d b43a     ..O...... .f}.:.
    23a8:	df63 184a 1ae5 8231 5197 6033 5362 457f     c.J...1..Q3`bS.E
    23b8:	64b1 e077 6bbb 84ae 81fe 1ca0 08f9 942b     .dw..k........+.
    23c8:	4870 5868 458f 19fd de94 876c 7b52 b7f8     pHhX.E....l.R{..
    23d8:	73ab 23d3 4b72 e202 1fe3 578f 5566 2aab     .s.#rK.....WfU.*
    23e8:	ebb2 0728 b52f 03c2 c586 9a7b 37d3 a508     ..(./.....{..7..
    23f8:	2830 f287 bf23 b2a5 0302 ba6a 16ed 5c82     0(..#.....j....\
    2408:	cf8a 2b1c 79a7 92b4 07f3 f0f2 694e a1e2     ...+.y......Ni..
    2418:	da65 cdf4 0506 d5be 34d1 1f62 a6c4 8afe     e........4b.....
    2428:	2e34 9d53 f3a2 a055 8a05 32e1 f6a4 75eb     4.S...U....2...u
    2438:	830b 39ec 6040 aaef 715e 069f 6ebd 5110     ...9@`..^q...n.Q
    2448:	213e f98a dd96 3d06 3edd ae05 e64d 46bd     >!.....=.>..M..F
    2458:	5491 b58d c471 055d 0604 6fd4 5060 ff15     .T..q.]....o`P..
    2468:	9819 24fb bdd6 97e9 4089 cc43 d967 779e     ...$.....@C.g..w
    2478:	e8b0 bd42 8907 888b 19e7 385b c879 dbee     ..B.......[8y...
    2488:	7ca1 470a 427c e90f 84f8 c91e 0000 0000     .|.G|B..........
    2498:	8009 8386 2b32 48ed 111e ac70 5a6c 4e72     ....2+.H..p.lZrN
    24a8:	0efd fbff 850f 5638 ae3d 1ed5 2d36 2739     ......8V=...6-9'
    24b8:	0f0a 64d9 5c68 21a6 5b9b d154 3624 3a2e     ...dh\.!.[T.$6.:
    24c8:	0a0c b167 5793 0fe7 eeb4 d296 9b1b 9e91     ..g..W..........
    24d8:	c080 4fc5 dc61 a220 775a 694b 121c 161a     ...Oa. .ZwKi....
    24e8:	93e2 0aba a0c0 e52a 223c 43e0 1b12 1d17     ......*.<".C....
    24f8:	090e 0b0d 8bf2 adc7 b62d b9a8 1e14 c8a9     ........-.......
    2508:	f157 8519 75af 4c07 99ee bbdd 7fa3 fd60     W....u.L......`.
    2518:	01f7 9f26 725c bcf5 6644 c53b fb5b 347e     ..&.\r..Df;.[.~4
    2528:	438b 7629 23cb dcc6 edb6 68fc e4b8 63f1     .C)v.#.....h...c
    2538:	31d7 cadc 6342 1085 9713 4022 c684 2011     .1..Bc...."@... 
    2548:	4a85 7d24 bbd2 f83d f9ae 1132 29c7 6da1     .J$}..=...2..).m
    2558:	9e1d 4b2f b2dc f330 860d ec52 c177 d0e3     ../K..0...R.w...
    2568:	b32b 6c16 70a9 99b9 9411 fa48 e947 2264     +..l.p....H.G.d"
    2578:	fca8 c48c f0a0 1a3f 7d56 d82c 3322 ef90     ......?.V},."3..
    2588:	4987 c74e 38d9 c1d1 ca8c fea2 d498 360b     .IN..8.........6
    2598:	f5a6 cf81 7aa5 28de b7da 268e ad3f a4bf     .....z.(...&?...
    25a8:	3a2c e49d 7850 0d92 5f6a 9bcc 7e54 6246     ,:..Px..j_..T~Fb
    25b8:	8df6 c213 d890 e8b8 392e 5ef7 c382 f5af     .........9.^....
    25c8:	5d9f be80 d069 7c93 d56f a92d 25cf b312     .]..i..|o.-..%..
    25d8:	acc8 3b99 1810 a77d 9ce8 6e63 3bdb 7bbb     ...;..}...cn.;.{
    25e8:	26cd 0978 596e f418 9aec 01b7 4f83 a89a     .&x.nY.......O..
    25f8:	95e6 656e ffaa 7ee6 bc21 08cf 15ef e6e8     ..ne...~!.......
    2608:	e7ba d99b 6f4a ce36 9fea d409 b029 d67c     ....Jo6.....).|.
    2618:	a431 afb2 3f2a 3123 a5c6 3094 a235 c066     1...*?#1...05.f.
    2628:	4e74 37bc 82fc a6ca 90e0 b0d0 a733 15d8     tN.7........3...
    2638:	04f1 4a98 ec41 f7da cd7f 0e50 9117 2ff6     ...JA.....P..../
    2648:	4d76 8dd6 ef43 4db0 aacc 544d 96e4 df04     vM..C..M..MT....
    2658:	d19e e3b5 6a4c 1b88 2cc1 b81f 6546 7f51     ....Lj...,..FeQ.
    2668:	5e9d 04ea 8c01 5d35 87fa 7374 0bfb 2e41     .^....5]..ts..A.
    2678:	67b3 5a1d db92 52d2 10e9 3356 d66d 1347     .g.Z...R..V3m.G.
    2688:	d79a 8c61 a137 7a0c f859 8e14 13eb 893c     ..a.7..zY.....<.
    2698:	a9ce ee27 61b7 35c9 1ce1 ede5 477a 3cb1     ..'..a.5....zG.<
    26a8:	d29c 59df f255 3f73 1418 79ce c773 bf37     ...YU.s?...ys.7.
    26b8:	f753 eacd fd5f 5baa 3ddf 146f 4478 86db     S..._..[.=o.xD..
    26c8:	afca 81f3 68b9 3ec4 2438 2c34 a3c2 5f40     .....h.>8$4,..@_
    26d8:	1d16 72c3 e2bc 0c25 3c28 8b49 0dff 4195     ...r..%.(<I....A
    26e8:	a839 7101 0c08 deb3 b4d8 9ce4 5664 90c1     9..q........dV..
    26f8:	cb7b 6184 32d5 70b6 6c48 745c b8d0 4257     {..a.2.pHl\t..WB

00002708 <RT3>:
    2708:	a7f4 5150 6541 7e53 a417 1ac3 5e27 3a96     ..PQAeS~....'^.:
    2718:	6bab 3bcb 459d 1ff1 58fa acab 03e3 4b93     .k.;.E...X.....K
    2728:	fa30 2055 6d76 adf6 76cc 8891 4c02 f525     0.U vm...v...L%.
    2738:	d7e5 4ffc cb2a c5d7 4435 2680 a362 b58f     ...O*...5D.&b...
    2748:	5ab1 de49 1bba 2567 0eea 4598 c0fe 5de1     .ZI...g%...E...]
    2758:	752f c302 f04c 8112 9746 8da3 f9d3 6bc6     /u..L...F......k
    2768:	5f8f 03e7 9c92 1595 7a6d bfeb 5952 95da     ._......mz..RY..
    2778:	83be d42d 2174 58d3 69e0 4929 c8c9 8e44     ..-.t!.X.i)I..D.
    2788:	89c2 756a 798e f478 3e58 996b 71b9 27dd     ..ju.yx.X>k..q.'
    2798:	4fe1 beb6 ad88 f017 ac20 c966 3ace 7db4     .O...... .f..:.}
    27a8:	4adf 6318 311a e582 3351 9760 7f53 6245     .J.c.1..Q3`.S.Eb
    27b8:	7764 b1e0 ae6b bb84 a081 fe1c 2b08 f994     dw..k........+..
    27c8:	6848 7058 fd45 8f19 6cde 9487 f87b 52b7     HhXpE....l..{..R
    27d8:	d373 ab23 024b 72e2 8f1f e357 ab55 662a     s.#.K..r..W.U.*f
    27e8:	28eb b207 c2b5 2f03 7bc5 869a 0837 d3a5     .(...../.{..7...
    27f8:	8728 30f2 a5bf 23b2 6a03 02ba 8216 ed5c     (..0...#.j....\.
    2808:	1ccf 8a2b b479 a792 f207 f3f0 e269 4ea1     ..+.y.......i..N
    2818:	f4da 65cd be05 06d5 6234 d11f fea6 c48a     ...e....4b......
    2828:	532e 349d 55f3 a2a0 e18a 0532 ebf6 a475     .S.4.U....2...u.
    2838:	ec83 0b39 ef60 40aa 9f71 5e06 106e bd51     ..9.`..@q..^n.Q.
    2848:	8a21 3ef9 06dd 963d 053e ddae bde6 4d46     !..>..=.>.....FM
    2858:	8d54 91b5 5dc4 7105 d406 046f 1550 60ff     T....].q..o.P..`
    2868:	fb98 1924 e9bd d697 4340 89cc 9ed9 6777     ..$.....@C....wg
    2878:	42e8 b0bd 8b89 0788 5b19 e738 eec8 79db     .B.......[8....y
    2888:	0a7c a147 0f42 7ce9 1e84 f8c9 0000 0000     |.G.B..|........
    2898:	8680 0983 ed2b 3248 7011 1eac 725a 6c4e     ....+.H2.p..ZrNl
    28a8:	ff0e fdfb 3885 0f56 d5ae 3d1e 392d 3627     .....8V....=-9'6
    28b8:	d90f 0a64 a65c 6821 545b 9bd1 2e36 243a     ..d.\.!h[T..6.:$
    28c8:	670a 0cb1 e757 930f 96ee b4d2 919b 1b9e     .g..W...........
    28d8:	c5c0 804f 20dc 61a2 4b77 5a69 1a12 1c16     ..O.. .awKiZ....
    28e8:	ba93 e20a 2aa0 c0e5 e022 3c43 171b 121d     .....*..".C<....
    28f8:	0d09 0e0b c78b f2ad a8b6 2db9 a91e 14c8     ...........-....
    2908:	19f1 5785 0775 af4c dd99 eebb 607f a3fd     ...Wu.L......`..
    2918:	2601 f79f f572 5cbc 3b66 44c5 7efb 5b34     .&..r..\f;.D.~4[
    2928:	2943 8b76 c623 cbdc fced b668 f1e4 b863     C)v.#.....h...c.
    2938:	dc31 d7ca 8563 4210 2297 1340 11c6 8420     1...c..B."@... .
    2948:	244a 857d 3dbb d2f8 32f9 ae11 a129 c76d     J$}..=...2..).m.
    2958:	2f9e 1d4b 30b2 dcf3 5286 0dec e3c1 77d0     ./K..0...R.....w
    2968:	16b3 2b6c b970 a999 4894 11fa 64e9 4722     ..l+p....H...d"G
    2978:	8cfc a8c4 3ff0 a01a 2c7d 56d8 9033 22ef     .....?..},.V3.."
    2988:	4e49 87c7 d138 d9c1 a2ca 8cfe 0bd4 9836     IN..8.........6.
    2998:	81f5 a6cf de7a a528 8eb7 da26 bfad 3fa4     ....z.(...&....?
    29a8:	9d3a 2ce4 9278 500d cc5f 6a9b 467e 5462     :..,x..P_..j~FbT
    29b8:	138d f6c2 b8d8 90e8 f739 2e5e afc3 82f5     ........9.^.....
    29c8:	805d 9fbe 93d0 697c 2dd5 6fa9 1225 cfb3     ].....|i.-.o%...
    29d8:	99ac c83b 7d18 10a7 639c e86e bb3b db7b     ..;..}...cn.;.{.
    29e8:	7826 cd09 1859 6ef4 b79a ec01 9a4f 83a8     &x..Y..n....O...
    29f8:	6e95 e665 e6ff aa7e cfbc 2108 e815 efe6     .ne...~....!....
    2a08:	9be7 bad9 366f 4ace 099f ead4 7cb0 29d6     ....o6.J.....|.)
    2a18:	b2a4 31af 233f 2a31 94a5 c630 66a2 35c0     ...1?#1*..0..f.5
    2a28:	bc4e 7437 ca82 fca6 d090 e0b0 d8a7 3315     N.7t...........3
    2a38:	9804 f14a daec 41f7 50cd 7f0e f691 172f     ..J....A.P..../.
    2a48:	d64d 768d b0ef 434d 4daa cc54 0496 e4df     M..v..MC.MT.....
    2a58:	b5d1 9ee3 886a 4c1b 1f2c c1b8 5165 467f     ....j..L,...eQ.F
    2a68:	ea5e 9d04 358c 015d 7487 fa73 410b fb2e     ^....5]..ts..A..
    2a78:	1d67 b35a d2db 9252 5610 e933 47d6 6d13     g.Z...R..V3..G.m
    2a88:	61d7 9a8c 0ca1 377a 14f8 598e 3c13 eb89     .a....z7...Y.<..
    2a98:	27a9 ceee c961 b735 e51c e1ed b147 7a3c     .'..a.5.....G.<z
    2aa8:	dfd2 9c59 73f2 553f ce14 1879 37c7 73bf     ..Y..s?U..y..7.s
    2ab8:	cdf7 53ea aafd 5f5b 6f3d df14 db44 7886     ...S..[_=o..D..x
    2ac8:	f3af ca81 c468 b93e 3424 382c 40a3 c25f     ....h.>.$4,8.@_.
    2ad8:	c31d 1672 25e2 bc0c 493c 288b 950d ff41     ..r..%..<I.(..A.
    2ae8:	01a8 3971 b30c 08de e4b4 d89c c156 6490     ..q9........V..d
    2af8:	84cb 7b61 b632 d570 5c6c 4874 57b8 d042     ..a{2.p.l\tH.WB.

00002b08 <RT1>:
    2b08:	5150 a7f4 7e53 6541 1ac3 a417 3a96 5e27     PQ..S~Ae.....:'^
    2b18:	3bcb 6bab 1ff1 459d acab 58fa 4b93 03e3     .;.k...E...X.K..
    2b28:	2055 fa30 adf6 6d76 8891 76cc f525 4c02     U 0...vm...v%..L
    2b38:	4ffc d7e5 c5d7 cb2a 2680 4435 b58f a362     .O....*..&5D..b.
    2b48:	de49 5ab1 2567 1bba 4598 0eea 5de1 c0fe     I..Zg%...E...]..
    2b58:	c302 752f 8112 f04c 8da3 9746 6bc6 f9d3     ../u..L...F..k..
    2b68:	03e7 5f8f 1595 9c92 bfeb 7a6d 95da 5952     ..._......mz..RY
    2b78:	d42d 83be 58d3 2174 4929 69e0 8e44 c8c9     -....Xt!)I.iD...
    2b88:	756a 89c2 f478 798e 996b 3e58 27dd 71b9     ju..x..yk.X>.'.q
    2b98:	beb6 4fe1 f017 ad88 c966 ac20 7db4 3ace     ...O....f. ..}.:
    2ba8:	6318 4adf e582 311a 9760 3351 6245 7f53     .c.J...1`.Q3EbS.
    2bb8:	b1e0 7764 bb84 ae6b fe1c a081 f994 2b08     ..dw..k........+
    2bc8:	7058 6848 8f19 fd45 9487 6cde 52b7 f87b     XpHh..E....l.R{.
    2bd8:	ab23 d373 72e2 024b e357 8f1f 662a ab55     #.s..rK.W...*fU.
    2be8:	b207 28eb 2f03 c2b5 869a 7bc5 d3a5 0837     ...(./.....{..7.
    2bf8:	30f2 8728 23b2 a5bf 02ba 6a03 ed5c 8216     .0(..#.....j\...
    2c08:	8a2b 1ccf a792 b479 f3f0 f207 4ea1 e269     +.....y......Ni.
    2c18:	65cd f4da 06d5 be05 d11f 6234 c48a fea6     .e........4b....
    2c28:	349d 532e a2a0 55f3 0532 e18a a475 ebf6     .4.S...U2...u...
    2c38:	0b39 ec83 40aa ef60 5e06 9f71 bd51 106e     9....@`..^q.Q.n.
    2c48:	3ef9 8a21 963d 06dd ddae 053e 4d46 bde6     .>!.=.....>.FM..
    2c58:	91b5 8d54 7105 5dc4 046f d406 60ff 1550     ..T..q.]o....`P.
    2c68:	1924 fb98 d697 e9bd 89cc 4340 6777 9ed9     $.........@Cwg..
    2c78:	b0bd 42e8 0788 8b89 e738 5b19 79db eec8     ...B....8..[.y..
    2c88:	a147 0a7c 7ce9 0f42 f8c9 1e84 0000 0000     G.|..|B.........
    2c98:	0983 8680 3248 ed2b 1eac 7011 6c4e 725a     ....H2+....pNlZr
    2ca8:	fdfb ff0e 0f56 3885 3d1e d5ae 3627 392d     ....V..8.=..'6-9
    2cb8:	0a64 d90f 6821 a65c 9bd1 545b 243a 2e36     d...!h\...[T:$6.
    2cc8:	0cb1 670a 930f e757 b4d2 96ee 1b9e 919b     ...g..W.........
    2cd8:	804f c5c0 61a2 20dc 5a69 4b77 1c16 1a12     O....a. iZwK....
    2ce8:	e20a ba93 c0e5 2aa0 3c43 e022 121d 171b     .......*C<".....
    2cf8:	0e0b 0d09 f2ad c78b 2db9 a8b6 14c8 a91e     .........-......
    2d08:	5785 19f1 af4c 0775 eebb dd99 a3fd 607f     .W..L.u........`
    2d18:	f79f 2601 5cbc f572 44c5 3b66 5b34 7efb     ...&.\r..Df;4[.~
    2d28:	8b76 2943 cbdc c623 b668 fced b863 f1e4     v.C)..#.h...c...
    2d38:	d7ca dc31 4210 8563 1340 2297 8420 11c6     ..1..Bc.@.." ...
    2d48:	857d 244a d2f8 3dbb ae11 32f9 c76d a129     }.J$...=...2m.).
    2d58:	1d4b 2f9e dcf3 30b2 0dec 5286 77d0 e3c1     K../...0...R.w..
    2d68:	2b6c 16b3 a999 b970 11fa 4894 4722 64e9     l+....p....H"G.d
    2d78:	a8c4 8cfc a01a 3ff0 56d8 2c7d 22ef 9033     .......?.V},."3.
    2d88:	87c7 4e49 d9c1 d138 8cfe a2ca 9836 0bd4     ..IN..8.....6...
    2d98:	a6cf 81f5 a528 de7a da26 8eb7 3fa4 bfad     ....(.z.&....?..
    2da8:	2ce4 9d3a 500d 9278 6a9b cc5f 5462 467e     .,:..Px..j_.bT~F
    2db8:	f6c2 138d 90e8 b8d8 2e5e f739 82f5 afc3     ........^.9.....
    2dc8:	9fbe 805d 697c 93d0 6fa9 2dd5 cfb3 1225     ..].|i...o.-..%.
    2dd8:	c83b 99ac 10a7 7d18 e86e 639c db7b bb3b     ;......}n..c{.;.
    2de8:	cd09 7826 6ef4 1859 ec01 b79a 83a8 9a4f     ..&x.nY.......O.
    2df8:	e665 6e95 aa7e e6ff 2108 cfbc efe6 e815     e..n~....!......
    2e08:	bad9 9be7 4ace 366f ead4 099f 29d6 7cb0     .....Jo6.....).|
    2e18:	31af b2a4 2a31 233f c630 94a5 35c0 66a2     .1..1*?#0....5.f
    2e28:	7437 bc4e fca6 ca82 e0b0 d090 3315 d8a7     7tN..........3..
    2e38:	f14a 9804 41f7 daec 7f0e 50cd 172f f691     J....A.....P/...
    2e48:	768d d64d 434d b0ef cc54 4daa e4df 0496     .vM.MC..T..M....
    2e58:	9ee3 b5d1 4c1b 886a c1b8 1f2c 467f 5165     .....Lj...,..FeQ
    2e68:	9d04 ea5e 015d 358c fa73 7487 fb2e 410b     ..^.]..5s..t...A
    2e78:	b35a 1d67 9252 d2db e933 5610 6d13 47d6     Z.g.R...3..V.m.G
    2e88:	9a8c 61d7 377a 0ca1 598e 14f8 eb89 3c13     ...az7...Y.....<
    2e98:	ceee 27a9 b735 c961 e1ed e51c 7a3c b147     ...'5.a.....<zG.
    2ea8:	9c59 dfd2 553f 73f2 1879 ce14 73bf 37c7     Y...?U.sy....s.7
    2eb8:	53ea cdf7 5f5b aafd df14 6f3d 7886 db44     .S..[_....=o.xD.
    2ec8:	ca81 f3af b93e c468 382c 3424 c25f 40a3     ....>.h.,8$4_..@
    2ed8:	1672 c31d bc0c 25e2 288b 493c ff41 950d     r......%.(<IA...
    2ee8:	3971 01a8 08de b30c d89c e4b4 6490 c156     q9...........dV.
    2ef8:	7b61 84cb d570 b632 4874 5c6c d042 57b8     a{..p.2.tHl\B..W

00002f08 <RT2>:
    2f08:	50a7 f451 5365 417e c3a4 171a 965e 273a     .PQ.eS~A....^.:'
    2f18:	cb6b ab3b f145 9d1f ab58 faac 9303 e34b     k.;.E...X.....K.
    2f28:	55fa 3020 f66d 76ad 9176 cc88 254c 02f5     .U 0m..vv...L%..
    2f38:	fcd7 e54f d7cb 2ac5 8044 3526 8fa3 62b5     ..O....*D.&5...b
    2f48:	495a b1de 671b ba25 980e ea45 e1c0 fe5d     ZI...g%...E...].
    2f58:	0275 2fc3 12f0 4c81 a397 468d c6f9 d36b     u../...L...F..k.
    2f68:	e75f 8f03 959c 9215 eb7a 6dbf da59 5295     _.......z..mY..R
    2f78:	2d83 bed4 d321 7458 2969 e049 44c8 c98e     .-..!.Xti)I..D..
    2f88:	6a89 c275 7879 8ef4 6b3e 5899 dd71 b927     .ju.yx..>k.Xq.'.
    2f98:	b64f e1be 17ad 88f0 66ac 20c9 b43a ce7d     O........f. :.}.
    2fa8:	184a df63 8231 1ae5 6033 5197 457f 5362     J.c.1...3`.Q.EbS
    2fb8:	e077 64b1 84ae 6bbb 1ca0 81fe 942b 08f9     w..d...k....+...
    2fc8:	5868 4870 19fd 458f 876c de94 b7f8 7b52     hXpH...El.....R{
    2fd8:	23d3 73ab e202 4b72 578f 1fe3 2aab 5566     .#.s..rK.W...*fU
    2fe8:	0728 ebb2 03c2 b52f 9a7b c586 a508 37d3     (...../.{......7
    2ff8:	f287 2830 b2a5 bf23 ba6a 0302 5c82 16ed     ..0(..#.j....\..
    3008:	2b1c cf8a 92b4 79a7 f0f2 07f3 a1e2 694e     .+.....y......Ni
    3018:	cdf4 da65 d5be 0506 1f62 34d1 8afe a6c4     ..e.....b..4....
    3028:	9d53 2e34 a055 f3a2 32e1 8a05 75eb f6a4     S.4.U....2...u..
    3038:	39ec 830b aaef 6040 069f 715e 5110 6ebd     .9....@`..^q.Q.n
    3048:	f98a 213e 3d06 dd96 ae05 3edd 46bd e64d     ..>!.=.....>.FM.
    3058:	b58d 5491 055d c471 6fd4 0604 ff15 5060     ...T].q..o....`P
    3068:	24fb 9819 97e9 bdd6 cc43 4089 779e d967     .$......C..@.wg.
    3078:	bd42 e8b0 888b 8907 385b 19e7 dbee c879     B.......[8....y.
    3088:	470a 7ca1 e90f 427c c91e 84f8 0000 0000     .G.|..|B........
    3098:	8386 8009 48ed 2b32 ac70 111e 4e72 5a6c     .....H2+p...rNlZ
    30a8:	fbff 0efd 5638 850f 1ed5 ae3d 2739 2d36     ....8V....=.9'6-
    30b8:	64d9 0f0a 21a6 5c68 d154 5b9b 3a2e 3624     .d...!h\T..[.:$6
    30c8:	b167 0a0c 0fe7 5793 d296 eeb4 9e91 9b1b     g......W........
    30d8:	4fc5 c080 a220 dc61 694b 775a 161a 121c     .O.. .a.KiZw....
    30e8:	0aba 93e2 e52a a0c0 43e0 223c 1d17 1b12     ....*....C<"....
    30f8:	0b0d 090e adc7 8bf2 b9a8 b62d c8a9 1e14     ..........-.....
    3108:	8519 f157 4c07 75af bbdd 99ee fd60 7fa3     ..W..L.u....`...
    3118:	9f26 01f7 bcf5 725c c53b 6644 347e fb5b     &.....\r;.Df~4[.
    3128:	7629 438b dcc6 23cb 68fc edb6 63f1 e4b8     )v.C...#.h...c..
    3138:	cadc 31d7 1085 6342 4022 9713 2011 c684     ...1..Bc"@... ..
    3148:	7d24 4a85 f83d bbd2 1132 f9ae 6da1 29c7     $}.J=...2....m.)
    3158:	4b2f 9e1d f330 b2dc ec52 860d d0e3 c177     /K..0...R.....w.
    3168:	6c16 b32b 99b9 70a9 fa48 9411 2264 e947     .l+....pH...d"G.
    3178:	c48c fca8 1a3f f0a0 d82c 7d56 ef90 3322     ....?...,.V}.."3
    3188:	c74e 4987 c1d1 38d9 fea2 ca8c 360b d498     N..I...8.....6..
    3198:	cf81 f5a6 28de 7aa5 268e b7da a4bf ad3f     .....(.z.&....?.
    31a8:	e49d 3a2c 0d92 7850 9bcc 5f6a 6246 7e54     ..,:..Px..j_FbT~
    31b8:	c213 8df6 e8b8 d890 5ef7 392e f5af c382     .........^.9....
    31c8:	be80 5d9f 7c93 d069 a92d d56f b312 25cf     ...].|i.-.o....%
    31d8:	3b99 acc8 a77d 1810 6e63 9ce8 7bbb 3bdb     .;..}...cn...{.;
    31e8:	0978 26cd f418 596e 01b7 9aec a89a 4f83     x..&..nY.......O
    31f8:	656e 95e6 7ee6 ffaa 08cf bc21 e6e8 15ef     ne...~....!.....
    3208:	d99b e7ba ce36 6f4a d409 9fea d67c b029     ....6.Jo....|.).
    3218:	afb2 a431 3123 3f2a 3094 a5c6 c066 a235     ..1.#1*?.0..f.5.
    3228:	37bc 4e74 a6ca 82fc b0d0 90e0 15d8 a733     .7tN..........3.
    3238:	4a98 04f1 f7da ec41 0e50 cd7f 2ff6 9117     .J....A.P..../..
    3248:	8dd6 4d76 4db0 ef43 544d aacc df04 96e4     ..vM.MC.MT......
    3258:	e3b5 d19e 1b88 6a4c b81f 2cc1 7f51 6546     ......Lj...,Q.Fe
    3268:	04ea 5e9d 5d35 8c01 7374 87fa 2e41 0bfb     ...^5]..ts..A...
    3278:	5a1d 67b3 52d2 db92 3356 10e9 1347 d66d     .Z.g.R..V3..G.m.
    3288:	8c61 d79a 7a0c a137 8e14 f859 893c 13eb     a....z7...Y.<...
    3298:	ee27 a9ce 35c9 61b7 ede5 1ce1 3cb1 477a     '....5.a.....<zG
    32a8:	59df d29c 3f73 f255 79ce 1418 bf37 c773     .Y..s?U..y..7.s.
    32b8:	eacd f753 5baa fd5f 146f 3ddf 86db 4478     ..S..[_.o..=..xD
    32c8:	81f3 afca 3ec4 68b9 2c34 2438 5f40 a3c2     .....>.h4,8$@_..
    32d8:	72c3 1d16 0c25 e2bc 8b49 3c28 4195 0dff     .r..%...I.(<.A..
    32e8:	7101 a839 deb3 0c08 9ce4 b4d8 90c1 5664     .q9...........dV
    32f8:	6184 cb7b 70b6 32d5 745c 6c48 4257 b8d0     .a{..p.2\tHlWB..

00003308 <FT0>:
    3308:	63c6 a563 7cf8 847c 77ee 9977 7bf6 8d7b     .cc..||..ww..{{.
    3318:	f2ff 0df2 6bd6 bd6b 6fde b16f c591 54c5     .....kk..oo....T
    3328:	3060 5030 0102 0301 67ce a967 2b56 7d2b     `00P.....gg.V++}
    3338:	fee7 19fe d7b5 62d7 ab4d e6ab 76ec 9a76     .......bM....vv.
    3348:	ca8f 45ca 821f 9d82 c989 40c9 7dfa 877d     ...E.......@.}}.
    3358:	faef 15fa 59b2 eb59 478e c947 f0fb 0bf0     .....YY..GG.....
    3368:	ad41 ecad d4b3 67d4 a25f fda2 af45 eaaf     A......g_...E...
    3378:	9c23 bf9c a453 f7a4 72e4 9672 c09b 5bc0     #...S....rr....[
    3388:	b775 c2b7 fde1 1cfd 933d ae93 264c 6a26     u.......=...L&&j
    3398:	366c 5a36 3f7e 413f f7f5 02f7 cc83 4fcc     l66Z~??A.......O
    33a8:	3468 5c34 a551 f4a5 e5d1 34e5 f1f9 08f1     h44\Q......4....
    33b8:	71e2 9371 d8ab 73d8 3162 5331 152a 3f15     .qq....sb11S*..?
    33c8:	0408 0c04 c795 52c7 2346 6523 c39d 5ec3     .......RF##e...^
    33d8:	1830 2818 9637 a196 050a 0f05 9a2f b59a     0..(7......./...
    33e8:	070e 0907 1224 3612 801b 9b80 e2df 3de2     ....$..6.......=
    33f8:	ebcd 26eb 274e 6927 b27f cdb2 75ea 9f75     ...&N''i.....uu.
    3408:	0912 1b09 831d 9e83 2c58 742c 1a34 2e1a     ........X,,t4...
    3418:	1b36 2d1b 6edc b26e 5ab4 ee5a a05b fba0     6..-.nn..ZZ.[...
    3428:	52a4 f652 3b76 4d3b d6b7 61d6 b37d ceb3     .RR.v;;M...a}...
    3438:	2952 7b29 e3dd 3ee3 2f5e 712f 8413 9784     R)){...>^//q....
    3448:	53a6 f553 d1b9 68d1 0000 0000 edc1 2ced     .SS....h.......,
    3458:	2040 6020 fce3 1ffc b179 c8b1 5bb6 ed5b     @  `....y....[[.
    3468:	6ad4 be6a cb8d 46cb be67 d9be 3972 4b39     .jj....Fg...r99K
    3478:	4a94 de4a 4c98 d44c 58b0 e858 cf85 4acf     .JJ..LL..XX....J
    3488:	d0bb 6bd0 efc5 2aef aa4f e5aa fbed 16fb     ...k...*O.......
    3498:	4386 c543 4d9a d74d 3366 5533 8511 9485     .CC..MM.f33U....
    34a8:	458a cf45 f9e9 10f9 0204 0602 7ffe 817f     .EE.............
    34b8:	50a0 f050 3c78 443c 9f25 ba9f a84b e3a8     .PP.x<<D%...K...
    34c8:	51a2 f351 a35d fea3 4080 c040 8f05 8a8f     .QQ.]....@@.....
    34d8:	923f ad92 9d21 bc9d 3870 4838 f5f1 04f5     ?...!...p88H....
    34e8:	bc63 dfbc b677 c1b6 daaf 75da 2142 6321     c...w......uB!!c
    34f8:	1020 3010 ffe5 1aff f3fd 0ef3 d2bf 6dd2      ..0...........m
    3508:	cd81 4ccd 0c18 140c 1326 3513 ecc3 2fec     ...L....&..5.../
    3518:	5fbe e15f 9735 a297 4488 cc44 172e 3917     .__.5....DD....9
    3528:	c493 57c4 a755 f2a7 7efc 827e 3d7a 473d     ...WU....~~.z==G
    3538:	64c8 ac64 5dba e75d 1932 2b19 73e6 9573     .dd..]].2..+.ss.
    3548:	60c0 a060 8119 9881 4f9e d14f dca3 7fdc     .``......OO.....
    3558:	2244 6622 2a54 7e2a 903b ab90 880b 8388     D""fT**~;.......
    3568:	468c ca46 eec7 29ee b86b d3b8 1428 3c14     .FF....)k...(..<
    3578:	dea7 79de 5ebc e25e 0b16 1d0b dbad 76db     ...y.^^........v
    3588:	e0db 3be0 3264 5632 3a74 4e3a 0a14 1e0a     ...;d22Vt::N....
    3598:	4992 db49 060c 0a06 2448 6c24 5cb8 e45c     .II.....H$$l.\\.
    35a8:	c29f 5dc2 d3bd 6ed3 ac43 efac 62c4 a662     ...]...nC....bb.
    35b8:	9139 a891 9531 a495 e4d3 37e4 79f2 8b79     9...1......7.yy.
    35c8:	e7d5 32e7 c88b 43c8 376e 5937 6dda b76d     ...2...Cn77Y.mm.
    35d8:	8d01 8c8d d5b1 64d5 4e9c d24e a949 e0a9     .......d.NN.I...
    35e8:	6cd8 b46c 56ac fa56 f4f3 07f4 eacf 25ea     .ll..VV........%
    35f8:	65ca af65 7af4 8e7a ae47 e9ae 0810 1808     .ee..zz.G.......
    3608:	ba6f d5ba 78f0 8878 254a 6f25 2e5c 722e     o....xx.J%%o\..r
    3618:	1c38 241c a657 f1a6 b473 c7b4 c697 51c6     8..$W...s......Q
    3628:	e8cb 23e8 dda1 7cdd 74e8 9c74 1f3e 211f     ...#...|.tt.>..!
    3638:	4b96 dd4b bd61 dcbd 8b0d 868b 8a0f 858a     .KK.a...........
    3648:	70e0 9070 3e7c 423e b571 c4b5 66cc aa66     .pp.|>>Bq....ff.
    3658:	4890 d848 0306 0503 f6f7 01f6 0e1c 120e     .HH.............
    3668:	61c2 a361 356a 5f35 57ae f957 b969 d0b9     .aa.j55_.WW.i...
    3678:	8617 9186 c199 58c1 1d3a 271d 9e27 b99e     .......X:..''...
    3688:	e1d9 38e1 f8eb 13f8 982b b398 1122 3311     ...8....+..."..3
    3698:	69d2 bb69 d9a9 70d9 8e07 898e 9433 a794     .ii....p....3...
    36a8:	9b2d b69b 1e3c 221e 8715 9287 e9c9 20e9     -...<.."....... 
    36b8:	ce87 49ce 55aa ff55 2850 7828 dfa5 7adf     ...I.UU.P((x...z
    36c8:	8c03 8f8c a159 f8a1 8909 8089 0d1a 170d     ....Y...........
    36d8:	bf65 dabf e6d7 31e6 4284 c642 68d0 b868     e......1.BB..hh.
    36e8:	4182 c341 9929 b099 2d5a 772d 0f1e 110f     .AA.)...Z--w....
    36f8:	b07b cbb0 54a8 fc54 bb6d d6bb 162c 3a16     {....TT.m...,..:

00003708 <FT3>:
    3708:	6363 c6a5 7c7c f884 7777 ee99 7b7b f68d     cc..||..ww..{{..
    3718:	f2f2 ff0d 6b6b d6bd 6f6f deb1 c5c5 9154     ....kk..oo....T.
    3728:	3030 6050 0101 0203 6767 cea9 2b2b 567d     00P`....gg..++}V
    3738:	fefe e719 d7d7 b562 abab 4de6 7676 ec9a     ......b....Mvv..
    3748:	caca 8f45 8282 1f9d c9c9 8940 7d7d fa87     ..E.......@.}}..
    3758:	fafa ef15 5959 b2eb 4747 8ec9 f0f0 fb0b     ....YY..GG......
    3768:	adad 41ec d4d4 b367 a2a2 5ffd afaf 45ea     ...A..g...._...E
    3778:	9c9c 23bf a4a4 53f7 7272 e496 c0c0 9b5b     ...#...Srr....[.
    3788:	b7b7 75c2 fdfd e11c 9393 3dae 2626 4c6a     ...u.......=&&jL
    3798:	3636 6c5a 3f3f 7e41 f7f7 f502 cccc 834f     66Zl??A~......O.
    37a8:	3434 685c a5a5 51f4 e5e5 d134 f1f1 f908     44\h...Q..4.....
    37b8:	7171 e293 d8d8 ab73 3131 6253 1515 2a3f     qq....s.11Sb..?*
    37c8:	0404 080c c7c7 9552 2323 4665 c3c3 9d5e     ......R.##eF..^.
    37d8:	1818 3028 9696 37a1 0505 0a0f 9a9a 2fb5     ..(0...7......./
    37e8:	0707 0e09 1212 2436 8080 1b9b e2e2 df3d     ......6$......=.
    37f8:	ebeb cd26 2727 4e69 b2b2 7fcd 7575 ea9f     ..&.''iN....uu..
    3808:	0909 121b 8383 1d9e 2c2c 5874 1a1a 342e     ........,,tX...4
    3818:	1b1b 362d 6e6e dcb2 5a5a b4ee a0a0 5bfb     ..-6nn..ZZ.....[
    3828:	5252 a4f6 3b3b 764d d6d6 b761 b3b3 7dce     RR..;;Mv..a....}
    3838:	2929 527b e3e3 dd3e 2f2f 5e71 8484 1397     )){R..>.//q^....
    3848:	5353 a6f5 d1d1 b968 0000 0000 eded c12c     SS....h.......,.
    3858:	2020 4060 fcfc e31f b1b1 79c8 5b5b b6ed       `@.......y[[..
    3868:	6a6a d4be cbcb 8d46 bebe 67d9 3939 724b     jj....F....g99Kr
    3878:	4a4a 94de 4c4c 98d4 5858 b0e8 cfcf 854a     JJ..LL..XX....J.
    3888:	d0d0 bb6b efef c52a aaaa 4fe5 fbfb ed16     ..k...*....O....
    3898:	4343 86c5 4d4d 9ad7 3333 6655 8585 1194     CC..MM..33Uf....
    38a8:	4545 8acf f9f9 e910 0202 0406 7f7f fe81     EE..............
    38b8:	5050 a0f0 3c3c 7844 9f9f 25ba a8a8 4be3     PP..<<Dx...%...K
    38c8:	5151 a2f3 a3a3 5dfe 4040 80c0 8f8f 058a     QQ.....]@@......
    38d8:	9292 3fad 9d9d 21bc 3838 7048 f5f5 f104     ...?...!88Hp....
    38e8:	bcbc 63df b6b6 77c1 dada af75 2121 4263     ...c...w..u.!!cB
    38f8:	1010 2030 ffff e51a f3f3 fd0e d2d2 bf6d     ..0 ..........m.
    3908:	cdcd 814c 0c0c 1814 1313 2635 ecec c32f     ..L.......5&../.
    3918:	5f5f bee1 9797 35a2 4444 88cc 1717 2e39     __.....5DD....9.
    3928:	c4c4 9357 a7a7 55f2 7e7e fc82 3d3d 7a47     ..W....U~~..==Gz
    3938:	6464 c8ac 5d5d bae7 1919 322b 7373 e695     dd..]]....+2ss..
    3948:	6060 c0a0 8181 1998 4f4f 9ed1 dcdc a37f     ``......OO......
    3958:	2222 4466 2a2a 547e 9090 3bab 8888 0b83     ""fD**~T...;....
    3968:	4646 8cca eeee c729 b8b8 6bd3 1414 283c     FF....)....k..<(
    3978:	dede a779 5e5e bce2 0b0b 161d dbdb ad76     ..y.^^........v.
    3988:	e0e0 db3b 3232 6456 3a3a 744e 0a0a 141e     ..;.22Vd::Nt....
    3998:	4949 92db 0606 0c0a 2424 486c 5c5c b8e4     II......$$lH\\..
    39a8:	c2c2 9f5d d3d3 bd6e acac 43ef 6262 c4a6     ..]...n....Cbb..
    39b8:	9191 39a8 9595 31a4 e4e4 d337 7979 f28b     ...9...1..7.yy..
    39c8:	e7e7 d532 c8c8 8b43 3737 6e59 6d6d dab7     ..2...C.77Ynmm..
    39d8:	8d8d 018c d5d5 b164 4e4e 9cd2 a9a9 49e0     ......d.NN.....I
    39e8:	6c6c d8b4 5656 acfa f4f4 f307 eaea cf25     ll..VV........%.
    39f8:	6565 caaf 7a7a f48e aeae 47e9 0808 1018     ee..zz.....G....
    3a08:	baba 6fd5 7878 f088 2525 4a6f 2e2e 5c72     ...oxx..%%oJ..r\
    3a18:	1c1c 3824 a6a6 57f1 b4b4 73c7 c6c6 9751     ..$8...W...s..Q.
    3a28:	e8e8 cb23 dddd a17c 7474 e89c 1f1f 3e21     ..#...|.tt....!>
    3a38:	4b4b 96dd bdbd 61dc 8b8b 0d86 8a8a 0f85     KK.....a........
    3a48:	7070 e090 3e3e 7c42 b5b5 71c4 6666 ccaa     pp..>>B|...qff..
    3a58:	4848 90d8 0303 0605 f6f6 f701 0e0e 1c12     HH..............
    3a68:	6161 c2a3 3535 6a5f 5757 aef9 b9b9 69d0     aa..55_jWW.....i
    3a78:	8686 1791 c1c1 9958 1d1d 3a27 9e9e 27b9     ......X...':...'
    3a88:	e1e1 d938 f8f8 eb13 9898 2bb3 1111 2233     ..8........+..3"
    3a98:	6969 d2bb d9d9 a970 8e8e 0789 9494 33a7     ii....p........3
    3aa8:	9b9b 2db6 1e1e 3c22 8787 1592 e9e9 c920     ...-.."<...... .
    3ab8:	cece 8749 5555 aaff 2828 5078 dfdf a57a     ..I.UU..((xP..z.
    3ac8:	8c8c 038f a1a1 59f8 8989 0980 0d0d 1a17     .......Y........
    3ad8:	bfbf 65da e6e6 d731 4242 84c6 6868 d0b8     ...e..1.BB..hh..
    3ae8:	4141 82c3 9999 29b0 2d2d 5a77 0f0f 1e11     AA.....)--wZ....
    3af8:	b0b0 7bcb 5454 a8fc bbbb 6dd6 1616 2c3a     ...{TT.....m..:,

00003b08 <FT1>:
    3b08:	c6a5 6363 f884 7c7c ee99 7777 f68d 7b7b     ..cc..||..ww..{{
    3b18:	ff0d f2f2 d6bd 6b6b deb1 6f6f 9154 c5c5     ......kk..ooT...
    3b28:	6050 3030 0203 0101 cea9 6767 567d 2b2b     P`00......gg}V++
    3b38:	e719 fefe b562 d7d7 4de6 abab ec9a 7676     ....b....M....vv
    3b48:	8f45 caca 1f9d 8282 8940 c9c9 fa87 7d7d     E.......@.....}}
    3b58:	ef15 fafa b2eb 5959 8ec9 4747 fb0b f0f0     ......YY..GG....
    3b68:	41ec adad b367 d4d4 5ffd a2a2 45ea afaf     .A..g...._...E..
    3b78:	23bf 9c9c 53f7 a4a4 e496 7272 9b5b c0c0     .#...S....rr[...
    3b88:	75c2 b7b7 e11c fdfd 3dae 9393 4c6a 2626     .u.......=..jL&&
    3b98:	6c5a 3636 7e41 3f3f f502 f7f7 834f cccc     Zl66A~??....O...
    3ba8:	685c 3434 51f4 a5a5 d134 e5e5 f908 f1f1     \h44.Q..4.......
    3bb8:	e293 7171 ab73 d8d8 6253 3131 2a3f 1515     ..qqs...Sb11?*..
    3bc8:	080c 0404 9552 c7c7 4665 2323 9d5e c3c3     ....R...eF##^...
    3bd8:	3028 1818 37a1 9696 0a0f 0505 2fb5 9a9a     (0...7......./..
    3be8:	0e09 0707 2436 1212 1b9b 8080 df3d e2e2     ....6$......=...
    3bf8:	cd26 ebeb 4e69 2727 7fcd b2b2 ea9f 7575     &...iN''......uu
    3c08:	121b 0909 1d9e 8383 5874 2c2c 342e 1a1a     ........tX,,.4..
    3c18:	362d 1b1b dcb2 6e6e b4ee 5a5a 5bfb a0a0     -6....nn..ZZ.[..
    3c28:	a4f6 5252 764d 3b3b b761 d6d6 7dce b3b3     ..RRMv;;a....}..
    3c38:	527b 2929 dd3e e3e3 5e71 2f2f 1397 8484     {R))>...q^//....
    3c48:	a6f5 5353 b968 d1d1 0000 0000 c12c eded     ..SSh.......,...
    3c58:	4060 2020 e31f fcfc 79c8 b1b1 b6ed 5b5b     `@  .....y....[[
    3c68:	d4be 6a6a 8d46 cbcb 67d9 bebe 724b 3939     ..jjF....g..Kr99
    3c78:	94de 4a4a 98d4 4c4c b0e8 5858 854a cfcf     ..JJ..LL..XXJ...
    3c88:	bb6b d0d0 c52a efef 4fe5 aaaa ed16 fbfb     k...*....O......
    3c98:	86c5 4343 9ad7 4d4d 6655 3333 1194 8585     ..CC..MMUf33....
    3ca8:	8acf 4545 e910 f9f9 0406 0202 fe81 7f7f     ..EE............
    3cb8:	a0f0 5050 7844 3c3c 25ba 9f9f 4be3 a8a8     ..PPDx<<.%...K..
    3cc8:	a2f3 5151 5dfe a3a3 80c0 4040 058a 8f8f     ..QQ.]....@@....
    3cd8:	3fad 9292 21bc 9d9d 7048 3838 f104 f5f5     .?...!..Hp88....
    3ce8:	63df bcbc 77c1 b6b6 af75 dada 4263 2121     .c...w..u...cB!!
    3cf8:	2030 1010 e51a ffff fd0e f3f3 bf6d d2d2     0 ..........m...
    3d08:	814c cdcd 1814 0c0c 2635 1313 c32f ecec     L.......5&../...
    3d18:	bee1 5f5f 35a2 9797 88cc 4444 2e39 1717     ..__.5....DD9...
    3d28:	9357 c4c4 55f2 a7a7 fc82 7e7e 7a47 3d3d     W....U....~~Gz==
    3d38:	c8ac 6464 bae7 5d5d 322b 1919 e695 7373     ..dd..]]+2....ss
    3d48:	c0a0 6060 1998 8181 9ed1 4f4f a37f dcdc     ..``......OO....
    3d58:	4466 2222 547e 2a2a 3bab 9090 0b83 8888     fD""~T**.;......
    3d68:	8cca 4646 c729 eeee 6bd3 b8b8 283c 1414     ..FF)....k..<(..
    3d78:	a779 dede bce2 5e5e 161d 0b0b ad76 dbdb     y.....^^....v...
    3d88:	db3b e0e0 6456 3232 744e 3a3a 141e 0a0a     ;...Vd22Nt::....
    3d98:	92db 4949 0c0a 0606 486c 2424 b8e4 5c5c     ..II....lH$$..\\
    3da8:	9f5d c2c2 bd6e d3d3 43ef acac c4a6 6262     ]...n....C....bb
    3db8:	39a8 9191 31a4 9595 d337 e4e4 f28b 7979     .9...1..7.....yy
    3dc8:	d532 e7e7 8b43 c8c8 6e59 3737 dab7 6d6d     2...C...Yn77..mm
    3dd8:	018c 8d8d b164 d5d5 9cd2 4e4e 49e0 a9a9     ....d.....NN.I..
    3de8:	d8b4 6c6c acfa 5656 f307 f4f4 cf25 eaea     ..ll..VV....%...
    3df8:	caaf 6565 f48e 7a7a 47e9 aeae 1018 0808     ..ee..zz.G......
    3e08:	6fd5 baba f088 7878 4a6f 2525 5c72 2e2e     .o....xxoJ%%r\..
    3e18:	3824 1c1c 57f1 a6a6 73c7 b4b4 9751 c6c6     $8...W...s..Q...
    3e28:	cb23 e8e8 a17c dddd e89c 7474 3e21 1f1f     #...|.....tt!>..
    3e38:	96dd 4b4b 61dc bdbd 0d86 8b8b 0f85 8a8a     ..KK.a..........
    3e48:	e090 7070 7c42 3e3e 71c4 b5b5 ccaa 6666     ..ppB|>>.q....ff
    3e58:	90d8 4848 0605 0303 f701 f6f6 1c12 0e0e     ..HH............
    3e68:	c2a3 6161 6a5f 3535 aef9 5757 69d0 b9b9     ..aa_j55..WW.i..
    3e78:	1791 8686 9958 c1c1 3a27 1d1d 27b9 9e9e     ....X...':...'..
    3e88:	d938 e1e1 eb13 f8f8 2bb3 9898 2233 1111     8........+..3"..
    3e98:	d2bb 6969 a970 d9d9 0789 8e8e 33a7 9494     ..iip........3..
    3ea8:	2db6 9b9b 3c22 1e1e 1592 8787 c920 e9e9     .-.."<...... ...
    3eb8:	8749 cece aaff 5555 5078 2828 a57a dfdf     I.....UUxP((z...
    3ec8:	038f 8c8c 59f8 a1a1 0980 8989 1a17 0d0d     .....Y..........
    3ed8:	65da bfbf d731 e6e6 84c6 4242 d0b8 6868     .e..1.....BB..hh
    3ee8:	82c3 4141 29b0 9999 5a77 2d2d 1e11 0f0f     ..AA.)..wZ--....
    3ef8:	7bcb b0b0 a8fc 5454 6dd6 bbbb 2c3a 1616     .{....TT.m..:,..

00003f08 <FT2>:
    3f08:	a563 63c6 847c 7cf8 9977 77ee 8d7b 7bf6     c..c|..|w..w{..{
    3f18:	0df2 f2ff bd6b 6bd6 b16f 6fde 54c5 c591     ....k..ko..o.T..
    3f28:	5030 3060 0301 0102 a967 67ce 7d2b 2b56     0P`0....g..g+}V+
    3f38:	19fe fee7 62d7 d7b5 e6ab ab4d 9a76 76ec     .....b....M.v..v
    3f48:	45ca ca8f 9d82 821f 40c9 c989 877d 7dfa     .E.......@..}..}
    3f58:	15fa faef eb59 59b2 c947 478e 0bf0 f0fb     ....Y..YG..G....
    3f68:	ecad ad41 67d4 d4b3 fda2 a25f eaaf af45     ..A..g...._...E.
    3f78:	bf9c 9c23 f7a4 a453 9672 72e4 5bc0 c09b     ..#...S.r..r.[..
    3f88:	c2b7 b775 1cfd fde1 ae93 933d 6a26 264c     ..u.......=.&jL&
    3f98:	5a36 366c 413f 3f7e 02f7 f7f5 4fcc cc83     6Zl6?A~?.....O..
    3fa8:	5c34 3468 f4a5 a551 34e5 e5d1 08f1 f1f9     4\h4..Q..4......
    3fb8:	9371 71e2 73d8 d8ab 5331 3162 3f15 152a     q..q.s..1Sb1.?*.
    3fc8:	0c04 0408 52c7 c795 6523 2346 5ec3 c39d     .....R..#eF#.^..
    3fd8:	2818 1830 a196 9637 0f05 050a b59a 9a2f     .(0...7......./.
    3fe8:	0907 070e 3612 1224 9b80 801b 3de2 e2df     .....6$......=..
    3ff8:	26eb ebcd 6927 274e cdb2 b27f 9f75 75ea     .&..'iN'....u..u
    4008:	1b09 0912 9e83 831d 742c 2c58 2e1a 1a34     ........,tX,..4.
    4018:	2d1b 1b36 b26e 6edc ee5a 5ab4 fba0 a05b     .-6.n..nZ..Z..[.
    4028:	f652 52a4 4d3b 3b76 61d6 d6b7 ceb3 b37d     R..R;Mv;.a....}.
    4038:	7b29 2952 3ee3 e3dd 712f 2f5e 9784 8413     ){R).>../q^/....
    4048:	f553 53a6 68d1 d1b9 0000 0000 2ced edc1     S..S.h.......,..
    4058:	6020 2040 1ffc fce3 c8b1 b179 ed5b 5bb6      `@ ......y.[..[
    4068:	be6a 6ad4 46cb cb8d d9be be67 4b39 3972     j..j.F....g.9Kr9
    4078:	de4a 4a94 d44c 4c98 e858 58b0 4acf cf85     J..JL..LX..X.J..
    4088:	6bd0 d0bb 2aef efc5 e5aa aa4f 16fb fbed     .k...*....O.....
    4098:	c543 4386 d74d 4d9a 5533 3366 9485 8511     C..CM..M3Uf3....
    40a8:	cf45 458a 10f9 f9e9 0602 0204 817f 7ffe     E..E............
    40b8:	f050 50a0 443c 3c78 ba9f 9f25 e3a8 a84b     P..P<Dx<..%...K.
    40c8:	f351 51a2 fea3 a35d c040 4080 8a8f 8f05     Q..Q..].@..@....
    40d8:	ad92 923f bc9d 9d21 4838 3870 04f5 f5f1     ..?...!.8Hp8....
    40e8:	dfbc bc63 c1b6 b677 75da daaf 6321 2142     ..c...w..u..!cB!
    40f8:	3010 1020 1aff ffe5 0ef3 f3fd 6dd2 d2bf     .0 ..........m..
    4108:	4ccd cd81 140c 0c18 3513 1326 2fec ecc3     .L.......5&../..
    4118:	e15f 5fbe a297 9735 cc44 4488 3917 172e     _.._..5.D..D.9..
    4128:	57c4 c493 f2a7 a755 827e 7efc 473d 3d7a     .W....U.~..~=Gz=
    4138:	ac64 64c8 e75d 5dba 2b19 1932 9573 73e6     d..d]..].+2.s..s
    4148:	a060 60c0 9881 8119 d14f 4f9e 7fdc dca3     `..`....O..O....
    4158:	6622 2244 7e2a 2a54 ab90 903b 8388 880b     "fD"*~T*..;.....
    4168:	ca46 468c 29ee eec7 d3b8 b86b 3c14 1428     F..F.)....k..<(.
    4178:	79de dea7 e25e 5ebc 1d0b 0b16 76db dbad     .y..^..^.....v..
    4188:	3be0 e0db 5632 3264 4e3a 3a74 1e0a 0a14     .;..2Vd2:Nt:....
    4198:	db49 4992 0a06 060c 6c24 2448 e45c 5cb8     I..I....$lH$\..\
    41a8:	5dc2 c29f 6ed3 d3bd efac ac43 a662 62c4     .]...n....C.b..b
    41b8:	a891 9139 a495 9531 37e4 e4d3 8b79 79f2     ..9...1..7..y..y
    41c8:	32e7 e7d5 43c8 c88b 5937 376e b76d 6dda     .2...C..7Yn7m..m
    41d8:	8c8d 8d01 64d5 d5b1 d24e 4e9c e0a9 a949     .....d..N..N..I.
    41e8:	b46c 6cd8 fa56 56ac 07f4 f4f3 25ea eacf     l..lV..V.....%..
    41f8:	af65 65ca 8e7a 7af4 e9ae ae47 1808 0810     e..ez..z..G.....
    4208:	d5ba ba6f 8878 78f0 6f25 254a 722e 2e5c     ..o.x..x%oJ%.r\.
    4218:	241c 1c38 f1a6 a657 c7b4 b473 51c6 c697     .$8...W...s..Q..
    4228:	23e8 e8cb 7cdd dda1 9c74 74e8 211f 1f3e     .#...|..t..t.!>.
    4238:	dd4b 4b96 dcbd bd61 868b 8b0d 858a 8a0f     K..K..a.........
    4248:	9070 70e0 423e 3e7c c4b5 b571 aa66 66cc     p..p>B|>..q.f..f
    4258:	d848 4890 0503 0306 01f6 f6f7 120e 0e1c     H..H............
    4268:	a361 61c2 5f35 356a f957 57ae d0b9 b969     a..a5_j5W..W..i.
    4278:	9186 8617 58c1 c199 271d 1d3a b99e 9e27     .....X...':...'.
    4288:	38e1 e1d9 13f8 f8eb b398 982b 3311 1122     .8........+..3".
    4298:	bb69 69d2 70d9 d9a9 898e 8e07 a794 9433     i..i.p........3.
    42a8:	b69b 9b2d 221e 1e3c 9287 8715 20e9 e9c9     ..-.."<...... ..
    42b8:	49ce ce87 ff55 55aa 7828 2850 7adf dfa5     .I..U..U(xP(.z..
    42c8:	8f8c 8c03 f8a1 a159 8089 8909 170d 0d1a     ......Y.........
    42d8:	dabf bf65 31e6 e6d7 c642 4284 b868 68d0     ..e..1..B..Bh..h
    42e8:	c341 4182 b099 9929 772d 2d5a 110f 0f1e     A..A..).-wZ-....
    42f8:	cbb0 b07b fc54 54a8 d6bb bb6d 3a16 162c     ..{.T..T..m..:,.

00004308 <RSb>:
    4308:	0952 d56a 3630 38a5 40bf 9ea3 f381 fbd7     R.j.06.8.@......
    4318:	e37c 8239 2f9b 87ff 8e34 4443 dec4 cbe9     |.9../..4.CD....
    4328:	7b54 3294 c2a6 3d23 4cee 0b95 fa42 4ec3     T{.2..#=.L..B..N
    4338:	2e08 66a1 d928 b224 5b76 49a2 8b6d 25d1     ...f(.$.v[.Im..%
    4348:	f872 64f6 6886 1698 a4d4 cc5c 655d 92b6     r..d.h....\.]e..
    4358:	706c 5048 edfd dab9 155e 5746 8da7 849d     lpHP....^.FW....
    4368:	d890 00ab bc8c 0ad3 e4f7 0558 b3b8 0645     ..........X...E.
    4378:	2cd0 8f1e 3fca 020f afc1 03bd 1301 6b8a     .,...?.........k
    4388:	913a 4111 674f eadc f297 cecf b4f0 73e6     :..AOg.........s
    4398:	ac96 2274 ade7 8535 f9e2 e837 751c 6edf     ..t"..5...7..u.n
    43a8:	f147 711a 291d 89c5 b76f 0e62 18aa 1bbe     G..q.)..o.b.....
    43b8:	56fc 4b3e d2c6 2079 db9a fec0 cd78 f45a     .V>K..y ....x.Z.
    43c8:	dd1f 33a8 0788 31c7 12b1 5910 8027 5fec     ...3...1...Y'.._
    43d8:	5160 a97f b519 0d4a e52d 9f7a c993 ef9c     `Q....J.-.z.....
    43e8:	e0a0 4d3b 2aae b0f5 ebc8 3cbb 5383 6199     ..;M.*.....<.S.a
    43f8:	2b17 7e04 77ba 26d6 69e1 6314 2155 7d0c     .+.~.w.&.i.cU!.}

00004408 <aes_test_cfb128_pt>:
    4408:	c16b e2be 402e 969f 3de9 117e 9373 2a17     k....@...=~.s..*
    4418:	2dae 578a 031e 9cac b79e ac6f af45 518e     .-.W......o.E..Q
    4428:	c830 461c 5ca3 11e4 fbe5 19c1 0a1a ef52     0..F.\........R.
    4438:	9ff6 4524 4fdf 179b 2bad 7b41 6ce6 1037     ..$E.O...+A{.l7.

00004448 <aes_test_ofb_pt>:
    4448:	c16b e2be 402e 969f 3de9 117e 9373 2a17     k....@...=~.s..*
    4458:	2dae 578a 031e 9cac b79e ac6f af45 518e     .-.W......o.E..Q
    4468:	c830 461c 5ca3 11e4 fbe5 19c1 0a1a ef52     0..F.\........R.
    4478:	9ff6 4524 4fdf 179b 2bad 7b41 6ce6 1037     ..$E.O...+A{.l7.

00004488 <aes_test_ecb_dec>:
    4488:	4144 c26a f5d1 583c 0333 7e91 e96b e0eb     DAj...<X3..~k...
    4498:	e348 9e1e 6725 f218 2992 9c31 f119 a45b     H...%g...)1...[.
    44a8:	8c05 fdcf cbbb 2d38 6f1f 5856 8a5d de4a     ......8-.oVX].J.

000044b8 <aes_test_ecb_enc>:
    44b8:	4cc3 2c05 dac0 738d 1a45 5ffe be03 7f29     .L.,...sE.._..).
    44c8:	f6f3 2a75 d7e8 1183 f038 5641 3106 14b1     ..u*....8.AV.1..
    44d8:	798b ccee a093 5dee 30ff eab4 6321 a46d     .y.....].0..!cm.

000044e8 <aes_test_cbc_dec>:
    44e8:	cafa e037 c8b0 7353 70df 736e c9f7 86af     ..7...Ss.pns....
    44f8:	f65d dd78 ba17 754e 17b6 c668 efad 7b7c     ].x...Nu..h...|{
    4508:	0448 81e1 e68f 7529 a319 8ce8 3157 1304     H.....)u....W1..

00004518 <aes_test_cbc_enc>:
    4518:	058a 5efc 5a09 84f4 088a 28d3 68d3 3d8e     ...^.Z.....(.h.=
    4528:	d97b d566 d83a bbc1 d285 faad 7be8 04b1     {.f.:........{..
    4538:	3cfe 6553 2f3e b545 cd6f b288 89cc f08f     .<Se>/E.o.......

00004548 <aes_test_cfb128_key>:
    4548:	7e2b 1615 ae28 a6d2 f7ab 8815 cf09 3c4f     +~..(.........O<
	...
    4568:	738e f7b0 0eda 5264 10c8 2bf3 9080 e579     .s....dR...+..y.
    4578:	f862 d2ea 2c52 7b6b 0000 0000 0000 0000     b...R,k{........
    4588:	3d60 10eb ca15 be71 732b f0ae 7d85 8177     `=....q.+s...}w.
    4598:	351f 072c 613b d708 982d a310 1409 f4df     .5,.;a..-.......

000045a8 <aes_test_cfb128_ct>:
    45a8:	3f3b 2ed9 2db7 20ad 3433 f849 3ce8 4afb     ;?...-. 34I..<.J
    45b8:	a6c8 3745 b3a0 3fa9 e3cd adcd 1c9f 8be5     ..E7...?........
    45c8:	7526 671f cba3 40b1 80b1 f18c a487 dff4     &u.g...@........
    45d8:	4bc0 3505 5d7c 0e1c c4ea 6fc6 f79f e6f2     .K.5|].....o....
    45e8:	c8cd 6f0d f1dd ab8c c234 0959 9ac9 7441     ...o....4.Y...At
    45f8:	ce67 7f7f 1781 2136 1a96 702b 1d17 7a3d     g.....6!..+p..=z
    4608:	1e2e 1d8a 9bd5 b188 e6c8 ed0f fa1e c9c4     ................
    4618:	5fc0 9c9f 83a9 a04f ae42 ba8f 4b58 ff09     ._....O.B...XK..
    4628:	7edc bf84 79da 4b16 cd7e 8684 5d98 6038     .~...y.K~....]8`
    4638:	ff39 14ed 283b c8b1 1132 633c e531 7b40     9...;(..2.<c1.@{
    4648:	10df 2413 e515 924b 3ea1 a8d0 7a26 f9e2     ...$..K..>..&z..
    4658:	a375 7485 b91a f8ce 3120 3d62 b155 71e4     u..t.... 1b=U..q

00004668 <aes_test_cfb128_iv>:
    4668:	0100 0302 0504 0706 0908 0b0a 0d0c 0f0e     ................

00004678 <aes_test_ofb_key>:
    4678:	7e2b 1615 ae28 a6d2 f7ab 8815 cf09 3c4f     +~..(.........O<
	...
    4698:	738e f7b0 0eda 5264 10c8 2bf3 9080 e579     .s....dR...+..y.
    46a8:	f862 d2ea 2c52 7b6b 0000 0000 0000 0000     b...R,k{........
    46b8:	3d60 10eb ca15 be71 732b f0ae 7d85 8177     `=....q.+s...}w.
    46c8:	351f 072c 613b d708 982d a310 1409 f4df     .5,.;a..-.......

000046d8 <aes_test_ofb_ct>:
    46d8:	3f3b 2ed9 2db7 20ad 3433 f849 3ce8 4afb     ;?...-. 34I..<.J
    46e8:	8977 8d50 9116 038f 3cf5 da52 4ec5 25d8     w.P......<R..N.%
    46f8:	4097 1e05 5f9c f6ec 4443 a8f7 6022 cced     .@..._..CD.."`..
    4708:	4c30 2865 59f6 78c7 a566 d910 d6c1 5eae     0Le(.Y.xf......^
    4718:	c8cd 6f0d f1dd ab8c c234 0959 9ac9 7441     ...o....4.Y...At
    4728:	c2fc 8d8b 634c 7c83 e809 0017 10c1 0104     ....Lc.|........
    4738:	9a8d ea9a f6c0 6f59 9c55 4d6d 59af f2a5     ......YoU.mM.Y..
    4748:	9f6d 0820 ca57 3e6c ac9c 4b52 acd9 2ac9     m. .W.l>..RK...*
    4758:	7edc bf84 79da 4b16 cd7e 8684 5d98 6038     .~...y.K~....]8`
    4768:	eb4f 67dc d240 3a0b 8fc8 d86a 4f2a 8db0     O..g@..:..j.*O..
    4778:	ab71 a047 e886 ed6e 9df3 5b1c 97ba 08c4     q.G...n....[....
    4788:	2601 1d14 f367 e87b 8f53 8b5a 40e7 84e4     .&..g.{.S.Z..@..

00004798 <aes_test_ctr_nonce_counter>:
    4798:	0000 3000 0000 0000 0000 0000 0000 0100     ...0............
    47a8:	6c00 dbb6 54c0 593b 48da 0bd9 0000 0100     .l...T;Y.H......
    47b8:	e000 7b01 7727 3f7f 174a f086 0000 0100     ...{'w.?J.......

000047c8 <aes_test_ctr_key>:
    47c8:	68ae f852 1012 cc67 f74b 76a5 7755 9ef3     .hR...g.K..vUw..
    47d8:	247e 7806 fa17 d7e0 d643 1fce 5332 6391     ~$.x....C...2S.c
    47e8:	9176 03be 505e a820 6eac 8561 f929 dca0     v...^P ..na.)...

000047f8 <aes_test_ctr_len>:
    47f8:	0010 0000 0020 0000 0024 0000               .... ...$...

00004804 <aes_test_ctr_ct>:
    4804:	09e4 4f5d a7b7 79b3 612d a375 1326 b811     ..]O...y-au.&...
	...
    4834:	0451 06a1 8a16 d972 0d79 ee41 da8e 88d3     Q.....r.y.A.....
    4844:	2eeb fc1e da46 c857 e6fc df30 4191 28be     ....F.W...0..A.(
	...
    4864:	cfc1 a848 2f9f d9fd 46cf e952 dbef d772     ..H../...FR...r.
    4874:	4045 2ba4 6dde 3678 9ad5 ea5c f3ae 5310     E@.+.mx6..\....S
    4884:	b225 2f07 0000 0000 0000 0000 0000 0000     %../............

00004894 <aes_test_ctr_pt>:
    4894:	6953 676e 656c 6220 6f6c 6b63 6d20 6773     Single block msg
	...
    48c4:	0100 0302 0504 0706 0908 0b0a 0d0c 0f0e     ................
    48d4:	1110 1312 1514 1716 1918 1b1a 1d1c 1f1e     ................
	...
    48f4:	0100 0302 0504 0706 0908 0b0a 0d0c 0f0e     ................
    4904:	1110 1312 1514 1716 1918 1b1a 1d1c 1f1e     ................
    4914:	2120 2322 0000 0000 0000 0000 0000 0000      !"#............

00004924 <aes_test_xts_key>:
	...
    4944:	1111 1111 1111 1111 1111 1111 1111 1111     ................
    4954:	2222 2222 2222 2222 2222 2222 2222 2222     """"""""""""""""
    4964:	feff fcfd fafb f8f9 f6f7 f4f5 f2f3 f0f1     ................
    4974:	2222 2222 2222 2222 2222 2222 2222 2222     """"""""""""""""

00004984 <aes_test_xts_data_unit>:
	...
    4994:	3333 3333 0033 0000 0000 0000 0000 0000     33333...........
    49a4:	3333 3333 0033 0000 0000 0000 0000 0000     33333...........

000049b4 <aes_test_xts_ct32>:
    49b4:	7c91 9ef6 68bd ecb2 9f9b a3e9 ddea 92a6     .|...h..........
    49c4:	43cd f5d2 9895 85ed 028c 65c2 bf2f 2e92     .C.........e/...
    49d4:	54c4 5e18 166a 6e93 3339 3840 efac 8b83     .T.^j..n93@8....
    49e4:	18fb ff6f 8074 c4ad 9328 ec82 d3d6 f094     ..o.t...(.......
    49f4:	85af 6b33 7a59 1afc 0b90 b22e c91e d249     ..3kYz........I.
    4a04:	df92 044c 0b7e 5321 8621 97a5 221a 897a     ..L.~.!S!...."z.

00004a14 <aes_test_xts_pt32>:
	...
    4a34:	4444 4444 4444 4444 4444 4444 4444 4444     DDDDDDDDDDDDDDDD
    4a44:	4444 4444 4444 4444 4444 4444 4444 4444     DDDDDDDDDDDDDDDD
    4a54:	4444 4444 4444 4444 4444 4444 4444 4444     DDDDDDDDDDDDDDDD
    4a64:	4444 4444 4444 4444 4444 4444 4444 4444     DDDDDDDDDDDDDDDD

00004a74 <key>:
    4a74:	3d60 10eb ca15 be71 732b f0ae 7d85 8177     `=....q.+s...}w.

00004a84 <__sf_fake_stderr>:
	...

00004aa4 <__sf_fake_stdin>:
	...

00004ac4 <__sf_fake_stdout>:
	...

00004ae4 <_init>:
    4ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4ae6:	46c0      	nop			; (mov r8, r8)
    4ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4aea:	bc08      	pop	{r3}
    4aec:	469e      	mov	lr, r3
    4aee:	4770      	bx	lr

00004af0 <__init_array_start>:
    4af0:	0000025d 	.word	0x0000025d

00004af4 <_fini>:
    4af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4af6:	46c0      	nop			; (mov r8, r8)
    4af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4afa:	bc08      	pop	{r3}
    4afc:	469e      	mov	lr, r3
    4afe:	4770      	bx	lr

00004b00 <__fini_array_start>:
    4b00:	00000231 	.word	0x00000231

Disassembly of section .gnu.sgstubs:

0000fb00 <nsc_ext_irq_init>:
    fb00:	e97f e97f 	sg
    fb04:	f7f0 bb14 	b.w	130 <__acle_se_nsc_ext_irq_init>

0000fb08 <nsc_periph_clock_init>:
    fb08:	e97f e97f 	sg
    fb0c:	f7f0 baf2 	b.w	f4 <__acle_se_nsc_periph_clock_init>
	...
