
Crypto-Current.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000408c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .gnu.sgstubs  00000000  0000ff00  0000ff00  00024020  2**0
                  CONTENTS
  2 .relocate     00000074  20000000  0000408c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000040  20000074  00004100  00020074  2**2
                  ALLOC
  4 .heap         00000204  200000b4  00004140  00020074  2**0
                  ALLOC
  5 .stack        00000400  200002b8  00004344  00020074  2**0
                  ALLOC
  6 .userRowBlock 00000020  00804000  00804000  00024000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.attributes 0000002c  00000000  00000000  00024020  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0002404c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001ca8f  00000000  00000000  000240a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002f4e  00000000  00000000  00040b34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000bde2  00000000  00000000  00043a82  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000990  00000000  00000000  0004f864  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001010  00000000  00000000  000501f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0001bd22  00000000  00000000  00051204  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000ee8d  00000000  00000000  0006cf26  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00092dc3  00000000  00000000  0007bdb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00001a84  00000000  00000000  0010eb78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	b8 06 00 20 99 01 00 00 97 01 00 00 97 01 00 00     ... ............
	...
      2c:	97 01 00 00 00 00 00 00 00 00 00 00 97 01 00 00     ................
      3c:	97 01 00 00 97 01 00 00 97 01 00 00 97 01 00 00     ................
      4c:	97 01 00 00 97 01 00 00 97 01 00 00 97 01 00 00     ................
      5c:	97 01 00 00 97 01 00 00 97 01 00 00 97 01 00 00     ................
      6c:	97 01 00 00 97 01 00 00 97 01 00 00 97 01 00 00     ................
      7c:	97 01 00 00 97 01 00 00 97 01 00 00 97 01 00 00     ................
      8c:	97 01 00 00 97 01 00 00 97 01 00 00 97 01 00 00     ................
      9c:	97 01 00 00 97 01 00 00 97 01 00 00 97 01 00 00     ................
      ac:	97 01 00 00 97 01 00 00 97 01 00 00 97 01 00 00     ................
      bc:	97 01 00 00 97 01 00 00 97 01 00 00 97 01 00 00     ................
      cc:	97 01 00 00 97 01 00 00 97 01 00 00 97 01 00 00     ................
      dc:	97 01 00 00 97 01 00 00 97 01 00 00 97 01 00 00     ................
      ec:	97 01 00 00 97 01 00 00                             ........

000000f4 <__do_global_dtors_aux>:
      f4:	b510      	push	{r4, lr}
      f6:	f240 0474 	movw	r4, #116	; 0x74
      fa:	f2c2 0400 	movt	r4, #8192	; 0x2000
      fe:	7823      	ldrb	r3, [r4, #0]
     100:	b963      	cbnz	r3, 11c <__do_global_dtors_aux+0x28>
     102:	f240 0300 	movw	r3, #0
     106:	f2c0 0300 	movt	r3, #0
     10a:	b12b      	cbz	r3, 118 <__do_global_dtors_aux+0x24>
     10c:	f244 0020 	movw	r0, #16416	; 0x4020
     110:	f2c0 0080 	movt	r0, #128	; 0x80
     114:	e000      	b.n	118 <__do_global_dtors_aux+0x24>
     116:	bf00      	nop
     118:	2301      	movs	r3, #1
     11a:	7023      	strb	r3, [r4, #0]
     11c:	bd10      	pop	{r4, pc}
     11e:	46c0      	nop			; (mov r8, r8)

00000120 <frame_dummy>:
     120:	f240 0300 	movw	r3, #0
     124:	f2c0 0300 	movt	r3, #0
     128:	b510      	push	{r4, lr}
     12a:	b14b      	cbz	r3, 140 <frame_dummy+0x20>
     12c:	f240 0178 	movw	r1, #120	; 0x78
     130:	f244 0020 	movw	r0, #16416	; 0x4020
     134:	f2c2 0100 	movt	r1, #8192	; 0x2000
     138:	f2c0 0080 	movt	r0, #128	; 0x80
     13c:	e000      	b.n	140 <frame_dummy+0x20>
     13e:	bf00      	nop
     140:	f244 0020 	movw	r0, #16416	; 0x4020
     144:	f2c0 0080 	movt	r0, #128	; 0x80
     148:	6803      	ldr	r3, [r0, #0]
     14a:	b903      	cbnz	r3, 14e <frame_dummy+0x2e>
     14c:	bd10      	pop	{r4, pc}
     14e:	f240 0300 	movw	r3, #0
     152:	f2c0 0300 	movt	r3, #0
     156:	2b00      	cmp	r3, #0
     158:	d0f8      	beq.n	14c <frame_dummy+0x2c>
     15a:	4798      	blx	r3
     15c:	e7f6      	b.n	14c <frame_dummy+0x2c>
     15e:	46c0      	nop			; (mov r8, r8)

00000160 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     160:	b510      	push	{r4, lr}
	system_init();
     162:	f240 3329 	movw	r3, #809	; 0x329
     166:	f2c0 0300 	movt	r3, #0
     16a:	4798      	blx	r3
 * \brief TrustZone Manager Initialization.
 */
static inline void trustzone_manager_init(void)
{
	/* Setup Port Security Attribution of I/O Pins */
	PORT_SEC->Group[0].NONSEC.reg = CONF_PORT_INIT_NONSEC0_VAL;
     16c:	f243 2300 	movw	r3, #12800	; 0x3200
     170:	f2c4 0300 	movt	r3, #16384	; 0x4000
     174:	2200      	movs	r2, #0
     176:	66da      	str	r2, [r3, #108]	; 0x6c

	/* Setup NVIC Interrupt Target Non-Secure state */
	NVIC->ITNS[0] = CONF_NVIC_INIT_ITNS0_VAL;
     178:	f24e 1300 	movw	r3, #57600	; 0xe100
     17c:	f2ce 0300 	movt	r3, #57344	; 0xe000
     180:	f240 2180 	movw	r1, #640	; 0x280
     184:	505a      	str	r2, [r3, r1]
	NVIC->ITNS[1] = CONF_NVIC_INIT_ITNS1_VAL;
     186:	3104      	adds	r1, #4
     188:	505a      	str	r2, [r3, r1]
	trustzone_manager_init();
	
	gpio_init();
     18a:	f240 338b 	movw	r3, #907	; 0x38b
     18e:	f2c0 0300 	movt	r3, #0
     192:	4798      	blx	r3

}
     194:	bd10      	pop	{r4, pc}

00000196 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     196:	e7fe      	b.n	196 <Dummy_Handler>

00000198 <Reset_Handler>:
{
     198:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     19a:	f244 028c 	movw	r2, #16524	; 0x408c
     19e:	f2c0 0200 	movt	r2, #0
     1a2:	f240 0300 	movw	r3, #0
     1a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
     1aa:	429a      	cmp	r2, r3
     1ac:	d020      	beq.n	1f0 <Reset_Handler+0x58>
                for (; pDest < &_erelocate;) {
     1ae:	001a      	movs	r2, r3
     1b0:	f240 0374 	movw	r3, #116	; 0x74
     1b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
     1b8:	429a      	cmp	r2, r3
     1ba:	d219      	bcs.n	1f0 <Reset_Handler+0x58>
     1bc:	f240 0374 	movw	r3, #116	; 0x74
     1c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     1c4:	3303      	adds	r3, #3
     1c6:	4a24      	ldr	r2, [pc, #144]	; (258 <HEAP_SIZE+0x58>)
     1c8:	1a9b      	subs	r3, r3, r2
     1ca:	089b      	lsrs	r3, r3, #2
     1cc:	3301      	adds	r3, #1
     1ce:	009b      	lsls	r3, r3, #2
     1d0:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     1d2:	f240 0100 	movw	r1, #0
     1d6:	f2c2 0100 	movt	r1, #8192	; 0x2000
     1da:	1851      	adds	r1, r2, r1
     1dc:	f244 008c 	movw	r0, #16524	; 0x408c
     1e0:	f2c0 0000 	movt	r0, #0
     1e4:	1810      	adds	r0, r2, r0
     1e6:	6800      	ldr	r0, [r0, #0]
     1e8:	6008      	str	r0, [r1, #0]
     1ea:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     1ec:	429a      	cmp	r2, r3
     1ee:	d1f0      	bne.n	1d2 <Reset_Handler+0x3a>
        for (pDest = &_szero; pDest < &_ezero;) {
     1f0:	f240 0274 	movw	r2, #116	; 0x74
     1f4:	f2c2 0200 	movt	r2, #8192	; 0x2000
     1f8:	f240 03b4 	movw	r3, #180	; 0xb4
     1fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
     200:	429a      	cmp	r2, r3
     202:	d213      	bcs.n	22c <HEAP_SIZE+0x2c>
     204:	f240 0274 	movw	r2, #116	; 0x74
     208:	f2c2 0200 	movt	r2, #8192	; 0x2000
     20c:	43d3      	mvns	r3, r2
     20e:	f240 01b4 	movw	r1, #180	; 0xb4
     212:	f2c2 0100 	movt	r1, #8192	; 0x2000
     216:	468c      	mov	ip, r1
     218:	4463      	add	r3, ip
     21a:	2103      	movs	r1, #3
     21c:	438b      	bics	r3, r1
     21e:	3304      	adds	r3, #4
     220:	4694      	mov	ip, r2
     222:	4463      	add	r3, ip
                *pDest++ = 0;
     224:	2100      	movs	r1, #0
     226:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     228:	4293      	cmp	r3, r2
     22a:	d1fc      	bne.n	226 <HEAP_SIZE+0x26>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     22c:	f240 0300 	movw	r3, #0
     230:	f2c0 0300 	movt	r3, #0
     234:	227f      	movs	r2, #127	; 0x7f
     236:	4393      	bics	r3, r2
     238:	f64e 5200 	movw	r2, #60672	; 0xed00
     23c:	f2ce 0200 	movt	r2, #57344	; 0xe000
     240:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     242:	f641 4359 	movw	r3, #7257	; 0x1c59
     246:	f2c0 0300 	movt	r3, #0
     24a:	4798      	blx	r3
        main();
     24c:	f640 5355 	movw	r3, #3413	; 0xd55
     250:	f2c0 0300 	movt	r3, #0
     254:	4798      	blx	r3
     256:	e7fe      	b.n	256 <HEAP_SIZE+0x56>
     258:	20000004 	.word	0x20000004

0000025c <FLASH_0_clock_init>:
}

static inline void hri_mclk_set_AHBMASK_NVMCTRL_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
     25c:	f640 0300 	movw	r3, #2048	; 0x800
     260:	f2c4 0300 	movt	r3, #16384	; 0x4000
     264:	691a      	ldr	r2, [r3, #16]
     266:	2180      	movs	r1, #128	; 0x80
     268:	430a      	orrs	r2, r1
     26a:	611a      	str	r2, [r3, #16]
}

static inline void hri_mclk_set_APBBMASK_NVMCTRL_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_NVMCTRL;
     26c:	699a      	ldr	r2, [r3, #24]
     26e:	397c      	subs	r1, #124	; 0x7c
     270:	430a      	orrs	r2, r1
     272:	619a      	str	r2, [r3, #24]
{
#if (defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U))
	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
	hri_mclk_set_APBBMASK_NVMCTRL_bit(MCLK);
#endif
}
     274:	4770      	bx	lr

00000276 <USART_0_PORT_init>:

void USART_0_PORT_init(void)
{
     276:	b530      	push	{r4, r5, lr}
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     278:	f243 2300 	movw	r3, #12800	; 0x3200
     27c:	f2c4 0300 	movt	r3, #16384	; 0x4000
     280:	2258      	movs	r2, #88	; 0x58
     282:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
     284:	2501      	movs	r5, #1
     286:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     288:	2401      	movs	r4, #1
     28a:	4321      	orrs	r1, r4
     28c:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     28e:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     290:	203c      	movs	r0, #60	; 0x3c
     292:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     294:	3a49      	subs	r2, #73	; 0x49
     296:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     298:	3a0d      	subs	r2, #13
     29a:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     29c:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     29e:	2159      	movs	r1, #89	; 0x59
     2a0:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
     2a2:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     2a4:	4322      	orrs	r2, r4
     2a6:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2a8:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     2aa:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     2ac:	394a      	subs	r1, #74	; 0x4a
     2ae:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     2b0:	3111      	adds	r1, #17
     2b2:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     2b4:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PA24, PINMUX_PA24C_SERCOM0_PAD2);

	gpio_set_pin_function(PA25, PINMUX_PA25C_SERCOM0_PAD3);
}
     2b6:	bd30      	pop	{r4, r5, pc}

000002b8 <USART_0_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     2b8:	f641 4300 	movw	r3, #7168	; 0x1c00
     2bc:	f2c4 0300 	movt	r3, #16384	; 0x4000
     2c0:	2140      	movs	r1, #64	; 0x40
     2c2:	22ac      	movs	r2, #172	; 0xac
     2c4:	5099      	str	r1, [r3, r2]
     2c6:	3103      	adds	r1, #3
     2c8:	3a04      	subs	r2, #4
     2ca:	5099      	str	r1, [r3, r2]
}

static inline void hri_mclk_set_APBCMASK_SERCOM0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM0;
     2cc:	f640 0300 	movw	r3, #2048	; 0x800
     2d0:	f2c4 0300 	movt	r3, #16384	; 0x4000
     2d4:	69da      	ldr	r2, [r3, #28]
     2d6:	3941      	subs	r1, #65	; 0x41
     2d8:	430a      	orrs	r2, r1
     2da:	61da      	str	r2, [r3, #28]
	hri_mclk_set_APBCMASK_SERCOM0_bit(MCLK);
#else
	nsc_periph_clock_init(SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC);
	nsc_periph_clock_init(SERCOM0_GCLK_ID_SLOW, CONF_GCLK_SERCOM0_SLOW_SRC);
#endif
}
     2dc:	4770      	bx	lr

000002de <USART_0_init>:

void USART_0_init(void)
{
     2de:	b510      	push	{r4, lr}
	USART_0_CLOCK_init();
     2e0:	f240 23b9 	movw	r3, #697	; 0x2b9
     2e4:	f2c0 0300 	movt	r3, #0
     2e8:	4798      	blx	r3
	usart_sync_init(&USART_0, SERCOM0, (void *)NULL);
     2ea:	f240 4100 	movw	r1, #1024	; 0x400
     2ee:	f2c4 2100 	movt	r1, #16896	; 0x4200
     2f2:	f240 00a4 	movw	r0, #164	; 0xa4
     2f6:	f2c2 0000 	movt	r0, #8192	; 0x2000
     2fa:	2200      	movs	r2, #0
     2fc:	f240 5351 	movw	r3, #1361	; 0x551
     300:	f2c0 0300 	movt	r3, #0
     304:	4798      	blx	r3
	USART_0_PORT_init();
     306:	f240 2377 	movw	r3, #631	; 0x277
     30a:	f2c0 0300 	movt	r3, #0
     30e:	4798      	blx	r3
}
     310:	bd10      	pop	{r4, pc}

00000312 <delay_driver_init>:

void delay_driver_init(void)
{
     312:	b510      	push	{r4, lr}
	delay_init(SysTick);
     314:	f24e 0010 	movw	r0, #57360	; 0xe010
     318:	f2ce 0000 	movt	r0, #57344	; 0xe000
     31c:	f240 431f 	movw	r3, #1055	; 0x41f
     320:	f2c0 0300 	movt	r3, #0
     324:	4798      	blx	r3
}
     326:	bd10      	pop	{r4, pc}

00000328 <system_init>:

void system_init(void)
{
     328:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     32a:	f240 633f 	movw	r3, #1599	; 0x63f
     32e:	f2c0 0300 	movt	r3, #0
     332:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     334:	f240 2300 	movw	r3, #512	; 0x200
     338:	f2c6 0300 	movt	r3, #24576	; 0x6000
     33c:	2280      	movs	r2, #128	; 0x80
     33e:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     340:	609a      	str	r2, [r3, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     342:	f243 2300 	movw	r3, #12800	; 0x3200
     346:	f2c4 0300 	movt	r3, #16384	; 0x4000
     34a:	f2c4 0200 	movt	r2, #16384	; 0x4000
     34e:	629a      	str	r2, [r3, #40]	; 0x28
     350:	22c0      	movs	r2, #192	; 0xc0
     352:	0612      	lsls	r2, r2, #24
     354:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     356:	2147      	movs	r1, #71	; 0x47
     358:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
     35a:	2001      	movs	r0, #1
     35c:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     35e:	545a      	strb	r2, [r3, r1]
	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);

	FLASH_0_clock_init();
     360:	f240 235d 	movw	r3, #605	; 0x25d
     364:	f2c0 0300 	movt	r3, #0
     368:	4798      	blx	r3
	FLASH_0_init();
     36a:	f240 63c5 	movw	r3, #1733	; 0x6c5
     36e:	f2c0 0300 	movt	r3, #0
     372:	4798      	blx	r3

	USART_0_init();
     374:	f240 23df 	movw	r3, #735	; 0x2df
     378:	f2c0 0300 	movt	r3, #0
     37c:	4798      	blx	r3

	delay_driver_init();
     37e:	f240 3313 	movw	r3, #787	; 0x313
     382:	f2c0 0300 	movt	r3, #0
     386:	4798      	blx	r3
}
     388:	bd10      	pop	{r4, pc}

0000038a <gpio_init>:

#include "driver_init.h"
#include "gpio_init.h"

void gpio_init(void)
{
     38a:	b570      	push	{r4, r5, r6, lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     38c:	f240 2200 	movw	r2, #512	; 0x200
     390:	f2c6 0200 	movt	r2, #24576	; 0x6000
     394:	f240 4300 	movw	r3, #1024	; 0x400
     398:	6153      	str	r3, [r2, #20]
     39a:	f640 0500 	movw	r5, #2048	; 0x800
     39e:	6155      	str	r5, [r2, #20]
     3a0:	2180      	movs	r1, #128	; 0x80
     3a2:	0409      	lsls	r1, r1, #16
     3a4:	6151      	str	r1, [r2, #20]
     3a6:	2080      	movs	r0, #128	; 0x80
     3a8:	0500      	lsls	r0, r0, #20
     3aa:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     3ac:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3ae:	f243 2300 	movw	r3, #12800	; 0x3200
     3b2:	f2c4 0300 	movt	r3, #16384	; 0x4000
     3b6:	f240 4400 	movw	r4, #1024	; 0x400
     3ba:	f2c4 0400 	movt	r4, #16384	; 0x4000
     3be:	629c      	str	r4, [r3, #40]	; 0x28
     3c0:	24c0      	movs	r4, #192	; 0xc0
     3c2:	0624      	lsls	r4, r4, #24
     3c4:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     3c6:	6095      	str	r5, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3c8:	f2c4 0500 	movt	r5, #16384	; 0x4000
     3cc:	629d      	str	r5, [r3, #40]	; 0x28
     3ce:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     3d0:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3d2:	2180      	movs	r1, #128	; 0x80
     3d4:	05c9      	lsls	r1, r1, #23
     3d6:	6299      	str	r1, [r3, #40]	; 0x28
     3d8:	2480      	movs	r4, #128	; 0x80
     3da:	f2cc 0400 	movt	r4, #49152	; 0xc000
     3de:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     3e0:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3e2:	6299      	str	r1, [r3, #40]	; 0x28
     3e4:	f640 0200 	movw	r2, #2048	; 0x800
     3e8:	f2cc 0200 	movt	r2, #49152	; 0xc000
     3ec:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3ee:	204a      	movs	r0, #74	; 0x4a
     3f0:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
     3f2:	2201      	movs	r2, #1
     3f4:	4391      	bics	r1, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3f6:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3f8:	3001      	adds	r0, #1
     3fa:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
     3fc:	4391      	bics	r1, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3fe:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     400:	300c      	adds	r0, #12
     402:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
     404:	4391      	bics	r1, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     406:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     408:	3004      	adds	r0, #4
     40a:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
     40c:	4391      	bics	r1, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     40e:	5419      	strb	r1, [r3, r0]
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
#endif

	delay_ms(10);
     410:	3851      	subs	r0, #81	; 0x51
     412:	f240 4337 	movw	r3, #1079	; 0x437
     416:	f2c0 0300 	movt	r3, #0
     41a:	4798      	blx	r3
     41c:	bd70      	pop	{r4, r5, r6, pc}

0000041e <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     41e:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
     420:	f240 0390 	movw	r3, #144	; 0x90
     424:	f2c2 0300 	movt	r3, #8192	; 0x2000
     428:	6018      	str	r0, [r3, #0]
     42a:	f640 13fd 	movw	r3, #2557	; 0x9fd
     42e:	f2c0 0300 	movt	r3, #0
     432:	4798      	blx	r3
}
     434:	bd10      	pop	{r4, pc}

00000436 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     436:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     438:	f240 0390 	movw	r3, #144	; 0x90
     43c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     440:	681c      	ldr	r4, [r3, #0]
     442:	f240 6337 	movw	r3, #1591	; 0x637
     446:	f2c0 0300 	movt	r3, #0
     44a:	4798      	blx	r3
     44c:	0001      	movs	r1, r0
     44e:	0020      	movs	r0, r4
     450:	f640 2315 	movw	r3, #2581	; 0xa15
     454:	f2c0 0300 	movt	r3, #0
     458:	4798      	blx	r3
}
     45a:	bd10      	pop	{r4, pc}

0000045c <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     45c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     45e:	46ce      	mov	lr, r9
     460:	4647      	mov	r7, r8
     462:	b580      	push	{r7, lr}
     464:	0004      	movs	r4, r0
     466:	000f      	movs	r7, r1
     468:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     46a:	2800      	cmp	r0, #0
     46c:	d037      	beq.n	4de <usart_sync_write+0x82>
     46e:	2900      	cmp	r1, #0
     470:	d037      	beq.n	4e2 <usart_sync_write+0x86>
     472:	0010      	movs	r0, r2
     474:	1e43      	subs	r3, r0, #1
     476:	4198      	sbcs	r0, r3
     478:	f641 6168 	movw	r1, #7784	; 0x1e68
     47c:	f2c0 0100 	movt	r1, #0
     480:	22f1      	movs	r2, #241	; 0xf1
     482:	f240 53ff 	movw	r3, #1535	; 0x5ff
     486:	f2c0 0300 	movt	r3, #0
     48a:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     48c:	3408      	adds	r4, #8
     48e:	f640 15dd 	movw	r5, #2525	; 0x9dd
     492:	f2c0 0500 	movt	r5, #0
     496:	0020      	movs	r0, r4
     498:	47a8      	blx	r5
     49a:	2800      	cmp	r0, #0
     49c:	d0fb      	beq.n	496 <usart_sync_write+0x3a>
     49e:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     4a0:	f640 19cd 	movw	r9, #2509	; 0x9cd
     4a4:	f2c0 0900 	movt	r9, #0
		while (!_usart_sync_is_ready_to_send(&descr->device))
     4a8:	f640 15dd 	movw	r5, #2525	; 0x9dd
     4ac:	f2c0 0500 	movt	r5, #0
		_usart_sync_write_byte(&descr->device, buf[offset]);
     4b0:	5db9      	ldrb	r1, [r7, r6]
     4b2:	0020      	movs	r0, r4
     4b4:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
     4b6:	0020      	movs	r0, r4
     4b8:	47a8      	blx	r5
     4ba:	2800      	cmp	r0, #0
     4bc:	d0fb      	beq.n	4b6 <usart_sync_write+0x5a>
			;
	} while (++offset < length);
     4be:	3601      	adds	r6, #1
     4c0:	4546      	cmp	r6, r8
     4c2:	d3f5      	bcc.n	4b0 <usart_sync_write+0x54>
	while (!_usart_sync_is_transmit_done(&descr->device))
     4c4:	f640 15e7 	movw	r5, #2535	; 0x9e7
     4c8:	f2c0 0500 	movt	r5, #0
     4cc:	0020      	movs	r0, r4
     4ce:	47a8      	blx	r5
     4d0:	2800      	cmp	r0, #0
     4d2:	d0fb      	beq.n	4cc <usart_sync_write+0x70>
		;
	return (int32_t)offset;
}
     4d4:	0030      	movs	r0, r6
     4d6:	bc0c      	pop	{r2, r3}
     4d8:	4690      	mov	r8, r2
     4da:	4699      	mov	r9, r3
     4dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     4de:	2000      	movs	r0, #0
     4e0:	e7ca      	b.n	478 <usart_sync_write+0x1c>
     4e2:	2000      	movs	r0, #0
     4e4:	e7c8      	b.n	478 <usart_sync_write+0x1c>

000004e6 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     4e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     4e8:	46ce      	mov	lr, r9
     4ea:	4647      	mov	r7, r8
     4ec:	b580      	push	{r7, lr}
     4ee:	0004      	movs	r4, r0
     4f0:	4688      	mov	r8, r1
     4f2:	4691      	mov	r9, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     4f4:	b340      	cbz	r0, 548 <usart_sync_read+0x62>
     4f6:	b349      	cbz	r1, 54c <usart_sync_read+0x66>
     4f8:	0010      	movs	r0, r2
     4fa:	1e43      	subs	r3, r0, #1
     4fc:	4198      	sbcs	r0, r3
     4fe:	f641 6168 	movw	r1, #7784	; 0x1e68
     502:	f2c0 0100 	movt	r1, #0
     506:	f240 120c 	movw	r2, #268	; 0x10c
     50a:	f240 53ff 	movw	r3, #1535	; 0x5ff
     50e:	f2c0 0300 	movt	r3, #0
     512:	4798      	blx	r3
	uint32_t                      offset = 0;
     514:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     516:	3408      	adds	r4, #8
     518:	f640 15f1 	movw	r5, #2545	; 0x9f1
     51c:	f2c0 0500 	movt	r5, #0
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     520:	f640 17d5 	movw	r7, #2517	; 0x9d5
     524:	f2c0 0700 	movt	r7, #0
		while (!_usart_sync_is_byte_received(&descr->device))
     528:	0020      	movs	r0, r4
     52a:	47a8      	blx	r5
     52c:	2800      	cmp	r0, #0
     52e:	d0fb      	beq.n	528 <usart_sync_read+0x42>
		buf[offset] = _usart_sync_read_byte(&descr->device);
     530:	0020      	movs	r0, r4
     532:	47b8      	blx	r7
     534:	4643      	mov	r3, r8
     536:	5598      	strb	r0, [r3, r6]
	} while (++offset < length);
     538:	3601      	adds	r6, #1
     53a:	454e      	cmp	r6, r9
     53c:	d3f4      	bcc.n	528 <usart_sync_read+0x42>

	return (int32_t)offset;
}
     53e:	0030      	movs	r0, r6
     540:	bc0c      	pop	{r2, r3}
     542:	4690      	mov	r8, r2
     544:	4699      	mov	r9, r3
     546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     548:	2000      	movs	r0, #0
     54a:	e7d8      	b.n	4fe <usart_sync_read+0x18>
     54c:	2000      	movs	r0, #0
     54e:	e7d6      	b.n	4fe <usart_sync_read+0x18>

00000550 <usart_sync_init>:
{
     550:	b570      	push	{r4, r5, r6, lr}
     552:	0005      	movs	r5, r0
     554:	000c      	movs	r4, r1
	ASSERT(descr && hw);
     556:	b308      	cbz	r0, 59c <usart_sync_init+0x4c>
     558:	0008      	movs	r0, r1
     55a:	1e43      	subs	r3, r0, #1
     55c:	4198      	sbcs	r0, r3
     55e:	b2c0      	uxtb	r0, r0
     560:	f641 6168 	movw	r1, #7784	; 0x1e68
     564:	f2c0 0100 	movt	r1, #0
     568:	2234      	movs	r2, #52	; 0x34
     56a:	f240 53ff 	movw	r3, #1535	; 0x5ff
     56e:	f2c0 0300 	movt	r3, #0
     572:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     574:	0028      	movs	r0, r5
     576:	3008      	adds	r0, #8
     578:	0021      	movs	r1, r4
     57a:	f640 1389 	movw	r3, #2441	; 0x989
     57e:	f2c0 0300 	movt	r3, #0
     582:	4798      	blx	r3
	if (init_status) {
     584:	b948      	cbnz	r0, 59a <usart_sync_init+0x4a>
	descr->io.read  = usart_sync_read;
     586:	f240 43e7 	movw	r3, #1255	; 0x4e7
     58a:	f2c0 0300 	movt	r3, #0
     58e:	606b      	str	r3, [r5, #4]
	descr->io.write = usart_sync_write;
     590:	f240 435d 	movw	r3, #1117	; 0x45d
     594:	f2c0 0300 	movt	r3, #0
     598:	602b      	str	r3, [r5, #0]
}
     59a:	bd70      	pop	{r4, r5, r6, pc}
     59c:	2000      	movs	r0, #0
     59e:	e7df      	b.n	560 <usart_sync_init+0x10>

000005a0 <usart_sync_enable>:
{
     5a0:	b510      	push	{r4, lr}
     5a2:	0004      	movs	r4, r0
	ASSERT(descr);
     5a4:	f641 6168 	movw	r1, #7784	; 0x1e68
     5a8:	f2c0 0100 	movt	r1, #0
     5ac:	1e43      	subs	r3, r0, #1
     5ae:	4198      	sbcs	r0, r3
     5b0:	b2c0      	uxtb	r0, r0
     5b2:	2253      	movs	r2, #83	; 0x53
     5b4:	f240 53ff 	movw	r3, #1535	; 0x5ff
     5b8:	f2c0 0300 	movt	r3, #0
     5bc:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
     5be:	0020      	movs	r0, r4
     5c0:	3008      	adds	r0, #8
     5c2:	f640 13b9 	movw	r3, #2489	; 0x9b9
     5c6:	f2c0 0300 	movt	r3, #0
     5ca:	4798      	blx	r3
}
     5cc:	2000      	movs	r0, #0
     5ce:	bd10      	pop	{r4, pc}

000005d0 <usart_sync_get_io_descriptor>:
{
     5d0:	b570      	push	{r4, r5, r6, lr}
     5d2:	0004      	movs	r4, r0
     5d4:	000d      	movs	r5, r1
	ASSERT(descr && io);
     5d6:	b180      	cbz	r0, 5fa <usart_sync_get_io_descriptor+0x2a>
     5d8:	0008      	movs	r0, r1
     5da:	1e43      	subs	r3, r0, #1
     5dc:	4198      	sbcs	r0, r3
     5de:	b2c0      	uxtb	r0, r0
     5e0:	f641 6168 	movw	r1, #7784	; 0x1e68
     5e4:	f2c0 0100 	movt	r1, #0
     5e8:	2269      	movs	r2, #105	; 0x69
     5ea:	f240 53ff 	movw	r3, #1535	; 0x5ff
     5ee:	f2c0 0300 	movt	r3, #0
     5f2:	4798      	blx	r3
	*io = &descr->io;
     5f4:	602c      	str	r4, [r5, #0]
}
     5f6:	2000      	movs	r0, #0
     5f8:	bd70      	pop	{r4, r5, r6, pc}
     5fa:	2000      	movs	r0, #0
     5fc:	e7f0      	b.n	5e0 <usart_sync_get_io_descriptor+0x10>

000005fe <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     5fe:	b900      	cbnz	r0, 602 <assert+0x4>
		__asm("BKPT #0");
     600:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     602:	4770      	bx	lr

00000604 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     604:	0002      	movs	r2, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     606:	f240 0394 	movw	r3, #148	; 0x94
     60a:	f2c2 0300 	movt	r3, #8192	; 0x2000
     60e:	681b      	ldr	r3, [r3, #0]
     610:	b13b      	cbz	r3, 622 <_sbrk+0x1e>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     612:	f240 0394 	movw	r3, #148	; 0x94
     616:	f2c2 0300 	movt	r3, #8192	; 0x2000
     61a:	6818      	ldr	r0, [r3, #0]

	heap += incr;
     61c:	1882      	adds	r2, r0, r2
     61e:	601a      	str	r2, [r3, #0]

	return (caddr_t)prev_heap;
}
     620:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     622:	f240 0394 	movw	r3, #148	; 0x94
     626:	f2c2 0300 	movt	r3, #8192	; 0x2000
     62a:	f240 61b8 	movw	r1, #1720	; 0x6b8
     62e:	f2c2 0100 	movt	r1, #8192	; 0x2000
     632:	6019      	str	r1, [r3, #0]
     634:	e7ed      	b.n	612 <_sbrk+0xe>

00000636 <_get_cycles_for_ms>:
{
	switch (power) {
	case 8:
		return (ms * (freq / 100000)) * 100;
	case 7:
		return (ms * (freq / 10000)) * 10;
     636:	f640 73a0 	movw	r3, #4000	; 0xfa0
     63a:	4358      	muls	r0, r3
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     63c:	4770      	bx	lr

0000063e <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     63e:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     640:	f245 0300 	movw	r3, #20480	; 0x5000
     644:	f2c4 1300 	movt	r3, #16640	; 0x4100
     648:	685a      	ldr	r2, [r3, #4]
     64a:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL_SEC, CONF_NVM_WAIT_STATE);
#else
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
#endif

	_set_performance_level(CONF_PERFORMANCE_LEVEL);
     64c:	2000      	movs	r0, #0
     64e:	f640 036f 	movw	r3, #2159	; 0x86f
     652:	f2c0 0300 	movt	r3, #0
     656:	4798      	blx	r3

	_osc32kctrl_init_sources();
     658:	f640 0327 	movw	r3, #2087	; 0x827
     65c:	f2c0 0300 	movt	r3, #0
     660:	4798      	blx	r3
	_oscctrl_init_sources();
     662:	f640 033f 	movw	r3, #2111	; 0x83f
     666:	f2c0 0300 	movt	r3, #0
     66a:	4798      	blx	r3
	_mclk_init();
     66c:	f240 63b7 	movw	r3, #1719	; 0x6b7
     670:	f2c0 0300 	movt	r3, #0
     674:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     676:	f640 036d 	movw	r3, #2157	; 0x86d
     67a:	f2c0 0300 	movt	r3, #0
     67e:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     680:	201f      	movs	r0, #31
     682:	f240 638f 	movw	r3, #1679	; 0x68f
     686:	f2c0 0300 	movt	r3, #0
     68a:	4798      	blx	r3
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
     68c:	bd10      	pop	{r4, pc}

0000068e <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     68e:	07c3      	lsls	r3, r0, #31
     690:	d510      	bpl.n	6b4 <_gclk_init_generators_by_fref+0x26>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     692:	f641 4300 	movw	r3, #7168	; 0x1c00
     696:	f2c4 0300 	movt	r3, #16384	; 0x4000
     69a:	f240 1205 	movw	r2, #261	; 0x105
     69e:	f2c0 0201 	movt	r2, #1
     6a2:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     6a4:	f641 4200 	movw	r2, #7168	; 0x1c00
     6a8:	f2c4 0200 	movt	r2, #16384	; 0x4000
     6ac:	217d      	movs	r1, #125	; 0x7d
     6ae:	6853      	ldr	r3, [r2, #4]
     6b0:	4219      	tst	r1, r3
     6b2:	d1fc      	bne.n	6ae <_gclk_init_generators_by_fref+0x20>
		        | (CONF_GCLK_GEN_4_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_4_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_4_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_4_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif
}
     6b4:	4770      	bx	lr

000006b6 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
     6b6:	f640 0300 	movw	r3, #2048	; 0x800
     6ba:	f2c4 0300 	movt	r3, #16384	; 0x4000
     6be:	2201      	movs	r2, #1
     6c0:	711a      	strb	r2, [r3, #4]
 */
void _mclk_init(void)
{
	void *hw = (void *)MCLK;
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
}
     6c2:	4770      	bx	lr

000006c4 <FLASH_0_init>:
	//		 | 0 << NVMCTRL_SECCTRL_DSCEN_Pos /* Setting: disabled */
	//		 | 0 << NVMCTRL_SECCTRL_SILACC_Pos /* Setting: disabled */
	//		 | 0 << NVMCTRL_SECCTRL_TAMPEEN_Pos); /* Setting: disabled */

	return ERR_NONE;
}
     6c4:	2000      	movs	r0, #0
     6c6:	4770      	bx	lr

000006c8 <FLASH_0_exec_cmd>:

/**
 * \brief Execute a command on the NVM controller
 */
int32_t FLASH_0_exec_cmd(const enum nvm_cmd cmd, uint32_t dst_addr)
{
     6c8:	b510      	push	{r4, lr}
	return (((Nvmctrl *)hw)->STATUS.reg & NVMCTRL_STATUS_READY_Msk) >> NVMCTRL_STATUS_READY_Pos;
     6ca:	f245 0200 	movw	r2, #20480	; 0x5000
     6ce:	f2c4 1200 	movt	r2, #16640	; 0x4100
	/* Wait until this module isn't busy */
	while (!hri_nvmctrl_get_STATUS_READY_bit(_NVMCTRL)) {
     6d2:	2404      	movs	r4, #4
     6d4:	8b13      	ldrh	r3, [r2, #24]
     6d6:	4223      	tst	r3, r4
     6d8:	d0fc      	beq.n	6d4 <FLASH_0_exec_cmd+0xc>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
     6da:	f245 0300 	movw	r3, #20480	; 0x5000
     6de:	f2c4 1300 	movt	r3, #16640	; 0x4100
     6e2:	223f      	movs	r2, #63	; 0x3f
     6e4:	751a      	strb	r2, [r3, #20]

	/* Clear flags */
	hri_nvmctrl_clear_INTFLAG_reg(_NVMCTRL, NVMCTRL_INTFLAG_MASK);

	/* Commands requiring address */
	if ((cmd == NVM_CMD_ERASE_ROW) || (cmd == NVM_CMD_WRITE_PAGE)) {
     6e6:	1e83      	subs	r3, r0, #2
     6e8:	32be      	adds	r2, #190	; 0xbe
     6ea:	4213      	tst	r3, r2
     6ec:	d016      	beq.n	71c <FLASH_0_exec_cmd+0x54>
		hri_nvmctrl_write_ADDR_reg(_NVMCTRL, dst_addr);
	}

	/* Set command */
	hri_nvmctrl_write_CTRLA_reg(_NVMCTRL, cmd | NVMCTRL_CTRLA_CMDEX_KEY);
     6ee:	f24a 5300 	movw	r3, #42240	; 0xa500
     6f2:	4318      	orrs	r0, r3
}

static inline void hri_nvmctrl_write_CTRLA_reg(const void *const hw, hri_nvmctrl_ctrla_reg_t data)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg = data;
     6f4:	f245 0300 	movw	r3, #20480	; 0x5000
     6f8:	f2c4 1300 	movt	r3, #16640	; 0x4100
     6fc:	8018      	strh	r0, [r3, #0]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE_Msk) >> NVMCTRL_INTFLAG_DONE_Pos;
     6fe:	f245 0300 	movw	r3, #20480	; 0x5000
     702:	f2c4 1300 	movt	r3, #16640	; 0x4100

	/* Wait until the command done */
	while (!hri_nvmctrl_get_interrupt_DONE_bit(_NVMCTRL)) {
     706:	2101      	movs	r1, #1
	tmp &= mask;
     708:	201e      	movs	r0, #30
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE_Msk) >> NVMCTRL_INTFLAG_DONE_Pos;
     70a:	7d1a      	ldrb	r2, [r3, #20]
     70c:	420a      	tst	r2, r1
     70e:	d10b      	bne.n	728 <FLASH_0_exec_cmd+0x60>
	tmp = ((Nvmctrl *)hw)->INTFLAG.reg;
     710:	7d1a      	ldrb	r2, [r3, #20]
		/* Check if there is error in NVM erase operation */
		if (hri_nvmctrl_get_INTFLAG_reg(
     712:	4202      	tst	r2, r0
     714:	d0f9      	beq.n	70a <FLASH_0_exec_cmd+0x42>
		        _NVMCTRL, NVMCTRL_INTFLAG_LOCKE | NVMCTRL_INTFLAG_NVME | NVMCTRL_INTFLAG_PROGE | NVMCTRL_INTFLAG_KEYE)
		    != 0) {
			return ERR_FAILURE;
     716:	201e      	movs	r0, #30
     718:	4240      	negs	r0, r0
     71a:	e006      	b.n	72a <FLASH_0_exec_cmd+0x62>
	((Nvmctrl *)hw)->ADDR.reg = data;
     71c:	f245 0300 	movw	r3, #20480	; 0x5000
     720:	f2c4 1300 	movt	r3, #16640	; 0x4100
     724:	61d9      	str	r1, [r3, #28]
     726:	e7e2      	b.n	6ee <FLASH_0_exec_cmd+0x26>
		}
	}

	return ERR_NONE;
     728:	2000      	movs	r0, #0
}
     72a:	bd10      	pop	{r4, pc}

0000072c <FLASH_0_erase_row>:

/**
 * \brief Erase a row in NVM memory
 */
int32_t FLASH_0_erase_row(const uint32_t dst_addr)
{
     72c:	b510      	push	{r4, lr}
     72e:	0001      	movs	r1, r0
	return FLASH_0_exec_cmd(NVM_CMD_ERASE_ROW, dst_addr);
     730:	2002      	movs	r0, #2
     732:	f240 63c9 	movw	r3, #1737	; 0x6c9
     736:	f2c0 0300 	movt	r3, #0
     73a:	4798      	blx	r3
}
     73c:	bd10      	pop	{r4, pc}

0000073e <FLASH_0_write_page_buffer>:

/**
 * \brief Write a page buffer in NVM memory
 */
int32_t FLASH_0_write_page_buffer(const uint32_t dst_addr, const uint8_t *buffer, const uint16_t length)
{
     73e:	b570      	push	{r4, r5, r6, lr}
     740:	0006      	movs	r6, r0
     742:	000c      	movs	r4, r1
     744:	0015      	movs	r5, r2
	/* Check if the write address not aligned to the start of a page */
	if (dst_addr & (NVMCTRL_PAGE_SIZE - 1)) {
     746:	0683      	lsls	r3, r0, #26
     748:	d121      	bne.n	78e <FLASH_0_write_page_buffer+0x50>
		return ERR_INVALID_ARG;
	}

	/* Check if the write length is longer than an NVM page */
	if (length > NVMCTRL_PAGE_SIZE) {
     74a:	2a40      	cmp	r2, #64	; 0x40
     74c:	d822      	bhi.n	794 <FLASH_0_write_page_buffer+0x56>
		return ERR_INVALID_ARG;
	}

	/* Erase the page buffer before buffering new data */
	FLASH_0_exec_cmd(NVM_CMD_PAGE_BUFFER_CLEAR, dst_addr);
     74e:	0001      	movs	r1, r0
     750:	2044      	movs	r0, #68	; 0x44
     752:	f240 63c9 	movw	r3, #1737	; 0x6c9
     756:	f2c0 0300 	movt	r3, #0
     75a:	4798      	blx	r3

	uint32_t nvm_addr = dst_addr / 2;
	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
     75c:	b1ed      	cbz	r5, 79a <FLASH_0_write_page_buffer+0x5c>
     75e:	0021      	movs	r1, r4
     760:	2301      	movs	r3, #1
     762:	0030      	movs	r0, r6
     764:	4398      	bics	r0, r3
     766:	2300      	movs	r3, #0
		uint16_t data;

		data = buffer[i];
		if (i < (length - 1)) {
     768:	1e6e      	subs	r6, r5, #1
     76a:	e009      	b.n	780 <FLASH_0_write_page_buffer+0x42>
			data |= (buffer[i + 1] << 8);
     76c:	784c      	ldrb	r4, [r1, #1]
     76e:	0224      	lsls	r4, r4, #8
     770:	4322      	orrs	r2, r4
     772:	181c      	adds	r4, r3, r0
		}
		NVM_MEMORY[nvm_addr++] = data;
     774:	8022      	strh	r2, [r4, #0]
     776:	3102      	adds	r1, #2
     778:	3302      	adds	r3, #2
	for (uint16_t i = 0; i < length; i += 2) {
     77a:	b29a      	uxth	r2, r3
     77c:	4295      	cmp	r5, r2
     77e:	d904      	bls.n	78a <FLASH_0_write_page_buffer+0x4c>
		data = buffer[i];
     780:	780a      	ldrb	r2, [r1, #0]
		if (i < (length - 1)) {
     782:	429e      	cmp	r6, r3
     784:	dcf2      	bgt.n	76c <FLASH_0_write_page_buffer+0x2e>
		data = buffer[i];
     786:	b292      	uxth	r2, r2
     788:	e7f3      	b.n	772 <FLASH_0_write_page_buffer+0x34>
	}

	return ERR_NONE;
     78a:	2000      	movs	r0, #0
}
     78c:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_INVALID_ARG;
     78e:	200d      	movs	r0, #13
     790:	4240      	negs	r0, r0
     792:	e7fb      	b.n	78c <FLASH_0_write_page_buffer+0x4e>
		return ERR_INVALID_ARG;
     794:	200d      	movs	r0, #13
     796:	4240      	negs	r0, r0
     798:	e7f8      	b.n	78c <FLASH_0_write_page_buffer+0x4e>
	return ERR_NONE;
     79a:	2000      	movs	r0, #0
     79c:	e7f6      	b.n	78c <FLASH_0_write_page_buffer+0x4e>

0000079e <FLASH_0_write_page>:

/**
 * \brief Write (program) a page in NVM memory
 */
int32_t FLASH_0_write_page(const uint32_t dst_addr, const uint8_t *buffer, const uint16_t length)
{
     79e:	b570      	push	{r4, r5, r6, lr}
     7a0:	0004      	movs	r4, r0
     7a2:	0015      	movs	r5, r2
	int32_t rc = ERR_NONE;

	rc = FLASH_0_write_page_buffer(dst_addr, buffer, length);
     7a4:	f240 733f 	movw	r3, #1855	; 0x73f
     7a8:	f2c0 0300 	movt	r3, #0
     7ac:	4798      	blx	r3
	if (rc != ERR_NONE) {
     7ae:	b978      	cbnz	r0, 7d0 <FLASH_0_write_page+0x32>
	tmp = ((Nvmctrl *)hw)->CTRLC.reg;
     7b0:	f245 0300 	movw	r3, #20480	; 0x5000
     7b4:	f2c4 1300 	movt	r3, #16640	; 0x4100
     7b8:	7a1b      	ldrb	r3, [r3, #8]
		return rc;
	} else {
		/* Execute NVM write page command */
		if ((hri_nvmctrl_get_CTRLC_MANW_bit(_NVMCTRL) == 1) || (length < NVMCTRL_PAGE_SIZE)) {
     7ba:	07db      	lsls	r3, r3, #31
     7bc:	d401      	bmi.n	7c2 <FLASH_0_write_page+0x24>
     7be:	2d3f      	cmp	r5, #63	; 0x3f
     7c0:	d806      	bhi.n	7d0 <FLASH_0_write_page+0x32>
			rc = FLASH_0_exec_cmd(NVM_CMD_WRITE_PAGE, dst_addr);
     7c2:	0021      	movs	r1, r4
     7c4:	2004      	movs	r0, #4
     7c6:	f240 63c9 	movw	r3, #1737	; 0x6c9
     7ca:	f2c0 0300 	movt	r3, #0
     7ce:	4798      	blx	r3
		}
	}

	return rc;
}
     7d0:	bd70      	pop	{r4, r5, r6, pc}

000007d2 <FLASH_0_read>:

/**
 * \brief Read a number of bytes from a page in the NVM memory
 */
int32_t FLASH_0_read(uint32_t src_addr, uint8_t *buffer, uint32_t length)
{
     7d2:	b570      	push	{r4, r5, r6, lr}
	uint32_t nvm_addr = src_addr / 2;
     7d4:	0845      	lsrs	r5, r0, #1
	return (((Nvmctrl *)hw)->STATUS.reg & NVMCTRL_STATUS_READY_Msk) >> NVMCTRL_STATUS_READY_Pos;
     7d6:	f245 0400 	movw	r4, #20480	; 0x5000
     7da:	f2c4 1400 	movt	r4, #16640	; 0x4100
	uint32_t i;
	uint16_t data;

	/* Wait until this module isn't busy */
	while (!hri_nvmctrl_get_STATUS_READY_bit(_NVMCTRL)) {
     7de:	2604      	movs	r6, #4
     7e0:	8b23      	ldrh	r3, [r4, #24]
     7e2:	4233      	tst	r3, r6
     7e4:	d0fc      	beq.n	7e0 <FLASH_0_read+0xe>
	if (src_addr % 2) {
		data      = NVM_MEMORY[nvm_addr++];
		buffer[0] = data >> 8;
		i         = 1;
	} else {
		i = 0;
     7e6:	2400      	movs	r4, #0
	if (src_addr % 2) {
     7e8:	07c3      	lsls	r3, r0, #31
     7ea:	d506      	bpl.n	7fa <FLASH_0_read+0x28>
		data      = NVM_MEMORY[nvm_addr++];
     7ec:	3501      	adds	r5, #1
     7ee:	2301      	movs	r3, #1
     7f0:	4398      	bics	r0, r3
     7f2:	8803      	ldrh	r3, [r0, #0]
		buffer[0] = data >> 8;
     7f4:	0a1b      	lsrs	r3, r3, #8
     7f6:	700b      	strb	r3, [r1, #0]
		i         = 1;
     7f8:	3401      	adds	r4, #1
	}

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	while (i < length) {
     7fa:	4294      	cmp	r4, r2
     7fc:	d211      	bcs.n	822 <FLASH_0_read+0x50>
     7fe:	1909      	adds	r1, r1, r4
     800:	006d      	lsls	r5, r5, #1
     802:	1b28      	subs	r0, r5, r4
		data      = NVM_MEMORY[nvm_addr++];
		buffer[i] = (data & 0xFF);
		if (i < (length - 1)) {
     804:	1e55      	subs	r5, r2, #1
     806:	e003      	b.n	810 <FLASH_0_read+0x3e>
			buffer[i + 1] = (data >> 8);
		}
		i += 2;
     808:	3402      	adds	r4, #2
     80a:	3102      	adds	r1, #2
	while (i < length) {
     80c:	42a2      	cmp	r2, r4
     80e:	d908      	bls.n	822 <FLASH_0_read+0x50>
     810:	1903      	adds	r3, r0, r4
		data      = NVM_MEMORY[nvm_addr++];
     812:	881b      	ldrh	r3, [r3, #0]
     814:	b29b      	uxth	r3, r3
		buffer[i] = (data & 0xFF);
     816:	700b      	strb	r3, [r1, #0]
		if (i < (length - 1)) {
     818:	42a5      	cmp	r5, r4
     81a:	d9f5      	bls.n	808 <FLASH_0_read+0x36>
			buffer[i + 1] = (data >> 8);
     81c:	0a1b      	lsrs	r3, r3, #8
     81e:	704b      	strb	r3, [r1, #1]
     820:	e7f2      	b.n	808 <FLASH_0_read+0x36>
	}

	return ERR_NONE;
}
     822:	2000      	movs	r0, #0
     824:	bd70      	pop	{r4, r5, r6, pc}

00000826 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
     826:	f241 4300 	movw	r3, #5120	; 0x1400
     82a:	f2c4 0300 	movt	r3, #16384	; 0x4000
     82e:	69da      	ldr	r2, [r3, #28]
	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
     830:	f641 7100 	movw	r1, #7936	; 0x1f00
     834:	400a      	ands	r2, r1
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
     836:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     838:	2200      	movs	r2, #0
     83a:	741a      	strb	r2, [r3, #16]
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
     83c:	4770      	bx	lr

0000083e <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_OSC16MCTRL_reg(const void *const hw, hri_oscctrl_osc16mctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC16MCTRL.reg = data;
     83e:	f241 0300 	movw	r3, #4096	; 0x1000
     842:	f2c4 0300 	movt	r3, #16384	; 0x4000
     846:	2202      	movs	r2, #2
     848:	761a      	strb	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC16MRDY_Msk) >> OSCCTRL_STATUS_OSC16MRDY_Pos;
     84a:	f241 0200 	movw	r2, #4096	; 0x1000
     84e:	f2c4 0200 	movt	r2, #16384	; 0x4000
#endif
#endif

#if CONF_OSC16M_CONFIG == 1
#if CONF_OSC16M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC16MRDY_bit(hw))
     852:	2110      	movs	r1, #16
     854:	6913      	ldr	r3, [r2, #16]
     856:	4219      	tst	r1, r3
     858:	d0fc      	beq.n	854 <_oscctrl_init_sources+0x16>
	((Oscctrl *)hw)->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND_Msk;
     85a:	f241 0300 	movw	r3, #4096	; 0x1000
     85e:	f2c4 0300 	movt	r3, #16384	; 0x4000
     862:	7e1a      	ldrb	r2, [r3, #24]
     864:	2180      	movs	r1, #128	; 0x80
     866:	430a      	orrs	r2, r1
     868:	761a      	strb	r2, [r3, #24]
#if CONF_OSC16M_ONDEMAND == 1
	hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
     86a:	4770      	bx	lr

0000086c <_oscctrl_init_referenced_generators>:
#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
		;
#endif
	(void)hw, (void)tmp;
}
     86c:	4770      	bx	lr

0000086e <_set_performance_level>:
}

static inline hri_pm_plcfg_reg_t hri_pm_get_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Pm *)hw)->PLCFG.reg;
     86e:	f240 4300 	movw	r3, #1024	; 0x400
     872:	f2c4 0300 	movt	r3, #16384	; 0x4000
     876:	789b      	ldrb	r3, [r3, #2]
/**
 * \brief Set performance level
 */
void _set_performance_level(const uint8_t level)
{
	if (hri_pm_get_PLCFG_PLSEL_bf(PM, PM_PLCFG_PLSEL_Msk) != level) {
     878:	2203      	movs	r2, #3
     87a:	4013      	ands	r3, r2
     87c:	4298      	cmp	r0, r3
     87e:	d012      	beq.n	8a6 <_set_performance_level+0x38>
	((Pm *)hw)->INTFLAG.reg = mask;
     880:	f240 4200 	movw	r2, #1024	; 0x400
     884:	f2c4 0200 	movt	r2, #16384	; 0x4000
     888:	23ff      	movs	r3, #255	; 0xff
     88a:	7193      	strb	r3, [r2, #6]

static inline void hri_pm_write_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t data)
{
	uint8_t tmp;
	PM_CRITICAL_SECTION_ENTER();
	tmp = ((Pm *)hw)->PLCFG.reg;
     88c:	7893      	ldrb	r3, [r2, #2]
	tmp &= ~PM_PLCFG_PLSEL_Msk;
     88e:	2103      	movs	r1, #3
     890:	438b      	bics	r3, r1
	tmp |= PM_PLCFG_PLSEL(data);
     892:	4008      	ands	r0, r1
     894:	4318      	orrs	r0, r3
	((Pm *)hw)->PLCFG.reg = tmp;
     896:	7090      	strb	r0, [r2, #2]
	return ((Pm *)hw)->INTFLAG.reg;
     898:	f240 4200 	movw	r2, #1024	; 0x400
     89c:	f2c4 0200 	movt	r2, #16384	; 0x4000
     8a0:	7993      	ldrb	r3, [r2, #6]
		hri_pm_clear_INTFLAG_reg(PM, 0xFF);
		hri_pm_write_PLCFG_PLSEL_bf(PM, level);
		while (!hri_pm_read_INTFLAG_reg(PM))
     8a2:	2b00      	cmp	r3, #0
     8a4:	d0fc      	beq.n	8a0 <_set_performance_level+0x32>
			;
	}
}
     8a6:	4770      	bx	lr

000008a8 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
     8a8:	b530      	push	{r4, r5, lr}
     8aa:	b085      	sub	sp, #20
	Sercom *const sercom_modules[] = SERCOM_INSTS;
     8ac:	aa01      	add	r2, sp, #4
     8ae:	f641 6384 	movw	r3, #7812	; 0x1e84
     8b2:	f2c0 0300 	movt	r3, #0
     8b6:	cb32      	ldmia	r3!, {r1, r4, r5}
     8b8:	c232      	stmia	r2!, {r1, r4, r5}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
     8ba:	0003      	movs	r3, r0
     8bc:	9a01      	ldr	r2, [sp, #4]
     8be:	4282      	cmp	r2, r0
     8c0:	d00c      	beq.n	8dc <_sercom_get_hardware_index+0x34>
     8c2:	9a02      	ldr	r2, [sp, #8]
     8c4:	4282      	cmp	r2, r0
     8c6:	d007      	beq.n	8d8 <_sercom_get_hardware_index+0x30>
			return i;
		}
	}
	return 0;
     8c8:	2000      	movs	r0, #0
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
     8ca:	9a03      	ldr	r2, [sp, #12]
     8cc:	429a      	cmp	r2, r3
     8ce:	d001      	beq.n	8d4 <_sercom_get_hardware_index+0x2c>
}
     8d0:	b005      	add	sp, #20
     8d2:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     8d4:	3002      	adds	r0, #2
     8d6:	e002      	b.n	8de <_sercom_get_hardware_index+0x36>
     8d8:	2001      	movs	r0, #1
     8da:	e000      	b.n	8de <_sercom_get_hardware_index+0x36>
     8dc:	2000      	movs	r0, #0
			return i;
     8de:	b2c0      	uxtb	r0, r0
     8e0:	e7f6      	b.n	8d0 <_sercom_get_hardware_index+0x28>
	...

000008e4 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
     8e4:	b510      	push	{r4, lr}
     8e6:	0004      	movs	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
     8e8:	f640 03a9 	movw	r3, #2217	; 0x8a9
     8ec:	f2c0 0300 	movt	r3, #0
     8f0:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
     8f2:	b158      	cbz	r0, 90c <_usart_init+0x28>
	ASSERT(false);
     8f4:	f641 61a8 	movw	r1, #7848	; 0x1ea8
     8f8:	f2c0 0100 	movt	r1, #0
     8fc:	f240 2247 	movw	r2, #583	; 0x247
     900:	2000      	movs	r0, #0
     902:	f240 53ff 	movw	r3, #1535	; 0x5ff
     906:	f2c0 0300 	movt	r3, #0
     90a:	4798      	blx	r3
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
     90c:	69e3      	ldr	r3, [r4, #28]
	uint8_t i = _get_sercom_index(hw);

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
     90e:	07db      	lsls	r3, r3, #31
     910:	d418      	bmi.n	944 <_usart_init+0x60>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     912:	2203      	movs	r2, #3
     914:	69e3      	ldr	r3, [r4, #28]
     916:	421a      	tst	r2, r3
     918:	d1fc      	bne.n	914 <_usart_init+0x30>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     91a:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
     91c:	079b      	lsls	r3, r3, #30
     91e:	d50b      	bpl.n	938 <_usart_init+0x54>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     920:	6823      	ldr	r3, [r4, #0]
     922:	2202      	movs	r2, #2
     924:	4393      	bics	r3, r2
     926:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     928:	3201      	adds	r2, #1
     92a:	69e3      	ldr	r3, [r4, #28]
     92c:	421a      	tst	r2, r3
     92e:	d1fc      	bne.n	92a <_usart_init+0x46>
     930:	2202      	movs	r2, #2
     932:	69e3      	ldr	r3, [r4, #28]
     934:	421a      	tst	r2, r3
     936:	d1fc      	bne.n	932 <_usart_init+0x4e>
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
     938:	2305      	movs	r3, #5
     93a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     93c:	2203      	movs	r2, #3
     93e:	69e3      	ldr	r3, [r4, #28]
     940:	421a      	tst	r2, r3
     942:	d1fc      	bne.n	93e <_usart_init+0x5a>
     944:	2201      	movs	r2, #1
     946:	69e3      	ldr	r3, [r4, #28]
     948:	421a      	tst	r2, r3
     94a:	d1fc      	bne.n	946 <_usart_init+0x62>
	((Sercom *)hw)->USART.CTRLA.reg = data;
     94c:	2304      	movs	r3, #4
     94e:	f2c4 0331 	movt	r3, #16433	; 0x4031
     952:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     954:	2203      	movs	r2, #3
     956:	69e3      	ldr	r3, [r4, #28]
     958:	421a      	tst	r2, r3
     95a:	d1fc      	bne.n	956 <_usart_init+0x72>
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
     95c:	23c0      	movs	r3, #192	; 0xc0
     95e:	029b      	lsls	r3, r3, #10
     960:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     962:	220f      	movs	r2, #15
     964:	69e3      	ldr	r3, [r4, #28]
     966:	421a      	tst	r2, r3
     968:	d1fc      	bne.n	964 <_usart_init+0x80>
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
     96a:	2302      	movs	r3, #2
     96c:	f2c0 0370 	movt	r3, #112	; 0x70
     970:	60a3      	str	r3, [r4, #8]
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
     972:	4b04      	ldr	r3, [pc, #16]	; (984 <_usart_init+0xa0>)
     974:	81a3      	strh	r3, [r4, #12]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
     976:	2300      	movs	r3, #0
     978:	73a3      	strb	r3, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
     97a:	2230      	movs	r2, #48	; 0x30
     97c:	54a3      	strb	r3, [r4, r2]

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);

	return ERR_NONE;
}
     97e:	2000      	movs	r0, #0
     980:	bd10      	pop	{r4, pc}
     982:	46c0      	nop			; (mov r8, r8)
     984:	fffff62b 	.word	0xfffff62b

00000988 <_usart_sync_init>:
{
     988:	b570      	push	{r4, r5, r6, lr}
     98a:	0005      	movs	r5, r0
     98c:	000c      	movs	r4, r1
	ASSERT(device);
     98e:	f641 61a8 	movw	r1, #7848	; 0x1ea8
     992:	f2c0 0100 	movt	r1, #0
     996:	1e43      	subs	r3, r0, #1
     998:	4198      	sbcs	r0, r3
     99a:	b2c0      	uxtb	r0, r0
     99c:	22bb      	movs	r2, #187	; 0xbb
     99e:	f240 53ff 	movw	r3, #1535	; 0x5ff
     9a2:	f2c0 0300 	movt	r3, #0
     9a6:	4798      	blx	r3
	device->hw = hw;
     9a8:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
     9aa:	0020      	movs	r0, r4
     9ac:	f640 03e5 	movw	r3, #2277	; 0x8e5
     9b0:	f2c0 0300 	movt	r3, #0
     9b4:	4798      	blx	r3
}
     9b6:	bd70      	pop	{r4, r5, r6, pc}

000009b8 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
     9b8:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     9ba:	6813      	ldr	r3, [r2, #0]
     9bc:	2102      	movs	r1, #2
     9be:	430b      	orrs	r3, r1
     9c0:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     9c2:	3101      	adds	r1, #1
     9c4:	69d3      	ldr	r3, [r2, #28]
     9c6:	4219      	tst	r1, r3
     9c8:	d1fc      	bne.n	9c4 <_usart_sync_enable+0xc>
}
     9ca:	4770      	bx	lr

000009cc <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
     9cc:	6803      	ldr	r3, [r0, #0]
     9ce:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
     9d0:	8519      	strh	r1, [r3, #40]	; 0x28
}
     9d2:	4770      	bx	lr

000009d4 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
     9d4:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
     9d6:	8d18      	ldrh	r0, [r3, #40]	; 0x28
     9d8:	b2c0      	uxtb	r0, r0
}
     9da:	4770      	bx	lr

000009dc <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
     9dc:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     9de:	7e18      	ldrb	r0, [r3, #24]
     9e0:	2301      	movs	r3, #1
     9e2:	4018      	ands	r0, r3
}
     9e4:	4770      	bx	lr

000009e6 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
     9e6:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
     9e8:	7e18      	ldrb	r0, [r3, #24]
     9ea:	0780      	lsls	r0, r0, #30
     9ec:	0fc0      	lsrs	r0, r0, #31
}
     9ee:	4770      	bx	lr

000009f0 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
     9f0:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     9f2:	7e18      	ldrb	r0, [r3, #24]
     9f4:	0740      	lsls	r0, r0, #29
     9f6:	0fc0      	lsrs	r0, r0, #31
}
     9f8:	4770      	bx	lr
	...

000009fc <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
     9fc:	f24e 0310 	movw	r3, #57360	; 0xe010
     a00:	f2ce 0300 	movt	r3, #57344	; 0xe000
     a04:	4a02      	ldr	r2, [pc, #8]	; (a10 <_delay_init+0x14>)
     a06:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
     a08:	2205      	movs	r2, #5
     a0a:	601a      	str	r2, [r3, #0]
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
	_system_time_init(hw);
}
     a0c:	4770      	bx	lr
     a0e:	46c0      	nop			; (mov r8, r8)
     a10:	00ffffff 	.word	0x00ffffff

00000a14 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
     a14:	b570      	push	{r4, r5, r6, lr}
	(void)hw;
	uint8_t  n   = cycles >> 24;
     a16:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
     a18:	1e5e      	subs	r6, r3, #1
     a1a:	b2f6      	uxtb	r6, r6
     a1c:	b1c3      	cbz	r3, a50 <_delay_cycles+0x3c>
     a1e:	0034      	movs	r4, r6
		SysTick->LOAD = 0xFFFFFF;
     a20:	f24e 0210 	movw	r2, #57360	; 0xe010
     a24:	f2ce 0200 	movt	r2, #57344	; 0xe000
     a28:	4d11      	ldr	r5, [pc, #68]	; (a70 <_delay_cycles+0x5c>)
		SysTick->VAL  = 0xFFFFFF;
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
     a2a:	2080      	movs	r0, #128	; 0x80
     a2c:	0240      	lsls	r0, r0, #9
		SysTick->LOAD = 0xFFFFFF;
     a2e:	6055      	str	r5, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
     a30:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
     a32:	6813      	ldr	r3, [r2, #0]
     a34:	4203      	tst	r3, r0
     a36:	d0fc      	beq.n	a32 <_delay_cycles+0x1e>
	while (n--) {
     a38:	3c01      	subs	r4, #1
     a3a:	b2e4      	uxtb	r4, r4
     a3c:	2cff      	cmp	r4, #255	; 0xff
     a3e:	d1f6      	bne.n	a2e <_delay_cycles+0x1a>
     a40:	0633      	lsls	r3, r6, #24
     a42:	1af6      	subs	r6, r6, r3
     a44:	f240 0c01 	movw	ip, #1
     a48:	f6cf 7c00 	movt	ip, #65280	; 0xff00
     a4c:	4461      	add	r1, ip
     a4e:	1871      	adds	r1, r6, r1
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
     a50:	f24e 0310 	movw	r3, #57360	; 0xe010
     a54:	f2ce 0300 	movt	r3, #57344	; 0xe000
     a58:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
     a5a:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
     a5c:	f24e 0210 	movw	r2, #57360	; 0xe010
     a60:	f2ce 0200 	movt	r2, #57344	; 0xe000
     a64:	2180      	movs	r1, #128	; 0x80
     a66:	0249      	lsls	r1, r1, #9
     a68:	6813      	ldr	r3, [r2, #0]
     a6a:	420b      	tst	r3, r1
     a6c:	d0fc      	beq.n	a68 <_delay_cycles+0x54>
		;
}
     a6e:	bd70      	pop	{r4, r5, r6, pc}
     a70:	00ffffff 	.word	0x00ffffff

00000a74 <UART_EDBG_init>:
static uint8_t hello_str[] = "\r\nCrypto Accelerator \r\n";

static struct io_descriptor *terminal_io;

void UART_EDBG_init()
{
     a74:	b510      	push	{r4, lr}
	usart_sync_get_io_descriptor(&USART_0, &terminal_io);
     a76:	f240 0198 	movw	r1, #152	; 0x98
     a7a:	f2c2 0100 	movt	r1, #8192	; 0x2000
     a7e:	f240 04a4 	movw	r4, #164	; 0xa4
     a82:	f2c2 0400 	movt	r4, #8192	; 0x2000
     a86:	0020      	movs	r0, r4
     a88:	f240 53d1 	movw	r3, #1489	; 0x5d1
     a8c:	f2c0 0300 	movt	r3, #0
     a90:	4798      	blx	r3
	usart_sync_enable(&USART_0);
     a92:	0020      	movs	r0, r4
     a94:	f240 53a1 	movw	r3, #1441	; 0x5a1
     a98:	f2c0 0300 	movt	r3, #0
     a9c:	4798      	blx	r3
}
     a9e:	bd10      	pop	{r4, pc}

00000aa0 <test_aes>:

bool test_aes(void)
{
     aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
     aa2:	46de      	mov	lr, fp
     aa4:	4657      	mov	r7, sl
     aa6:	464e      	mov	r6, r9
     aa8:	4645      	mov	r5, r8
     aaa:	b5e0      	push	{r5, r6, r7, lr}
     aac:	4ca8      	ldr	r4, [pc, #672]	; (d50 <test_aes+0x2b0>)
     aae:	44a5      	add	sp, r4
	};*/

	Aes enc;
	Aes dec;
	
	const uint8_t key[32] = {
     ab0:	a906      	add	r1, sp, #24
     ab2:	f641 63c4 	movw	r3, #7876	; 0x1ec4
     ab6:	f2c0 0300 	movt	r3, #0
     aba:	000a      	movs	r2, r1
     abc:	cb13      	ldmia	r3!, {r0, r1, r4}
     abe:	c213      	stmia	r2!, {r0, r1, r4}
     ac0:	cb13      	ldmia	r3!, {r0, r1, r4}
     ac2:	c213      	stmia	r2!, {r0, r1, r4}
     ac4:	cb03      	ldmia	r3!, {r0, r1}
     ac6:	c203      	stmia	r2!, {r0, r1}

	
	static uint8_t iv[16] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };
	
	// Allocate buffer memory
	uint8_t *input = malloc(sizeof(uint8_t) * MAX_NUM_BYTES);
     ac8:	f241 7070 	movw	r0, #6000	; 0x1770
     acc:	f641 43a9 	movw	r3, #7337	; 0x1ca9
     ad0:	f2c0 0300 	movt	r3, #0
     ad4:	4798      	blx	r3
     ad6:	0007      	movs	r7, r0

    delay_ms(10);
     ad8:	200a      	movs	r0, #10
     ada:	f240 4337 	movw	r3, #1079	; 0x437
     ade:	f2c0 0300 	movt	r3, #0
     ae2:	4798      	blx	r3
     ae4:	f64f 73f0 	movw	r3, #65520	; 0xfff0
     ae8:	9302      	str	r3, [sp, #8]
     aea:	2320      	movs	r3, #32
     aec:	9303      	str	r3, [sp, #12]
     aee:	2510      	movs	r5, #16
		for (size_t byte = 0; byte < num_bytes; byte++) {
			input[byte] = byte; // Will wrap at 0xff.
			//input[byte] = 0xfa;
		}
			
		wc_AesSetKey(&enc, key, sizeof(key), iv, AES_ENCRYPTION);
     af0:	f240 0300 	movw	r3, #0
     af4:	f2c2 0300 	movt	r3, #8192	; 0x2000
     af8:	9304      	str	r3, [sp, #16]
		target_addr -= target_addr % NVMCTRL_ROW_SIZE;
	
		for (uint32_t page_index = 0; page_index * FLASH_PAGE_SIZE < num_bytes; page_index += 1) {
			if (page_index % NVMCTRL_ROW_PAGES == 0) {
				/* Erase row in flash */
				FLASH_0_erase_row(target_addr + page_index * FLASH_PAGE_SIZE);
     afa:	f240 792d 	movw	r9, #1837	; 0x72d
     afe:	f2c0 0900 	movt	r9, #0
     b02:	e068      	b.n	bd6 <test_aes+0x136>
			}
			FLASH_0_write_page(target_addr + page_index * FLASH_PAGE_SIZE, &input[page_index * FLASH_PAGE_SIZE], FLASH_PAGE_SIZE);
     b04:	2240      	movs	r2, #64	; 0x40
     b06:	0029      	movs	r1, r5
     b08:	0030      	movs	r0, r6
     b0a:	47d0      	blx	sl
		for (uint32_t page_index = 0; page_index * FLASH_PAGE_SIZE < num_bytes; page_index += 1) {
     b0c:	3401      	adds	r4, #1
     b0e:	3640      	adds	r6, #64	; 0x40
     b10:	3540      	adds	r5, #64	; 0x40
     b12:	01a3      	lsls	r3, r4, #6
     b14:	429f      	cmp	r7, r3
     b16:	d905      	bls.n	b24 <test_aes+0x84>
			if (page_index % NVMCTRL_ROW_PAGES == 0) {
     b18:	465b      	mov	r3, fp
     b1a:	4223      	tst	r3, r4
     b1c:	d1f2      	bne.n	b04 <test_aes+0x64>
				FLASH_0_erase_row(target_addr + page_index * FLASH_PAGE_SIZE);
     b1e:	0030      	movs	r0, r6
     b20:	47c8      	blx	r9
     b22:	e7ef      	b.n	b04 <test_aes+0x64>
     b24:	003d      	movs	r5, r7
     b26:	4647      	mov	r7, r8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b28:	f240 2300 	movw	r3, #512	; 0x200
     b2c:	f2c6 0300 	movt	r3, #24576	; 0x6000
     b30:	2280      	movs	r2, #128	; 0x80
     b32:	0512      	lsls	r2, r2, #20
     b34:	615a      	str	r2, [r3, #20]
			// TODO: decrease FLASH_PAGE_SIZE to correct number on last write if not multiple of FLASH_PAGE_SIZE.
		}
		STOP_MEASURE(DGI_GPIO3);
     b36:	2002      	movs	r0, #2
     b38:	f240 4337 	movw	r3, #1079	; 0x437
     b3c:	f2c0 0300 	movt	r3, #0
     b40:	4798      	blx	r3
     b42:	2300      	movs	r3, #0
		
		SLEEP
		
		// Overwrite the memory
		for (size_t byte = 0; byte < num_bytes; byte++) {
			input[byte] = 0xfe;
     b44:	22fe      	movs	r2, #254	; 0xfe
     b46:	54fa      	strb	r2, [r7, r3]
		for (size_t byte = 0; byte < num_bytes; byte++) {
     b48:	3301      	adds	r3, #1
     b4a:	429d      	cmp	r5, r3
     b4c:	d8fb      	bhi.n	b46 <test_aes+0xa6>
		}

		// Start reading from flash
		START_MEASURE(DGI_GPIO3);
     b4e:	2002      	movs	r0, #2
     b50:	f240 4437 	movw	r4, #1079	; 0x437
     b54:	f2c0 0400 	movt	r4, #0
     b58:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     b5a:	f240 2600 	movw	r6, #512	; 0x200
     b5e:	f2c6 0600 	movt	r6, #24576	; 0x6000
     b62:	2380      	movs	r3, #128	; 0x80
     b64:	051b      	lsls	r3, r3, #20
     b66:	4698      	mov	r8, r3
     b68:	61b3      	str	r3, [r6, #24]
		// Read from flash
		FLASH_0_read(target_addr, input, num_bytes);
     b6a:	002a      	movs	r2, r5
     b6c:	0039      	movs	r1, r7
     b6e:	9805      	ldr	r0, [sp, #20]
     b70:	f240 73d3 	movw	r3, #2003	; 0x7d3
     b74:	f2c0 0300 	movt	r3, #0
     b78:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b7a:	4643      	mov	r3, r8
     b7c:	6173      	str	r3, [r6, #20]
		STOP_MEASURE(DGI_GPIO3);
     b7e:	2002      	movs	r0, #2
     b80:	47a0      	blx	r4
	
		wc_AesSetKey(&dec, key, sizeof(key), iv, AES_DECRYPTION);
     b82:	2301      	movs	r3, #1
     b84:	9300      	str	r3, [sp, #0]
     b86:	9b04      	ldr	r3, [sp, #16]
     b88:	2220      	movs	r2, #32
     b8a:	a906      	add	r1, sp, #24
     b8c:	a80e      	add	r0, sp, #56	; 0x38
     b8e:	f641 38f1 	movw	r8, #7153	; 0x1bf1
     b92:	f2c0 0800 	movt	r8, #0
     b96:	47c0      	blx	r8

		// Start decryption
		START_MEASURE(DGI_GPIO2);
     b98:	2002      	movs	r0, #2
     b9a:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     b9c:	2380      	movs	r3, #128	; 0x80
     b9e:	041b      	lsls	r3, r3, #16
     ba0:	4698      	mov	r8, r3
     ba2:	61b3      	str	r3, [r6, #24]
		/*decrypt*/
		wc_AesDecryptDirect(&dec, input, input);
     ba4:	003a      	movs	r2, r7
     ba6:	0039      	movs	r1, r7
     ba8:	a80e      	add	r0, sp, #56	; 0x38
     baa:	f641 4343 	movw	r3, #7235	; 0x1c43
     bae:	f2c0 0300 	movt	r3, #0
     bb2:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     bb4:	4643      	mov	r3, r8
     bb6:	6173      	str	r3, [r6, #20]
		STOP_MEASURE(DGI_GPIO2);
     bb8:	2002      	movs	r0, #2
     bba:	47a0      	blx	r4
	for (size_t num_bytes = MIN_NUM_BYTES; num_bytes <= MAX_NUM_BYTES; num_bytes += STEP_SIZE) {
     bbc:	f241 7370 	movw	r3, #6000	; 0x1770
     bc0:	9a03      	ldr	r2, [sp, #12]
     bc2:	429a      	cmp	r2, r3
     bc4:	d900      	bls.n	bc8 <test_aes+0x128>
     bc6:	e09d      	b.n	d04 <test_aes+0x264>
     bc8:	3510      	adds	r5, #16
     bca:	9b03      	ldr	r3, [sp, #12]
     bcc:	3310      	adds	r3, #16
     bce:	9303      	str	r3, [sp, #12]
     bd0:	9b02      	ldr	r3, [sp, #8]
     bd2:	3b10      	subs	r3, #16
     bd4:	9302      	str	r3, [sp, #8]
		for (size_t byte = 0; byte < num_bytes; byte++) {
     bd6:	2300      	movs	r3, #0
     bd8:	b3ed      	cbz	r5, c56 <test_aes+0x1b6>
			input[byte] = byte; // Will wrap at 0xff.
     bda:	54fb      	strb	r3, [r7, r3]
		for (size_t byte = 0; byte < num_bytes; byte++) {
     bdc:	3301      	adds	r3, #1
     bde:	429d      	cmp	r5, r3
     be0:	d1fb      	bne.n	bda <test_aes+0x13a>
		wc_AesSetKey(&enc, key, sizeof(key), iv, AES_ENCRYPTION);
     be2:	2300      	movs	r3, #0
     be4:	9300      	str	r3, [sp, #0]
     be6:	9b04      	ldr	r3, [sp, #16]
     be8:	2220      	movs	r2, #32
     bea:	a906      	add	r1, sp, #24
     bec:	a855      	add	r0, sp, #340	; 0x154
     bee:	f641 34f1 	movw	r4, #7153	; 0x1bf1
     bf2:	f2c0 0400 	movt	r4, #0
     bf6:	47a0      	blx	r4
		START_MEASURE(DGI_GPIO2);
     bf8:	2002      	movs	r0, #2
     bfa:	f240 4437 	movw	r4, #1079	; 0x437
     bfe:	f2c0 0400 	movt	r4, #0
     c02:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     c04:	f240 2600 	movw	r6, #512	; 0x200
     c08:	f2c6 0600 	movt	r6, #24576	; 0x6000
     c0c:	2380      	movs	r3, #128	; 0x80
     c0e:	041b      	lsls	r3, r3, #16
     c10:	4698      	mov	r8, r3
     c12:	61b3      	str	r3, [r6, #24]
		wc_AesEncryptDirect(&enc, input, input);
     c14:	003a      	movs	r2, r7
     c16:	0039      	movs	r1, r7
     c18:	a855      	add	r0, sp, #340	; 0x154
     c1a:	f641 432f 	movw	r3, #7215	; 0x1c2f
     c1e:	f2c0 0300 	movt	r3, #0
     c22:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c24:	4643      	mov	r3, r8
     c26:	6173      	str	r3, [r6, #20]
		STOP_MEASURE(DGI_GPIO2);
     c28:	2002      	movs	r0, #2
     c2a:	47a0      	blx	r4
		START_MEASURE(DGI_GPIO3);
     c2c:	2002      	movs	r0, #2
     c2e:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     c30:	2380      	movs	r3, #128	; 0x80
     c32:	051b      	lsls	r3, r3, #20
     c34:	61b3      	str	r3, [r6, #24]
		target_addr -= target_addr % NVMCTRL_ROW_SIZE;
     c36:	23ff      	movs	r3, #255	; 0xff
     c38:	9a02      	ldr	r2, [sp, #8]
     c3a:	439a      	bics	r2, r3
     c3c:	9205      	str	r2, [sp, #20]
     c3e:	46b8      	mov	r8, r7
     c40:	0016      	movs	r6, r2
     c42:	2400      	movs	r4, #0
			if (page_index % NVMCTRL_ROW_PAGES == 0) {
     c44:	f240 0b03 	movw	fp, #3
			FLASH_0_write_page(target_addr + page_index * FLASH_PAGE_SIZE, &input[page_index * FLASH_PAGE_SIZE], FLASH_PAGE_SIZE);
     c48:	f240 7a9f 	movw	sl, #1951	; 0x79f
     c4c:	f2c0 0a00 	movt	sl, #0
     c50:	002f      	movs	r7, r5
     c52:	4645      	mov	r5, r8
     c54:	e760      	b.n	b18 <test_aes+0x78>
		wc_AesSetKey(&enc, key, sizeof(key), iv, AES_ENCRYPTION);
     c56:	9300      	str	r3, [sp, #0]
     c58:	9b04      	ldr	r3, [sp, #16]
     c5a:	2220      	movs	r2, #32
     c5c:	a906      	add	r1, sp, #24
     c5e:	a855      	add	r0, sp, #340	; 0x154
     c60:	f641 38f1 	movw	r8, #7153	; 0x1bf1
     c64:	f2c0 0800 	movt	r8, #0
     c68:	47c0      	blx	r8
		START_MEASURE(DGI_GPIO2);
     c6a:	2002      	movs	r0, #2
     c6c:	f240 4437 	movw	r4, #1079	; 0x437
     c70:	f2c0 0400 	movt	r4, #0
     c74:	47a0      	blx	r4
     c76:	f240 2600 	movw	r6, #512	; 0x200
     c7a:	f2c6 0600 	movt	r6, #24576	; 0x6000
     c7e:	2280      	movs	r2, #128	; 0x80
     c80:	0412      	lsls	r2, r2, #16
     c82:	4692      	mov	sl, r2
     c84:	61b2      	str	r2, [r6, #24]
		wc_AesEncryptDirect(&enc, input, input);
     c86:	003a      	movs	r2, r7
     c88:	0039      	movs	r1, r7
     c8a:	a855      	add	r0, sp, #340	; 0x154
     c8c:	f641 432f 	movw	r3, #7215	; 0x1c2f
     c90:	f2c0 0300 	movt	r3, #0
     c94:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c96:	4652      	mov	r2, sl
     c98:	6172      	str	r2, [r6, #20]
		STOP_MEASURE(DGI_GPIO2);
     c9a:	2002      	movs	r0, #2
     c9c:	47a0      	blx	r4
		START_MEASURE(DGI_GPIO3);
     c9e:	2002      	movs	r0, #2
     ca0:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     ca2:	2280      	movs	r2, #128	; 0x80
     ca4:	0512      	lsls	r2, r2, #20
     ca6:	4693      	mov	fp, r2
     ca8:	61b2      	str	r2, [r6, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     caa:	6172      	str	r2, [r6, #20]
		STOP_MEASURE(DGI_GPIO3);
     cac:	2002      	movs	r0, #2
     cae:	47a0      	blx	r4
		START_MEASURE(DGI_GPIO3);
     cb0:	2002      	movs	r0, #2
     cb2:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     cb4:	465a      	mov	r2, fp
     cb6:	61b2      	str	r2, [r6, #24]
		target_addr -= target_addr % NVMCTRL_ROW_SIZE;
     cb8:	23ff      	movs	r3, #255	; 0xff
     cba:	9802      	ldr	r0, [sp, #8]
     cbc:	4398      	bics	r0, r3
		FLASH_0_read(target_addr, input, num_bytes);
     cbe:	2200      	movs	r2, #0
     cc0:	0039      	movs	r1, r7
     cc2:	f240 73d3 	movw	r3, #2003	; 0x7d3
     cc6:	f2c0 0300 	movt	r3, #0
     cca:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ccc:	465a      	mov	r2, fp
     cce:	6172      	str	r2, [r6, #20]
		STOP_MEASURE(DGI_GPIO3);
     cd0:	2002      	movs	r0, #2
     cd2:	47a0      	blx	r4
		wc_AesSetKey(&dec, key, sizeof(key), iv, AES_DECRYPTION);
     cd4:	2301      	movs	r3, #1
     cd6:	9300      	str	r3, [sp, #0]
     cd8:	9b04      	ldr	r3, [sp, #16]
     cda:	2220      	movs	r2, #32
     cdc:	a906      	add	r1, sp, #24
     cde:	a80e      	add	r0, sp, #56	; 0x38
     ce0:	47c0      	blx	r8
		START_MEASURE(DGI_GPIO2);
     ce2:	2002      	movs	r0, #2
     ce4:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     ce6:	4653      	mov	r3, sl
     ce8:	61b3      	str	r3, [r6, #24]
		wc_AesDecryptDirect(&dec, input, input);
     cea:	003a      	movs	r2, r7
     cec:	0039      	movs	r1, r7
     cee:	a80e      	add	r0, sp, #56	; 0x38
     cf0:	f641 4343 	movw	r3, #7235	; 0x1c43
     cf4:	f2c0 0300 	movt	r3, #0
     cf8:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     cfa:	4653      	mov	r3, sl
     cfc:	6173      	str	r3, [r6, #20]
		STOP_MEASURE(DGI_GPIO2);
     cfe:	2002      	movs	r0, #2
     d00:	47a0      	blx	r4
     d02:	e761      	b.n	bc8 <test_aes+0x128>
		
	}
	
	
		// Free the memory
		free(input);
     d04:	0038      	movs	r0, r7
     d06:	f641 43bd 	movw	r3, #7357	; 0x1cbd
     d0a:	f2c0 0300 	movt	r3, #0
     d0e:	4798      	blx	r3

		END_MEASUREMENT;
     d10:	200a      	movs	r0, #10
     d12:	f240 4337 	movw	r3, #1079	; 0x437
     d16:	f2c0 0300 	movt	r3, #0
     d1a:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     d1c:	f240 2300 	movw	r3, #512	; 0x200
     d20:	f2c6 0300 	movt	r3, #24576	; 0x6000
     d24:	f240 4200 	movw	r2, #1024	; 0x400
     d28:	619a      	str	r2, [r3, #24]
     d2a:	f640 0200 	movw	r2, #2048	; 0x800
     d2e:	619a      	str	r2, [r3, #24]
     d30:	2280      	movs	r2, #128	; 0x80
     d32:	0412      	lsls	r2, r2, #16
     d34:	619a      	str	r2, [r3, #24]
     d36:	2280      	movs	r2, #128	; 0x80
     d38:	0512      	lsls	r2, r2, #20
     d3a:	619a      	str	r2, [r3, #24]
		
		
	return true;
	
	
}
     d3c:	2001      	movs	r0, #1
     d3e:	f240 2374 	movw	r3, #628	; 0x274
     d42:	449d      	add	sp, r3
     d44:	bc3c      	pop	{r2, r3, r4, r5}
     d46:	4690      	mov	r8, r2
     d48:	4699      	mov	r9, r3
     d4a:	46a2      	mov	sl, r4
     d4c:	46ab      	mov	fp, r5
     d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d50:	fffffd8c 	.word	0xfffffd8c

00000d54 <main>:



int main(void)
{
     d54:	b510      	push	{r4, lr}
	atmel_start_init();
     d56:	f240 1361 	movw	r3, #353	; 0x161
     d5a:	f2c0 0300 	movt	r3, #0
     d5e:	4798      	blx	r3
	
	UART_EDBG_init();
     d60:	f640 2375 	movw	r3, #2677	; 0xa75
     d64:	f2c0 0300 	movt	r3, #0
     d68:	4798      	blx	r3
	
	//io_write(terminal_io, hello_str, sizeof(hello_str) - 1);

	bool f = test_aes();
     d6a:	f640 23a1 	movw	r3, #2721	; 0xaa1
     d6e:	f2c0 0300 	movt	r3, #0
     d72:	4798      	blx	r3
    
}
     d74:	2000      	movs	r0, #0
     d76:	bd10      	pop	{r4, pc}

00000d78 <wc_AesEncrypt>:
    return x;
}

/* Software AES - ECB Encrypt */
static void wc_AesEncrypt(Aes* aes, const byte* inBlock, byte* outBlock)
{
     d78:	b5f0      	push	{r4, r5, r6, r7, lr}
     d7a:	46de      	mov	lr, fp
     d7c:	4657      	mov	r7, sl
     d7e:	464e      	mov	r6, r9
     d80:	4645      	mov	r5, r8
     d82:	b5e0      	push	{r5, r6, r7, lr}
     d84:	b08b      	sub	sp, #44	; 0x2c
     d86:	0007      	movs	r7, r0
     d88:	000e      	movs	r6, r1
     d8a:	9202      	str	r2, [sp, #8]
    word32 s0, s1, s2, s3;
    word32 t0, t1, t2, t3;
    word32 r = aes->rounds >> 1;
     d8c:	23f0      	movs	r3, #240	; 0xf0
     d8e:	58c5      	ldr	r5, [r0, r3]
     d90:	086d      	lsrs	r5, r5, #1
    const word32* rk = aes->key;

    if (r > 7 || r == 0) {
     d92:	1e6b      	subs	r3, r5, #1
     d94:	2b06      	cmp	r3, #6
     d96:	d906      	bls.n	da6 <wc_AesEncrypt+0x2e>
    XMEMCPY(outBlock,                  &s0, sizeof(s0));
    XMEMCPY(outBlock + sizeof(s0),     &s1, sizeof(s1));
    XMEMCPY(outBlock + 2 * sizeof(s0), &s2, sizeof(s2));
    XMEMCPY(outBlock + 3 * sizeof(s0), &s3, sizeof(s3));

}
     d98:	b00b      	add	sp, #44	; 0x2c
     d9a:	bc3c      	pop	{r2, r3, r4, r5}
     d9c:	4690      	mov	r8, r2
     d9e:	4699      	mov	r9, r3
     da0:	46a2      	mov	sl, r4
     da2:	46ab      	mov	fp, r5
     da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    XMEMCPY(&s0, inBlock,                  sizeof(s0));
     da6:	2204      	movs	r2, #4
     da8:	a809      	add	r0, sp, #36	; 0x24
     daa:	f641 44d1 	movw	r4, #7377	; 0x1cd1
     dae:	f2c0 0400 	movt	r4, #0
     db2:	47a0      	blx	r4
    XMEMCPY(&s1, inBlock + sizeof(s0),     sizeof(s1));
     db4:	1d31      	adds	r1, r6, #4
     db6:	2204      	movs	r2, #4
     db8:	a808      	add	r0, sp, #32
     dba:	47a0      	blx	r4
    XMEMCPY(&s2, inBlock + 2 * sizeof(s0), sizeof(s2));
     dbc:	0031      	movs	r1, r6
     dbe:	3108      	adds	r1, #8
     dc0:	2204      	movs	r2, #4
     dc2:	a807      	add	r0, sp, #28
     dc4:	47a0      	blx	r4
    XMEMCPY(&s3, inBlock + 3 * sizeof(s0), sizeof(s3));
     dc6:	0031      	movs	r1, r6
     dc8:	310c      	adds	r1, #12
     dca:	2204      	movs	r2, #4
     dcc:	a806      	add	r0, sp, #24
     dce:	47a0      	blx	r4
    s0 = ByteReverseWord32(s0);
     dd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    s1 = ByteReverseWord32(s1);
     dd2:	9e08      	ldr	r6, [sp, #32]
    /* 5 instructions with rotate instruction, 9 without */
    return (rotrFixed(value, 8U) & 0xff00ff00) |
           (rotlFixed(value, 8U) & 0x00ff00ff);
#else
    /* 6 instructions with rotate instruction, 8 without */
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
     dd4:	0a18      	lsrs	r0, r3, #8
     dd6:	f240 09ff 	movw	r9, #255	; 0xff
     dda:	f2c0 09ff 	movt	r9, #255	; 0xff
     dde:	464a      	mov	r2, r9
     de0:	4010      	ands	r0, r2
     de2:	021b      	lsls	r3, r3, #8
     de4:	f64f 7200 	movw	r2, #65280	; 0xff00
     de8:	f6cf 7200 	movt	r2, #65280	; 0xff00
     dec:	4013      	ands	r3, r2
     dee:	4318      	orrs	r0, r3
        return (x << y) | (x >> (sizeof(y) * 8 - y));
     df0:	2410      	movs	r4, #16
     df2:	41e0      	rors	r0, r4
    s0 ^= rk[0];
     df4:	683b      	ldr	r3, [r7, #0]
     df6:	4058      	eors	r0, r3
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
     df8:	0a33      	lsrs	r3, r6, #8
     dfa:	4649      	mov	r1, r9
     dfc:	400b      	ands	r3, r1
     dfe:	0236      	lsls	r6, r6, #8
     e00:	4016      	ands	r6, r2
     e02:	4333      	orrs	r3, r6
        return (x << y) | (x >> (sizeof(y) * 8 - y));
     e04:	41e3      	rors	r3, r4
    s1 ^= rk[1];
     e06:	687e      	ldr	r6, [r7, #4]
     e08:	405e      	eors	r6, r3
     e0a:	46b4      	mov	ip, r6
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
     e0c:	9b07      	ldr	r3, [sp, #28]
     e0e:	0a1b      	lsrs	r3, r3, #8
     e10:	400b      	ands	r3, r1
     e12:	9907      	ldr	r1, [sp, #28]
     e14:	0209      	lsls	r1, r1, #8
     e16:	4011      	ands	r1, r2
     e18:	430b      	orrs	r3, r1
        return (x << y) | (x >> (sizeof(y) * 8 - y));
     e1a:	41e3      	rors	r3, r4
    s2 ^= rk[2];
     e1c:	68b9      	ldr	r1, [r7, #8]
     e1e:	4059      	eors	r1, r3
     e20:	4688      	mov	r8, r1
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
     e22:	9b06      	ldr	r3, [sp, #24]
     e24:	021b      	lsls	r3, r3, #8
     e26:	4013      	ands	r3, r2
     e28:	9a06      	ldr	r2, [sp, #24]
     e2a:	0a12      	lsrs	r2, r2, #8
     e2c:	4649      	mov	r1, r9
     e2e:	400a      	ands	r2, r1
     e30:	4313      	orrs	r3, r2
        return (x << y) | (x >> (sizeof(y) * 8 - y));
     e32:	41e3      	rors	r3, r4
    s3 ^= rk[3];
     e34:	68fa      	ldr	r2, [r7, #12]
     e36:	405a      	eors	r2, r3
     e38:	4691      	mov	r9, r2
     e3a:	2204      	movs	r2, #4
{
     e3c:	2320      	movs	r3, #32
     e3e:	3b01      	subs	r3, #1
        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
     e40:	2b00      	cmp	r3, #0
     e42:	d1fc      	bne.n	e3e <wc_AesEncrypt+0xc6>
     e44:	3a01      	subs	r2, #1
    for (i = 0; i < 4; i++) {
     e46:	2a00      	cmp	r2, #0
     e48:	d1f8      	bne.n	e3c <wc_AesEncrypt+0xc4>
    const word32* rk = aes->key;
     e4a:	003e      	movs	r6, r7
     e4c:	016d      	lsls	r5, r5, #5
     e4e:	46bb      	mov	fp, r7
     e50:	44ab      	add	fp, r5
            Te[0][GETBYTE(s0, 3)]  ^
     e52:	f641 67e4 	movw	r7, #7908	; 0x1ee4
     e56:	f2c0 0700 	movt	r7, #0
            Te[3][GETBYTE(s3, 0)]  ^
     e5a:	24ff      	movs	r4, #255	; 0xff
     e5c:	4645      	mov	r5, r8
     e5e:	46b0      	mov	r8, r6
     e60:	464b      	mov	r3, r9
            Te[0][GETBYTE(s0, 3)]  ^
     e62:	0e02      	lsrs	r2, r0, #24
     e64:	0092      	lsls	r2, r2, #2
            Te[3][GETBYTE(s3, 0)]  ^
     e66:	0021      	movs	r1, r4
     e68:	4019      	ands	r1, r3
     e6a:	f240 3900 	movw	r9, #768	; 0x300
     e6e:	4449      	add	r1, r9
     e70:	0089      	lsls	r1, r1, #2
        t0 =
     e72:	59d2      	ldr	r2, [r2, r7]
     e74:	59c9      	ldr	r1, [r1, r7]
     e76:	404a      	eors	r2, r1
     e78:	4641      	mov	r1, r8
     e7a:	6909      	ldr	r1, [r1, #16]
     e7c:	404a      	eors	r2, r1
            Te[1][GETBYTE(s1, 2)]  ^
     e7e:	4661      	mov	r1, ip
     e80:	0c09      	lsrs	r1, r1, #16
     e82:	4021      	ands	r1, r4
     e84:	3101      	adds	r1, #1
     e86:	31ff      	adds	r1, #255	; 0xff
     e88:	0089      	lsls	r1, r1, #2
        t0 =
     e8a:	59c9      	ldr	r1, [r1, r7]
     e8c:	404a      	eors	r2, r1
            Te[2][GETBYTE(s2, 1)]  ^
     e8e:	0a29      	lsrs	r1, r5, #8
     e90:	4021      	ands	r1, r4
     e92:	f240 2900 	movw	r9, #512	; 0x200
     e96:	4449      	add	r1, r9
     e98:	0089      	lsls	r1, r1, #2
        t0 =
     e9a:	59c9      	ldr	r1, [r1, r7]
     e9c:	404a      	eors	r2, r1
     e9e:	9201      	str	r2, [sp, #4]
            Te[0][GETBYTE(s1, 3)]  ^
     ea0:	4662      	mov	r2, ip
     ea2:	0e11      	lsrs	r1, r2, #24
     ea4:	0089      	lsls	r1, r1, #2
            Te[3][GETBYTE(s0, 0)]  ^
     ea6:	0026      	movs	r6, r4
     ea8:	4006      	ands	r6, r0
     eaa:	f240 3900 	movw	r9, #768	; 0x300
     eae:	444e      	add	r6, r9
     eb0:	00b6      	lsls	r6, r6, #2
        t1 =
     eb2:	59c9      	ldr	r1, [r1, r7]
     eb4:	59f6      	ldr	r6, [r6, r7]
     eb6:	4071      	eors	r1, r6
     eb8:	4642      	mov	r2, r8
     eba:	6952      	ldr	r2, [r2, #20]
     ebc:	4051      	eors	r1, r2
            Te[1][GETBYTE(s2, 2)]  ^
     ebe:	0c2e      	lsrs	r6, r5, #16
     ec0:	4026      	ands	r6, r4
     ec2:	3601      	adds	r6, #1
     ec4:	36ff      	adds	r6, #255	; 0xff
     ec6:	00b6      	lsls	r6, r6, #2
        t1 =
     ec8:	59f6      	ldr	r6, [r6, r7]
     eca:	4071      	eors	r1, r6
            Te[2][GETBYTE(s3, 1)]  ^
     ecc:	0a1e      	lsrs	r6, r3, #8
     ece:	4026      	ands	r6, r4
     ed0:	f240 2900 	movw	r9, #512	; 0x200
     ed4:	444e      	add	r6, r9
     ed6:	00b6      	lsls	r6, r6, #2
        t1 =
     ed8:	59f6      	ldr	r6, [r6, r7]
     eda:	4071      	eors	r1, r6
            Te[0][GETBYTE(s2, 3)] ^
     edc:	0e2e      	lsrs	r6, r5, #24
     ede:	00b2      	lsls	r2, r6, #2
            Te[3][GETBYTE(s1, 0)]  ^
     ee0:	4666      	mov	r6, ip
     ee2:	4026      	ands	r6, r4
     ee4:	f240 3a00 	movw	sl, #768	; 0x300
     ee8:	4456      	add	r6, sl
     eea:	00b6      	lsls	r6, r6, #2
        t2 =
     eec:	59d2      	ldr	r2, [r2, r7]
     eee:	59f6      	ldr	r6, [r6, r7]
     ef0:	4056      	eors	r6, r2
     ef2:	4642      	mov	r2, r8
     ef4:	6992      	ldr	r2, [r2, #24]
     ef6:	4056      	eors	r6, r2
            Te[1][GETBYTE(s3, 2)]  ^
     ef8:	0c1a      	lsrs	r2, r3, #16
     efa:	4022      	ands	r2, r4
     efc:	4691      	mov	r9, r2
     efe:	f240 1a00 	movw	sl, #256	; 0x100
     f02:	44d1      	add	r9, sl
     f04:	464a      	mov	r2, r9
     f06:	0092      	lsls	r2, r2, #2
        t2 =
     f08:	59d2      	ldr	r2, [r2, r7]
     f0a:	4056      	eors	r6, r2
            Te[2][GETBYTE(s0, 1)]  ^
     f0c:	0a02      	lsrs	r2, r0, #8
     f0e:	4022      	ands	r2, r4
     f10:	4691      	mov	r9, r2
     f12:	f240 2a00 	movw	sl, #512	; 0x200
     f16:	44d1      	add	r9, sl
     f18:	464a      	mov	r2, r9
     f1a:	0092      	lsls	r2, r2, #2
        t2 =
     f1c:	59d2      	ldr	r2, [r2, r7]
     f1e:	4056      	eors	r6, r2
            Te[0][GETBYTE(s3, 3)] ^
     f20:	0e1b      	lsrs	r3, r3, #24
     f22:	009b      	lsls	r3, r3, #2
            Te[3][GETBYTE(s2, 0)]  ^
     f24:	4025      	ands	r5, r4
     f26:	f240 3900 	movw	r9, #768	; 0x300
     f2a:	444d      	add	r5, r9
     f2c:	00ad      	lsls	r5, r5, #2
        t3 =
     f2e:	59db      	ldr	r3, [r3, r7]
     f30:	59ed      	ldr	r5, [r5, r7]
     f32:	406b      	eors	r3, r5
     f34:	4642      	mov	r2, r8
     f36:	69d2      	ldr	r2, [r2, #28]
     f38:	4053      	eors	r3, r2
            Te[1][GETBYTE(s0, 2)]  ^
     f3a:	0c00      	lsrs	r0, r0, #16
     f3c:	4020      	ands	r0, r4
     f3e:	1c45      	adds	r5, r0, #1
     f40:	35ff      	adds	r5, #255	; 0xff
     f42:	00ad      	lsls	r5, r5, #2
        t3 =
     f44:	59e8      	ldr	r0, [r5, r7]
     f46:	4043      	eors	r3, r0
            Te[2][GETBYTE(s1, 1)]  ^
     f48:	4662      	mov	r2, ip
     f4a:	0a10      	lsrs	r0, r2, #8
     f4c:	4020      	ands	r0, r4
     f4e:	f240 2c00 	movw	ip, #512	; 0x200
     f52:	4460      	add	r0, ip
     f54:	0080      	lsls	r0, r0, #2
        t3 =
     f56:	59c0      	ldr	r0, [r0, r7]
     f58:	4043      	eors	r3, r0
        rk += 8;
     f5a:	f240 0c20 	movw	ip, #32
     f5e:	44e0      	add	r8, ip
        if (--r == 0) {
     f60:	45c3      	cmp	fp, r8
     f62:	d07f      	beq.n	1064 <wc_AesEncrypt+0x2ec>
            Te[0][GETBYTE(t0, 3)] ^
     f64:	9a01      	ldr	r2, [sp, #4]
     f66:	0e10      	lsrs	r0, r2, #24
     f68:	0080      	lsls	r0, r0, #2
            Te[3][GETBYTE(t3, 0)] ^
     f6a:	0025      	movs	r5, r4
     f6c:	401d      	ands	r5, r3
     f6e:	f240 3c00 	movw	ip, #768	; 0x300
     f72:	4465      	add	r5, ip
     f74:	00ad      	lsls	r5, r5, #2
     f76:	59c0      	ldr	r0, [r0, r7]
     f78:	59ed      	ldr	r5, [r5, r7]
     f7a:	4068      	eors	r0, r5
     f7c:	4642      	mov	r2, r8
     f7e:	6812      	ldr	r2, [r2, #0]
     f80:	4050      	eors	r0, r2
            Te[1][GETBYTE(t1, 2)] ^
     f82:	0c0d      	lsrs	r5, r1, #16
     f84:	4025      	ands	r5, r4
     f86:	3501      	adds	r5, #1
     f88:	35ff      	adds	r5, #255	; 0xff
     f8a:	00ad      	lsls	r5, r5, #2
            Te[3][GETBYTE(t3, 0)] ^
     f8c:	59ed      	ldr	r5, [r5, r7]
     f8e:	4068      	eors	r0, r5
            Te[2][GETBYTE(t2, 1)] ^
     f90:	0a35      	lsrs	r5, r6, #8
     f92:	4025      	ands	r5, r4
     f94:	f240 2c00 	movw	ip, #512	; 0x200
     f98:	4465      	add	r5, ip
     f9a:	00ad      	lsls	r5, r5, #2
            Te[3][GETBYTE(t3, 0)] ^
     f9c:	59ed      	ldr	r5, [r5, r7]
     f9e:	4068      	eors	r0, r5
            Te[0][GETBYTE(t1, 3)] ^
     fa0:	0e0d      	lsrs	r5, r1, #24
     fa2:	00aa      	lsls	r2, r5, #2
     fa4:	4694      	mov	ip, r2
            Te[3][GETBYTE(t0, 0)] ^
     fa6:	0025      	movs	r5, r4
     fa8:	9a01      	ldr	r2, [sp, #4]
     faa:	4015      	ands	r5, r2
     fac:	444d      	add	r5, r9
     fae:	00ad      	lsls	r5, r5, #2
     fb0:	4662      	mov	r2, ip
     fb2:	59d2      	ldr	r2, [r2, r7]
     fb4:	59ed      	ldr	r5, [r5, r7]
     fb6:	4055      	eors	r5, r2
     fb8:	4642      	mov	r2, r8
     fba:	6852      	ldr	r2, [r2, #4]
     fbc:	406a      	eors	r2, r5
            Te[1][GETBYTE(t2, 2)] ^
     fbe:	0c35      	lsrs	r5, r6, #16
     fc0:	4025      	ands	r5, r4
     fc2:	3501      	adds	r5, #1
     fc4:	35ff      	adds	r5, #255	; 0xff
     fc6:	00ad      	lsls	r5, r5, #2
            Te[3][GETBYTE(t0, 0)] ^
     fc8:	59ed      	ldr	r5, [r5, r7]
     fca:	4055      	eors	r5, r2
            Te[2][GETBYTE(t3, 1)] ^
     fcc:	0a1a      	lsrs	r2, r3, #8
     fce:	4022      	ands	r2, r4
     fd0:	4694      	mov	ip, r2
     fd2:	f240 2900 	movw	r9, #512	; 0x200
     fd6:	44cc      	add	ip, r9
     fd8:	4662      	mov	r2, ip
     fda:	0092      	lsls	r2, r2, #2
            Te[3][GETBYTE(t0, 0)] ^
     fdc:	59d2      	ldr	r2, [r2, r7]
     fde:	406a      	eors	r2, r5
     fe0:	4694      	mov	ip, r2
            Te[0][GETBYTE(t2, 3)] ^
     fe2:	0e35      	lsrs	r5, r6, #24
     fe4:	00aa      	lsls	r2, r5, #2
            Te[3][GETBYTE(t1, 0)] ^
     fe6:	0025      	movs	r5, r4
     fe8:	400d      	ands	r5, r1
     fea:	f240 3a00 	movw	sl, #768	; 0x300
     fee:	4455      	add	r5, sl
     ff0:	00ad      	lsls	r5, r5, #2
     ff2:	59d2      	ldr	r2, [r2, r7]
     ff4:	59ed      	ldr	r5, [r5, r7]
     ff6:	4055      	eors	r5, r2
     ff8:	4642      	mov	r2, r8
     ffa:	6892      	ldr	r2, [r2, #8]
     ffc:	4055      	eors	r5, r2
            Te[1][GETBYTE(t3, 2)] ^
     ffe:	0c1a      	lsrs	r2, r3, #16
    1000:	4022      	ands	r2, r4
    1002:	4691      	mov	r9, r2
    1004:	f240 1a00 	movw	sl, #256	; 0x100
    1008:	44d1      	add	r9, sl
    100a:	464a      	mov	r2, r9
    100c:	0092      	lsls	r2, r2, #2
            Te[3][GETBYTE(t1, 0)] ^
    100e:	59d2      	ldr	r2, [r2, r7]
    1010:	4055      	eors	r5, r2
            Te[2][GETBYTE(t0, 1)] ^
    1012:	9a01      	ldr	r2, [sp, #4]
    1014:	0a12      	lsrs	r2, r2, #8
    1016:	4022      	ands	r2, r4
    1018:	4691      	mov	r9, r2
    101a:	f240 2a00 	movw	sl, #512	; 0x200
    101e:	44d1      	add	r9, sl
    1020:	464a      	mov	r2, r9
    1022:	0092      	lsls	r2, r2, #2
            Te[3][GETBYTE(t1, 0)] ^
    1024:	59d2      	ldr	r2, [r2, r7]
    1026:	4055      	eors	r5, r2
            Te[0][GETBYTE(t3, 3)] ^
    1028:	0e1b      	lsrs	r3, r3, #24
    102a:	009b      	lsls	r3, r3, #2
            Te[3][GETBYTE(t2, 0)] ^
    102c:	4026      	ands	r6, r4
    102e:	f240 3900 	movw	r9, #768	; 0x300
    1032:	444e      	add	r6, r9
    1034:	00b6      	lsls	r6, r6, #2
    1036:	59db      	ldr	r3, [r3, r7]
    1038:	59f6      	ldr	r6, [r6, r7]
    103a:	4073      	eors	r3, r6
    103c:	4642      	mov	r2, r8
    103e:	68d2      	ldr	r2, [r2, #12]
    1040:	4053      	eors	r3, r2
            Te[1][GETBYTE(t0, 2)] ^
    1042:	9a01      	ldr	r2, [sp, #4]
    1044:	0c12      	lsrs	r2, r2, #16
    1046:	4022      	ands	r2, r4
    1048:	3201      	adds	r2, #1
    104a:	32ff      	adds	r2, #255	; 0xff
    104c:	0092      	lsls	r2, r2, #2
            Te[3][GETBYTE(t2, 0)] ^
    104e:	59d2      	ldr	r2, [r2, r7]
    1050:	4053      	eors	r3, r2
            Te[2][GETBYTE(t1, 1)] ^
    1052:	0a09      	lsrs	r1, r1, #8
    1054:	4021      	ands	r1, r4
    1056:	f240 2900 	movw	r9, #512	; 0x200
    105a:	4449      	add	r1, r9
    105c:	0089      	lsls	r1, r1, #2
            Te[3][GETBYTE(t2, 0)] ^
    105e:	59ca      	ldr	r2, [r1, r7]
    1060:	4053      	eors	r3, r2
        t0 =
    1062:	e6fe      	b.n	e62 <wc_AesEncrypt+0xea>
    1064:	001d      	movs	r5, r3
    1066:	000c      	movs	r4, r1
    1068:	0031      	movs	r1, r6
    106a:	4646      	mov	r6, r8
        (Te[1][GETBYTE(t3, 0)] & 0x000000ff) ^
    106c:	f641 67e4 	movw	r7, #7908	; 0x1ee4
    1070:	f2c0 0700 	movt	r7, #0
    1074:	20ff      	movs	r0, #255	; 0xff
    1076:	0003      	movs	r3, r0
    1078:	402b      	ands	r3, r5
    107a:	469c      	mov	ip, r3
    107c:	f240 1800 	movw	r8, #256	; 0x100
    1080:	44c4      	add	ip, r8
    1082:	4663      	mov	r3, ip
    1084:	009b      	lsls	r3, r3, #2
    1086:	59db      	ldr	r3, [r3, r7]
    1088:	4003      	ands	r3, r0
    108a:	6832      	ldr	r2, [r6, #0]
    108c:	4053      	eors	r3, r2
    108e:	469c      	mov	ip, r3
        (Te[0][GETBYTE(t2, 1)] & 0x0000ff00) ^
    1090:	0a0b      	lsrs	r3, r1, #8
    1092:	4003      	ands	r3, r0
    1094:	009b      	lsls	r3, r3, #2
    1096:	f64f 7b00 	movw	fp, #65280	; 0xff00
    109a:	59db      	ldr	r3, [r3, r7]
    109c:	465a      	mov	r2, fp
    109e:	4013      	ands	r3, r2
    10a0:	4698      	mov	r8, r3
        (Te[1][GETBYTE(t3, 0)] & 0x000000ff) ^
    10a2:	4663      	mov	r3, ip
    10a4:	4642      	mov	r2, r8
    10a6:	4053      	eors	r3, r2
    10a8:	469c      	mov	ip, r3
        (Te[3][GETBYTE(t1, 2)] & 0x00ff0000) ^
    10aa:	9403      	str	r4, [sp, #12]
    10ac:	0c23      	lsrs	r3, r4, #16
    10ae:	4003      	ands	r3, r0
    10b0:	4698      	mov	r8, r3
    10b2:	f240 3900 	movw	r9, #768	; 0x300
    10b6:	44c8      	add	r8, r9
    10b8:	4643      	mov	r3, r8
    10ba:	009b      	lsls	r3, r3, #2
    10bc:	59db      	ldr	r3, [r3, r7]
    10be:	4698      	mov	r8, r3
    10c0:	23ff      	movs	r3, #255	; 0xff
    10c2:	041b      	lsls	r3, r3, #16
    10c4:	001c      	movs	r4, r3
    10c6:	4643      	mov	r3, r8
    10c8:	9404      	str	r4, [sp, #16]
    10ca:	4023      	ands	r3, r4
    10cc:	4698      	mov	r8, r3
        (Te[2][GETBYTE(t0, 3)] & 0xff000000) ^
    10ce:	9b01      	ldr	r3, [sp, #4]
    10d0:	0e1b      	lsrs	r3, r3, #24
    10d2:	4699      	mov	r9, r3
    10d4:	f240 2a00 	movw	sl, #512	; 0x200
    10d8:	44d1      	add	r9, sl
    10da:	464b      	mov	r3, r9
    10dc:	009b      	lsls	r3, r3, #2
    10de:	59db      	ldr	r3, [r3, r7]
    10e0:	0e1b      	lsrs	r3, r3, #24
    10e2:	061b      	lsls	r3, r3, #24
    10e4:	4699      	mov	r9, r3
    10e6:	4643      	mov	r3, r8
    10e8:	464a      	mov	r2, r9
    10ea:	4313      	orrs	r3, r2
        (Te[1][GETBYTE(t3, 0)] & 0x000000ff) ^
    10ec:	4664      	mov	r4, ip
    10ee:	405c      	eors	r4, r3
        (Te[1][GETBYTE(t0, 0)] & 0x000000ff) ^
    10f0:	0003      	movs	r3, r0
    10f2:	9a01      	ldr	r2, [sp, #4]
    10f4:	4013      	ands	r3, r2
    10f6:	469c      	mov	ip, r3
    10f8:	f240 1800 	movw	r8, #256	; 0x100
    10fc:	44c4      	add	ip, r8
    10fe:	4663      	mov	r3, ip
    1100:	009b      	lsls	r3, r3, #2
    1102:	59db      	ldr	r3, [r3, r7]
    1104:	4003      	ands	r3, r0
    1106:	6872      	ldr	r2, [r6, #4]
    1108:	4053      	eors	r3, r2
    110a:	469c      	mov	ip, r3
        (Te[0][GETBYTE(t3, 1)] & 0x0000ff00) ^
    110c:	0a2b      	lsrs	r3, r5, #8
    110e:	4003      	ands	r3, r0
    1110:	009b      	lsls	r3, r3, #2
    1112:	59db      	ldr	r3, [r3, r7]
    1114:	465a      	mov	r2, fp
    1116:	4013      	ands	r3, r2
    1118:	4698      	mov	r8, r3
        (Te[1][GETBYTE(t0, 0)] & 0x000000ff) ^
    111a:	4663      	mov	r3, ip
    111c:	4642      	mov	r2, r8
    111e:	4053      	eors	r3, r2
    1120:	469c      	mov	ip, r3
        (Te[3][GETBYTE(t2, 2)] & 0x00ff0000) ^
    1122:	9105      	str	r1, [sp, #20]
    1124:	0c0b      	lsrs	r3, r1, #16
    1126:	4003      	ands	r3, r0
    1128:	4698      	mov	r8, r3
    112a:	f240 3900 	movw	r9, #768	; 0x300
    112e:	44c8      	add	r8, r9
    1130:	4643      	mov	r3, r8
    1132:	009b      	lsls	r3, r3, #2
    1134:	59db      	ldr	r3, [r3, r7]
    1136:	9a04      	ldr	r2, [sp, #16]
    1138:	4013      	ands	r3, r2
    113a:	4698      	mov	r8, r3
        (Te[2][GETBYTE(t1, 3)] & 0xff000000) ^
    113c:	9903      	ldr	r1, [sp, #12]
    113e:	0e0b      	lsrs	r3, r1, #24
    1140:	4699      	mov	r9, r3
    1142:	44d1      	add	r9, sl
    1144:	464b      	mov	r3, r9
    1146:	009b      	lsls	r3, r3, #2
    1148:	59db      	ldr	r3, [r3, r7]
    114a:	0e1b      	lsrs	r3, r3, #24
    114c:	061b      	lsls	r3, r3, #24
    114e:	4699      	mov	r9, r3
    1150:	4643      	mov	r3, r8
    1152:	464a      	mov	r2, r9
    1154:	4313      	orrs	r3, r2
    1156:	4698      	mov	r8, r3
        (Te[1][GETBYTE(t0, 0)] & 0x000000ff) ^
    1158:	4663      	mov	r3, ip
    115a:	4642      	mov	r2, r8
    115c:	4053      	eors	r3, r2
    115e:	469c      	mov	ip, r3
        (Te[1][GETBYTE(t1, 0)] & 0x000000ff) ^
    1160:	0003      	movs	r3, r0
    1162:	400b      	ands	r3, r1
    1164:	4698      	mov	r8, r3
    1166:	f240 1900 	movw	r9, #256	; 0x100
    116a:	44c8      	add	r8, r9
    116c:	4643      	mov	r3, r8
    116e:	009b      	lsls	r3, r3, #2
    1170:	59db      	ldr	r3, [r3, r7]
    1172:	4003      	ands	r3, r0
    1174:	68b2      	ldr	r2, [r6, #8]
    1176:	4053      	eors	r3, r2
    1178:	4698      	mov	r8, r3
        (Te[0][GETBYTE(t0, 1)] & 0x0000ff00) ^
    117a:	9b01      	ldr	r3, [sp, #4]
    117c:	0a1b      	lsrs	r3, r3, #8
    117e:	4003      	ands	r3, r0
    1180:	009b      	lsls	r3, r3, #2
    1182:	59db      	ldr	r3, [r3, r7]
    1184:	465a      	mov	r2, fp
    1186:	4013      	ands	r3, r2
    1188:	4699      	mov	r9, r3
        (Te[1][GETBYTE(t1, 0)] & 0x000000ff) ^
    118a:	4643      	mov	r3, r8
    118c:	464a      	mov	r2, r9
    118e:	4053      	eors	r3, r2
        (Te[3][GETBYTE(t3, 2)] & 0x00ff0000) ^
    1190:	0c2a      	lsrs	r2, r5, #16
    1192:	4002      	ands	r2, r0
    1194:	4690      	mov	r8, r2
    1196:	f240 3900 	movw	r9, #768	; 0x300
    119a:	44c8      	add	r8, r9
    119c:	4642      	mov	r2, r8
    119e:	0092      	lsls	r2, r2, #2
    11a0:	59d2      	ldr	r2, [r2, r7]
    11a2:	9904      	ldr	r1, [sp, #16]
    11a4:	400a      	ands	r2, r1
    11a6:	4690      	mov	r8, r2
        (Te[2][GETBYTE(t2, 3)] & 0xff000000) ^
    11a8:	9905      	ldr	r1, [sp, #20]
    11aa:	0e0a      	lsrs	r2, r1, #24
    11ac:	4691      	mov	r9, r2
    11ae:	44d1      	add	r9, sl
    11b0:	464a      	mov	r2, r9
    11b2:	0092      	lsls	r2, r2, #2
    11b4:	59d2      	ldr	r2, [r2, r7]
    11b6:	0e12      	lsrs	r2, r2, #24
    11b8:	0612      	lsls	r2, r2, #24
    11ba:	4691      	mov	r9, r2
    11bc:	4642      	mov	r2, r8
    11be:	4649      	mov	r1, r9
    11c0:	430a      	orrs	r2, r1
        (Te[1][GETBYTE(t1, 0)] & 0x000000ff) ^
    11c2:	4053      	eors	r3, r2
    11c4:	4698      	mov	r8, r3
        (Te[1][GETBYTE(t2, 0)] & 0x000000ff) ^
    11c6:	9905      	ldr	r1, [sp, #20]
    11c8:	4001      	ands	r1, r0
    11ca:	3101      	adds	r1, #1
    11cc:	31ff      	adds	r1, #255	; 0xff
    11ce:	0089      	lsls	r1, r1, #2
    11d0:	59c9      	ldr	r1, [r1, r7]
    11d2:	4001      	ands	r1, r0
    11d4:	68f6      	ldr	r6, [r6, #12]
    11d6:	4071      	eors	r1, r6
        (Te[0][GETBYTE(t1, 1)] & 0x0000ff00) ^
    11d8:	9e03      	ldr	r6, [sp, #12]
    11da:	0a33      	lsrs	r3, r6, #8
    11dc:	4003      	ands	r3, r0
    11de:	009b      	lsls	r3, r3, #2
    11e0:	59db      	ldr	r3, [r3, r7]
    11e2:	465a      	mov	r2, fp
    11e4:	4013      	ands	r3, r2
        (Te[1][GETBYTE(t2, 0)] & 0x000000ff) ^
    11e6:	4059      	eors	r1, r3
        (Te[3][GETBYTE(t0, 2)] & 0x00ff0000) ^
    11e8:	9b01      	ldr	r3, [sp, #4]
    11ea:	0c1a      	lsrs	r2, r3, #16
    11ec:	4002      	ands	r2, r0
    11ee:	f240 3900 	movw	r9, #768	; 0x300
    11f2:	444a      	add	r2, r9
    11f4:	0092      	lsls	r2, r2, #2
    11f6:	59d3      	ldr	r3, [r2, r7]
    11f8:	9a04      	ldr	r2, [sp, #16]
    11fa:	4013      	ands	r3, r2
        (Te[2][GETBYTE(t3, 3)] & 0xff000000) ^
    11fc:	0e2d      	lsrs	r5, r5, #24
    11fe:	f240 2900 	movw	r9, #512	; 0x200
    1202:	444d      	add	r5, r9
    1204:	00ad      	lsls	r5, r5, #2
    1206:	59ea      	ldr	r2, [r5, r7]
    1208:	0e12      	lsrs	r2, r2, #24
    120a:	0612      	lsls	r2, r2, #24
    120c:	4313      	orrs	r3, r2
        (Te[1][GETBYTE(t2, 0)] & 0x000000ff) ^
    120e:	4059      	eors	r1, r3
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
    1210:	0a23      	lsrs	r3, r4, #8
    1212:	26ff      	movs	r6, #255	; 0xff
    1214:	f2c0 06ff 	movt	r6, #255	; 0xff
    1218:	4033      	ands	r3, r6
    121a:	0222      	lsls	r2, r4, #8
    121c:	f64f 7000 	movw	r0, #65280	; 0xff00
    1220:	f6cf 7000 	movt	r0, #65280	; 0xff00
    1224:	4002      	ands	r2, r0
    1226:	4313      	orrs	r3, r2
        return (x << y) | (x >> (sizeof(y) * 8 - y));
    1228:	2510      	movs	r5, #16
    122a:	41eb      	rors	r3, r5
    s0 = ByteReverseWord32(s0);
    122c:	9309      	str	r3, [sp, #36]	; 0x24
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
    122e:	4663      	mov	r3, ip
    1230:	0a1b      	lsrs	r3, r3, #8
    1232:	4033      	ands	r3, r6
    1234:	4662      	mov	r2, ip
    1236:	0212      	lsls	r2, r2, #8
    1238:	4002      	ands	r2, r0
    123a:	4313      	orrs	r3, r2
        return (x << y) | (x >> (sizeof(y) * 8 - y));
    123c:	41eb      	rors	r3, r5
    s1 = ByteReverseWord32(s1);
    123e:	9308      	str	r3, [sp, #32]
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
    1240:	4643      	mov	r3, r8
    1242:	0a1a      	lsrs	r2, r3, #8
    1244:	4032      	ands	r2, r6
    1246:	021b      	lsls	r3, r3, #8
    1248:	4003      	ands	r3, r0
    124a:	431a      	orrs	r2, r3
        return (x << y) | (x >> (sizeof(y) * 8 - y));
    124c:	41ea      	rors	r2, r5
    s2 = ByteReverseWord32(s2);
    124e:	9207      	str	r2, [sp, #28]
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
    1250:	0a0b      	lsrs	r3, r1, #8
    1252:	4033      	ands	r3, r6
    1254:	0209      	lsls	r1, r1, #8
    1256:	4008      	ands	r0, r1
    1258:	4303      	orrs	r3, r0
        return (x << y) | (x >> (sizeof(y) * 8 - y));
    125a:	41eb      	rors	r3, r5
    s3 = ByteReverseWord32(s3);
    125c:	9306      	str	r3, [sp, #24]
    XMEMCPY(outBlock,                  &s0, sizeof(s0));
    125e:	2204      	movs	r2, #4
    1260:	a909      	add	r1, sp, #36	; 0x24
    1262:	9c02      	ldr	r4, [sp, #8]
    1264:	0020      	movs	r0, r4
    1266:	f641 45d1 	movw	r5, #7377	; 0x1cd1
    126a:	f2c0 0500 	movt	r5, #0
    126e:	47a8      	blx	r5
    XMEMCPY(outBlock + sizeof(s0),     &s1, sizeof(s1));
    1270:	1d20      	adds	r0, r4, #4
    1272:	2204      	movs	r2, #4
    1274:	a908      	add	r1, sp, #32
    1276:	47a8      	blx	r5
    XMEMCPY(outBlock + 2 * sizeof(s0), &s2, sizeof(s2));
    1278:	0020      	movs	r0, r4
    127a:	3008      	adds	r0, #8
    127c:	2204      	movs	r2, #4
    127e:	a907      	add	r1, sp, #28
    1280:	47a8      	blx	r5
    XMEMCPY(outBlock + 3 * sizeof(s0), &s3, sizeof(s3));
    1282:	0020      	movs	r0, r4
    1284:	300c      	adds	r0, #12
    1286:	2204      	movs	r2, #4
    1288:	a906      	add	r1, sp, #24
    128a:	47a8      	blx	r5
    128c:	e584      	b.n	d98 <wc_AesEncrypt+0x20>

0000128e <wc_AesDecrypt>:
    return x;
}

/* Software AES - ECB Decrypt */
static void wc_AesDecrypt(Aes* aes, const byte* inBlock, byte* outBlock)
{
    128e:	b5f0      	push	{r4, r5, r6, r7, lr}
    1290:	46de      	mov	lr, fp
    1292:	4657      	mov	r7, sl
    1294:	464e      	mov	r6, r9
    1296:	4645      	mov	r5, r8
    1298:	b5e0      	push	{r5, r6, r7, lr}
    129a:	b089      	sub	sp, #36	; 0x24
    129c:	0007      	movs	r7, r0
    129e:	000d      	movs	r5, r1
    12a0:	9203      	str	r2, [sp, #12]
    word32 s0, s1, s2, s3;
    word32 t0, t1, t2, t3;
    word32 r = aes->rounds >> 1;
    12a2:	23f0      	movs	r3, #240	; 0xf0
    12a4:	58c6      	ldr	r6, [r0, r3]
    12a6:	0876      	lsrs	r6, r6, #1

    const word32* rk = aes->key;
    if (r > 7 || r == 0) {
    12a8:	1e73      	subs	r3, r6, #1
    12aa:	2b06      	cmp	r3, #6
    12ac:	d906      	bls.n	12bc <wc_AesDecrypt+0x2e>

    XMEMCPY(outBlock,                  &s0, sizeof(s0));
    XMEMCPY(outBlock + sizeof(s0),     &s1, sizeof(s1));
    XMEMCPY(outBlock + 2 * sizeof(s0), &s2, sizeof(s2));
    XMEMCPY(outBlock + 3 * sizeof(s0), &s3, sizeof(s3));
}
    12ae:	b009      	add	sp, #36	; 0x24
    12b0:	bc3c      	pop	{r2, r3, r4, r5}
    12b2:	4690      	mov	r8, r2
    12b4:	4699      	mov	r9, r3
    12b6:	46a2      	mov	sl, r4
    12b8:	46ab      	mov	fp, r5
    12ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    XMEMCPY(&s0, inBlock,                  sizeof(s0));
    12bc:	2204      	movs	r2, #4
    12be:	a807      	add	r0, sp, #28
    12c0:	f641 44d1 	movw	r4, #7377	; 0x1cd1
    12c4:	f2c0 0400 	movt	r4, #0
    12c8:	47a0      	blx	r4
    XMEMCPY(&s1, inBlock + sizeof(s0),     sizeof(s1));
    12ca:	1d29      	adds	r1, r5, #4
    12cc:	2204      	movs	r2, #4
    12ce:	a806      	add	r0, sp, #24
    12d0:	47a0      	blx	r4
    XMEMCPY(&s2, inBlock + 2 * sizeof(s0), sizeof(s2));
    12d2:	0029      	movs	r1, r5
    12d4:	3108      	adds	r1, #8
    12d6:	2204      	movs	r2, #4
    12d8:	a805      	add	r0, sp, #20
    12da:	47a0      	blx	r4
    XMEMCPY(&s3, inBlock + 3 * sizeof(s0), sizeof(s3));
    12dc:	0029      	movs	r1, r5
    12de:	310c      	adds	r1, #12
    12e0:	2204      	movs	r2, #4
    12e2:	a804      	add	r0, sp, #16
    12e4:	47a0      	blx	r4
    s0 = ByteReverseWord32(s0);
    12e6:	9b07      	ldr	r3, [sp, #28]
    s1 = ByteReverseWord32(s1);
    12e8:	9906      	ldr	r1, [sp, #24]
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
    12ea:	0a18      	lsrs	r0, r3, #8
    12ec:	f240 08ff 	movw	r8, #255	; 0xff
    12f0:	f2c0 08ff 	movt	r8, #255	; 0xff
    12f4:	4642      	mov	r2, r8
    12f6:	4010      	ands	r0, r2
    12f8:	021b      	lsls	r3, r3, #8
    12fa:	f64f 7200 	movw	r2, #65280	; 0xff00
    12fe:	f6cf 7200 	movt	r2, #65280	; 0xff00
    1302:	4013      	ands	r3, r2
    1304:	4318      	orrs	r0, r3
        return (x << y) | (x >> (sizeof(y) * 8 - y));
    1306:	2410      	movs	r4, #16
    1308:	41e0      	rors	r0, r4
    s0 ^= rk[0];
    130a:	683b      	ldr	r3, [r7, #0]
    130c:	4058      	eors	r0, r3
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
    130e:	0a0d      	lsrs	r5, r1, #8
    1310:	4643      	mov	r3, r8
    1312:	401d      	ands	r5, r3
    1314:	0209      	lsls	r1, r1, #8
    1316:	4011      	ands	r1, r2
    1318:	430d      	orrs	r5, r1
        return (x << y) | (x >> (sizeof(y) * 8 - y));
    131a:	41e5      	rors	r5, r4
    s1 ^= rk[1];
    131c:	687b      	ldr	r3, [r7, #4]
    131e:	405d      	eors	r5, r3
    1320:	9501      	str	r5, [sp, #4]
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
    1322:	9b05      	ldr	r3, [sp, #20]
    1324:	0a19      	lsrs	r1, r3, #8
    1326:	4643      	mov	r3, r8
    1328:	4019      	ands	r1, r3
    132a:	9b05      	ldr	r3, [sp, #20]
    132c:	021b      	lsls	r3, r3, #8
    132e:	4013      	ands	r3, r2
    1330:	4319      	orrs	r1, r3
        return (x << y) | (x >> (sizeof(y) * 8 - y));
    1332:	41e1      	rors	r1, r4
    s2 ^= rk[2];
    1334:	68bb      	ldr	r3, [r7, #8]
    1336:	4059      	eors	r1, r3
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
    1338:	9b04      	ldr	r3, [sp, #16]
    133a:	021b      	lsls	r3, r3, #8
    133c:	4013      	ands	r3, r2
    133e:	9a04      	ldr	r2, [sp, #16]
    1340:	0a12      	lsrs	r2, r2, #8
    1342:	4645      	mov	r5, r8
    1344:	402a      	ands	r2, r5
    1346:	4313      	orrs	r3, r2
        return (x << y) | (x >> (sizeof(y) * 8 - y));
    1348:	41e3      	rors	r3, r4
    s3 ^= rk[3];
    134a:	68fa      	ldr	r2, [r7, #12]
    134c:	405a      	eors	r2, r3
    134e:	4690      	mov	r8, r2
    1350:	2204      	movs	r2, #4
{
    1352:	2320      	movs	r3, #32
    1354:	3b01      	subs	r3, #1
        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
    1356:	2b00      	cmp	r3, #0
    1358:	d1fc      	bne.n	1354 <wc_AesDecrypt+0xc6>
    135a:	3a01      	subs	r2, #1
    for (i = 0; i < 4; i++) {
    135c:	2a00      	cmp	r2, #0
    135e:	d1f8      	bne.n	1352 <wc_AesDecrypt+0xc4>
    const word32* rk = aes->key;
    1360:	003c      	movs	r4, r7
    1362:	0176      	lsls	r6, r6, #5
    1364:	46ba      	mov	sl, r7
    1366:	44b2      	add	sl, r6
            Td[0][GETBYTE(s0, 3)] ^
    1368:	f642 63e4 	movw	r3, #12004	; 0x2ee4
    136c:	f2c0 0300 	movt	r3, #0
            Td[3][GETBYTE(s1, 0)] ^
    1370:	22ff      	movs	r2, #255	; 0xff
            Td[0][GETBYTE(s0, 3)] ^
    1372:	0e06      	lsrs	r6, r0, #24
    1374:	00b6      	lsls	r6, r6, #2
            Td[3][GETBYTE(s1, 0)] ^
    1376:	0017      	movs	r7, r2
    1378:	9d01      	ldr	r5, [sp, #4]
    137a:	402f      	ands	r7, r5
    137c:	f240 3c00 	movw	ip, #768	; 0x300
    1380:	4467      	add	r7, ip
    1382:	00bf      	lsls	r7, r7, #2
        t0 =
    1384:	58f6      	ldr	r6, [r6, r3]
    1386:	58ff      	ldr	r7, [r7, r3]
    1388:	407e      	eors	r6, r7
    138a:	6925      	ldr	r5, [r4, #16]
    138c:	406e      	eors	r6, r5
            Td[1][GETBYTE(s3, 2)] ^
    138e:	4645      	mov	r5, r8
    1390:	0c2f      	lsrs	r7, r5, #16
    1392:	4017      	ands	r7, r2
    1394:	3701      	adds	r7, #1
    1396:	37ff      	adds	r7, #255	; 0xff
    1398:	00bf      	lsls	r7, r7, #2
        t0 =
    139a:	58ff      	ldr	r7, [r7, r3]
    139c:	407e      	eors	r6, r7
            Td[2][GETBYTE(s2, 1)] ^
    139e:	0a0f      	lsrs	r7, r1, #8
    13a0:	4017      	ands	r7, r2
    13a2:	f240 2c00 	movw	ip, #512	; 0x200
    13a6:	4467      	add	r7, ip
    13a8:	00bf      	lsls	r7, r7, #2
        t0 =
    13aa:	58ff      	ldr	r7, [r7, r3]
    13ac:	407e      	eors	r6, r7
    13ae:	46b4      	mov	ip, r6
            Td[0][GETBYTE(s1, 3)] ^
    13b0:	9d01      	ldr	r5, [sp, #4]
    13b2:	0e2f      	lsrs	r7, r5, #24
    13b4:	00bf      	lsls	r7, r7, #2
            Td[3][GETBYTE(s2, 0)] ^
    13b6:	0016      	movs	r6, r2
    13b8:	400e      	ands	r6, r1
    13ba:	f240 3900 	movw	r9, #768	; 0x300
    13be:	444e      	add	r6, r9
    13c0:	00b6      	lsls	r6, r6, #2
        t1 =
    13c2:	58ff      	ldr	r7, [r7, r3]
    13c4:	58f6      	ldr	r6, [r6, r3]
    13c6:	4077      	eors	r7, r6
    13c8:	6965      	ldr	r5, [r4, #20]
    13ca:	406f      	eors	r7, r5
            Td[1][GETBYTE(s0, 2)] ^
    13cc:	0c06      	lsrs	r6, r0, #16
    13ce:	4016      	ands	r6, r2
    13d0:	3601      	adds	r6, #1
    13d2:	36ff      	adds	r6, #255	; 0xff
    13d4:	00b6      	lsls	r6, r6, #2
        t1 =
    13d6:	58f6      	ldr	r6, [r6, r3]
    13d8:	4077      	eors	r7, r6
            Td[2][GETBYTE(s3, 1)] ^
    13da:	4645      	mov	r5, r8
    13dc:	0a2e      	lsrs	r6, r5, #8
    13de:	4016      	ands	r6, r2
    13e0:	f240 2900 	movw	r9, #512	; 0x200
    13e4:	444e      	add	r6, r9
    13e6:	00b6      	lsls	r6, r6, #2
        t1 =
    13e8:	58f6      	ldr	r6, [r6, r3]
    13ea:	4077      	eors	r7, r6
            Td[0][GETBYTE(s2, 3)] ^
    13ec:	0e0e      	lsrs	r6, r1, #24
    13ee:	00b5      	lsls	r5, r6, #2
            Td[3][GETBYTE(s3, 0)] ^
    13f0:	4646      	mov	r6, r8
    13f2:	4016      	ands	r6, r2
    13f4:	f240 3900 	movw	r9, #768	; 0x300
    13f8:	444e      	add	r6, r9
    13fa:	00b6      	lsls	r6, r6, #2
        t2 =
    13fc:	58ed      	ldr	r5, [r5, r3]
    13fe:	58f6      	ldr	r6, [r6, r3]
    1400:	406e      	eors	r6, r5
    1402:	69a5      	ldr	r5, [r4, #24]
    1404:	406e      	eors	r6, r5
            Td[1][GETBYTE(s1, 2)] ^
    1406:	9d01      	ldr	r5, [sp, #4]
    1408:	0c2d      	lsrs	r5, r5, #16
    140a:	4015      	ands	r5, r2
    140c:	46ab      	mov	fp, r5
    140e:	f240 1900 	movw	r9, #256	; 0x100
    1412:	44cb      	add	fp, r9
    1414:	465d      	mov	r5, fp
    1416:	00ad      	lsls	r5, r5, #2
        t2 =
    1418:	58ed      	ldr	r5, [r5, r3]
    141a:	406e      	eors	r6, r5
            Td[2][GETBYTE(s0, 1)] ^
    141c:	0a05      	lsrs	r5, r0, #8
    141e:	4015      	ands	r5, r2
    1420:	46ab      	mov	fp, r5
    1422:	f240 2900 	movw	r9, #512	; 0x200
    1426:	44cb      	add	fp, r9
    1428:	465d      	mov	r5, fp
    142a:	00ad      	lsls	r5, r5, #2
        t2 =
    142c:	58ed      	ldr	r5, [r5, r3]
    142e:	406e      	eors	r6, r5
    1430:	9602      	str	r6, [sp, #8]
            Td[0][GETBYTE(s3, 3)] ^
    1432:	4645      	mov	r5, r8
    1434:	0e2d      	lsrs	r5, r5, #24
    1436:	00ad      	lsls	r5, r5, #2
            Td[3][GETBYTE(s0, 0)] ^
    1438:	4010      	ands	r0, r2
    143a:	f240 3900 	movw	r9, #768	; 0x300
    143e:	4448      	add	r0, r9
    1440:	0080      	lsls	r0, r0, #2
        t3 =
    1442:	58ed      	ldr	r5, [r5, r3]
    1444:	58c0      	ldr	r0, [r0, r3]
    1446:	4068      	eors	r0, r5
    1448:	69e5      	ldr	r5, [r4, #28]
    144a:	4045      	eors	r5, r0
            Td[1][GETBYTE(s2, 2)] ^
    144c:	0c09      	lsrs	r1, r1, #16
    144e:	4011      	ands	r1, r2
    1450:	1c48      	adds	r0, r1, #1
    1452:	30ff      	adds	r0, #255	; 0xff
    1454:	0080      	lsls	r0, r0, #2
        t3 =
    1456:	58c1      	ldr	r1, [r0, r3]
    1458:	4069      	eors	r1, r5
            Td[2][GETBYTE(s1, 1)] ^
    145a:	9801      	ldr	r0, [sp, #4]
    145c:	0a05      	lsrs	r5, r0, #8
    145e:	4015      	ands	r5, r2
    1460:	f240 2800 	movw	r8, #512	; 0x200
    1464:	4445      	add	r5, r8
    1466:	00ad      	lsls	r5, r5, #2
        t3 =
    1468:	58e8      	ldr	r0, [r5, r3]
    146a:	4041      	eors	r1, r0
    146c:	4688      	mov	r8, r1
        rk += 8;
    146e:	3420      	adds	r4, #32
        if (--r == 0) {
    1470:	4554      	cmp	r4, sl
    1472:	d100      	bne.n	1476 <wc_AesDecrypt+0x1e8>
    1474:	e08a      	b.n	158c <wc_AesDecrypt+0x2fe>
            Td[0][GETBYTE(t0, 3)] ^
    1476:	4661      	mov	r1, ip
    1478:	0e08      	lsrs	r0, r1, #24
    147a:	0080      	lsls	r0, r0, #2
            Td[3][GETBYTE(t1, 0)] ^
    147c:	0011      	movs	r1, r2
    147e:	4039      	ands	r1, r7
    1480:	4449      	add	r1, r9
    1482:	0089      	lsls	r1, r1, #2
    1484:	58c0      	ldr	r0, [r0, r3]
    1486:	58c9      	ldr	r1, [r1, r3]
    1488:	4048      	eors	r0, r1
    148a:	6821      	ldr	r1, [r4, #0]
    148c:	4048      	eors	r0, r1
            Td[1][GETBYTE(t3, 2)] ^
    148e:	4641      	mov	r1, r8
    1490:	0c09      	lsrs	r1, r1, #16
    1492:	4011      	ands	r1, r2
    1494:	3101      	adds	r1, #1
    1496:	31ff      	adds	r1, #255	; 0xff
    1498:	0089      	lsls	r1, r1, #2
            Td[3][GETBYTE(t1, 0)] ^
    149a:	58c9      	ldr	r1, [r1, r3]
    149c:	4048      	eors	r0, r1
            Td[2][GETBYTE(t2, 1)] ^
    149e:	0a31      	lsrs	r1, r6, #8
    14a0:	4011      	ands	r1, r2
    14a2:	f240 2900 	movw	r9, #512	; 0x200
    14a6:	4449      	add	r1, r9
    14a8:	0089      	lsls	r1, r1, #2
            Td[3][GETBYTE(t1, 0)] ^
    14aa:	58c9      	ldr	r1, [r1, r3]
    14ac:	4048      	eors	r0, r1
            Td[0][GETBYTE(t1, 3)] ^
    14ae:	0e3d      	lsrs	r5, r7, #24
    14b0:	00ad      	lsls	r5, r5, #2
            Td[3][GETBYTE(t2, 0)] ^
    14b2:	0011      	movs	r1, r2
    14b4:	4031      	ands	r1, r6
    14b6:	f240 3900 	movw	r9, #768	; 0x300
    14ba:	4449      	add	r1, r9
    14bc:	0089      	lsls	r1, r1, #2
    14be:	58ed      	ldr	r5, [r5, r3]
    14c0:	58c9      	ldr	r1, [r1, r3]
    14c2:	404d      	eors	r5, r1
    14c4:	6861      	ldr	r1, [r4, #4]
    14c6:	404d      	eors	r5, r1
            Td[1][GETBYTE(t0, 2)] ^
    14c8:	4661      	mov	r1, ip
    14ca:	0c09      	lsrs	r1, r1, #16
    14cc:	4011      	ands	r1, r2
    14ce:	3101      	adds	r1, #1
    14d0:	31ff      	adds	r1, #255	; 0xff
    14d2:	0089      	lsls	r1, r1, #2
            Td[3][GETBYTE(t2, 0)] ^
    14d4:	58c9      	ldr	r1, [r1, r3]
    14d6:	404d      	eors	r5, r1
            Td[2][GETBYTE(t3, 1)] ^
    14d8:	4641      	mov	r1, r8
    14da:	0a09      	lsrs	r1, r1, #8
    14dc:	4011      	ands	r1, r2
    14de:	f240 2900 	movw	r9, #512	; 0x200
    14e2:	4449      	add	r1, r9
    14e4:	0089      	lsls	r1, r1, #2
            Td[3][GETBYTE(t2, 0)] ^
    14e6:	58c9      	ldr	r1, [r1, r3]
    14e8:	404d      	eors	r5, r1
    14ea:	9501      	str	r5, [sp, #4]
            Td[0][GETBYTE(t2, 3)] ^
    14ec:	0e31      	lsrs	r1, r6, #24
    14ee:	0089      	lsls	r1, r1, #2
    14f0:	468b      	mov	fp, r1
            Td[3][GETBYTE(t3, 0)] ^
    14f2:	4641      	mov	r1, r8
    14f4:	4011      	ands	r1, r2
    14f6:	f240 3900 	movw	r9, #768	; 0x300
    14fa:	4449      	add	r1, r9
    14fc:	0089      	lsls	r1, r1, #2
    14fe:	465d      	mov	r5, fp
    1500:	58ed      	ldr	r5, [r5, r3]
    1502:	58c9      	ldr	r1, [r1, r3]
    1504:	4069      	eors	r1, r5
    1506:	68a5      	ldr	r5, [r4, #8]
    1508:	4069      	eors	r1, r5
            Td[1][GETBYTE(t1, 2)] ^
    150a:	0c3d      	lsrs	r5, r7, #16
    150c:	4015      	ands	r5, r2
    150e:	46ab      	mov	fp, r5
    1510:	f240 1900 	movw	r9, #256	; 0x100
    1514:	44cb      	add	fp, r9
    1516:	465d      	mov	r5, fp
    1518:	00ad      	lsls	r5, r5, #2
            Td[3][GETBYTE(t3, 0)] ^
    151a:	58ed      	ldr	r5, [r5, r3]
    151c:	4069      	eors	r1, r5
            Td[2][GETBYTE(t0, 1)] ^
    151e:	4665      	mov	r5, ip
    1520:	0a2d      	lsrs	r5, r5, #8
    1522:	4015      	ands	r5, r2
    1524:	46ab      	mov	fp, r5
    1526:	f240 2900 	movw	r9, #512	; 0x200
    152a:	44cb      	add	fp, r9
    152c:	465d      	mov	r5, fp
    152e:	00ad      	lsls	r5, r5, #2
            Td[3][GETBYTE(t3, 0)] ^
    1530:	58ed      	ldr	r5, [r5, r3]
    1532:	4069      	eors	r1, r5
            Td[0][GETBYTE(t3, 3)] ^
    1534:	4645      	mov	r5, r8
    1536:	0e2d      	lsrs	r5, r5, #24
    1538:	00ad      	lsls	r5, r5, #2
    153a:	46a8      	mov	r8, r5
            Td[3][GETBYTE(t0, 0)] ^
    153c:	4665      	mov	r5, ip
    153e:	4015      	ands	r5, r2
    1540:	46ac      	mov	ip, r5
    1542:	f240 3900 	movw	r9, #768	; 0x300
    1546:	44cc      	add	ip, r9
    1548:	4665      	mov	r5, ip
    154a:	00ad      	lsls	r5, r5, #2
    154c:	46ac      	mov	ip, r5
    154e:	4645      	mov	r5, r8
    1550:	58ed      	ldr	r5, [r5, r3]
    1552:	46a8      	mov	r8, r5
    1554:	4665      	mov	r5, ip
    1556:	58ed      	ldr	r5, [r5, r3]
    1558:	46ac      	mov	ip, r5
    155a:	4645      	mov	r5, r8
    155c:	4666      	mov	r6, ip
    155e:	4075      	eors	r5, r6
    1560:	68e6      	ldr	r6, [r4, #12]
    1562:	4075      	eors	r5, r6
    1564:	46a8      	mov	r8, r5
            Td[1][GETBYTE(t2, 2)] ^
    1566:	9d02      	ldr	r5, [sp, #8]
    1568:	0c2e      	lsrs	r6, r5, #16
    156a:	4016      	ands	r6, r2
    156c:	3601      	adds	r6, #1
    156e:	36ff      	adds	r6, #255	; 0xff
    1570:	00b6      	lsls	r6, r6, #2
            Td[3][GETBYTE(t0, 0)] ^
    1572:	58f6      	ldr	r6, [r6, r3]
    1574:	4645      	mov	r5, r8
    1576:	406e      	eors	r6, r5
            Td[2][GETBYTE(t1, 1)] ^
    1578:	0a3f      	lsrs	r7, r7, #8
    157a:	4017      	ands	r7, r2
    157c:	f240 2c00 	movw	ip, #512	; 0x200
    1580:	4467      	add	r7, ip
    1582:	00bf      	lsls	r7, r7, #2
            Td[3][GETBYTE(t0, 0)] ^
    1584:	58ff      	ldr	r7, [r7, r3]
    1586:	407e      	eors	r6, r7
    1588:	46b0      	mov	r8, r6
        t0 =
    158a:	e6f2      	b.n	1372 <wc_AesDecrypt+0xe4>
        ((word32)Td4[GETBYTE(t1, 0)]) ^
    158c:	f643 63e4 	movw	r3, #16100	; 0x3ee4
    1590:	f2c0 0300 	movt	r3, #0
    1594:	25ff      	movs	r5, #255	; 0xff
    1596:	002a      	movs	r2, r5
    1598:	403a      	ands	r2, r7
    159a:	5c98      	ldrb	r0, [r3, r2]
    159c:	4652      	mov	r2, sl
    159e:	6812      	ldr	r2, [r2, #0]
    15a0:	4050      	eors	r0, r2
        ((word32)Td4[GETBYTE(t0, 3)] << 24) ^
    15a2:	4662      	mov	r2, ip
    15a4:	0e12      	lsrs	r2, r2, #24
    15a6:	5c9a      	ldrb	r2, [r3, r2]
    15a8:	0612      	lsls	r2, r2, #24
        ((word32)Td4[GETBYTE(t1, 0)]) ^
    15aa:	4050      	eors	r0, r2
        ((word32)Td4[GETBYTE(t3, 2)] << 16) ^
    15ac:	0c0a      	lsrs	r2, r1, #16
    15ae:	402a      	ands	r2, r5
    15b0:	5c9a      	ldrb	r2, [r3, r2]
    15b2:	0412      	lsls	r2, r2, #16
        ((word32)Td4[GETBYTE(t1, 0)]) ^
    15b4:	4050      	eors	r0, r2
        ((word32)Td4[GETBYTE(t2, 1)] <<  8) ^
    15b6:	9e02      	ldr	r6, [sp, #8]
    15b8:	0a32      	lsrs	r2, r6, #8
    15ba:	402a      	ands	r2, r5
    15bc:	5c9a      	ldrb	r2, [r3, r2]
    15be:	0212      	lsls	r2, r2, #8
        ((word32)Td4[GETBYTE(t1, 0)]) ^
    15c0:	4050      	eors	r0, r2
        ((word32)Td4[GETBYTE(t2, 0)]) ^
    15c2:	002a      	movs	r2, r5
    15c4:	4032      	ands	r2, r6
    15c6:	5c99      	ldrb	r1, [r3, r2]
    15c8:	4652      	mov	r2, sl
    15ca:	6852      	ldr	r2, [r2, #4]
    15cc:	4051      	eors	r1, r2
        ((word32)Td4[GETBYTE(t1, 3)] << 24) ^
    15ce:	0e3a      	lsrs	r2, r7, #24
    15d0:	5c9a      	ldrb	r2, [r3, r2]
    15d2:	0612      	lsls	r2, r2, #24
        ((word32)Td4[GETBYTE(t2, 0)]) ^
    15d4:	4051      	eors	r1, r2
        ((word32)Td4[GETBYTE(t0, 2)] << 16) ^
    15d6:	4662      	mov	r2, ip
    15d8:	0c12      	lsrs	r2, r2, #16
    15da:	402a      	ands	r2, r5
    15dc:	5c9a      	ldrb	r2, [r3, r2]
    15de:	0412      	lsls	r2, r2, #16
        ((word32)Td4[GETBYTE(t2, 0)]) ^
    15e0:	4051      	eors	r1, r2
        ((word32)Td4[GETBYTE(t3, 1)] <<  8) ^
    15e2:	4642      	mov	r2, r8
    15e4:	0a12      	lsrs	r2, r2, #8
    15e6:	402a      	ands	r2, r5
    15e8:	5c9a      	ldrb	r2, [r3, r2]
    15ea:	0212      	lsls	r2, r2, #8
        ((word32)Td4[GETBYTE(t2, 0)]) ^
    15ec:	4051      	eors	r1, r2
        ((word32)Td4[GETBYTE(t3, 0)]) ^
    15ee:	4642      	mov	r2, r8
    15f0:	402a      	ands	r2, r5
    15f2:	5c9a      	ldrb	r2, [r3, r2]
    15f4:	4654      	mov	r4, sl
    15f6:	68a4      	ldr	r4, [r4, #8]
    15f8:	4054      	eors	r4, r2
    15fa:	46a1      	mov	r9, r4
        ((word32)Td4[GETBYTE(t2, 3)] << 24) ^
    15fc:	0e32      	lsrs	r2, r6, #24
    15fe:	5c9a      	ldrb	r2, [r3, r2]
    1600:	0612      	lsls	r2, r2, #24
        ((word32)Td4[GETBYTE(t3, 0)]) ^
    1602:	464c      	mov	r4, r9
    1604:	4062      	eors	r2, r4
        ((word32)Td4[GETBYTE(t1, 2)] << 16) ^
    1606:	0c3c      	lsrs	r4, r7, #16
    1608:	402c      	ands	r4, r5
    160a:	5d1c      	ldrb	r4, [r3, r4]
    160c:	0424      	lsls	r4, r4, #16
        ((word32)Td4[GETBYTE(t3, 0)]) ^
    160e:	4062      	eors	r2, r4
        ((word32)Td4[GETBYTE(t0, 1)] <<  8) ^
    1610:	4664      	mov	r4, ip
    1612:	0a24      	lsrs	r4, r4, #8
    1614:	402c      	ands	r4, r5
    1616:	5d1c      	ldrb	r4, [r3, r4]
    1618:	0224      	lsls	r4, r4, #8
        ((word32)Td4[GETBYTE(t3, 0)]) ^
    161a:	4062      	eors	r2, r4
        ((word32)Td4[GETBYTE(t0, 0)]) ^
    161c:	4664      	mov	r4, ip
    161e:	402c      	ands	r4, r5
    1620:	5d1c      	ldrb	r4, [r3, r4]
    1622:	46a4      	mov	ip, r4
    1624:	4654      	mov	r4, sl
    1626:	68e4      	ldr	r4, [r4, #12]
    1628:	46a1      	mov	r9, r4
    162a:	4664      	mov	r4, ip
    162c:	464e      	mov	r6, r9
    162e:	4074      	eors	r4, r6
    1630:	46a4      	mov	ip, r4
        ((word32)Td4[GETBYTE(t3, 3)] << 24) ^
    1632:	4644      	mov	r4, r8
    1634:	0e24      	lsrs	r4, r4, #24
    1636:	5d1c      	ldrb	r4, [r3, r4]
    1638:	0624      	lsls	r4, r4, #24
    163a:	46a0      	mov	r8, r4
        ((word32)Td4[GETBYTE(t0, 0)]) ^
    163c:	4664      	mov	r4, ip
    163e:	4646      	mov	r6, r8
    1640:	4074      	eors	r4, r6
    1642:	46a4      	mov	ip, r4
        ((word32)Td4[GETBYTE(t2, 2)] << 16) ^
    1644:	9c02      	ldr	r4, [sp, #8]
    1646:	0c26      	lsrs	r6, r4, #16
    1648:	402e      	ands	r6, r5
    164a:	5d9e      	ldrb	r6, [r3, r6]
    164c:	0436      	lsls	r6, r6, #16
        ((word32)Td4[GETBYTE(t0, 0)]) ^
    164e:	4664      	mov	r4, ip
    1650:	4066      	eors	r6, r4
        ((word32)Td4[GETBYTE(t1, 1)] <<  8) ^
    1652:	0a3f      	lsrs	r7, r7, #8
    1654:	402f      	ands	r7, r5
    1656:	5ddb      	ldrb	r3, [r3, r7]
    1658:	021b      	lsls	r3, r3, #8
        ((word32)Td4[GETBYTE(t0, 0)]) ^
    165a:	4073      	eors	r3, r6
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
    165c:	0a07      	lsrs	r7, r0, #8
    165e:	26ff      	movs	r6, #255	; 0xff
    1660:	f2c0 06ff 	movt	r6, #255	; 0xff
    1664:	4037      	ands	r7, r6
    1666:	0200      	lsls	r0, r0, #8
    1668:	f64f 7500 	movw	r5, #65280	; 0xff00
    166c:	f6cf 7500 	movt	r5, #65280	; 0xff00
    1670:	4028      	ands	r0, r5
    1672:	4307      	orrs	r7, r0
        return (x << y) | (x >> (sizeof(y) * 8 - y));
    1674:	2010      	movs	r0, #16
    1676:	41c7      	rors	r7, r0
    s0 = ByteReverseWord32(s0);
    1678:	9707      	str	r7, [sp, #28]
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
    167a:	0a0f      	lsrs	r7, r1, #8
    167c:	4037      	ands	r7, r6
    167e:	0209      	lsls	r1, r1, #8
    1680:	4029      	ands	r1, r5
    1682:	4339      	orrs	r1, r7
        return (x << y) | (x >> (sizeof(y) * 8 - y));
    1684:	41c1      	rors	r1, r0
    s1 = ByteReverseWord32(s1);
    1686:	9106      	str	r1, [sp, #24]
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
    1688:	0a11      	lsrs	r1, r2, #8
    168a:	4031      	ands	r1, r6
    168c:	0212      	lsls	r2, r2, #8
    168e:	402a      	ands	r2, r5
    1690:	4311      	orrs	r1, r2
        return (x << y) | (x >> (sizeof(y) * 8 - y));
    1692:	41c1      	rors	r1, r0
    s2 = ByteReverseWord32(s2);
    1694:	9105      	str	r1, [sp, #20]
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
    1696:	0a1a      	lsrs	r2, r3, #8
    1698:	4032      	ands	r2, r6
    169a:	021b      	lsls	r3, r3, #8
    169c:	402b      	ands	r3, r5
    169e:	4313      	orrs	r3, r2
        return (x << y) | (x >> (sizeof(y) * 8 - y));
    16a0:	41c3      	rors	r3, r0
    s3 = ByteReverseWord32(s3);
    16a2:	9304      	str	r3, [sp, #16]
    XMEMCPY(outBlock,                  &s0, sizeof(s0));
    16a4:	2204      	movs	r2, #4
    16a6:	a907      	add	r1, sp, #28
    16a8:	9c03      	ldr	r4, [sp, #12]
    16aa:	0020      	movs	r0, r4
    16ac:	f641 45d1 	movw	r5, #7377	; 0x1cd1
    16b0:	f2c0 0500 	movt	r5, #0
    16b4:	47a8      	blx	r5
    XMEMCPY(outBlock + sizeof(s0),     &s1, sizeof(s1));
    16b6:	1d20      	adds	r0, r4, #4
    16b8:	2204      	movs	r2, #4
    16ba:	a906      	add	r1, sp, #24
    16bc:	47a8      	blx	r5
    XMEMCPY(outBlock + 2 * sizeof(s0), &s2, sizeof(s2));
    16be:	0020      	movs	r0, r4
    16c0:	3008      	adds	r0, #8
    16c2:	2204      	movs	r2, #4
    16c4:	a905      	add	r1, sp, #20
    16c6:	47a8      	blx	r5
    XMEMCPY(outBlock + 3 * sizeof(s0), &s3, sizeof(s3));
    16c8:	0020      	movs	r0, r4
    16ca:	300c      	adds	r0, #12
    16cc:	2204      	movs	r2, #4
    16ce:	a904      	add	r1, sp, #16
    16d0:	47a8      	blx	r5
    16d2:	e5ec      	b.n	12ae <wc_AesDecrypt+0x20>

000016d4 <wc_AesSetIV>:
#endif /* wc_AesSetKey block */


/* wc_AesSetIV is shared between software and hardware */
int wc_AesSetIV(Aes* aes, const byte* iv)
{
    16d4:	b510      	push	{r4, lr}
    if (aes == NULL)
    16d6:	b198      	cbz	r0, 1700 <wc_AesSetIV+0x2c>
        return BAD_FUNC_ARG;

    if (iv)
    16d8:	b141      	cbz	r1, 16ec <wc_AesSetIV+0x18>
        XMEMCPY(aes->reg, iv, AES_BLOCK_SIZE);
    16da:	30f8      	adds	r0, #248	; 0xf8
    16dc:	2210      	movs	r2, #16
    16de:	f641 43d1 	movw	r3, #7377	; 0x1cd1
    16e2:	f2c0 0300 	movt	r3, #0
    16e6:	4798      	blx	r3
    else
        XMEMSET(aes->reg,  0, AES_BLOCK_SIZE);

    return 0;
    16e8:	2000      	movs	r0, #0
}
    16ea:	bd10      	pop	{r4, pc}
        XMEMSET(aes->reg,  0, AES_BLOCK_SIZE);
    16ec:	30f8      	adds	r0, #248	; 0xf8
    16ee:	2210      	movs	r2, #16
    16f0:	2100      	movs	r1, #0
    16f2:	f641 43e3 	movw	r3, #7395	; 0x1ce3
    16f6:	f2c0 0300 	movt	r3, #0
    16fa:	4798      	blx	r3
    return 0;
    16fc:	2000      	movs	r0, #0
    16fe:	e7f4      	b.n	16ea <wc_AesSetIV+0x16>
        return BAD_FUNC_ARG;
    1700:	20ad      	movs	r0, #173	; 0xad
    1702:	4240      	negs	r0, r0
    1704:	e7f1      	b.n	16ea <wc_AesSetIV+0x16>

00001706 <wc_AesSetKeyLocal>:
    {
    1706:	b5f0      	push	{r4, r5, r6, r7, lr}
    1708:	46de      	mov	lr, fp
    170a:	4657      	mov	r7, sl
    170c:	464e      	mov	r6, r9
    170e:	4645      	mov	r5, r8
    1710:	b5e0      	push	{r5, r6, r7, lr}
    1712:	b085      	sub	sp, #20
    1714:	0007      	movs	r7, r0
    1716:	0014      	movs	r4, r2
    1718:	9302      	str	r3, [sp, #8]
        word32 *rk = aes->key;
    171a:	0005      	movs	r5, r0
        aes->keylen = keylen;
    171c:	23f4      	movs	r3, #244	; 0xf4
    171e:	50fa      	str	r2, [r7, r3]
        aes->rounds = (keylen/4) + 6;
    1720:	0896      	lsrs	r6, r2, #2
    1722:	1db2      	adds	r2, r6, #6
    1724:	3b04      	subs	r3, #4
    1726:	50c2      	str	r2, [r0, r3]
        XMEMCPY(rk, userKey, keylen);
    1728:	0022      	movs	r2, r4
    172a:	f641 43d1 	movw	r3, #7377	; 0x1cd1
    172e:	f2c0 0300 	movt	r3, #0
    1732:	4798      	blx	r3
WC_STATIC WC_INLINE void ByteReverseWords(word32* out, const word32* in,
                                    word32 byteCount)
{
    word32 count = byteCount/(word32)sizeof(word32), i;

    for (i = 0; i < count; i++)
    1734:	b1d6      	cbz	r6, 176c <wc_AesSetKeyLocal+0x66>
    1736:	003a      	movs	r2, r7
    1738:	2303      	movs	r3, #3
    173a:	0021      	movs	r1, r4
    173c:	4399      	bics	r1, r3
    173e:	1879      	adds	r1, r7, r1
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
    1740:	26ff      	movs	r6, #255	; 0xff
    1742:	f2c0 06ff 	movt	r6, #255	; 0xff
    1746:	f64f 7000 	movw	r0, #65280	; 0xff00
    174a:	f6cf 7000 	movt	r0, #65280	; 0xff00
        return (x << y) | (x >> (sizeof(y) * 8 - y));
    174e:	f240 0c10 	movw	ip, #16
    1752:	46a0      	mov	r8, r4
        out[i] = ByteReverseWord32(in[i]);
    1754:	6814      	ldr	r4, [r2, #0]
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
    1756:	0a23      	lsrs	r3, r4, #8
    1758:	4033      	ands	r3, r6
    175a:	0224      	lsls	r4, r4, #8
    175c:	4004      	ands	r4, r0
    175e:	4323      	orrs	r3, r4
        return (x << y) | (x >> (sizeof(y) * 8 - y));
    1760:	4664      	mov	r4, ip
    1762:	41e3      	rors	r3, r4
        out[i] = ByteReverseWord32(in[i]);
    1764:	c208      	stmia	r2!, {r3}
    for (i = 0; i < count; i++)
    1766:	428a      	cmp	r2, r1
    1768:	d1f4      	bne.n	1754 <wc_AesSetKeyLocal+0x4e>
    176a:	4644      	mov	r4, r8
        switch (keylen) {
    176c:	2c18      	cmp	r4, #24
    176e:	d052      	beq.n	1816 <wc_AesSetKeyLocal+0x110>
    1770:	2c20      	cmp	r4, #32
    1772:	d100      	bne.n	1776 <wc_AesSetKeyLocal+0x70>
    1774:	e0a8      	b.n	18c8 <wc_AesSetKeyLocal+0x1c2>
    1776:	2c10      	cmp	r4, #16
    1778:	d002      	beq.n	1780 <wc_AesSetKeyLocal+0x7a>
            return BAD_FUNC_ARG;
    177a:	20ad      	movs	r0, #173	; 0xad
    177c:	4240      	negs	r0, r0
    177e:	e12f      	b.n	19e0 <wc_AesSetKeyLocal+0x2da>
    1780:	f643 76e4 	movw	r6, #16356	; 0x3fe4
    1784:	f2c0 0600 	movt	r6, #0
    1788:	f240 0990 	movw	r9, #144	; 0x90
    178c:	44b9      	add	r9, r7
        switch (keylen) {
    178e:	0039      	movs	r1, r7
                    (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
    1790:	f641 60e4 	movw	r0, #7908	; 0x1ee4
    1794:	f2c0 0000 	movt	r0, #0
    1798:	34ef      	adds	r4, #239	; 0xef
    179a:	f64f 7800 	movw	r8, #65280	; 0xff00
                    (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
    179e:	23ff      	movs	r3, #255	; 0xff
    17a0:	041b      	lsls	r3, r3, #16
    17a2:	469c      	mov	ip, r3
    17a4:	464b      	mov	r3, r9
    17a6:	46a9      	mov	r9, r5
    17a8:	46ba      	mov	sl, r7
    17aa:	9301      	str	r3, [sp, #4]
                temp  = rk[3];
    17ac:	68ca      	ldr	r2, [r1, #12]
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
    17ae:	ce80      	ldmia	r6!, {r7}
    17b0:	680b      	ldr	r3, [r1, #0]
    17b2:	405f      	eors	r7, r3
                    (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
    17b4:	0023      	movs	r3, r4
    17b6:	4013      	ands	r3, r2
    17b8:	009b      	lsls	r3, r3, #2
    17ba:	581b      	ldr	r3, [r3, r0]
    17bc:	4645      	mov	r5, r8
    17be:	402b      	ands	r3, r5
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
    17c0:	407b      	eors	r3, r7
    17c2:	0e17      	lsrs	r7, r2, #24
    17c4:	3701      	adds	r7, #1
    17c6:	37ff      	adds	r7, #255	; 0xff
    17c8:	00bf      	lsls	r7, r7, #2
    17ca:	583f      	ldr	r7, [r7, r0]
    17cc:	4027      	ands	r7, r4
    17ce:	407b      	eors	r3, r7
                    (Te[2][GETBYTE(temp, 2)] & 0xff000000) ^
    17d0:	0c17      	lsrs	r7, r2, #16
    17d2:	4027      	ands	r7, r4
    17d4:	f240 2b00 	movw	fp, #512	; 0x200
    17d8:	445f      	add	r7, fp
    17da:	00bf      	lsls	r7, r7, #2
    17dc:	583f      	ldr	r7, [r7, r0]
    17de:	0e3f      	lsrs	r7, r7, #24
    17e0:	063f      	lsls	r7, r7, #24
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
    17e2:	407b      	eors	r3, r7
                    (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
    17e4:	0a17      	lsrs	r7, r2, #8
    17e6:	4027      	ands	r7, r4
    17e8:	f240 3b00 	movw	fp, #768	; 0x300
    17ec:	445f      	add	r7, fp
    17ee:	00bf      	lsls	r7, r7, #2
    17f0:	583f      	ldr	r7, [r7, r0]
    17f2:	4665      	mov	r5, ip
    17f4:	402f      	ands	r7, r5
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
    17f6:	407b      	eors	r3, r7
                rk[4] = rk[0] ^
    17f8:	610b      	str	r3, [r1, #16]
                rk[5] = rk[1] ^ rk[4];
    17fa:	684d      	ldr	r5, [r1, #4]
    17fc:	406b      	eors	r3, r5
    17fe:	614b      	str	r3, [r1, #20]
                rk[6] = rk[2] ^ rk[5];
    1800:	688d      	ldr	r5, [r1, #8]
    1802:	406b      	eors	r3, r5
    1804:	618b      	str	r3, [r1, #24]
                rk[7] = rk[3] ^ rk[6];
    1806:	4053      	eors	r3, r2
    1808:	61cb      	str	r3, [r1, #28]
                if (++i == 10)
    180a:	9b01      	ldr	r3, [sp, #4]
    180c:	4299      	cmp	r1, r3
    180e:	d100      	bne.n	1812 <wc_AesSetKeyLocal+0x10c>
    1810:	e0da      	b.n	19c8 <wc_AesSetKeyLocal+0x2c2>
                rk += 4;
    1812:	3110      	adds	r1, #16
                temp  = rk[3];
    1814:	e7ca      	b.n	17ac <wc_AesSetKeyLocal+0xa6>
    1816:	f643 76e4 	movw	r6, #16356	; 0x3fe4
    181a:	f2c0 0600 	movt	r6, #0
    181e:	f240 09a8 	movw	r9, #168	; 0xa8
    1822:	44b9      	add	r9, r7
        switch (keylen) {
    1824:	0039      	movs	r1, r7
                    (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
    1826:	f641 60e4 	movw	r0, #7908	; 0x1ee4
    182a:	f2c0 0000 	movt	r0, #0
    182e:	24ff      	movs	r4, #255	; 0xff
    1830:	f64f 7800 	movw	r8, #65280	; 0xff00
                    (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
    1834:	23ff      	movs	r3, #255	; 0xff
    1836:	041b      	lsls	r3, r3, #16
    1838:	469c      	mov	ip, r3
    183a:	464b      	mov	r3, r9
    183c:	9503      	str	r5, [sp, #12]
    183e:	46bb      	mov	fp, r7
    1840:	9301      	str	r3, [sp, #4]
                temp = rk[ 5];
    1842:	694a      	ldr	r2, [r1, #20]
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
    1844:	ce80      	ldmia	r6!, {r7}
    1846:	680b      	ldr	r3, [r1, #0]
    1848:	405f      	eors	r7, r3
                    (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
    184a:	0023      	movs	r3, r4
    184c:	4013      	ands	r3, r2
    184e:	009b      	lsls	r3, r3, #2
    1850:	581b      	ldr	r3, [r3, r0]
    1852:	4645      	mov	r5, r8
    1854:	402b      	ands	r3, r5
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
    1856:	407b      	eors	r3, r7
    1858:	0e17      	lsrs	r7, r2, #24
    185a:	1c7d      	adds	r5, r7, #1
    185c:	35ff      	adds	r5, #255	; 0xff
    185e:	00ad      	lsls	r5, r5, #2
    1860:	582d      	ldr	r5, [r5, r0]
    1862:	002f      	movs	r7, r5
    1864:	4027      	ands	r7, r4
    1866:	407b      	eors	r3, r7
                    (Te[2][GETBYTE(temp, 2)] & 0xff000000) ^
    1868:	0c15      	lsrs	r5, r2, #16
    186a:	002f      	movs	r7, r5
    186c:	4027      	ands	r7, r4
    186e:	46ba      	mov	sl, r7
    1870:	f240 2900 	movw	r9, #512	; 0x200
    1874:	44ca      	add	sl, r9
    1876:	4655      	mov	r5, sl
    1878:	00ad      	lsls	r5, r5, #2
    187a:	582d      	ldr	r5, [r5, r0]
    187c:	0e2d      	lsrs	r5, r5, #24
    187e:	062d      	lsls	r5, r5, #24
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
    1880:	406b      	eors	r3, r5
                    (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
    1882:	0a15      	lsrs	r5, r2, #8
    1884:	002f      	movs	r7, r5
    1886:	4027      	ands	r7, r4
    1888:	46ba      	mov	sl, r7
    188a:	f240 3900 	movw	r9, #768	; 0x300
    188e:	44ca      	add	sl, r9
    1890:	4655      	mov	r5, sl
    1892:	00ad      	lsls	r5, r5, #2
    1894:	582d      	ldr	r5, [r5, r0]
    1896:	002f      	movs	r7, r5
    1898:	4665      	mov	r5, ip
    189a:	402f      	ands	r7, r5
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
    189c:	407b      	eors	r3, r7
                rk[ 6] = rk[ 0] ^
    189e:	618b      	str	r3, [r1, #24]
                rk[ 7] = rk[ 1] ^ rk[ 6];
    18a0:	684d      	ldr	r5, [r1, #4]
    18a2:	406b      	eors	r3, r5
    18a4:	61cb      	str	r3, [r1, #28]
                rk[ 8] = rk[ 2] ^ rk[ 7];
    18a6:	688d      	ldr	r5, [r1, #8]
    18a8:	406b      	eors	r3, r5
    18aa:	620b      	str	r3, [r1, #32]
                rk[ 9] = rk[ 3] ^ rk[ 8];
    18ac:	68cd      	ldr	r5, [r1, #12]
    18ae:	406b      	eors	r3, r5
    18b0:	624b      	str	r3, [r1, #36]	; 0x24
                if (++i == 8)
    18b2:	9d01      	ldr	r5, [sp, #4]
    18b4:	42a9      	cmp	r1, r5
    18b6:	d100      	bne.n	18ba <wc_AesSetKeyLocal+0x1b4>
    18b8:	e099      	b.n	19ee <wc_AesSetKeyLocal+0x2e8>
                rk[10] = rk[ 4] ^ rk[ 9];
    18ba:	690d      	ldr	r5, [r1, #16]
    18bc:	406b      	eors	r3, r5
    18be:	628b      	str	r3, [r1, #40]	; 0x28
                rk[11] = rk[ 5] ^ rk[10];
    18c0:	4053      	eors	r3, r2
    18c2:	62cb      	str	r3, [r1, #44]	; 0x2c
                rk += 6;
    18c4:	3118      	adds	r1, #24
                temp = rk[ 5];
    18c6:	e7bc      	b.n	1842 <wc_AesSetKeyLocal+0x13c>
    18c8:	f643 78e4 	movw	r8, #16356	; 0x3fe4
    18cc:	f2c0 0800 	movt	r8, #0
    18d0:	f240 0bc0 	movw	fp, #192	; 0xc0
    18d4:	44bb      	add	fp, r7
        switch (keylen) {
    18d6:	003c      	movs	r4, r7
                    (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
    18d8:	f641 66e4 	movw	r6, #7908	; 0x1ee4
    18dc:	f2c0 0600 	movt	r6, #0
    18e0:	f240 0cff 	movw	ip, #255	; 0xff
    18e4:	f64f 7a00 	movw	sl, #65280	; 0xff00
                    (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
    18e8:	23ff      	movs	r3, #255	; 0xff
    18ea:	041b      	lsls	r3, r3, #16
    18ec:	4699      	mov	r9, r3
    18ee:	9501      	str	r5, [sp, #4]
    18f0:	4641      	mov	r1, r8
    18f2:	4658      	mov	r0, fp
    18f4:	9703      	str	r7, [sp, #12]
                temp = rk[ 7];
    18f6:	69e2      	ldr	r2, [r4, #28]
                    (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
    18f8:	4663      	mov	r3, ip
    18fa:	4013      	ands	r3, r2
    18fc:	009b      	lsls	r3, r3, #2
    18fe:	599d      	ldr	r5, [r3, r6]
    1900:	4653      	mov	r3, sl
    1902:	401d      	ands	r5, r3
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
    1904:	c908      	ldmia	r1!, {r3}
    1906:	6827      	ldr	r7, [r4, #0]
    1908:	407b      	eors	r3, r7
    190a:	406b      	eors	r3, r5
    190c:	0e15      	lsrs	r5, r2, #24
    190e:	3501      	adds	r5, #1
    1910:	35ff      	adds	r5, #255	; 0xff
    1912:	00ad      	lsls	r5, r5, #2
    1914:	59ad      	ldr	r5, [r5, r6]
    1916:	4667      	mov	r7, ip
    1918:	403d      	ands	r5, r7
    191a:	406b      	eors	r3, r5
                    (Te[2][GETBYTE(temp, 2)] & 0xff000000) ^
    191c:	0c15      	lsrs	r5, r2, #16
    191e:	403d      	ands	r5, r7
    1920:	f240 2800 	movw	r8, #512	; 0x200
    1924:	4445      	add	r5, r8
    1926:	00ad      	lsls	r5, r5, #2
    1928:	59ad      	ldr	r5, [r5, r6]
    192a:	0e2d      	lsrs	r5, r5, #24
    192c:	062d      	lsls	r5, r5, #24
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
    192e:	406b      	eors	r3, r5
                    (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
    1930:	0a15      	lsrs	r5, r2, #8
    1932:	403d      	ands	r5, r7
    1934:	f240 3800 	movw	r8, #768	; 0x300
    1938:	4445      	add	r5, r8
    193a:	00ad      	lsls	r5, r5, #2
    193c:	59ad      	ldr	r5, [r5, r6]
    193e:	464f      	mov	r7, r9
    1940:	403d      	ands	r5, r7
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
    1942:	406b      	eors	r3, r5
                rk[ 8] = rk[ 0] ^
    1944:	6223      	str	r3, [r4, #32]
                rk[ 9] = rk[ 1] ^ rk[ 8];
    1946:	6865      	ldr	r5, [r4, #4]
    1948:	406b      	eors	r3, r5
    194a:	6263      	str	r3, [r4, #36]	; 0x24
                rk[10] = rk[ 2] ^ rk[ 9];
    194c:	68a5      	ldr	r5, [r4, #8]
    194e:	406b      	eors	r3, r5
    1950:	62a3      	str	r3, [r4, #40]	; 0x28
                rk[11] = rk[ 3] ^ rk[10];
    1952:	68e5      	ldr	r5, [r4, #12]
    1954:	406b      	eors	r3, r5
    1956:	62e3      	str	r3, [r4, #44]	; 0x2c
                if (++i == 7)
    1958:	4284      	cmp	r4, r0
    195a:	d04b      	beq.n	19f4 <wc_AesSetKeyLocal+0x2ee>
                    (Te[3][GETBYTE(temp, 2)] & 0x00ff0000) ^
    195c:	0c1d      	lsrs	r5, r3, #16
    195e:	4667      	mov	r7, ip
    1960:	403d      	ands	r5, r7
    1962:	4445      	add	r5, r8
    1964:	00ad      	lsls	r5, r5, #2
    1966:	59ad      	ldr	r5, [r5, r6]
    1968:	464f      	mov	r7, r9
    196a:	402f      	ands	r7, r5
    196c:	46b8      	mov	r8, r7
                    (Te[0][GETBYTE(temp, 1)] & 0x0000ff00) ^
    196e:	0a1d      	lsrs	r5, r3, #8
    1970:	4667      	mov	r7, ip
    1972:	403d      	ands	r5, r7
    1974:	00ad      	lsls	r5, r5, #2
    1976:	59ad      	ldr	r5, [r5, r6]
    1978:	4657      	mov	r7, sl
    197a:	403d      	ands	r5, r7
    197c:	4647      	mov	r7, r8
    197e:	432f      	orrs	r7, r5
    1980:	003d      	movs	r5, r7
    1982:	6927      	ldr	r7, [r4, #16]
    1984:	407d      	eors	r5, r7
    1986:	46a8      	mov	r8, r5
                    (Te[2][GETBYTE(temp, 3)] & 0xff000000) ^
    1988:	0e1d      	lsrs	r5, r3, #24
    198a:	f240 2b00 	movw	fp, #512	; 0x200
    198e:	44ab      	add	fp, r5
    1990:	465d      	mov	r5, fp
    1992:	00ad      	lsls	r5, r5, #2
    1994:	59ad      	ldr	r5, [r5, r6]
    1996:	0e2d      	lsrs	r5, r5, #24
    1998:	062d      	lsls	r5, r5, #24
    199a:	46ab      	mov	fp, r5
                    (Te[1][GETBYTE(temp, 0)] & 0x000000ff);
    199c:	4665      	mov	r5, ip
    199e:	402b      	ands	r3, r5
    19a0:	3301      	adds	r3, #1
    19a2:	33ff      	adds	r3, #255	; 0xff
    19a4:	009b      	lsls	r3, r3, #2
    19a6:	599b      	ldr	r3, [r3, r6]
    19a8:	402b      	ands	r3, r5
                    (Te[0][GETBYTE(temp, 1)] & 0x0000ff00) ^
    19aa:	465d      	mov	r5, fp
    19ac:	432b      	orrs	r3, r5
    19ae:	4645      	mov	r5, r8
    19b0:	406b      	eors	r3, r5
                rk[12] = rk[ 4] ^
    19b2:	6323      	str	r3, [r4, #48]	; 0x30
                rk[13] = rk[ 5] ^ rk[12];
    19b4:	6965      	ldr	r5, [r4, #20]
    19b6:	406b      	eors	r3, r5
    19b8:	6363      	str	r3, [r4, #52]	; 0x34
                rk[14] = rk[ 6] ^ rk[13];
    19ba:	69a5      	ldr	r5, [r4, #24]
    19bc:	406b      	eors	r3, r5
    19be:	63a3      	str	r3, [r4, #56]	; 0x38
                rk[15] = rk[ 7] ^ rk[14];
    19c0:	405a      	eors	r2, r3
    19c2:	63e2      	str	r2, [r4, #60]	; 0x3c
                rk += 8;
    19c4:	3420      	adds	r4, #32
                temp = rk[ 7];
    19c6:	e796      	b.n	18f6 <wc_AesSetKeyLocal+0x1f0>
    19c8:	464d      	mov	r5, r9
    19ca:	4657      	mov	r7, sl
        if (dir == AES_DECRYPTION) {
    19cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    19ce:	2b01      	cmp	r3, #1
    19d0:	d013      	beq.n	19fa <wc_AesSetKeyLocal+0x2f4>
        return wc_AesSetIV(aes, iv);
    19d2:	9902      	ldr	r1, [sp, #8]
    19d4:	0038      	movs	r0, r7
    19d6:	f241 63d5 	movw	r3, #5845	; 0x16d5
    19da:	f2c0 0300 	movt	r3, #0
    19de:	4798      	blx	r3
    }
    19e0:	b005      	add	sp, #20
    19e2:	bc3c      	pop	{r2, r3, r4, r5}
    19e4:	4690      	mov	r8, r2
    19e6:	4699      	mov	r9, r3
    19e8:	46a2      	mov	sl, r4
    19ea:	46ab      	mov	fp, r5
    19ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    19ee:	9d03      	ldr	r5, [sp, #12]
    19f0:	465f      	mov	r7, fp
    19f2:	e7eb      	b.n	19cc <wc_AesSetKeyLocal+0x2c6>
    19f4:	9d01      	ldr	r5, [sp, #4]
    19f6:	9f03      	ldr	r7, [sp, #12]
    19f8:	e7e8      	b.n	19cc <wc_AesSetKeyLocal+0x2c6>
            for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
    19fa:	33ef      	adds	r3, #239	; 0xef
    19fc:	58fc      	ldr	r4, [r7, r3]
    19fe:	00a4      	lsls	r4, r4, #2
    1a00:	b1cc      	cbz	r4, 1a36 <wc_AesSetKeyLocal+0x330>
    1a02:	003a      	movs	r2, r7
    1a04:	00a3      	lsls	r3, r4, #2
    1a06:	18fb      	adds	r3, r7, r3
    1a08:	2100      	movs	r1, #0
                temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
    1a0a:	6810      	ldr	r0, [r2, #0]
    1a0c:	681e      	ldr	r6, [r3, #0]
    1a0e:	6016      	str	r6, [r2, #0]
    1a10:	6018      	str	r0, [r3, #0]
                temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
    1a12:	6850      	ldr	r0, [r2, #4]
    1a14:	685e      	ldr	r6, [r3, #4]
    1a16:	6056      	str	r6, [r2, #4]
    1a18:	6058      	str	r0, [r3, #4]
                temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
    1a1a:	6890      	ldr	r0, [r2, #8]
    1a1c:	689e      	ldr	r6, [r3, #8]
    1a1e:	6096      	str	r6, [r2, #8]
    1a20:	6098      	str	r0, [r3, #8]
                temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
    1a22:	68d0      	ldr	r0, [r2, #12]
    1a24:	68de      	ldr	r6, [r3, #12]
    1a26:	60d6      	str	r6, [r2, #12]
    1a28:	60d8      	str	r0, [r3, #12]
            for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
    1a2a:	3104      	adds	r1, #4
    1a2c:	3210      	adds	r2, #16
    1a2e:	3b10      	subs	r3, #16
    1a30:	1a60      	subs	r0, r4, r1
    1a32:	4281      	cmp	r1, r0
    1a34:	d3e9      	bcc.n	1a0a <wc_AesSetKeyLocal+0x304>
            for (i = 1; i < aes->rounds; i++) {
    1a36:	23f0      	movs	r3, #240	; 0xf0
    1a38:	58fb      	ldr	r3, [r7, r3]
    1a3a:	2b01      	cmp	r3, #1
    1a3c:	d9c9      	bls.n	19d2 <wc_AesSetKeyLocal+0x2cc>
    1a3e:	2601      	movs	r6, #1
                    Td[0][Te[1][GETBYTE(rk[0], 3)] & 0xff] ^
    1a40:	f642 61e4 	movw	r1, #12004	; 0x2ee4
    1a44:	f2c0 0100 	movt	r1, #0
    1a48:	f641 62e4 	movw	r2, #7908	; 0x1ee4
    1a4c:	f2c0 0200 	movt	r2, #0
    1a50:	23ff      	movs	r3, #255	; 0xff
            for (i = 1; i < aes->rounds; i++) {
    1a52:	f240 0cf0 	movw	ip, #240	; 0xf0
    1a56:	46ba      	mov	sl, r7
                rk += 4;
    1a58:	3510      	adds	r5, #16
                    Td[0][Te[1][GETBYTE(rk[0], 3)] & 0xff] ^
    1a5a:	6828      	ldr	r0, [r5, #0]
    1a5c:	0e04      	lsrs	r4, r0, #24
    1a5e:	3401      	adds	r4, #1
    1a60:	34ff      	adds	r4, #255	; 0xff
    1a62:	00a4      	lsls	r4, r4, #2
    1a64:	58a4      	ldr	r4, [r4, r2]
    1a66:	401c      	ands	r4, r3
    1a68:	00a4      	lsls	r4, r4, #2
    1a6a:	46a0      	mov	r8, r4
                    Td[3][Te[1][GETBYTE(rk[0], 0)] & 0xff];
    1a6c:	001c      	movs	r4, r3
    1a6e:	4004      	ands	r4, r0
    1a70:	3401      	adds	r4, #1
    1a72:	34ff      	adds	r4, #255	; 0xff
    1a74:	00a4      	lsls	r4, r4, #2
    1a76:	58a4      	ldr	r4, [r4, r2]
    1a78:	401c      	ands	r4, r3
    1a7a:	f240 3900 	movw	r9, #768	; 0x300
    1a7e:	444c      	add	r4, r9
    1a80:	00a4      	lsls	r4, r4, #2
                    Td[2][Te[1][GETBYTE(rk[0], 1)] & 0xff] ^
    1a82:	4647      	mov	r7, r8
    1a84:	587f      	ldr	r7, [r7, r1]
    1a86:	5864      	ldr	r4, [r4, r1]
    1a88:	4067      	eors	r7, r4
                    Td[1][Te[1][GETBYTE(rk[0], 2)] & 0xff] ^
    1a8a:	0c04      	lsrs	r4, r0, #16
    1a8c:	401c      	ands	r4, r3
    1a8e:	3401      	adds	r4, #1
    1a90:	34ff      	adds	r4, #255	; 0xff
    1a92:	00a4      	lsls	r4, r4, #2
    1a94:	58a4      	ldr	r4, [r4, r2]
    1a96:	401c      	ands	r4, r3
    1a98:	3401      	adds	r4, #1
    1a9a:	34ff      	adds	r4, #255	; 0xff
    1a9c:	00a4      	lsls	r4, r4, #2
                    Td[2][Te[1][GETBYTE(rk[0], 1)] & 0xff] ^
    1a9e:	5864      	ldr	r4, [r4, r1]
    1aa0:	407c      	eors	r4, r7
    1aa2:	0a00      	lsrs	r0, r0, #8
    1aa4:	4018      	ands	r0, r3
    1aa6:	3001      	adds	r0, #1
    1aa8:	30ff      	adds	r0, #255	; 0xff
    1aaa:	0080      	lsls	r0, r0, #2
    1aac:	5880      	ldr	r0, [r0, r2]
    1aae:	4018      	ands	r0, r3
    1ab0:	f240 2800 	movw	r8, #512	; 0x200
    1ab4:	4440      	add	r0, r8
    1ab6:	0080      	lsls	r0, r0, #2
    1ab8:	5840      	ldr	r0, [r0, r1]
    1aba:	4044      	eors	r4, r0
                rk[0] =
    1abc:	602c      	str	r4, [r5, #0]
                    Td[0][Te[1][GETBYTE(rk[1], 3)] & 0xff] ^
    1abe:	6868      	ldr	r0, [r5, #4]
    1ac0:	0e04      	lsrs	r4, r0, #24
    1ac2:	3401      	adds	r4, #1
    1ac4:	34ff      	adds	r4, #255	; 0xff
    1ac6:	00a4      	lsls	r4, r4, #2
    1ac8:	58a4      	ldr	r4, [r4, r2]
    1aca:	401c      	ands	r4, r3
    1acc:	00a4      	lsls	r4, r4, #2
    1ace:	46a0      	mov	r8, r4
                    Td[3][Te[1][GETBYTE(rk[1], 0)] & 0xff];
    1ad0:	001c      	movs	r4, r3
    1ad2:	4004      	ands	r4, r0
    1ad4:	3401      	adds	r4, #1
    1ad6:	34ff      	adds	r4, #255	; 0xff
    1ad8:	00a4      	lsls	r4, r4, #2
    1ada:	58a4      	ldr	r4, [r4, r2]
    1adc:	401c      	ands	r4, r3
    1ade:	444c      	add	r4, r9
    1ae0:	00a4      	lsls	r4, r4, #2
                    Td[2][Te[1][GETBYTE(rk[1], 1)] & 0xff] ^
    1ae2:	4647      	mov	r7, r8
    1ae4:	587f      	ldr	r7, [r7, r1]
    1ae6:	5864      	ldr	r4, [r4, r1]
    1ae8:	4067      	eors	r7, r4
                    Td[1][Te[1][GETBYTE(rk[1], 2)] & 0xff] ^
    1aea:	0c04      	lsrs	r4, r0, #16
    1aec:	401c      	ands	r4, r3
    1aee:	3401      	adds	r4, #1
    1af0:	34ff      	adds	r4, #255	; 0xff
    1af2:	00a4      	lsls	r4, r4, #2
    1af4:	58a4      	ldr	r4, [r4, r2]
    1af6:	401c      	ands	r4, r3
    1af8:	3401      	adds	r4, #1
    1afa:	34ff      	adds	r4, #255	; 0xff
    1afc:	00a4      	lsls	r4, r4, #2
                    Td[2][Te[1][GETBYTE(rk[1], 1)] & 0xff] ^
    1afe:	5864      	ldr	r4, [r4, r1]
    1b00:	407c      	eors	r4, r7
    1b02:	0a00      	lsrs	r0, r0, #8
    1b04:	4018      	ands	r0, r3
    1b06:	3001      	adds	r0, #1
    1b08:	30ff      	adds	r0, #255	; 0xff
    1b0a:	0080      	lsls	r0, r0, #2
    1b0c:	5880      	ldr	r0, [r0, r2]
    1b0e:	4018      	ands	r0, r3
    1b10:	f240 2800 	movw	r8, #512	; 0x200
    1b14:	4440      	add	r0, r8
    1b16:	0080      	lsls	r0, r0, #2
    1b18:	5840      	ldr	r0, [r0, r1]
    1b1a:	4044      	eors	r4, r0
                rk[1] =
    1b1c:	606c      	str	r4, [r5, #4]
                    Td[0][Te[1][GETBYTE(rk[2], 3)] & 0xff] ^
    1b1e:	68a8      	ldr	r0, [r5, #8]
    1b20:	0e04      	lsrs	r4, r0, #24
    1b22:	3401      	adds	r4, #1
    1b24:	34ff      	adds	r4, #255	; 0xff
    1b26:	00a4      	lsls	r4, r4, #2
    1b28:	58a4      	ldr	r4, [r4, r2]
    1b2a:	401c      	ands	r4, r3
    1b2c:	00a4      	lsls	r4, r4, #2
    1b2e:	46a0      	mov	r8, r4
                    Td[3][Te[1][GETBYTE(rk[2], 0)] & 0xff];
    1b30:	001c      	movs	r4, r3
    1b32:	4004      	ands	r4, r0
    1b34:	3401      	adds	r4, #1
    1b36:	34ff      	adds	r4, #255	; 0xff
    1b38:	00a4      	lsls	r4, r4, #2
    1b3a:	58a4      	ldr	r4, [r4, r2]
    1b3c:	401c      	ands	r4, r3
    1b3e:	444c      	add	r4, r9
    1b40:	00a4      	lsls	r4, r4, #2
                    Td[2][Te[1][GETBYTE(rk[2], 1)] & 0xff] ^
    1b42:	4647      	mov	r7, r8
    1b44:	587f      	ldr	r7, [r7, r1]
    1b46:	5864      	ldr	r4, [r4, r1]
    1b48:	4067      	eors	r7, r4
                    Td[1][Te[1][GETBYTE(rk[2], 2)] & 0xff] ^
    1b4a:	0c04      	lsrs	r4, r0, #16
    1b4c:	401c      	ands	r4, r3
    1b4e:	3401      	adds	r4, #1
    1b50:	34ff      	adds	r4, #255	; 0xff
    1b52:	00a4      	lsls	r4, r4, #2
    1b54:	58a4      	ldr	r4, [r4, r2]
    1b56:	401c      	ands	r4, r3
    1b58:	3401      	adds	r4, #1
    1b5a:	34ff      	adds	r4, #255	; 0xff
    1b5c:	00a4      	lsls	r4, r4, #2
                    Td[2][Te[1][GETBYTE(rk[2], 1)] & 0xff] ^
    1b5e:	5864      	ldr	r4, [r4, r1]
    1b60:	407c      	eors	r4, r7
    1b62:	0a00      	lsrs	r0, r0, #8
    1b64:	4018      	ands	r0, r3
    1b66:	3001      	adds	r0, #1
    1b68:	30ff      	adds	r0, #255	; 0xff
    1b6a:	0080      	lsls	r0, r0, #2
    1b6c:	5880      	ldr	r0, [r0, r2]
    1b6e:	4018      	ands	r0, r3
    1b70:	f240 2800 	movw	r8, #512	; 0x200
    1b74:	4440      	add	r0, r8
    1b76:	0080      	lsls	r0, r0, #2
    1b78:	5840      	ldr	r0, [r0, r1]
    1b7a:	4044      	eors	r4, r0
                rk[2] =
    1b7c:	60ac      	str	r4, [r5, #8]
                    Td[0][Te[1][GETBYTE(rk[3], 3)] & 0xff] ^
    1b7e:	68e8      	ldr	r0, [r5, #12]
    1b80:	0e04      	lsrs	r4, r0, #24
    1b82:	3401      	adds	r4, #1
    1b84:	34ff      	adds	r4, #255	; 0xff
    1b86:	00a4      	lsls	r4, r4, #2
    1b88:	58a4      	ldr	r4, [r4, r2]
    1b8a:	401c      	ands	r4, r3
    1b8c:	00a4      	lsls	r4, r4, #2
    1b8e:	46a0      	mov	r8, r4
                    Td[3][Te[1][GETBYTE(rk[3], 0)] & 0xff];
    1b90:	001c      	movs	r4, r3
    1b92:	4004      	ands	r4, r0
    1b94:	3401      	adds	r4, #1
    1b96:	34ff      	adds	r4, #255	; 0xff
    1b98:	00a4      	lsls	r4, r4, #2
    1b9a:	58a4      	ldr	r4, [r4, r2]
    1b9c:	401c      	ands	r4, r3
    1b9e:	444c      	add	r4, r9
    1ba0:	00a4      	lsls	r4, r4, #2
                    Td[2][Te[1][GETBYTE(rk[3], 1)] & 0xff] ^
    1ba2:	4647      	mov	r7, r8
    1ba4:	587f      	ldr	r7, [r7, r1]
    1ba6:	5864      	ldr	r4, [r4, r1]
    1ba8:	4067      	eors	r7, r4
                    Td[1][Te[1][GETBYTE(rk[3], 2)] & 0xff] ^
    1baa:	0c04      	lsrs	r4, r0, #16
    1bac:	401c      	ands	r4, r3
    1bae:	3401      	adds	r4, #1
    1bb0:	34ff      	adds	r4, #255	; 0xff
    1bb2:	00a4      	lsls	r4, r4, #2
    1bb4:	58a4      	ldr	r4, [r4, r2]
    1bb6:	401c      	ands	r4, r3
    1bb8:	3401      	adds	r4, #1
    1bba:	34ff      	adds	r4, #255	; 0xff
    1bbc:	00a4      	lsls	r4, r4, #2
                    Td[2][Te[1][GETBYTE(rk[3], 1)] & 0xff] ^
    1bbe:	5864      	ldr	r4, [r4, r1]
    1bc0:	407c      	eors	r4, r7
    1bc2:	0a00      	lsrs	r0, r0, #8
    1bc4:	4018      	ands	r0, r3
    1bc6:	3001      	adds	r0, #1
    1bc8:	30ff      	adds	r0, #255	; 0xff
    1bca:	0080      	lsls	r0, r0, #2
    1bcc:	5880      	ldr	r0, [r0, r2]
    1bce:	4018      	ands	r0, r3
    1bd0:	f240 2800 	movw	r8, #512	; 0x200
    1bd4:	4440      	add	r0, r8
    1bd6:	0080      	lsls	r0, r0, #2
    1bd8:	5840      	ldr	r0, [r0, r1]
    1bda:	4044      	eors	r4, r0
                rk[3] =
    1bdc:	60ec      	str	r4, [r5, #12]
            for (i = 1; i < aes->rounds; i++) {
    1bde:	3601      	adds	r6, #1
    1be0:	4660      	mov	r0, ip
    1be2:	4654      	mov	r4, sl
    1be4:	5820      	ldr	r0, [r4, r0]
    1be6:	42b0      	cmp	r0, r6
    1be8:	d900      	bls.n	1bec <wc_AesSetKeyLocal+0x4e6>
    1bea:	e735      	b.n	1a58 <wc_AesSetKeyLocal+0x352>
    1bec:	4657      	mov	r7, sl
    1bee:	e6f0      	b.n	19d2 <wc_AesSetKeyLocal+0x2cc>

00001bf0 <wc_AesSetKey>:
    {
    1bf0:	b530      	push	{r4, r5, lr}
    1bf2:	b083      	sub	sp, #12
        if (aes == NULL ||
    1bf4:	b1a8      	cbz	r0, 1c22 <wc_AesSetKey+0x32>
    1bf6:	2408      	movs	r4, #8
    1bf8:	0015      	movs	r5, r2
    1bfa:	43a5      	bics	r5, r4
    1bfc:	2d10      	cmp	r5, #16
    1bfe:	d001      	beq.n	1c04 <wc_AesSetKey+0x14>
                !((keylen == 16) || (keylen == 24) || (keylen == 32))) {
    1c00:	2a20      	cmp	r2, #32
    1c02:	d111      	bne.n	1c28 <wc_AesSetKey+0x38>
        aes->keylen = keylen;
    1c04:	24f4      	movs	r4, #244	; 0xf4
    1c06:	5102      	str	r2, [r0, r4]
        aes->rounds = keylen/4 + 6;
    1c08:	0894      	lsrs	r4, r2, #2
    1c0a:	3406      	adds	r4, #6
    1c0c:	25f0      	movs	r5, #240	; 0xf0
    1c0e:	5144      	str	r4, [r0, r5]
        ret = wc_AesSetKeyLocal(aes, userKey, keylen, iv, dir);
    1c10:	9c06      	ldr	r4, [sp, #24]
    1c12:	9400      	str	r4, [sp, #0]
    1c14:	f241 7407 	movw	r4, #5895	; 0x1707
    1c18:	f2c0 0400 	movt	r4, #0
    1c1c:	47a0      	blx	r4
    }
    1c1e:	b003      	add	sp, #12
    1c20:	bd30      	pop	{r4, r5, pc}
            return BAD_FUNC_ARG;
    1c22:	20ad      	movs	r0, #173	; 0xad
    1c24:	4240      	negs	r0, r0
    1c26:	e7fa      	b.n	1c1e <wc_AesSetKey+0x2e>
    1c28:	20ad      	movs	r0, #173	; 0xad
    1c2a:	4240      	negs	r0, r0
    1c2c:	e7f7      	b.n	1c1e <wc_AesSetKey+0x2e>

00001c2e <wc_AesEncryptDirect>:
        #endif /* HAVE_AES_DECRYPT */

    #else
        /* Allow direct access to one block encrypt */
        void wc_AesEncryptDirect(Aes* aes, byte* out, const byte* in)
        {
    1c2e:	b510      	push	{r4, lr}
    1c30:	0013      	movs	r3, r2
            wc_AesEncrypt(aes, in, out);
    1c32:	000a      	movs	r2, r1
    1c34:	0019      	movs	r1, r3
    1c36:	f640 5379 	movw	r3, #3449	; 0xd79
    1c3a:	f2c0 0300 	movt	r3, #0
    1c3e:	4798      	blx	r3
        }
    1c40:	bd10      	pop	{r4, pc}

00001c42 <wc_AesDecryptDirect>:
        #ifdef HAVE_AES_DECRYPT
        /* Allow direct access to one block decrypt */
        void wc_AesDecryptDirect(Aes* aes, byte* out, const byte* in)
        {
    1c42:	b510      	push	{r4, lr}
    1c44:	0013      	movs	r3, r2
            wc_AesDecrypt(aes, in, out);
    1c46:	000a      	movs	r2, r1
    1c48:	0019      	movs	r1, r3
    1c4a:	f241 238f 	movw	r3, #4751	; 0x128f
    1c4e:	f2c0 0300 	movt	r3, #0
    1c52:	4798      	blx	r3
        }
    1c54:	bd10      	pop	{r4, pc}
	...

00001c58 <__libc_init_array>:
    1c58:	b570      	push	{r4, r5, r6, lr}
    1c5a:	2500      	movs	r5, #0
    1c5c:	4b0e      	ldr	r3, [pc, #56]	; (1c98 <__libc_init_array+0x40>)
    1c5e:	4c0f      	ldr	r4, [pc, #60]	; (1c9c <__libc_init_array+0x44>)
    1c60:	1ae4      	subs	r4, r4, r3
    1c62:	10a4      	asrs	r4, r4, #2
    1c64:	42a5      	cmp	r5, r4
    1c66:	d109      	bne.n	1c7c <__libc_init_array+0x24>
    1c68:	2500      	movs	r5, #0
    1c6a:	f002 f9ff 	bl	406c <_init>
    1c6e:	4c0c      	ldr	r4, [pc, #48]	; (1ca0 <__libc_init_array+0x48>)
    1c70:	4b0c      	ldr	r3, [pc, #48]	; (1ca4 <__libc_init_array+0x4c>)
    1c72:	1ae4      	subs	r4, r4, r3
    1c74:	10a4      	asrs	r4, r4, #2
    1c76:	42a5      	cmp	r5, r4
    1c78:	d107      	bne.n	1c8a <__libc_init_array+0x32>
    1c7a:	bd70      	pop	{r4, r5, r6, pc}
    1c7c:	4a06      	ldr	r2, [pc, #24]	; (1c98 <__libc_init_array+0x40>)
    1c7e:	00ab      	lsls	r3, r5, #2
    1c80:	189b      	adds	r3, r3, r2
    1c82:	681b      	ldr	r3, [r3, #0]
    1c84:	4798      	blx	r3
    1c86:	3501      	adds	r5, #1
    1c88:	e7ec      	b.n	1c64 <__libc_init_array+0xc>
    1c8a:	4a06      	ldr	r2, [pc, #24]	; (1ca4 <__libc_init_array+0x4c>)
    1c8c:	00ab      	lsls	r3, r5, #2
    1c8e:	189b      	adds	r3, r3, r2
    1c90:	681b      	ldr	r3, [r3, #0]
    1c92:	4798      	blx	r3
    1c94:	3501      	adds	r5, #1
    1c96:	e7ee      	b.n	1c76 <__libc_init_array+0x1e>
    1c98:	00004078 	.word	0x00004078
    1c9c:	00004078 	.word	0x00004078
    1ca0:	0000407c 	.word	0x0000407c
    1ca4:	00004078 	.word	0x00004078

00001ca8 <malloc>:
    1ca8:	b510      	push	{r4, lr}
    1caa:	4b03      	ldr	r3, [pc, #12]	; (1cb8 <malloc+0x10>)
    1cac:	0001      	movs	r1, r0
    1cae:	6818      	ldr	r0, [r3, #0]
    1cb0:	f000 f86a 	bl	1d88 <_malloc_r>
    1cb4:	bd10      	pop	{r4, pc}
    1cb6:	46c0      	nop			; (mov r8, r8)
    1cb8:	20000010 	.word	0x20000010

00001cbc <free>:
    1cbc:	b510      	push	{r4, lr}
    1cbe:	4b03      	ldr	r3, [pc, #12]	; (1ccc <free+0x10>)
    1cc0:	0001      	movs	r1, r0
    1cc2:	6818      	ldr	r0, [r3, #0]
    1cc4:	f000 f816 	bl	1cf4 <_free_r>
    1cc8:	bd10      	pop	{r4, pc}
    1cca:	46c0      	nop			; (mov r8, r8)
    1ccc:	20000010 	.word	0x20000010

00001cd0 <memcpy>:
    1cd0:	2300      	movs	r3, #0
    1cd2:	b510      	push	{r4, lr}
    1cd4:	429a      	cmp	r2, r3
    1cd6:	d100      	bne.n	1cda <memcpy+0xa>
    1cd8:	bd10      	pop	{r4, pc}
    1cda:	5ccc      	ldrb	r4, [r1, r3]
    1cdc:	54c4      	strb	r4, [r0, r3]
    1cde:	3301      	adds	r3, #1
    1ce0:	e7f8      	b.n	1cd4 <memcpy+0x4>

00001ce2 <memset>:
    1ce2:	0003      	movs	r3, r0
    1ce4:	1882      	adds	r2, r0, r2
    1ce6:	4293      	cmp	r3, r2
    1ce8:	d100      	bne.n	1cec <memset+0xa>
    1cea:	4770      	bx	lr
    1cec:	7019      	strb	r1, [r3, #0]
    1cee:	3301      	adds	r3, #1
    1cf0:	e7f9      	b.n	1ce6 <memset+0x4>
	...

00001cf4 <_free_r>:
    1cf4:	b570      	push	{r4, r5, r6, lr}
    1cf6:	0005      	movs	r5, r0
    1cf8:	b181      	cbz	r1, 1d1c <_free_r+0x28>
    1cfa:	1f0c      	subs	r4, r1, #4
    1cfc:	6823      	ldr	r3, [r4, #0]
    1cfe:	2b00      	cmp	r3, #0
    1d00:	da00      	bge.n	1d04 <_free_r+0x10>
    1d02:	18e4      	adds	r4, r4, r3
    1d04:	0028      	movs	r0, r5
    1d06:	f000 f8ad 	bl	1e64 <__malloc_lock>
    1d0a:	4a1e      	ldr	r2, [pc, #120]	; (1d84 <_free_r+0x90>)
    1d0c:	6813      	ldr	r3, [r2, #0]
    1d0e:	0011      	movs	r1, r2
    1d10:	b92b      	cbnz	r3, 1d1e <_free_r+0x2a>
    1d12:	6063      	str	r3, [r4, #4]
    1d14:	6014      	str	r4, [r2, #0]
    1d16:	0028      	movs	r0, r5
    1d18:	f000 f8a5 	bl	1e66 <__malloc_unlock>
    1d1c:	bd70      	pop	{r4, r5, r6, pc}
    1d1e:	42a3      	cmp	r3, r4
    1d20:	d90b      	bls.n	1d3a <_free_r+0x46>
    1d22:	6822      	ldr	r2, [r4, #0]
    1d24:	18a0      	adds	r0, r4, r2
    1d26:	4283      	cmp	r3, r0
    1d28:	d103      	bne.n	1d32 <_free_r+0x3e>
    1d2a:	6818      	ldr	r0, [r3, #0]
    1d2c:	685b      	ldr	r3, [r3, #4]
    1d2e:	1882      	adds	r2, r0, r2
    1d30:	6022      	str	r2, [r4, #0]
    1d32:	6063      	str	r3, [r4, #4]
    1d34:	600c      	str	r4, [r1, #0]
    1d36:	e7ee      	b.n	1d16 <_free_r+0x22>
    1d38:	0013      	movs	r3, r2
    1d3a:	685a      	ldr	r2, [r3, #4]
    1d3c:	b10a      	cbz	r2, 1d42 <_free_r+0x4e>
    1d3e:	42a2      	cmp	r2, r4
    1d40:	d9fa      	bls.n	1d38 <_free_r+0x44>
    1d42:	6819      	ldr	r1, [r3, #0]
    1d44:	1858      	adds	r0, r3, r1
    1d46:	42a0      	cmp	r0, r4
    1d48:	d10b      	bne.n	1d62 <_free_r+0x6e>
    1d4a:	6820      	ldr	r0, [r4, #0]
    1d4c:	1809      	adds	r1, r1, r0
    1d4e:	1858      	adds	r0, r3, r1
    1d50:	6019      	str	r1, [r3, #0]
    1d52:	4282      	cmp	r2, r0
    1d54:	d1df      	bne.n	1d16 <_free_r+0x22>
    1d56:	6810      	ldr	r0, [r2, #0]
    1d58:	6852      	ldr	r2, [r2, #4]
    1d5a:	1841      	adds	r1, r0, r1
    1d5c:	6019      	str	r1, [r3, #0]
    1d5e:	605a      	str	r2, [r3, #4]
    1d60:	e7d9      	b.n	1d16 <_free_r+0x22>
    1d62:	42a0      	cmp	r0, r4
    1d64:	d902      	bls.n	1d6c <_free_r+0x78>
    1d66:	230c      	movs	r3, #12
    1d68:	602b      	str	r3, [r5, #0]
    1d6a:	e7d4      	b.n	1d16 <_free_r+0x22>
    1d6c:	6821      	ldr	r1, [r4, #0]
    1d6e:	1860      	adds	r0, r4, r1
    1d70:	4282      	cmp	r2, r0
    1d72:	d103      	bne.n	1d7c <_free_r+0x88>
    1d74:	6810      	ldr	r0, [r2, #0]
    1d76:	6852      	ldr	r2, [r2, #4]
    1d78:	1841      	adds	r1, r0, r1
    1d7a:	6021      	str	r1, [r4, #0]
    1d7c:	6062      	str	r2, [r4, #4]
    1d7e:	605c      	str	r4, [r3, #4]
    1d80:	e7c9      	b.n	1d16 <_free_r+0x22>
    1d82:	46c0      	nop			; (mov r8, r8)
    1d84:	2000009c 	.word	0x2000009c

00001d88 <_malloc_r>:
    1d88:	2303      	movs	r3, #3
    1d8a:	b570      	push	{r4, r5, r6, lr}
    1d8c:	1ccd      	adds	r5, r1, #3
    1d8e:	439d      	bics	r5, r3
    1d90:	3508      	adds	r5, #8
    1d92:	0006      	movs	r6, r0
    1d94:	2d0c      	cmp	r5, #12
    1d96:	d21c      	bcs.n	1dd2 <_malloc_r+0x4a>
    1d98:	250c      	movs	r5, #12
    1d9a:	42a9      	cmp	r1, r5
    1d9c:	d81b      	bhi.n	1dd6 <_malloc_r+0x4e>
    1d9e:	0030      	movs	r0, r6
    1da0:	f000 f860 	bl	1e64 <__malloc_lock>
    1da4:	4a25      	ldr	r2, [pc, #148]	; (1e3c <_malloc_r+0xb4>)
    1da6:	6814      	ldr	r4, [r2, #0]
    1da8:	0021      	movs	r1, r4
    1daa:	b9c1      	cbnz	r1, 1dde <_malloc_r+0x56>
    1dac:	4c24      	ldr	r4, [pc, #144]	; (1e40 <_malloc_r+0xb8>)
    1dae:	6823      	ldr	r3, [r4, #0]
    1db0:	b91b      	cbnz	r3, 1dba <_malloc_r+0x32>
    1db2:	0030      	movs	r0, r6
    1db4:	f000 f846 	bl	1e44 <_sbrk_r>
    1db8:	6020      	str	r0, [r4, #0]
    1dba:	0029      	movs	r1, r5
    1dbc:	0030      	movs	r0, r6
    1dbe:	f000 f841 	bl	1e44 <_sbrk_r>
    1dc2:	1c43      	adds	r3, r0, #1
    1dc4:	d12d      	bne.n	1e22 <_malloc_r+0x9a>
    1dc6:	230c      	movs	r3, #12
    1dc8:	0030      	movs	r0, r6
    1dca:	6033      	str	r3, [r6, #0]
    1dcc:	f000 f84b 	bl	1e66 <__malloc_unlock>
    1dd0:	e003      	b.n	1dda <_malloc_r+0x52>
    1dd2:	2d00      	cmp	r5, #0
    1dd4:	dae1      	bge.n	1d9a <_malloc_r+0x12>
    1dd6:	230c      	movs	r3, #12
    1dd8:	6033      	str	r3, [r6, #0]
    1dda:	2000      	movs	r0, #0
    1ddc:	bd70      	pop	{r4, r5, r6, pc}
    1dde:	680b      	ldr	r3, [r1, #0]
    1de0:	1b5b      	subs	r3, r3, r5
    1de2:	d41b      	bmi.n	1e1c <_malloc_r+0x94>
    1de4:	2b0b      	cmp	r3, #11
    1de6:	d903      	bls.n	1df0 <_malloc_r+0x68>
    1de8:	600b      	str	r3, [r1, #0]
    1dea:	18cc      	adds	r4, r1, r3
    1dec:	6025      	str	r5, [r4, #0]
    1dee:	e003      	b.n	1df8 <_malloc_r+0x70>
    1df0:	428c      	cmp	r4, r1
    1df2:	d10f      	bne.n	1e14 <_malloc_r+0x8c>
    1df4:	6863      	ldr	r3, [r4, #4]
    1df6:	6013      	str	r3, [r2, #0]
    1df8:	0030      	movs	r0, r6
    1dfa:	f000 f834 	bl	1e66 <__malloc_unlock>
    1dfe:	0020      	movs	r0, r4
    1e00:	2207      	movs	r2, #7
    1e02:	300b      	adds	r0, #11
    1e04:	1d23      	adds	r3, r4, #4
    1e06:	4390      	bics	r0, r2
    1e08:	1ac3      	subs	r3, r0, r3
    1e0a:	2b00      	cmp	r3, #0
    1e0c:	d0e6      	beq.n	1ddc <_malloc_r+0x54>
    1e0e:	425a      	negs	r2, r3
    1e10:	50e2      	str	r2, [r4, r3]
    1e12:	e7e3      	b.n	1ddc <_malloc_r+0x54>
    1e14:	684b      	ldr	r3, [r1, #4]
    1e16:	6063      	str	r3, [r4, #4]
    1e18:	000c      	movs	r4, r1
    1e1a:	e7ed      	b.n	1df8 <_malloc_r+0x70>
    1e1c:	000c      	movs	r4, r1
    1e1e:	6849      	ldr	r1, [r1, #4]
    1e20:	e7c3      	b.n	1daa <_malloc_r+0x22>
    1e22:	2303      	movs	r3, #3
    1e24:	1cc4      	adds	r4, r0, #3
    1e26:	439c      	bics	r4, r3
    1e28:	42a0      	cmp	r0, r4
    1e2a:	d0df      	beq.n	1dec <_malloc_r+0x64>
    1e2c:	1a21      	subs	r1, r4, r0
    1e2e:	0030      	movs	r0, r6
    1e30:	f000 f808 	bl	1e44 <_sbrk_r>
    1e34:	1c43      	adds	r3, r0, #1
    1e36:	d1d9      	bne.n	1dec <_malloc_r+0x64>
    1e38:	e7c5      	b.n	1dc6 <_malloc_r+0x3e>
    1e3a:	46c0      	nop			; (mov r8, r8)
    1e3c:	2000009c 	.word	0x2000009c
    1e40:	200000a0 	.word	0x200000a0

00001e44 <_sbrk_r>:
    1e44:	2300      	movs	r3, #0
    1e46:	b570      	push	{r4, r5, r6, lr}
    1e48:	4c05      	ldr	r4, [pc, #20]	; (1e60 <_sbrk_r+0x1c>)
    1e4a:	0005      	movs	r5, r0
    1e4c:	0008      	movs	r0, r1
    1e4e:	6023      	str	r3, [r4, #0]
    1e50:	f7fe fbd8 	bl	604 <_sbrk>
    1e54:	1c43      	adds	r3, r0, #1
    1e56:	d102      	bne.n	1e5e <_sbrk_r+0x1a>
    1e58:	6823      	ldr	r3, [r4, #0]
    1e5a:	b103      	cbz	r3, 1e5e <_sbrk_r+0x1a>
    1e5c:	602b      	str	r3, [r5, #0]
    1e5e:	bd70      	pop	{r4, r5, r6, pc}
    1e60:	200000b0 	.word	0x200000b0

00001e64 <__malloc_lock>:
    1e64:	4770      	bx	lr

00001e66 <__malloc_unlock>:
    1e66:	4770      	bx	lr
    1e68:	682f2e2e 	.word	0x682f2e2e
    1e6c:	732f6c61 	.word	0x732f6c61
    1e70:	682f6372 	.word	0x682f6372
    1e74:	755f6c61 	.word	0x755f6c61
    1e78:	74726173 	.word	0x74726173
    1e7c:	6e79735f 	.word	0x6e79735f
    1e80:	00632e63 	.word	0x00632e63
    1e84:	42000400 	.word	0x42000400
    1e88:	42000800 	.word	0x42000800
    1e8c:	42000c00 	.word	0x42000c00

00001e90 <_i2cms>:
	...
    1ea8:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    1eb8:	65735f6c 6d6f6372 0000632e 10eb3d60     l_sercom.c..`=..
    1ec8:	be71ca15 f0ae732b 81777d85 072c351f     ..q.+s...}w..5,.
    1ed8:	d708613b a310982d f4df1409              ;a..-.......

00001ee4 <Te>:
    1ee4:	c66363a5 f87c7c84 ee777799 f67b7b8d     .cc..||..ww..{{.
    1ef4:	fff2f20d d66b6bbd de6f6fb1 91c5c554     .....kk..oo.T...
    1f04:	60303050 02010103 ce6767a9 562b2b7d     P00`.....gg.}++V
    1f14:	e7fefe19 b5d7d762 4dababe6 ec76769a     ....b......M.vv.
    1f24:	8fcaca45 1f82829d 89c9c940 fa7d7d87     E.......@....}}.
    1f34:	effafa15 b25959eb 8e4747c9 fbf0f00b     .....YY..GG.....
    1f44:	41adadec b3d4d467 5fa2a2fd 45afafea     ...Ag......_...E
    1f54:	239c9cbf 53a4a4f7 e4727296 9bc0c05b     ...#...S.rr.[...
    1f64:	75b7b7c2 e1fdfd1c 3d9393ae 4c26266a     ...u.......=j&&L
    1f74:	6c36365a 7e3f3f41 f5f7f702 83cccc4f     Z66lA??~....O...
    1f84:	6834345c 51a5a5f4 d1e5e534 f9f1f108     \44h...Q4.......
    1f94:	e2717193 abd8d873 62313153 2a15153f     .qq.s...S11b?..*
    1fa4:	0804040c 95c7c752 46232365 9dc3c35e     ....R...e##F^...
    1fb4:	30181828 379696a1 0a05050f 2f9a9ab5     (..0...7......./
    1fc4:	0e070709 24121236 1b80809b dfe2e23d     ....6..$....=...
    1fd4:	cdebeb26 4e272769 7fb2b2cd ea75759f     &...i''N.....uu.
    1fe4:	1209091b 1d83839e 582c2c74 341a1a2e     ........t,,X...4
    1ff4:	361b1b2d dc6e6eb2 b45a5aee 5ba0a0fb     -..6.nn..ZZ....[
    2004:	a45252f6 763b3b4d b7d6d661 7db3b3ce     .RR.M;;va......}
    2014:	5229297b dde3e33e 5e2f2f71 13848497     {))R>...q//^....
    2024:	a65353f5 b9d1d168 00000000 c1eded2c     .SS.h.......,...
    2034:	40202060 e3fcfc1f 79b1b1c8 b65b5bed     `  @.......y.[[.
    2044:	d46a6abe 8dcbcb46 67bebed9 7239394b     .jj.F......gK99r
    2054:	944a4ade 984c4cd4 b05858e8 85cfcf4a     .JJ..LL..XX.J...
    2064:	bbd0d06b c5efef2a 4faaaae5 edfbfb16     k...*......O....
    2074:	864343c5 9a4d4dd7 66333355 11858594     .CC..MM.U33f....
    2084:	8a4545cf e9f9f910 04020206 fe7f7f81     .EE.............
    2094:	a05050f0 783c3c44 259f9fba 4ba8a8e3     .PP.D<<x...%...K
    20a4:	a25151f3 5da3a3fe 804040c0 058f8f8a     .QQ....].@@.....
    20b4:	3f9292ad 219d9dbc 70383848 f1f5f504     ...?...!H88p....
    20c4:	63bcbcdf 77b6b6c1 afdada75 42212163     ...c...wu...c!!B
    20d4:	20101030 e5ffff1a fdf3f30e bfd2d26d     0.. ........m...
    20e4:	81cdcd4c 180c0c14 26131335 c3ecec2f     L.......5..&/...
    20f4:	be5f5fe1 359797a2 884444cc 2e171739     .__....5.DD.9...
    2104:	93c4c457 55a7a7f2 fc7e7e82 7a3d3d47     W......U.~~.G==z
    2114:	c86464ac ba5d5de7 3219192b e6737395     .dd..]].+..2.ss.
    2124:	c06060a0 19818198 9e4f4fd1 a3dcdc7f     .``......OO.....
    2134:	44222266 542a2a7e 3b9090ab 0b888883     f""D~**T...;....
    2144:	8c4646ca c7eeee29 6bb8b8d3 2814143c     .FF.)......k<..(
    2154:	a7dede79 bc5e5ee2 160b0b1d addbdb76     y....^^.....v...
    2164:	dbe0e03b 64323256 743a3a4e 140a0a1e     ;...V22dN::t....
    2174:	924949db 0c06060a 4824246c b85c5ce4     .II.....l$$H.\\.
    2184:	9fc2c25d bdd3d36e 43acacef c46262a6     ]...n......C.bb.
    2194:	399191a8 319595a4 d3e4e437 f279798b     ...9...17....yy.
    21a4:	d5e7e732 8bc8c843 6e373759 da6d6db7     2...C...Y77n.mm.
    21b4:	018d8d8c b1d5d564 9c4e4ed2 49a9a9e0     ....d....NN....I
    21c4:	d86c6cb4 ac5656fa f3f4f407 cfeaea25     .ll..VV.....%...
    21d4:	ca6565af f47a7a8e 47aeaee9 10080818     .ee..zz....G....
    21e4:	6fbabad5 f0787888 4a25256f 5c2e2e72     ...o.xx.o%%Jr..\
    21f4:	381c1c24 57a6a6f1 73b4b4c7 97c6c651     $..8...W...sQ...
    2204:	cbe8e823 a1dddd7c e874749c 3e1f1f21     #...|....tt.!..>
    2214:	964b4bdd 61bdbddc 0d8b8b86 0f8a8a85     .KK....a........
    2224:	e0707090 7c3e3e42 71b5b5c4 cc6666aa     .pp.B>>|...q.ff.
    2234:	904848d8 06030305 f7f6f601 1c0e0e12     .HH.............
    2244:	c26161a3 6a35355f ae5757f9 69b9b9d0     .aa._55j.WW....i
    2254:	17868691 99c1c158 3a1d1d27 279e9eb9     ....X...'..:...'
    2264:	d9e1e138 ebf8f813 2b9898b3 22111133     8..........+3.."
    2274:	d26969bb a9d9d970 078e8e89 339494a7     .ii.p..........3
    2284:	2d9b9bb6 3c1e1e22 15878792 c9e9e920     ...-"..<.... ...
    2294:	87cece49 aa5555ff 50282878 a5dfdf7a     I....UU.x((Pz...
    22a4:	038c8c8f 59a1a1f8 09898980 1a0d0d17     .......Y........
    22b4:	65bfbfda d7e6e631 844242c6 d06868b8     ...e1....BB..hh.
    22c4:	824141c3 299999b0 5a2d2d77 1e0f0f11     .AA....)w--Z....
    22d4:	7bb0b0cb a85454fc 6dbbbbd6 2c16163a     ...{.TT....m:..,
    22e4:	a5c66363 84f87c7c 99ee7777 8df67b7b     cc..||..ww..{{..
    22f4:	0dfff2f2 bdd66b6b b1de6f6f 5491c5c5     ....kk..oo.....T
    2304:	50603030 03020101 a9ce6767 7d562b2b     00`P....gg..++V}
    2314:	19e7fefe 62b5d7d7 e64dabab 9aec7676     .......b..M.vv..
    2324:	458fcaca 9d1f8282 4089c9c9 87fa7d7d     ...E.......@}}..
    2334:	15effafa ebb25959 c98e4747 0bfbf0f0     ....YY..GG......
    2344:	ec41adad 67b3d4d4 fd5fa2a2 ea45afaf     ..A....g.._...E.
    2354:	bf239c9c f753a4a4 96e47272 5b9bc0c0     ..#...S.rr.....[
    2364:	c275b7b7 1ce1fdfd ae3d9393 6a4c2626     ..u.......=.&&Lj
    2374:	5a6c3636 417e3f3f 02f5f7f7 4f83cccc     66lZ??~A.......O
    2384:	5c683434 f451a5a5 34d1e5e5 08f9f1f1     44h\..Q....4....
    2394:	93e27171 73abd8d8 53623131 3f2a1515     qq.....s11bS..*?
    23a4:	0c080404 5295c7c7 65462323 5e9dc3c3     .......R##Fe...^
    23b4:	28301818 a1379696 0f0a0505 b52f9a9a     ..0(..7......./.
    23c4:	090e0707 36241212 9b1b8080 3ddfe2e2     ......$6.......=
    23d4:	26cdebeb 694e2727 cd7fb2b2 9fea7575     ...&''Ni....uu..
    23e4:	1b120909 9e1d8383 74582c2c 2e341a1a     ........,,Xt..4.
    23f4:	2d361b1b b2dc6e6e eeb45a5a fb5ba0a0     ..6-nn..ZZ....[.
    2404:	f6a45252 4d763b3b 61b7d6d6 ce7db3b3     RR..;;vM...a..}.
    2414:	7b522929 3edde3e3 715e2f2f 97138484     ))R{...>//^q....
    2424:	f5a65353 68b9d1d1 00000000 2cc1eded     SS.....h.......,
    2434:	60402020 1fe3fcfc c879b1b1 edb65b5b       @`......y.[[..
    2444:	bed46a6a 468dcbcb d967bebe 4b723939     jj.....F..g.99rK
    2454:	de944a4a d4984c4c e8b05858 4a85cfcf     JJ..LL..XX.....J
    2464:	6bbbd0d0 2ac5efef e54faaaa 16edfbfb     ...k...*..O.....
    2474:	c5864343 d79a4d4d 55663333 94118585     CC..MM..33fU....
    2484:	cf8a4545 10e9f9f9 06040202 81fe7f7f     EE..............
    2494:	f0a05050 44783c3c ba259f9f e34ba8a8     PP..<<xD..%...K.
    24a4:	f3a25151 fe5da3a3 c0804040 8a058f8f     QQ....].@@......
    24b4:	ad3f9292 bc219d9d 48703838 04f1f5f5     ..?...!.88pH....
    24c4:	df63bcbc c177b6b6 75afdada 63422121     ..c...w....u!!Bc
    24d4:	30201010 1ae5ffff 0efdf3f3 6dbfd2d2     .. 0...........m
    24e4:	4c81cdcd 14180c0c 35261313 2fc3ecec     ...L......&5.../
    24f4:	e1be5f5f a2359797 cc884444 392e1717     __....5.DD.....9
    2504:	5793c4c4 f255a7a7 82fc7e7e 477a3d3d     ...W..U.~~..==zG
    2514:	acc86464 e7ba5d5d 2b321919 95e67373     dd..]]....2+ss..
    2524:	a0c06060 98198181 d19e4f4f 7fa3dcdc     ``......OO......
    2534:	66442222 7e542a2a ab3b9090 830b8888     ""Df**T~..;.....
    2544:	ca8c4646 29c7eeee d36bb8b8 3c281414     FF.....)..k...(<
    2554:	79a7dede e2bc5e5e 1d160b0b 76addbdb     ...y^^.........v
    2564:	3bdbe0e0 56643232 4e743a3a 1e140a0a     ...;22dV::tN....
    2574:	db924949 0a0c0606 6c482424 e4b85c5c     II......$$Hl\\..
    2584:	5d9fc2c2 6ebdd3d3 ef43acac a6c46262     ...]...n..C.bb..
    2594:	a8399191 a4319595 37d3e4e4 8bf27979     ..9...1....7yy..
    25a4:	32d5e7e7 438bc8c8 596e3737 b7da6d6d     ...2...C77nYmm..
    25b4:	8c018d8d 64b1d5d5 d29c4e4e e049a9a9     .......dNN....I.
    25c4:	b4d86c6c faac5656 07f3f4f4 25cfeaea     ll..VV.........%
    25d4:	afca6565 8ef47a7a e947aeae 18100808     ee..zz....G.....
    25e4:	d56fbaba 88f07878 6f4a2525 725c2e2e     ..o.xx..%%Jo..\r
    25f4:	24381c1c f157a6a6 c773b4b4 5197c6c6     ..8$..W...s....Q
    2604:	23cbe8e8 7ca1dddd 9ce87474 213e1f1f     ...#...|tt....>!
    2614:	dd964b4b dc61bdbd 860d8b8b 850f8a8a     KK....a.........
    2624:	90e07070 427c3e3e c471b5b5 aacc6666     pp..>>|B..q.ff..
    2634:	d8904848 05060303 01f7f6f6 121c0e0e     HH..............
    2644:	a3c26161 5f6a3535 f9ae5757 d069b9b9     aa..55j_WW....i.
    2654:	91178686 5899c1c1 273a1d1d b9279e9e     .......X..:'..'.
    2664:	38d9e1e1 13ebf8f8 b32b9898 33221111     ...8......+..."3
    2674:	bbd26969 70a9d9d9 89078e8e a7339494     ii.....p......3.
    2684:	b62d9b9b 223c1e1e 92158787 20c9e9e9     ..-...<"....... 
    2694:	4987cece ffaa5555 78502828 7aa5dfdf     ...IUU..((Px...z
    26a4:	8f038c8c f859a1a1 80098989 171a0d0d     ......Y.........
    26b4:	da65bfbf 31d7e6e6 c6844242 b8d06868     ..e....1BB..hh..
    26c4:	c3824141 b0299999 775a2d2d 111e0f0f     AA....).--Zw....
    26d4:	cb7bb0b0 fca85454 d66dbbbb 3a2c1616     ..{.TT....m...,:
    26e4:	63a5c663 7c84f87c 7799ee77 7b8df67b     c..c|..|w..w{..{
    26f4:	f20dfff2 6bbdd66b 6fb1de6f c55491c5     ....k..ko..o..T.
    2704:	30506030 01030201 67a9ce67 2b7d562b     0`P0....g..g+V}+
    2714:	fe19e7fe d762b5d7 abe64dab 769aec76     ......b..M..v..v
    2724:	ca458fca 829d1f82 c94089c9 7d87fa7d     ..E.......@.}..}
    2734:	fa15effa 59ebb259 47c98e47 f00bfbf0     ....Y..YG..G....
    2744:	adec41ad d467b3d4 a2fd5fa2 afea45af     .A....g.._...E..
    2754:	9cbf239c a4f753a4 7296e472 c05b9bc0     .#...S..r..r..[.
    2764:	b7c275b7 fd1ce1fd 93ae3d93 266a4c26     .u.......=..&Lj&
    2774:	365a6c36 3f417e3f f702f5f7 cc4f83cc     6lZ6?~A?......O.
    2784:	345c6834 a5f451a5 e534d1e5 f108f9f1     4h\4.Q....4.....
    2794:	7193e271 d873abd8 31536231 153f2a15     q..q..s.1bS1.*?.
    27a4:	040c0804 c75295c7 23654623 c35e9dc3     ......R.#Fe#..^.
    27b4:	18283018 96a13796 050f0a05 9ab52f9a     .0(..7......./..
    27c4:	07090e07 12362412 809b1b80 e23ddfe2     .....$6.......=.
    27d4:	eb26cdeb 27694e27 b2cd7fb2 759fea75     ..&.'Ni'....u..u
    27e4:	091b1209 839e1d83 2c74582c 1a2e341a     ........,Xt,.4..
    27f4:	1b2d361b 6eb2dc6e 5aeeb45a a0fb5ba0     .6-.n..nZ..Z.[..
    2804:	52f6a452 3b4d763b d661b7d6 b3ce7db3     R..R;vM;..a..}..
    2814:	297b5229 e33edde3 2f715e2f 84971384     )R{)..>./^q/....
    2824:	53f5a653 d168b9d1 00000000 ed2cc1ed     S..S..h.......,.
    2834:	20604020 fc1fe3fc b1c879b1 5bedb65b      @` .....y..[..[
    2844:	6abed46a cb468dcb bed967be 394b7239     j..j..F..g..9rK9
    2854:	4ade944a 4cd4984c 58e8b058 cf4a85cf     J..JL..LX..X..J.
    2864:	d06bbbd0 ef2ac5ef aae54faa fb16edfb     ..k...*..O......
    2874:	43c58643 4dd79a4d 33556633 85941185     C..CM..M3fU3....
    2884:	45cf8a45 f910e9f9 02060402 7f81fe7f     E..E............
    2894:	50f0a050 3c44783c 9fba259f a8e34ba8     P..P<xD<.%...K..
    28a4:	51f3a251 a3fe5da3 40c08040 8f8a058f     Q..Q.]..@..@....
    28b4:	92ad3f92 9dbc219d 38487038 f504f1f5     .?...!..8pH8....
    28c4:	bcdf63bc b6c177b6 da75afda 21634221     .c...w....u.!Bc!
    28d4:	10302010 ff1ae5ff f30efdf3 d26dbfd2     . 0...........m.
    28e4:	cd4c81cd 0c14180c 13352613 ec2fc3ec     ..L......&5.../.
    28f4:	5fe1be5f 97a23597 44cc8844 17392e17     _.._.5..D..D..9.
    2904:	c45793c4 a7f255a7 7e82fc7e 3d477a3d     ..W..U..~..~=zG=
    2914:	64acc864 5de7ba5d 192b3219 7395e673     d..d]..].2+.s..s
    2924:	60a0c060 81981981 4fd19e4f dc7fa3dc     `..`....O..O....
    2934:	22664422 2a7e542a 90ab3b90 88830b88     "Df"*T~*.;......
    2944:	46ca8c46 ee29c7ee b8d36bb8 143c2814     F..F..)..k...(<.
    2954:	de79a7de 5ee2bc5e 0b1d160b db76addb     ..y.^..^......v.
    2964:	e03bdbe0 32566432 3a4e743a 0a1e140a     ..;.2dV2:tN:....
    2974:	49db9249 060a0c06 246c4824 5ce4b85c     I..I....$Hl$\..\
    2984:	c25d9fc2 d36ebdd3 acef43ac 62a6c462     ..]...n..C..b..b
    2994:	91a83991 95a43195 e437d3e4 798bf279     .9...1....7.y..y
    29a4:	e732d5e7 c8438bc8 37596e37 6db7da6d     ..2...C.7nY7m..m
    29b4:	8d8c018d d564b1d5 4ed29c4e a9e049a9     ......d.N..N.I..
    29c4:	6cb4d86c 56faac56 f407f3f4 ea25cfea     l..lV..V......%.
    29d4:	65afca65 7a8ef47a aee947ae 08181008     e..ez..z.G......
    29e4:	bad56fba 7888f078 256f4a25 2e725c2e     .o..x..x%Jo%.\r.
    29f4:	1c24381c a6f157a6 b4c773b4 c65197c6     .8$..W...s....Q.
    2a04:	e823cbe8 dd7ca1dd 749ce874 1f213e1f     ..#...|.t..t.>!.
    2a14:	4bdd964b bddc61bd 8b860d8b 8a850f8a     K..K.a..........
    2a24:	7090e070 3e427c3e b5c471b5 66aacc66     p..p>|B>.q..f..f
    2a34:	48d89048 03050603 f601f7f6 0e121c0e     H..H............
    2a44:	61a3c261 355f6a35 57f9ae57 b9d069b9     a..a5j_5W..W.i..
    2a54:	86911786 c15899c1 1d273a1d 9eb9279e     ......X..:'..'..
    2a64:	e138d9e1 f813ebf8 98b32b98 11332211     ..8......+..."3.
    2a74:	69bbd269 d970a9d9 8e89078e 94a73394     i..i..p......3..
    2a84:	9bb62d9b 1e223c1e 87921587 e920c9e9     .-...<"....... .
    2a94:	ce4987ce 55ffaa55 28785028 df7aa5df     ..I.U..U(Px(..z.
    2aa4:	8c8f038c a1f859a1 89800989 0d171a0d     .....Y..........
    2ab4:	bfda65bf e631d7e6 42c68442 68b8d068     .e....1.B..Bh..h
    2ac4:	41c38241 99b02999 2d775a2d 0f111e0f     A..A.)..-Zw-....
    2ad4:	b0cb7bb0 54fca854 bbd66dbb 163a2c16     .{..T..T.m...,:.
    2ae4:	6363a5c6 7c7c84f8 777799ee 7b7b8df6     ..cc..||..ww..{{
    2af4:	f2f20dff 6b6bbdd6 6f6fb1de c5c55491     ......kk..oo.T..
    2b04:	30305060 01010302 6767a9ce 2b2b7d56     `P00......ggV}++
    2b14:	fefe19e7 d7d762b5 ababe64d 76769aec     .....b..M.....vv
    2b24:	caca458f 82829d1f c9c94089 7d7d87fa     .E.......@....}}
    2b34:	fafa15ef 5959ebb2 4747c98e f0f00bfb     ......YY..GG....
    2b44:	adadec41 d4d467b3 a2a2fd5f afafea45     A....g.._...E...
    2b54:	9c9cbf23 a4a4f753 727296e4 c0c05b9b     #...S.....rr.[..
    2b64:	b7b7c275 fdfd1ce1 9393ae3d 26266a4c     u.......=...Lj&&
    2b74:	36365a6c 3f3f417e f7f702f5 cccc4f83     lZ66~A??.....O..
    2b84:	34345c68 a5a5f451 e5e534d1 f1f108f9     h\44Q....4......
    2b94:	717193e2 d8d873ab 31315362 15153f2a     ..qq.s..bS11*?..
    2ba4:	04040c08 c7c75295 23236546 c3c35e9d     .....R..Fe##.^..
    2bb4:	18182830 9696a137 05050f0a 9a9ab52f     0(..7......./...
    2bc4:	0707090e 12123624 80809b1b e2e23ddf     ....$6.......=..
    2bd4:	ebeb26cd 2727694e b2b2cd7f 75759fea     .&..Ni''......uu
    2be4:	09091b12 83839e1d 2c2c7458 1a1a2e34     ........Xt,,4...
    2bf4:	1b1b2d36 6e6eb2dc 5a5aeeb4 a0a0fb5b     6-....nn..ZZ[...
    2c04:	5252f6a4 3b3b4d76 d6d661b7 b3b3ce7d     ..RRvM;;.a..}...
    2c14:	29297b52 e3e33edd 2f2f715e 84849713     R{)).>..^q//....
    2c24:	5353f5a6 d1d168b9 00000000 eded2cc1     ..SS.h.......,..
    2c34:	20206040 fcfc1fe3 b1b1c879 5b5bedb6     @`  ....y.....[[
    2c44:	6a6abed4 cbcb468d bebed967 39394b72     ..jj.F..g...rK99
    2c54:	4a4ade94 4c4cd498 5858e8b0 cfcf4a85     ..JJ..LL..XX.J..
    2c64:	d0d06bbb efef2ac5 aaaae54f fbfb16ed     .k...*..O.......
    2c74:	4343c586 4d4dd79a 33335566 85859411     ..CC..MMfU33....
    2c84:	4545cf8a f9f910e9 02020604 7f7f81fe     ..EE............
    2c94:	5050f0a0 3c3c4478 9f9fba25 a8a8e34b     ..PPxD<<%...K...
    2ca4:	5151f3a2 a3a3fe5d 4040c080 8f8f8a05     ..QQ].....@@....
    2cb4:	9292ad3f 9d9dbc21 38384870 f5f504f1     ?...!...pH88....
    2cc4:	bcbcdf63 b6b6c177 dada75af 21216342     c...w....u..Bc!!
    2cd4:	10103020 ffff1ae5 f3f30efd d2d26dbf      0...........m..
    2ce4:	cdcd4c81 0c0c1418 13133526 ecec2fc3     .L......&5.../..
    2cf4:	5f5fe1be 9797a235 4444cc88 1717392e     ..__5.....DD.9..
    2d04:	c4c45793 a7a7f255 7e7e82fc 3d3d477a     .W..U.....~~zG==
    2d14:	6464acc8 5d5de7ba 19192b32 737395e6     ..dd..]]2+....ss
    2d24:	6060a0c0 81819819 4f4fd19e dcdc7fa3     ..``......OO....
    2d34:	22226644 2a2a7e54 9090ab3b 8888830b     Df""T~**;.......
    2d44:	4646ca8c eeee29c7 b8b8d36b 14143c28     ..FF.)..k...(<..
    2d54:	dede79a7 5e5ee2bc 0b0b1d16 dbdb76ad     .y....^^.....v..
    2d64:	e0e03bdb 32325664 3a3a4e74 0a0a1e14     .;..dV22tN::....
    2d74:	4949db92 06060a0c 24246c48 5c5ce4b8     ..II....Hl$$..\\
    2d84:	c2c25d9f d3d36ebd acacef43 6262a6c4     .]...n..C.....bb
    2d94:	9191a839 9595a431 e4e437d3 79798bf2     9...1....7....yy
    2da4:	e7e732d5 c8c8438b 3737596e 6d6db7da     .2...C..nY77..mm
    2db4:	8d8d8c01 d5d564b1 4e4ed29c a9a9e049     .....d....NNI...
    2dc4:	6c6cb4d8 5656faac f4f407f3 eaea25cf     ..ll..VV.....%..
    2dd4:	6565afca 7a7a8ef4 aeaee947 08081810     ..ee..zzG.......
    2de4:	babad56f 787888f0 25256f4a 2e2e725c     o.....xxJo%%\r..
    2df4:	1c1c2438 a6a6f157 b4b4c773 c6c65197     8$..W...s....Q..
    2e04:	e8e823cb dddd7ca1 74749ce8 1f1f213e     .#...|....tt>!..
    2e14:	4b4bdd96 bdbddc61 8b8b860d 8a8a850f     ..KKa...........
    2e24:	707090e0 3e3e427c b5b5c471 6666aacc     ..pp|B>>q.....ff
    2e34:	4848d890 03030506 f6f601f7 0e0e121c     ..HH............
    2e44:	6161a3c2 35355f6a 5757f9ae b9b9d069     ..aaj_55..WWi...
    2e54:	86869117 c1c15899 1d1d273a 9e9eb927     .....X..:'..'...
    2e64:	e1e138d9 f8f813eb 9898b32b 11113322     .8......+..."3..
    2e74:	6969bbd2 d9d970a9 8e8e8907 9494a733     ..ii.p......3...
    2e84:	9b9bb62d 1e1e223c 87879215 e9e920c9     -...<"....... ..
    2e94:	cece4987 5555ffaa 28287850 dfdf7aa5     .I....UUPx((.z..
    2ea4:	8c8c8f03 a1a1f859 89898009 0d0d171a     ....Y...........
    2eb4:	bfbfda65 e6e631d7 4242c684 6868b8d0     e....1....BB..hh
    2ec4:	4141c382 9999b029 2d2d775a 0f0f111e     ..AA)...Zw--....
    2ed4:	b0b0cb7b 5454fca8 bbbbd66d 16163a2c     {.....TTm...,:..

00002ee4 <Td>:
    2ee4:	51f4a750 7e416553 1a17a4c3 3a275e96     P..QSeA~.....^':
    2ef4:	3bab6bcb 1f9d45f1 acfa58ab 4be30393     .k.;.E...X.....K
    2f04:	2030fa55 ad766df6 88cc7691 f5024c25     U.0 .mv..v..%L..
    2f14:	4fe5d7fc c52acbd7 26354480 b562a38f     ...O..*..D5&..b.
    2f24:	deb15a49 25ba1b67 45ea0e98 5dfec0e1     IZ..g..%...E...]
    2f34:	c32f7502 814cf012 8d4697a3 6bd3f9c6     .u/...L...F....k
    2f44:	038f5fe7 15929c95 bf6d7aeb 955259da     ._.......zm..YR.
    2f54:	d4be832d 587421d3 49e06929 8ec9c844     -....!tX)i.ID...
    2f64:	75c2896a f48e7978 99583e6b 27b971dd     j..uxy..k>X..q.'
    2f74:	bee14fb6 f088ad17 c920ac66 7dce3ab4     .O......f. ..:.}
    2f84:	63df4a18 e51a3182 97513360 62537f45     .J.c.1..`3Q.E.Sb
    2f94:	b16477e0 bb6bae84 fe81a01c f9082b94     .wd...k......+..
    2fa4:	70486858 8f45fd19 94de6c87 527bf8b7     XhHp..E..l....{R
    2fb4:	ab73d323 724b02e2 e31f8f57 6655ab2a     #.s...KrW...*.Uf
    2fc4:	b2eb2807 2fb5c203 86c57b9a d33708a5     .(...../.{....7.
    2fd4:	302887f2 23bfa5b2 02036aba ed16825c     ..(0...#.j..\...
    2fe4:	8acf1c2b a779b492 f307f2f0 4e69e2a1     +.....y.......iN
    2ff4:	65daf4cd 0605bed5 d134621f c4a6fe8a     ...e.....b4.....
    3004:	342e539d a2f355a0 058ae132 a4f6eb75     .S.4.U..2...u...
    3014:	0b83ec39 4060efaa 5e719f06 bd6e1051     9.....`@..q^Q.n.
    3024:	3e218af9 96dd063d dd3e05ae 4de6bd46     ..!>=.....>.F..M
    3034:	91548db5 71c45d05 0406d46f 605015ff     ..T..].qo.....P`
    3044:	1998fb24 d6bde997 894043cc 67d99e77     $........C@.w..g
    3054:	b0e842bd 07898b88 e7195b38 79c8eedb     .B......8[.....y
    3064:	a17c0a47 7c420fe9 f8841ec9 00000000     G.|...B|........
    3074:	09808683 322bed48 1e1170ac 6c5a724e     ....H.+2.p..NrZl
    3084:	fd0efffb 0f853856 3daed51e 362d3927     ....V8.....='9-6
    3094:	0a0fd964 685ca621 9b5b54d1 24362e3a     d...!.\h.T[.:.6$
    30a4:	0c0a67b1 9357e70f b4ee96d2 1b9b919e     .g....W.........
    30b4:	80c0c54f 61dc20a2 5a774b69 1c121a16     O.... .aiKwZ....
    30c4:	e293ba0a c0a02ae5 3c22e043 121b171d     .....*..C."<....
    30d4:	0e090d0b f28bc7ad 2db6a8b9 141ea9c8     ...........-....
    30e4:	57f11985 af75074c ee99ddbb a37f60fd     ...WL.u......`..
    30f4:	f701269f 5c72f5bc 44663bc5 5bfb7e34     .&....r\.;fD4~.[
    3104:	8b432976 cb23c6dc b6edfc68 b8e4f163     v)C...#.h...c...
    3114:	d731dcca 42638510 13972240 84c61120     ..1...cB@".. ...
    3124:	854a247d d2bb3df8 aef93211 c729a16d     }$J..=...2..m.).
    3134:	1d9e2f4b dcb230f3 0d8652ec 77c1e3d0     K/...0...R.....w
    3144:	2bb3166c a970b999 119448fa 47e96422     l..+..p..H.."d.G
    3154:	a8fc8cc4 a0f03f1a 567d2cd8 223390ef     .....?...,}V..3"
    3164:	87494ec7 d938d1c1 8ccaa2fe 98d40b36     .NI...8.....6...
    3174:	a6f581cf a57ade28 dab78e26 3fadbfa4     ....(.z.&......?
    3184:	2c3a9de4 5078920d 6a5fcc9b 547e4662     ..:,..xP.._jbF~T
    3194:	f68d13c2 90d8b8e8 2e39f75e 82c3aff5     ........^.9.....
    31a4:	9f5d80be 69d0937c 6fd52da9 cf2512b3     ..].|..i.-.o..%.
    31b4:	c8ac993b 10187da7 e89c636e db3bbb7b     ;....}..nc..{.;.
    31c4:	cd267809 6e5918f4 ec9ab701 834f9aa8     .x&...Yn......O.
    31d4:	e6956e65 aaffe67e 21bccf08 ef15e8e6     en..~......!....
    31e4:	bae79bd9 4a6f36ce ea9f09d4 29b07cd6     .....6oJ.....|.)
    31f4:	31a4b2af 2a3f2331 c6a59430 35a266c0     ...11#?*0....f.5
    3204:	744ebc37 fc82caa6 e090d0b0 33a7d815     7.Nt...........3
    3214:	f104984a 41ecdaf7 7fcd500e 1791f62f     J......A.P../...
    3224:	764dd68d 43efb04d ccaa4d54 e49604df     ..MvM..CTM......
    3234:	9ed1b5e3 4c6a881b c12c1fb8 4665517f     ......jL..,..QeF
    3244:	9d5eea04 018c355d fa877473 fb0b412e     ..^.]5..st...A..
    3254:	b3671d5a 92dbd252 e9105633 6dd64713     Z.g.R...3V...G.m
    3264:	9ad7618c 37a10c7a 59f8148e eb133c89     .a..z..7...Y.<..
    3274:	cea927ee b761c935 e11ce5ed 7a47b13c     .'..5.a.....<.Gz
    3284:	9cd2df59 55f2733f 1814ce79 73c737bf     Y...?s.Uy....7.s
    3294:	53f7cdea 5ffdaa5b df3d6f14 7844db86     ...S[.._.o=...Dx
    32a4:	caaff381 b968c43e 3824342c c2a3405f     ....>.h.,4$8_@..
    32b4:	161dc372 bce2250c 283c498b ff0d9541     r....%...I<(A...
    32c4:	39a80171 080cb3de d8b4e49c 6456c190     q..9..........Vd
    32d4:	7bcb8461 d532b670 486c5c74 d0b85742     a..{p.2.t\lHBW..
    32e4:	5051f4a7 537e4165 c31a17a4 963a275e     ..QPeA~S....^':.
    32f4:	cb3bab6b f11f9d45 abacfa58 934be303     k.;.E...X.....K.
    3304:	552030fa f6ad766d 9188cc76 25f5024c     .0 Umv..v...L..%
    3314:	fc4fe5d7 d7c52acb 80263544 8fb562a3     ..O..*..D5&..b..
    3324:	49deb15a 6725ba1b 9845ea0e e15dfec0     Z..I..%g..E...].
    3334:	02c32f75 12814cf0 a38d4697 c66bd3f9     u/...L...F....k.
    3344:	e7038f5f 9515929c ebbf6d7a da955259     _.......zm..YR..
    3354:	2dd4be83 d3587421 2949e069 448ec9c8     ...-!tX.i.I)...D
    3364:	6a75c289 78f48e79 6b99583e dd27b971     ..ujy..x>X.kq.'.
    3374:	b6bee14f 17f088ad 66c920ac b47dce3a     O........ .f:.}.
    3384:	1863df4a 82e51a31 60975133 4562537f     J.c.1...3Q.`.SbE
    3394:	e0b16477 84bb6bae 1cfe81a0 94f9082b     wd...k......+...
    33a4:	58704868 198f45fd 8794de6c b7527bf8     hHpX.E..l....{R.
    33b4:	23ab73d3 e2724b02 57e31f8f 2a6655ab     .s.#.Kr....W.Uf*
    33c4:	07b2eb28 032fb5c2 9a86c57b a5d33708     (...../.{....7..
    33d4:	f2302887 b223bfa5 ba02036a 5ced1682     .(0...#.j......\
    33e4:	2b8acf1c 92a779b4 f0f307f2 a14e69e2     ...+.y.......iN.
    33f4:	cd65daf4 d50605be 1fd13462 8ac4a6fe     ..e.....b4......
    3404:	9d342e53 a0a2f355 32058ae1 75a4f6eb     S.4.U......2...u
    3414:	390b83ec aa4060ef 065e719f 51bd6e10     ...9.`@..q^..n.Q
    3424:	f93e218a 3d96dd06 aedd3e05 464de6bd     .!>....=.>....MF
    3434:	b591548d 0571c45d 6f0406d4 ff605015     .T..].q....o.P`.
    3444:	241998fb 97d6bde9 cc894043 7767d99e     ...$....C@....gw
    3454:	bdb0e842 8807898b 38e7195b db79c8ee     B.......[..8..y.
    3464:	47a17c0a e97c420f c9f8841e 00000000     .|.G.B|.........
    3474:	83098086 48322bed ac1e1170 4e6c5a72     .....+2Hp...rZlN
    3484:	fbfd0eff 560f8538 1e3daed5 27362d39     ....8..V..=.9-6'
    3494:	640a0fd9 21685ca6 d19b5b54 3a24362e     ...d.\h!T[...6$:
    34a4:	b10c0a67 0f9357e7 d2b4ee96 9e1b9b91     g....W..........
    34b4:	4f80c0c5 a261dc20 695a774b 161c121a     ...O .a.KwZi....
    34c4:	0ae293ba e5c0a02a 433c22e0 1d121b17     ....*...."<C....
    34d4:	0b0e090d adf28bc7 b92db6a8 c8141ea9     ..........-.....
    34e4:	8557f119 4caf7507 bbee99dd fda37f60     ..W..u.L....`...
    34f4:	9ff70126 bc5c72f5 c544663b 345bfb7e     &....r\.;fD.~.[4
    3504:	768b4329 dccb23c6 68b6edfc 63b8e4f1     )C.v.#.....h...c
    3514:	cad731dc 10426385 40139722 2084c611     .1...cB."..@... 
    3524:	7d854a24 f8d2bb3d 11aef932 6dc729a1     $J.}=...2....).m
    3534:	4b1d9e2f f3dcb230 ec0d8652 d077c1e3     /..K0...R.....w.
    3544:	6c2bb316 99a970b9 fa119448 2247e964     ..+l.p..H...d.G"
    3554:	c4a8fc8c 1aa0f03f d8567d2c ef223390     ....?...,}V..3".
    3564:	c787494e c1d938d1 fe8ccaa2 3698d40b     NI...8.........6
    3574:	cfa6f581 28a57ade 26dab78e a43fadbf     .....z.(...&..?.
    3584:	e42c3a9d 0d507892 9b6a5fcc 62547e46     .:,..xP.._j.F~Tb
    3594:	c2f68d13 e890d8b8 5e2e39f7 f582c3af     .........9.^....
    35a4:	be9f5d80 7c69d093 a96fd52d b3cf2512     .]....i|-.o..%..
    35b4:	3bc8ac99 a710187d 6ee89c63 7bdb3bbb     ...;}...c..n.;.{
    35c4:	09cd2678 f46e5918 01ec9ab7 a8834f9a     x&...Yn......O..
    35d4:	65e6956e 7eaaffe6 0821bccf e6ef15e8     n..e...~..!.....
    35e4:	d9bae79b ce4a6f36 d4ea9f09 d629b07c     ....6oJ.....|.).
    35f4:	af31a4b2 312a3f23 30c6a594 c035a266     ..1.#?*1...0f.5.
    3604:	37744ebc a6fc82ca b0e090d0 1533a7d8     .Nt7..........3.
    3614:	4af10498 f741ecda 0e7fcd50 2f1791f6     ...J..A.P....../
    3624:	8d764dd6 4d43efb0 54ccaa4d dfe49604     .Mv...CMM..T....
    3634:	e39ed1b5 1b4c6a88 b8c12c1f 7f466551     .....jL..,..QeF.
    3644:	049d5eea 5d018c35 73fa8774 2efb0b41     .^..5..]t..sA...
    3654:	5ab3671d 5292dbd2 33e91056 136dd647     .g.Z...RV..3G.m.
    3664:	8c9ad761 7a37a10c 8e59f814 89eb133c     a.....7z..Y.<...
    3674:	eecea927 35b761c9 ede11ce5 3c7a47b1     '....a.5.....Gz<
    3684:	599cd2df 3f55f273 791814ce bf73c737     ...Ys.U?...y7.s.
    3694:	ea53f7cd 5b5ffdaa 14df3d6f 867844db     ..S..._[o=...Dx.
    36a4:	81caaff3 3eb968c4 2c382434 5fc2a340     .....h.>4$8,@.._
    36b4:	72161dc3 0cbce225 8b283c49 41ff0d95     ...r%...I<(....A
    36c4:	7139a801 de080cb3 9cd8b4e4 906456c1     ..9q.........Vd.
    36d4:	617bcb84 70d532b6 74486c5c 42d0b857     ..{a.2.p\lHtW..B
    36e4:	a75051f4 65537e41 a4c31a17 5e963a27     .QP.A~Se....':.^
    36f4:	6bcb3bab 45f11f9d 58abacfa 03934be3     .;.k...E...X.K..
    3704:	fa552030 6df6ad76 769188cc 4c25f502     0 U.v..m...v..%L
    3714:	d7fc4fe5 cbd7c52a 44802635 a38fb562     .O..*...5&.Db...
    3724:	5a49deb1 1b6725ba 0e9845ea c0e15dfe     ..IZ.%g..E...]..
    3734:	7502c32f f012814c 97a38d46 f9c66bd3     /..uL...F....k..
    3744:	5fe7038f 9c951592 7aebbf6d 59da9552     ..._....m..zR..Y
    3754:	832dd4be 21d35874 692949e0 c8448ec9     ..-.tX.!.I)i..D.
    3764:	896a75c2 7978f48e 3e6b9958 71dd27b9     .uj...xyX.k>.'.q
    3774:	4fb6bee1 ad17f088 ac66c920 3ab47dce     ...O.... .f..}.:
    3784:	4a1863df 3182e51a 33609751 7f456253     .c.J...1Q.`3SbE.
    3794:	77e0b164 ae84bb6b a01cfe81 2b94f908     d..wk..........+
    37a4:	68587048 fd198f45 6c8794de f8b7527b     HpXhE......l{R..
    37b4:	d323ab73 02e2724b 8f57e31f ab2a6655     s.#.Kr....W.Uf*.
    37c4:	2807b2eb c2032fb5 7b9a86c5 08a5d337     ...(./.....{7...
    37d4:	87f23028 a5b223bf 6aba0203 825ced16     (0...#.....j..\.
    37e4:	1c2b8acf b492a779 f2f0f307 e2a14e69     ..+.y.......iN..
    37f4:	f4cd65da bed50605 621fd134 fe8ac4a6     .e......4..b....
    3804:	539d342e 55a0a2f3 e132058a eb75a4f6     .4.S...U..2...u.
    3814:	ec390b83 efaa4060 9f065e71 1051bd6e     ..9.`@..q^..n.Q.
    3824:	8af93e21 063d96dd 05aedd3e bd464de6     !>....=.>....MF.
    3834:	8db59154 5d0571c4 d46f0406 15ff6050     T....q.]..o.P`..
    3844:	fb241998 e997d6bd 43cc8940 9e7767d9     ..$.....@..C.gw.
    3854:	42bdb0e8 8b880789 5b38e719 eedb79c8     ...B......8[.y..
    3864:	0a47a17c 0fe97c42 1ec9f884 00000000     |.G.B|..........
    3874:	86830980 ed48322b 70ac1e11 724e6c5a     ....+2H....pZlNr
    3884:	fffbfd0e 38560f85 d51e3dae 3927362d     ......V8.=..-6'9
    3894:	d9640a0f a621685c 54d19b5b 2e3a2436     ..d.\h!.[..T6$:.
    38a4:	67b10c0a e70f9357 96d2b4ee 919e1b9b     ...gW...........
    38b4:	c54f80c0 20a261dc 4b695a77 1a161c12     ..O..a. wZiK....
    38c4:	ba0ae293 2ae5c0a0 e0433c22 171d121b     .......*"<C.....
    38d4:	0d0b0e09 c7adf28b a8b92db6 a9c8141e     .........-......
    38e4:	198557f1 074caf75 ddbbee99 60fda37f     .W..u.L........`
    38f4:	269ff701 f5bc5c72 3bc54466 7e345bfb     ...&r\..fD.;.[4~
    3904:	29768b43 c6dccb23 fc68b6ed f163b8e4     C.v)#.....h...c.
    3914:	dccad731 85104263 22401397 112084c6     1...cB....@".. .
    3924:	247d854a 3df8d2bb 3211aef9 a16dc729     J.}$...=...2).m.
    3934:	2f4b1d9e 30f3dcb2 52ec0d86 e3d077c1     ..K/...0...R.w..
    3944:	166c2bb3 b999a970 48fa1194 642247e9     .+l.p......H.G"d
    3954:	8cc4a8fc 3f1aa0f0 2cd8567d 90ef2233     .......?}V.,3"..
    3964:	4ec78749 d1c1d938 a2fe8cca 0b3698d4     I..N8.........6.
    3974:	81cfa6f5 de28a57a 8e26dab7 bfa43fad     ....z.(...&..?..
    3984:	9de42c3a 920d5078 cc9b6a5f 4662547e     :,..xP.._j..~TbF
    3994:	13c2f68d b8e890d8 f75e2e39 aff582c3     ........9.^.....
    39a4:	80be9f5d 937c69d0 2da96fd5 12b3cf25     ]....i|..o.-%...
    39b4:	993bc8ac 7da71018 636ee89c bb7bdb3b     ..;....}..nc;.{.
    39c4:	7809cd26 18f46e59 b701ec9a 9aa8834f     &..xYn......O...
    39d4:	6e65e695 e67eaaff cf0821bc e8e6ef15     ..en..~..!......
    39e4:	9bd9bae7 36ce4a6f 09d4ea9f 7cd629b0     ....oJ.6.....).|
    39f4:	b2af31a4 23312a3f 9430c6a5 66c035a2     .1..?*1#..0..5.f
    3a04:	bc37744e caa6fc82 d0b0e090 d81533a7     Nt7..........3..
    3a14:	984af104 daf741ec 500e7fcd f62f1791     ..J..A.....P../.
    3a24:	d68d764d b04d43ef 4d54ccaa 04dfe496     Mv...CM...TM....
    3a34:	b5e39ed1 881b4c6a 1fb8c12c 517f4665     ....jL..,...eF.Q
    3a44:	ea049d5e 355d018c 7473fa87 412efb0b     ^.....]5..st...A
    3a54:	1d5ab367 d25292db 5633e910 47136dd6     g.Z...R...3V.m.G
    3a64:	618c9ad7 0c7a37a1 148e59f8 3c89eb13     ...a.7z..Y.....<
    3a74:	27eecea9 c935b761 e5ede11c b13c7a47     ...'a.5.....Gz<.
    3a84:	df599cd2 733f55f2 ce791814 37bf73c7     ..Y..U?s..y..s.7
    3a94:	cdea53f7 aa5b5ffd 6f14df3d db867844     .S..._[.=..oDx..
    3aa4:	f381caaf c43eb968 342c3824 405fc2a3     ....h.>.$8,4.._@
    3ab4:	c372161d 250cbce2 498b283c 9541ff0d     ..r....%<(.I..A.
    3ac4:	017139a8 b3de080c e49cd8b4 c1906456     .9q.........Vd..
    3ad4:	84617bcb b670d532 5c74486c 5742d0b8     .{a.2.p.lHt\..BW
    3ae4:	f4a75051 4165537e 17a4c31a 275e963a     QP..~SeA....:.^'
    3af4:	ab6bcb3b 9d45f11f fa58abac e303934b     ;.k...E...X.K...
    3b04:	30fa5520 766df6ad cc769188 024c25f5      U.0..mv..v..%L.
    3b14:	e5d7fc4f 2acbd7c5 35448026 62a38fb5     O......*&.D5...b
    3b24:	b15a49de ba1b6725 ea0e9845 fec0e15d     .IZ.%g..E...]...
    3b34:	2f7502c3 4cf01281 4697a38d d3f9c66b     ..u/...L...Fk...
    3b44:	8f5fe703 929c9515 6d7aebbf 5259da95     .._.......zm..YR
    3b54:	be832dd4 7421d358 e0692949 c9c8448e     .-..X.!tI)i..D..
    3b64:	c2896a75 8e7978f4 583e6b99 b971dd27     uj...xy..k>X'.q.
    3b74:	e14fb6be 88ad17f0 20ac66c9 ce3ab47d     ..O......f. }.:.
    3b84:	df4a1863 1a3182e5 51336097 537f4562     c.J...1..`3QbE.S
    3b94:	6477e0b1 6bae84bb 81a01cfe 082b94f9     ..wd...k......+.
    3ba4:	48685870 45fd198f de6c8794 7bf8b752     pXhH...E..l.R..{
    3bb4:	73d323ab 4b02e272 1f8f57e3 55ab2a66     .#.sr..K.W..f*.U
    3bc4:	eb2807b2 b5c2032f c57b9a86 3708a5d3     ..(./.....{....7
    3bd4:	2887f230 bfa5b223 036aba02 16825ced     0..(#.....j..\..
    3be4:	cf1c2b8a 79b492a7 07f2f0f3 69e2a14e     .+.....y....N..i
    3bf4:	daf4cd65 05bed506 34621fd1 a6fe8ac4     e.........b4....
    3c04:	2e539d34 f355a0a2 8ae13205 f6eb75a4     4.S...U..2...u..
    3c14:	83ec390b 60efaa40 719f065e 6e1051bd     .9..@..`^..q.Q.n
    3c24:	218af93e dd063d96 3e05aedd e6bd464d     >..!.=.....>MF..
    3c34:	548db591 c45d0571 06d46f04 5015ff60     ...Tq.]..o..`..P
    3c44:	98fb2419 bde997d6 4043cc89 d99e7767     .$........C@gw..
    3c54:	e842bdb0 898b8807 195b38e7 c8eedb79     ..B......8[.y...
    3c64:	7c0a47a1 420fe97c 841ec9f8 00000000     .G.||..B........
    3c74:	80868309 2bed4832 1170ac1e 5a724e6c     ....2H.+..p.lNrZ
    3c84:	0efffbfd 8538560f aed51e3d 2d392736     .....V8.=...6'9-
    3c94:	0fd9640a 5ca62168 5b54d19b 362e3a24     .d..h!.\..T[$:.6
    3ca4:	0a67b10c 57e70f93 ee96d2b4 9b919e1b     ..g....W........
    3cb4:	c0c54f80 dc20a261 774b695a 121a161c     .O..a. .ZiKw....
    3cc4:	93ba0ae2 a02ae5c0 22e0433c 1b171d12     ......*.<C."....
    3cd4:	090d0b0e 8bc7adf2 b6a8b92d 1ea9c814     ........-.......
    3ce4:	f1198557 75074caf 99ddbbee 7f60fda3     W....L.u......`.
    3cf4:	01269ff7 72f5bc5c 663bc544 fb7e345b     ..&.\..rD.;f[4~.
    3d04:	4329768b 23c6dccb edfc68b6 e4f163b8     .v)C...#.h...c..
    3d14:	31dccad7 63851042 97224013 c6112084     ...1B..c.@".. ..
    3d24:	4a247d85 bb3df8d2 f93211ae 29a16dc7     .}$J..=...2..m.)
    3d34:	9e2f4b1d b230f3dc 8652ec0d c1e3d077     .K/...0...R.w...
    3d44:	b3166c2b 70b999a9 9448fa11 e9642247     +l.....p..H.G"d.
    3d54:	fc8cc4a8 f03f1aa0 7d2cd856 3390ef22     ......?.V.,}"..3
    3d64:	494ec787 38d1c1d9 caa2fe8c d40b3698     ..NI...8.....6..
    3d74:	f581cfa6 7ade28a5 b78e26da adbfa43f     .....(.z.&..?...
    3d84:	3a9de42c 78920d50 5fcc9b6a 7e466254     ,..:P..xj.._TbF~
    3d94:	8d13c2f6 d8b8e890 39f75e2e c3aff582     .........^.9....
    3da4:	5d80be9f d0937c69 d52da96f 2512b3cf     ...]i|..o.-....%
    3db4:	ac993bc8 187da710 9c636ee8 3bbb7bdb     .;....}..nc..{.;
    3dc4:	267809cd 5918f46e 9ab701ec 4f9aa883     ..x&n..Y.......O
    3dd4:	956e65e6 ffe67eaa bccf0821 15e8e6ef     .en..~..!.......
    3de4:	e79bd9ba 6f36ce4a 9f09d4ea b07cd629     ....J.6o....).|.
    3df4:	a4b2af31 3f23312a a59430c6 a266c035     1...*1#?.0..5.f.
    3e04:	4ebc3774 82caa6fc 90d0b0e0 a7d81533     t7.N........3...
    3e14:	04984af1 ecdaf741 cd500e7f 91f62f17     .J..A.....P../..
    3e24:	4dd68d76 efb04d43 aa4d54cc 9604dfe4     v..MCM...TM.....
    3e34:	d1b5e39e 6a881b4c 2c1fb8c1 65517f46     ....L..j...,F.Qe
    3e44:	5eea049d 8c355d01 877473fa 0b412efb     ...^.]5..st...A.
    3e54:	671d5ab3 dbd25292 105633e9 d647136d     .Z.g.R...3V.m.G.
    3e64:	d7618c9a a10c7a37 f8148e59 133c89eb     ..a.7z..Y.....<.
    3e74:	a927eece 61c935b7 1ce5ede1 47b13c7a     ..'..5.a....z<.G
    3e84:	d2df599c f2733f55 14ce7918 c737bf73     .Y..U?s..y..s.7.
    3e94:	f7cdea53 fdaa5b5f 3d6f14df 44db8678     S..._[....o=x..D
    3ea4:	aff381ca 68c43eb9 24342c38 a3405fc2     .....>.h8,4$._@.
    3eb4:	1dc37216 e2250cbc 3c498b28 0d9541ff     .r....%.(.I<.A..
    3ec4:	a8017139 0cb3de08 b4e49cd8 56c19064     9q..........d..V
    3ed4:	cb84617b 32b670d5 6c5c7448 b85742d0     {a...p.2Ht\l.BW.

00003ee4 <Td4>:
    3ee4:	d56a0952 38a53630 9ea340bf fbd7f381     R.j.06.8.@......
    3ef4:	8239e37c 87ff2f9b 44438e34 cbe9dec4     |.9../..4.CD....
    3f04:	32947b54 3d23c2a6 0b954cee 4ec3fa42     T{.2..#=.L..B..N
    3f14:	66a12e08 b224d928 49a25b76 25d18b6d     ...f(.$.v[.Im..%
    3f24:	64f6f872 16986886 cc5ca4d4 92b6655d     r..d.h....\.]e..
    3f34:	5048706c dab9edfd 5746155e 849d8da7     lpHP....^.FW....
    3f44:	00abd890 0ad3bc8c 0558e4f7 0645b3b8     ..........X...E.
    3f54:	8f1e2cd0 020f3fca 03bdafc1 6b8a1301     .,...?.........k
    3f64:	4111913a eadc674f cecff297 73e6b4f0     :..AOg.........s
    3f74:	2274ac96 8535ade7 e837f9e2 6edf751c     ..t"..5...7..u.n
    3f84:	711af147 89c5291d 0e62b76f 1bbe18aa     G..q.)..o.b.....
    3f94:	4b3e56fc 2079d2c6 fec0db9a f45acd78     .V>K..y ....x.Z.
    3fa4:	33a8dd1f 31c70788 591012b1 5fec8027     ...3...1...Y'.._
    3fb4:	a97f5160 0d4ab519 9f7ae52d ef9cc993     `Q....J.-.z.....
    3fc4:	4d3be0a0 b0f52aae 3cbbebc8 61995383     ..;M.*.....<.S.a
    3fd4:	7e042b17 26d677ba 631469e1 7d0c2155     .+.~.w.&.i.cU!.}

00003fe4 <rcon>:
    3fe4:	01000000 02000000 04000000 08000000     ................
    3ff4:	10000000 20000000 40000000 80000000     ....... ...@....
    4004:	1b000000 36000000                       .......6

0000400c <__sf_fake_stderr>:
	...

0000402c <__sf_fake_stdin>:
	...

0000404c <__sf_fake_stdout>:
	...

0000406c <_init>:
    406c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    406e:	46c0      	nop			; (mov r8, r8)
    4070:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4072:	bc08      	pop	{r3}
    4074:	469e      	mov	lr, r3
    4076:	4770      	bx	lr

00004078 <__init_array_start>:
    4078:	00000121 	.word	0x00000121

0000407c <_fini>:
    407c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    407e:	46c0      	nop			; (mov r8, r8)
    4080:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4082:	bc08      	pop	{r3}
    4084:	469e      	mov	lr, r3
    4086:	4770      	bx	lr

00004088 <__fini_array_start>:
    4088:	000000f5 	.word	0x000000f5
