
BitCounting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007d4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000000  20000000  20000000  000107d4  2**0
                  CONTENTS
  2 .lpram        00000200  30000000  30000000  00020000  2**4
                  ALLOC
  3 .bss          000020e4  20000000  20000000  00020000  2**2
                  ALLOC
  4 .stack        00002004  200020e4  200020e4  00020000  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  000107d4  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000107fc  2**0
                  CONTENTS, READONLY
  7 .debug_info   00009c17  00000000  00000000  00010855  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001a9c  00000000  00000000  0001a46c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00001a31  00000000  00000000  0001bf08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000002b0  00000000  00000000  0001d939  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000298  00000000  00000000  0001dbe9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00019a84  00000000  00000000  0001de81  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00009683  00000000  00000000  00037905  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0008d6f9  00000000  00000000  00040f88  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000004cc  00000000  00000000  000ce684  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	e8 40 00 20 2d 01 00 00 29 01 00 00 29 01 00 00     .@. -...)...)...
	...
  2c:	29 01 00 00 00 00 00 00 00 00 00 00 29 01 00 00     )...........)...
  3c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
  4c:	29 01 00 00 29 01 00 00 cd 03 00 00 29 01 00 00     )...).......)...
  5c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
  6c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
  7c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
  8c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
  9c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
  ac:	29 01 00 00 00 00 00 00                             ).......

000000b4 <__do_global_dtors_aux>:
  b4:	b510      	push	{r4, lr}
  b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
  b8:	7823      	ldrb	r3, [r4, #0]
  ba:	2b00      	cmp	r3, #0
  bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
  be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
  c0:	2b00      	cmp	r3, #0
  c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
  c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
  c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
  c8:	bf00      	nop
  ca:	2301      	movs	r3, #1
  cc:	7023      	strb	r3, [r4, #0]
  ce:	bd10      	pop	{r4, pc}
  d0:	20000000 	.word	0x20000000
  d4:	00000000 	.word	0x00000000
  d8:	000007d4 	.word	0x000007d4

000000dc <frame_dummy>:
  dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
  de:	b510      	push	{r4, lr}
  e0:	2b00      	cmp	r3, #0
  e2:	d003      	beq.n	ec <frame_dummy+0x10>
  e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
  e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
  e8:	e000      	b.n	ec <frame_dummy+0x10>
  ea:	bf00      	nop
  ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
  ee:	6803      	ldr	r3, [r0, #0]
  f0:	2b00      	cmp	r3, #0
  f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
  f4:	bd10      	pop	{r4, pc}
  f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
  f8:	2b00      	cmp	r3, #0
  fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
  fc:	4798      	blx	r3
  fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
 100:	00000000 	.word	0x00000000
 104:	20000004 	.word	0x20000004
 108:	000007d4 	.word	0x000007d4
 10c:	000007d4 	.word	0x000007d4
 110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
 114:	b510      	push	{r4, lr}
	system_init();
 116:	4b02      	ldr	r3, [pc, #8]	; (120 <atmel_start_init+0xc>)
 118:	4798      	blx	r3
	gpio_init();
 11a:	4b02      	ldr	r3, [pc, #8]	; (124 <atmel_start_init+0x10>)
 11c:	4798      	blx	r3

}
 11e:	bd10      	pop	{r4, pc}
 120:	000001c5 	.word	0x000001c5
 124:	000001d1 	.word	0x000001d1

00000128 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 128:	e7fe      	b.n	128 <Dummy_Handler>
	...

0000012c <Reset_Handler>:
{
 12c:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
 12e:	4a1a      	ldr	r2, [pc, #104]	; (198 <Reset_Handler+0x6c>)
 130:	4b1a      	ldr	r3, [pc, #104]	; (19c <Reset_Handler+0x70>)
 132:	429a      	cmp	r2, r3
 134:	d011      	beq.n	15a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
 136:	001a      	movs	r2, r3
 138:	4b19      	ldr	r3, [pc, #100]	; (1a0 <Reset_Handler+0x74>)
 13a:	429a      	cmp	r2, r3
 13c:	d20d      	bcs.n	15a <Reset_Handler+0x2e>
 13e:	4a19      	ldr	r2, [pc, #100]	; (1a4 <Reset_Handler+0x78>)
 140:	3303      	adds	r3, #3
 142:	1a9b      	subs	r3, r3, r2
 144:	089b      	lsrs	r3, r3, #2
 146:	3301      	adds	r3, #1
 148:	009b      	lsls	r3, r3, #2
 14a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 14c:	4813      	ldr	r0, [pc, #76]	; (19c <Reset_Handler+0x70>)
 14e:	4912      	ldr	r1, [pc, #72]	; (198 <Reset_Handler+0x6c>)
 150:	588c      	ldr	r4, [r1, r2]
 152:	5084      	str	r4, [r0, r2]
 154:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
 156:	429a      	cmp	r2, r3
 158:	d1fa      	bne.n	150 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
 15a:	4a13      	ldr	r2, [pc, #76]	; (1a8 <Reset_Handler+0x7c>)
 15c:	4b13      	ldr	r3, [pc, #76]	; (1ac <Reset_Handler+0x80>)
 15e:	429a      	cmp	r2, r3
 160:	d20a      	bcs.n	178 <Reset_Handler+0x4c>
 162:	43d3      	mvns	r3, r2
 164:	4911      	ldr	r1, [pc, #68]	; (1ac <Reset_Handler+0x80>)
 166:	185b      	adds	r3, r3, r1
 168:	2103      	movs	r1, #3
 16a:	438b      	bics	r3, r1
 16c:	3304      	adds	r3, #4
 16e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
 170:	2100      	movs	r1, #0
 172:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
 174:	4293      	cmp	r3, r2
 176:	d1fc      	bne.n	172 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 178:	4a0d      	ldr	r2, [pc, #52]	; (1b0 <Reset_Handler+0x84>)
 17a:	21ff      	movs	r1, #255	; 0xff
 17c:	4b0d      	ldr	r3, [pc, #52]	; (1b4 <Reset_Handler+0x88>)
 17e:	438b      	bics	r3, r1
 180:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
 182:	4a0d      	ldr	r2, [pc, #52]	; (1b8 <Reset_Handler+0x8c>)
 184:	6853      	ldr	r3, [r2, #4]
 186:	397f      	subs	r1, #127	; 0x7f
 188:	430b      	orrs	r3, r1
 18a:	6053      	str	r3, [r2, #4]
        __libc_init_array();
 18c:	4b0b      	ldr	r3, [pc, #44]	; (1bc <Reset_Handler+0x90>)
 18e:	4798      	blx	r3
        main();
 190:	4b0b      	ldr	r3, [pc, #44]	; (1c0 <Reset_Handler+0x94>)
 192:	4798      	blx	r3
 194:	e7fe      	b.n	194 <Reset_Handler+0x68>
 196:	46c0      	nop			; (mov r8, r8)
 198:	000007d4 	.word	0x000007d4
 19c:	20000000 	.word	0x20000000
 1a0:	20000000 	.word	0x20000000
 1a4:	20000004 	.word	0x20000004
 1a8:	20000000 	.word	0x20000000
 1ac:	200020e4 	.word	0x200020e4
 1b0:	e000ed00 	.word	0xe000ed00
 1b4:	00000000 	.word	0x00000000
 1b8:	41004000 	.word	0x41004000
 1bc:	000006ad 	.word	0x000006ad
 1c0:	000004dd 	.word	0x000004dd

000001c4 <system_init>:
#include <peripheral_clk_config.h>
#include <utils.h>
#include <hal_init.h>

void system_init(void)
{
 1c4:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
 1c6:	4b01      	ldr	r3, [pc, #4]	; (1cc <system_init+0x8>)
 1c8:	4798      	blx	r3
	init_mcu();
}
 1ca:	bd10      	pop	{r4, pc}
 1cc:	000002a9 	.word	0x000002a9

000001d0 <gpio_init>:

#include "driver_init.h"
#include "gpio_init.h"

void gpio_init(void)
{
 1d0:	b570      	push	{r4, r5, r6, lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 1d2:	22c0      	movs	r2, #192	; 0xc0
 1d4:	05d2      	lsls	r2, r2, #23
 1d6:	2302      	movs	r3, #2
 1d8:	2194      	movs	r1, #148	; 0x94
 1da:	5053      	str	r3, [r2, r1]
 1dc:	2180      	movs	r1, #128	; 0x80
 1de:	0249      	lsls	r1, r1, #9
 1e0:	6151      	str	r1, [r2, #20]
 1e2:	2480      	movs	r4, #128	; 0x80
 1e4:	0364      	lsls	r4, r4, #13
 1e6:	6154      	str	r4, [r2, #20]
 1e8:	2080      	movs	r0, #128	; 0x80
 1ea:	0380      	lsls	r0, r0, #14
 1ec:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
 1ee:	2588      	movs	r5, #136	; 0x88
 1f0:	5153      	str	r3, [r2, r5]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 1f2:	4b15      	ldr	r3, [pc, #84]	; (248 <gpio_init+0x78>)
 1f4:	3520      	adds	r5, #32
 1f6:	4e15      	ldr	r6, [pc, #84]	; (24c <gpio_init+0x7c>)
 1f8:	515e      	str	r6, [r3, r5]
 1fa:	26c0      	movs	r6, #192	; 0xc0
 1fc:	0636      	lsls	r6, r6, #24
 1fe:	515e      	str	r6, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
 200:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 202:	2180      	movs	r1, #128	; 0x80
 204:	05c9      	lsls	r1, r1, #23
 206:	6299      	str	r1, [r3, #40]	; 0x28
 208:	4d11      	ldr	r5, [pc, #68]	; (250 <gpio_init+0x80>)
 20a:	629d      	str	r5, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
 20c:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 20e:	6299      	str	r1, [r3, #40]	; 0x28
 210:	4c10      	ldr	r4, [pc, #64]	; (254 <gpio_init+0x84>)
 212:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
 214:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 216:	6299      	str	r1, [r3, #40]	; 0x28
 218:	4a0f      	ldr	r2, [pc, #60]	; (258 <gpio_init+0x88>)
 21a:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 21c:	20c1      	movs	r0, #193	; 0xc1
 21e:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
 220:	2201      	movs	r2, #1
 222:	4391      	bics	r1, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 224:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 226:	3871      	subs	r0, #113	; 0x71
 228:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
 22a:	4391      	bics	r1, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 22c:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 22e:	3004      	adds	r0, #4
 230:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
 232:	4391      	bics	r1, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 234:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 236:	3001      	adds	r0, #1
 238:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
 23a:	4391      	bics	r1, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 23c:	5419      	strb	r1, [r3, r0]
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
#endif

	delay_ms(10);
 23e:	384b      	subs	r0, #75	; 0x4b
 240:	4b06      	ldr	r3, [pc, #24]	; (25c <gpio_init+0x8c>)
 242:	4798      	blx	r3
 244:	bd70      	pop	{r4, r5, r6, pc}
 246:	46c0      	nop			; (mov r8, r8)
 248:	40002800 	.word	0x40002800
 24c:	40000002 	.word	0x40000002
 250:	c0000001 	.word	0xc0000001
 254:	c0000010 	.word	0xc0000010
 258:	c0000020 	.word	0xc0000020
 25c:	00000261 	.word	0x00000261

00000260 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
 260:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
 262:	4b04      	ldr	r3, [pc, #16]	; (274 <delay_ms+0x14>)
 264:	681c      	ldr	r4, [r3, #0]
 266:	4b04      	ldr	r3, [pc, #16]	; (278 <delay_ms+0x18>)
 268:	4798      	blx	r3
 26a:	0001      	movs	r1, r0
 26c:	0020      	movs	r0, r4
 26e:	4b03      	ldr	r3, [pc, #12]	; (27c <delay_ms+0x1c>)
 270:	4798      	blx	r3
}
 272:	bd10      	pop	{r4, pc}
 274:	2000001c 	.word	0x2000001c
 278:	00000281 	.word	0x00000281
 27c:	000002a1 	.word	0x000002a1

00000280 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
 280:	b510      	push	{r4, lr}
 282:	0003      	movs	r3, r0
		return (ms * (freq / 10000) + 2) / 3 * 10;
 284:	20c8      	movs	r0, #200	; 0xc8
 286:	0040      	lsls	r0, r0, #1
 288:	4358      	muls	r0, r3
 28a:	3002      	adds	r0, #2
 28c:	2103      	movs	r1, #3
 28e:	4b03      	ldr	r3, [pc, #12]	; (29c <_get_cycles_for_ms+0x1c>)
 290:	4798      	blx	r3
 292:	0003      	movs	r3, r0
 294:	0080      	lsls	r0, r0, #2
 296:	18c0      	adds	r0, r0, r3
 298:	0040      	lsls	r0, r0, #1
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
 29a:	bd10      	pop	{r4, pc}
 29c:	00000561 	.word	0x00000561

000002a0 <_delay_cycles>:
{
#ifndef _UNIT_TEST_
	(void)hw;
	(void)cycles;
#if defined __GNUC__
	__asm(".syntax unified\n"
 2a0:	3901      	subs	r1, #1
 2a2:	d8fd      	bhi.n	2a0 <_delay_cycles>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#endif
#endif
}
 2a4:	4770      	bx	lr
	...

000002a8 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
 2a8:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
 2aa:	4b0d      	ldr	r3, [pc, #52]	; (2e0 <_init_chip+0x38>)
 2ac:	685a      	ldr	r2, [r3, #4]
 2ae:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_set_performance_level(2);
 2b0:	2002      	movs	r0, #2
 2b2:	4b0c      	ldr	r3, [pc, #48]	; (2e4 <_init_chip+0x3c>)
 2b4:	4798      	blx	r3

	_osc32kctrl_init_sources();
 2b6:	4b0c      	ldr	r3, [pc, #48]	; (2e8 <_init_chip+0x40>)
 2b8:	4798      	blx	r3
	_oscctrl_init_sources();
 2ba:	4b0c      	ldr	r3, [pc, #48]	; (2ec <_init_chip+0x44>)
 2bc:	4798      	blx	r3
	_mclk_init();
 2be:	4b0c      	ldr	r3, [pc, #48]	; (2f0 <_init_chip+0x48>)
 2c0:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
 2c2:	4b0c      	ldr	r3, [pc, #48]	; (2f4 <_init_chip+0x4c>)
 2c4:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
 2c6:	20ff      	movs	r0, #255	; 0xff
 2c8:	4b0b      	ldr	r3, [pc, #44]	; (2f8 <_init_chip+0x50>)
 2ca:	4798      	blx	r3
}

static inline void hri_mclk_set_AHBMASK_DMAC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
 2cc:	4a0b      	ldr	r2, [pc, #44]	; (2fc <_init_chip+0x54>)
 2ce:	6911      	ldr	r1, [r2, #16]
 2d0:	2380      	movs	r3, #128	; 0x80
 2d2:	011b      	lsls	r3, r3, #4
 2d4:	430b      	orrs	r3, r1
 2d6:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
 2d8:	4b09      	ldr	r3, [pc, #36]	; (300 <_init_chip+0x58>)
 2da:	4798      	blx	r3
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
 2dc:	bd10      	pop	{r4, pc}
 2de:	46c0      	nop			; (mov r8, r8)
 2e0:	41004000 	.word	0x41004000
 2e4:	000004b3 	.word	0x000004b3
 2e8:	00000461 	.word	0x00000461
 2ec:	00000479 	.word	0x00000479
 2f0:	0000044d 	.word	0x0000044d
 2f4:	000004b1 	.word	0x000004b1
 2f8:	00000429 	.word	0x00000429
 2fc:	40000400 	.word	0x40000400
 300:	00000305 	.word	0x00000305

00000304 <_dma_init>:

/**
 * \brief Initialize DMAC
 */
int32_t _dma_init(void)
{
 304:	b5f0      	push	{r4, r5, r6, r7, lr}
 306:	46ce      	mov	lr, r9
 308:	4647      	mov	r7, r8
 30a:	b580      	push	{r7, lr}
}

static inline void hri_dmac_clear_CTRL_DMAENABLE_bit(const void *const hw)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
 30c:	4b2a      	ldr	r3, [pc, #168]	; (3b8 <_dma_init+0xb4>)
 30e:	881a      	ldrh	r2, [r3, #0]
 310:	2102      	movs	r1, #2
 312:	438a      	bics	r2, r1
 314:	801a      	strh	r2, [r3, #0]
}

static inline void hri_dmac_clear_CTRL_CRCENABLE_bit(const void *const hw)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_CRCENABLE;
 316:	881a      	ldrh	r2, [r3, #0]
 318:	3102      	adds	r1, #2
 31a:	438a      	bics	r2, r1
 31c:	801a      	strh	r2, [r3, #0]
}

static inline void hri_dmac_set_CHCTRLA_SWRST_bit(const void *const hw)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->CHCTRLA.reg |= DMAC_CHCTRLA_SWRST;
 31e:	313c      	adds	r1, #60	; 0x3c
 320:	5c5a      	ldrb	r2, [r3, r1]
 322:	2001      	movs	r0, #1
 324:	4302      	orrs	r2, r0
 326:	545a      	strb	r2, [r3, r1]
	((Dmac *)hw)->CTRL.reg = data;
 328:	2100      	movs	r1, #0
 32a:	8019      	strh	r1, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
 32c:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
 32e:	4382      	bics	r2, r0
	((Dmac *)hw)->DBGCTRL.reg = tmp;
 330:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->QOSCTRL.reg = data;
 332:	2200      	movs	r2, #0
 334:	739a      	strb	r2, [r3, #14]
	((Dmac *)hw)->PRICTRL0.reg = data;
 336:	6159      	str	r1, [r3, #20]
	    DMAC,
	    DMAC_PRICTRL0_LVLPRI0(CONF_DMAC_LVLPRI0) | DMAC_PRICTRL0_LVLPRI1(CONF_DMAC_LVLPRI1)
	        | DMAC_PRICTRL0_LVLPRI2(CONF_DMAC_LVLPRI2) | DMAC_PRICTRL0_LVLPRI3(CONF_DMAC_LVLPRI3)
	        | (CONF_DMAC_RRLVLEN0 << DMAC_PRICTRL0_RRLVLEN0_Pos) | (CONF_DMAC_RRLVLEN1 << DMAC_PRICTRL0_RRLVLEN1_Pos)
	        | (CONF_DMAC_RRLVLEN2 << DMAC_PRICTRL0_RRLVLEN2_Pos) | (CONF_DMAC_RRLVLEN3 << DMAC_PRICTRL0_RRLVLEN3_Pos));
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
 338:	4a20      	ldr	r2, [pc, #128]	; (3bc <_dma_init+0xb8>)
	((Dmac *)hw)->BASEADDR.reg = data;
 33a:	635a      	str	r2, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
 33c:	4a20      	ldr	r2, [pc, #128]	; (3c0 <_dma_init+0xbc>)
	((Dmac *)hw)->WRBADDR.reg = data;
 33e:	639a      	str	r2, [r3, #56]	; 0x38
 340:	4920      	ldr	r1, [pc, #128]	; (3c4 <_dma_init+0xc0>)
 342:	2200      	movs	r2, #0
	((Dmac *)hw)->CHID.reg = data;
 344:	0018      	movs	r0, r3
 346:	233f      	movs	r3, #63	; 0x3f
 348:	469c      	mov	ip, r3

static inline void hri_dmac_write_CHCTRLA_RUNSTDBY_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	DMAC_CRITICAL_SECTION_ENTER();
	tmp = ((Dmac *)hw)->CHCTRLA.reg;
 34a:	2440      	movs	r4, #64	; 0x40

	for (; i < DMAC_CH_NUM; i++) {
		hri_dmac_write_CHID_reg(DMAC, i);

		hri_dmac_write_CHCTRLA_RUNSTDBY_bit(DMAC, _cfgs[i].ctrla & DMAC_CHCTRLA_RUNSTDBY);
 34c:	2701      	movs	r7, #1
}

static inline void hri_dmacdescriptor_write_BTCTRL_reg(const void *const hw, hri_dmacdescriptor_btctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
 34e:	4d1b      	ldr	r5, [pc, #108]	; (3bc <_dma_init+0xb8>)
}

static inline void hri_dmacdescriptor_write_DESCADDR_reg(const void *const hw, hri_dmacdescriptor_descaddr_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
 350:	2300      	movs	r3, #0
 352:	4699      	mov	r9, r3
 354:	b2d3      	uxtb	r3, r2
	((Dmac *)hw)->CHID.reg = data;
 356:	4666      	mov	r6, ip
 358:	5583      	strb	r3, [r0, r6]
	tmp = ((Dmac *)hw)->CHCTRLA.reg;
 35a:	5d03      	ldrb	r3, [r0, r4]
 35c:	4698      	mov	r8, r3
 35e:	780b      	ldrb	r3, [r1, #0]
 360:	099b      	lsrs	r3, r3, #6
 362:	403b      	ands	r3, r7
	tmp |= value << DMAC_CHCTRLA_RUNSTDBY_Pos;
 364:	019b      	lsls	r3, r3, #6
	tmp &= ~DMAC_CHCTRLA_RUNSTDBY;
 366:	4646      	mov	r6, r8
 368:	43a6      	bics	r6, r4
	tmp |= value << DMAC_CHCTRLA_RUNSTDBY_Pos;
 36a:	4333      	orrs	r3, r6
	((Dmac *)hw)->CHCTRLA.reg = tmp;
 36c:	5503      	strb	r3, [r0, r4]
	((Dmac *)hw)->CHCTRLB.reg = data;
 36e:	684b      	ldr	r3, [r1, #4]
 370:	6443      	str	r3, [r0, #68]	; 0x44

		hri_dmac_write_CHCTRLB_reg(DMAC, _cfgs[i].ctrlb);
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
 372:	890b      	ldrh	r3, [r1, #8]
 374:	4698      	mov	r8, r3
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
 376:	0113      	lsls	r3, r2, #4
 378:	4646      	mov	r6, r8
 37a:	535e      	strh	r6, [r3, r5]
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
 37c:	18eb      	adds	r3, r5, r3
 37e:	464e      	mov	r6, r9
 380:	60de      	str	r6, [r3, #12]
 382:	3201      	adds	r2, #1
 384:	310c      	adds	r1, #12
	for (; i < DMAC_CH_NUM; i++) {
 386:	2a10      	cmp	r2, #16
 388:	d1e4      	bne.n	354 <_dma_init+0x50>
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 38a:	4b0f      	ldr	r3, [pc, #60]	; (3c8 <_dma_init+0xc4>)
 38c:	3210      	adds	r2, #16
 38e:	2180      	movs	r1, #128	; 0x80
 390:	505a      	str	r2, [r3, r1]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 392:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 396:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 39a:	3101      	adds	r1, #1
 39c:	31ff      	adds	r1, #255	; 0xff
 39e:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 3a0:	601a      	str	r2, [r3, #0]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
 3a2:	4a05      	ldr	r2, [pc, #20]	; (3b8 <_dma_init+0xb4>)
 3a4:	8813      	ldrh	r3, [r2, #0]
 3a6:	397f      	subs	r1, #127	; 0x7f
 3a8:	39ff      	subs	r1, #255	; 0xff
 3aa:	430b      	orrs	r3, r1
 3ac:	8013      	strh	r3, [r2, #0]
	NVIC_EnableIRQ(DMAC_IRQn);

	hri_dmac_set_CTRL_DMAENABLE_bit(DMAC);

	return ERR_NONE;
}
 3ae:	2000      	movs	r0, #0
 3b0:	bc0c      	pop	{r2, r3}
 3b2:	4690      	mov	r8, r2
 3b4:	4699      	mov	r9, r3
 3b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 3b8:	44000400 	.word	0x44000400
 3bc:	30000000 	.word	0x30000000
 3c0:	30000100 	.word	0x30000100
 3c4:	000006f4 	.word	0x000006f4
 3c8:	e000e100 	.word	0xe000e100

000003cc <DMAC_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void DMAC_Handler(void)
{
 3cc:	b570      	push	{r4, r5, r6, lr}
	tmp = ((Dmac *)hw)->INTPEND.reg;
 3ce:	4a14      	ldr	r2, [pc, #80]	; (420 <DMAC_Handler+0x54>)
 3d0:	8c11      	ldrh	r1, [r2, #32]
	uint8_t               channel         = hri_dmac_read_INTPEND_ID_bf(DMAC);
 3d2:	230f      	movs	r3, #15
 3d4:	400b      	ands	r3, r1
	return ((Dmac *)hw)->CHID.reg;
 3d6:	243f      	movs	r4, #63	; 0x3f
 3d8:	5d15      	ldrb	r5, [r2, r4]
 3da:	b2ed      	uxtb	r5, r5
	struct _dma_resource *tmp_resource = &_resources[channel];
 3dc:	0058      	lsls	r0, r3, #1
 3de:	18c0      	adds	r0, r0, r3
 3e0:	0080      	lsls	r0, r0, #2
 3e2:	4910      	ldr	r1, [pc, #64]	; (424 <DMAC_Handler+0x58>)
 3e4:	1808      	adds	r0, r1, r0
	((Dmac *)hw)->CHID.reg = data;
 3e6:	5513      	strb	r3, [r2, r4]
	tmp = ((Dmac *)hw)->CHINTFLAG.reg;
 3e8:	214e      	movs	r1, #78	; 0x4e
 3ea:	5c51      	ldrb	r1, [r2, r1]
 3ec:	b2c9      	uxtb	r1, r1
	((Dmac *)hw)->CHID.reg = data;
 3ee:	5515      	strb	r5, [r2, r4]
	if (flag_status & DMAC_CHINTFLAG_TERR) {
 3f0:	07ca      	lsls	r2, r1, #31
 3f2:	d402      	bmi.n	3fa <DMAC_Handler+0x2e>
	} else if (flag_status & DMAC_CHINTFLAG_TCMPL) {
 3f4:	078a      	lsls	r2, r1, #30
 3f6:	d407      	bmi.n	408 <DMAC_Handler+0x3c>
	_dmac_handler();
}
 3f8:	bd70      	pop	{r4, r5, r6, pc}
	((Dmac *)hw)->CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
 3fa:	3c3e      	subs	r4, #62	; 0x3e
 3fc:	224e      	movs	r2, #78	; 0x4e
 3fe:	4908      	ldr	r1, [pc, #32]	; (420 <DMAC_Handler+0x54>)
 400:	548c      	strb	r4, [r1, r2]
		tmp_resource->dma_cb.error(tmp_resource);
 402:	6843      	ldr	r3, [r0, #4]
 404:	4798      	blx	r3
 406:	e7f7      	b.n	3f8 <DMAC_Handler+0x2c>
	((Dmac *)hw)->CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
 408:	2402      	movs	r4, #2
 40a:	224e      	movs	r2, #78	; 0x4e
 40c:	4904      	ldr	r1, [pc, #16]	; (420 <DMAC_Handler+0x54>)
 40e:	548c      	strb	r4, [r1, r2]
		tmp_resource->dma_cb.transfer_done(tmp_resource);
 410:	005a      	lsls	r2, r3, #1
 412:	18d3      	adds	r3, r2, r3
 414:	009b      	lsls	r3, r3, #2
 416:	4a03      	ldr	r2, [pc, #12]	; (424 <DMAC_Handler+0x58>)
 418:	589b      	ldr	r3, [r3, r2]
 41a:	4798      	blx	r3
}
 41c:	e7ec      	b.n	3f8 <DMAC_Handler+0x2c>
 41e:	46c0      	nop			; (mov r8, r8)
 420:	44000400 	.word	0x44000400
 424:	20000020 	.word	0x20000020

00000428 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
 428:	07c3      	lsls	r3, r0, #31
 42a:	d507      	bpl.n	43c <_gclk_init_generators_by_fref+0x14>
}

static inline void hri_gclk_write_GENCTRL_reg(const void *const hw, uint8_t index, hri_gclk_genctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENCTRL[index].reg = data;
 42c:	4a04      	ldr	r2, [pc, #16]	; (440 <_gclk_init_generators_by_fref+0x18>)
 42e:	4b05      	ldr	r3, [pc, #20]	; (444 <_gclk_init_generators_by_fref+0x1c>)
 430:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
 432:	0019      	movs	r1, r3
 434:	4a04      	ldr	r2, [pc, #16]	; (448 <_gclk_init_generators_by_fref+0x20>)
 436:	684b      	ldr	r3, [r1, #4]
 438:	4213      	tst	r3, r2
 43a:	d1fc      	bne.n	436 <_gclk_init_generators_by_fref+0xe>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
}
 43c:	4770      	bx	lr
 43e:	46c0      	nop			; (mov r8, r8)
 440:	00010106 	.word	0x00010106
 444:	40001800 	.word	0x40001800
 448:	000007fd 	.word	0x000007fd

0000044c <_mclk_init>:
	((Mclk *)hw)->BUPDIV.reg = data;
 44c:	4b03      	ldr	r3, [pc, #12]	; (45c <_mclk_init+0x10>)
 44e:	2208      	movs	r2, #8
 450:	719a      	strb	r2, [r3, #6]
	((Mclk *)hw)->LPDIV.reg = data;
 452:	3a04      	subs	r2, #4
 454:	715a      	strb	r2, [r3, #5]
	((Mclk *)hw)->CPUDIV.reg = data;
 456:	3a03      	subs	r2, #3
 458:	711a      	strb	r2, [r3, #4]
{
	void *hw = (void *)MCLK;
	hri_mclk_write_BUPDIV_reg(hw, MCLK_BUPDIV_BUPDIV(CONF_MCLK_BUPDIV));
	hri_mclk_write_LPDIV_reg(hw, MCLK_LPDIV_LPDIV(CONF_MCLK_LPDIV));
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
}
 45a:	4770      	bx	lr
 45c:	40000400 	.word	0x40000400

00000460 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
 460:	4b04      	ldr	r3, [pc, #16]	; (474 <_osc32kctrl_init_sources+0x14>)
 462:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSC32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSC32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
 464:	21f8      	movs	r1, #248	; 0xf8
 466:	0149      	lsls	r1, r1, #5
 468:	400a      	ands	r2, r1
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
 46a:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
 46c:	2201      	movs	r2, #1
 46e:	611a      	str	r2, [r3, #16]
		;
#endif
#endif
	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
 470:	4770      	bx	lr
 472:	46c0      	nop			; (mov r8, r8)
 474:	40001000 	.word	0x40001000

00000478 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_OSC16MCTRL_reg(const void *const hw, hri_oscctrl_osc16mctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC16MCTRL.reg = data;
 478:	2282      	movs	r2, #130	; 0x82
 47a:	4b0c      	ldr	r3, [pc, #48]	; (4ac <_oscctrl_init_sources+0x34>)
 47c:	751a      	strb	r2, [r3, #20]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
 47e:	0018      	movs	r0, r3
 480:	2138      	movs	r1, #56	; 0x38
 482:	3a80      	subs	r2, #128	; 0x80
 484:	5c43      	ldrb	r3, [r0, r1]
 486:	4213      	tst	r3, r2
 488:	d1fc      	bne.n	484 <_oscctrl_init_sources+0xc>
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC16MRDY) >> OSCCTRL_STATUS_OSC16MRDY_Pos;
 48a:	4908      	ldr	r1, [pc, #32]	; (4ac <_oscctrl_init_sources+0x34>)
#endif
#endif

#if CONF_OSC16M_CONFIG == 1
#if CONF_OSC16M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC16MRDY_bit(hw))
 48c:	2210      	movs	r2, #16
 48e:	68cb      	ldr	r3, [r1, #12]
 490:	421a      	tst	r2, r3
 492:	d0fc      	beq.n	48e <_oscctrl_init_sources+0x16>
	((Oscctrl *)hw)->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND;
 494:	4a05      	ldr	r2, [pc, #20]	; (4ac <_oscctrl_init_sources+0x34>)
 496:	7d13      	ldrb	r3, [r2, #20]
 498:	2180      	movs	r1, #128	; 0x80
 49a:	430b      	orrs	r3, r1
 49c:	7513      	strb	r3, [r2, #20]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
 49e:	0010      	movs	r0, r2
 4a0:	3948      	subs	r1, #72	; 0x48
 4a2:	220e      	movs	r2, #14
 4a4:	5c43      	ldrb	r3, [r0, r1]
 4a6:	4213      	tst	r3, r2
 4a8:	d1fc      	bne.n	4a4 <_oscctrl_init_sources+0x2c>
#if CONF_OSC16M_ONDEMAND == 1
	hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
 4aa:	4770      	bx	lr
 4ac:	40000c00 	.word	0x40000c00

000004b0 <_oscctrl_init_referenced_generators>:
#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
		;
#endif
	(void)hw, (void)tmp;
}
 4b0:	4770      	bx	lr

000004b2 <_set_performance_level>:
}

static inline hri_pm_plcfg_reg_t hri_pm_get_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Pm *)hw)->PLCFG.reg;
 4b2:	2380      	movs	r3, #128	; 0x80
 4b4:	05db      	lsls	r3, r3, #23
 4b6:	789b      	ldrb	r3, [r3, #2]
/**
 * \brief Set performance level
 */
void _set_performance_level(const uint8_t level)
{
	if (hri_pm_get_PLCFG_PLSEL_bf(PM, PM_PLCFG_PLSEL_Msk) != level) {
 4b8:	2203      	movs	r2, #3
 4ba:	4013      	ands	r3, r2
 4bc:	4298      	cmp	r0, r3
 4be:	d00c      	beq.n	4da <_set_performance_level+0x28>
	((Pm *)hw)->INTFLAG.reg = mask;
 4c0:	2280      	movs	r2, #128	; 0x80
 4c2:	05d2      	lsls	r2, r2, #23
 4c4:	23ff      	movs	r3, #255	; 0xff
 4c6:	7193      	strb	r3, [r2, #6]

static inline void hri_pm_write_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t data)
{
	uint8_t tmp;
	PM_CRITICAL_SECTION_ENTER();
	tmp = ((Pm *)hw)->PLCFG.reg;
 4c8:	7893      	ldrb	r3, [r2, #2]
	tmp &= ~PM_PLCFG_PLSEL_Msk;
 4ca:	2103      	movs	r1, #3
 4cc:	438b      	bics	r3, r1
	tmp |= PM_PLCFG_PLSEL(data);
 4ce:	4008      	ands	r0, r1
 4d0:	4318      	orrs	r0, r3
	((Pm *)hw)->PLCFG.reg = tmp;
 4d2:	7090      	strb	r0, [r2, #2]
	return ((Pm *)hw)->INTFLAG.reg;
 4d4:	7993      	ldrb	r3, [r2, #6]
		hri_pm_clear_INTFLAG_reg(PM, 0xFF);
		hri_pm_write_PLCFG_PLSEL_bf(PM, level);
		while (!hri_pm_read_INTFLAG_reg(PM))
 4d6:	2b00      	cmp	r3, #0
 4d8:	d0fc      	beq.n	4d4 <_set_performance_level+0x22>
			;
	}
}
 4da:	4770      	bx	lr

000004dc <main>:
// Allocate input.
//unsigned int *input = malloc(sizeof(unsigned int) * NUM_UINTS);
unsigned int input[NUM_UINTS];

int main(void)
{
 4dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 4de:	4b1a      	ldr	r3, [pc, #104]	; (548 <main+0x6c>)
 4e0:	4798      	blx	r3
 4e2:	4c1a      	ldr	r4, [pc, #104]	; (54c <main+0x70>)
 4e4:	0022      	movs	r2, r4

	// Fill with sequential data.
	for (size_t n = 0; n < NUM_UINTS; n++) {
 4e6:	2300      	movs	r3, #0
 4e8:	2180      	movs	r1, #128	; 0x80
 4ea:	0109      	lsls	r1, r1, #4
		input[n] = n;
 4ec:	c208      	stmia	r2!, {r3}
	for (size_t n = 0; n < NUM_UINTS; n++) {
 4ee:	3301      	adds	r3, #1
 4f0:	428b      	cmp	r3, r1
 4f2:	d1fb      	bne.n	4ec <main+0x10>
	}

	static int result = 0;
	
	START_MEASURE(DGI_GPIO2);
 4f4:	2002      	movs	r0, #2
 4f6:	4b16      	ldr	r3, [pc, #88]	; (550 <main+0x74>)
 4f8:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
 4fa:	2280      	movs	r2, #128	; 0x80
 4fc:	0352      	lsls	r2, r2, #13
 4fe:	23c0      	movs	r3, #192	; 0xc0
 500:	05db      	lsls	r3, r3, #23
 502:	619a      	str	r2, [r3, #24]
 504:	4b13      	ldr	r3, [pc, #76]	; (554 <main+0x78>)
 506:	681d      	ldr	r5, [r3, #0]
 508:	4f13      	ldr	r7, [pc, #76]	; (558 <main+0x7c>)
	// Add up bit count.
	for (size_t n = 0; n < NUM_UINTS; n++) {
		result += __builtin_popcount(input[n]);
 50a:	4e14      	ldr	r6, [pc, #80]	; (55c <main+0x80>)
 50c:	cc01      	ldmia	r4!, {r0}
 50e:	47b0      	blx	r6
 510:	182d      	adds	r5, r5, r0
	for (size_t n = 0; n < NUM_UINTS; n++) {
 512:	42bc      	cmp	r4, r7
 514:	d1fa      	bne.n	50c <main+0x30>
 516:	4b0f      	ldr	r3, [pc, #60]	; (554 <main+0x78>)
 518:	601d      	str	r5, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 51a:	24c0      	movs	r4, #192	; 0xc0
 51c:	05e4      	lsls	r4, r4, #23
 51e:	2580      	movs	r5, #128	; 0x80
 520:	036d      	lsls	r5, r5, #13
 522:	6165      	str	r5, [r4, #20]
	}
	STOP_MEASURE(DGI_GPIO2);
 524:	2002      	movs	r0, #2
 526:	4e0a      	ldr	r6, [pc, #40]	; (550 <main+0x74>)
 528:	47b0      	blx	r6

	END_MEASUREMENT;
 52a:	200a      	movs	r0, #10
 52c:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
 52e:	2202      	movs	r2, #2
 530:	2398      	movs	r3, #152	; 0x98
 532:	50e2      	str	r2, [r4, r3]
 534:	2380      	movs	r3, #128	; 0x80
 536:	025b      	lsls	r3, r3, #9
 538:	61a3      	str	r3, [r4, #24]
 53a:	61a5      	str	r5, [r4, #24]
 53c:	2380      	movs	r3, #128	; 0x80
 53e:	039b      	lsls	r3, r3, #14
 540:	61a3      	str	r3, [r4, #24]
	
	return 0;
}
 542:	2000      	movs	r0, #0
 544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 546:	46c0      	nop			; (mov r8, r8)
 548:	00000115 	.word	0x00000115
 54c:	200000e4 	.word	0x200000e4
 550:	00000261 	.word	0x00000261
 554:	200000e0 	.word	0x200000e0
 558:	200020e4 	.word	0x200020e4
 55c:	00000679 	.word	0x00000679

00000560 <__udivsi3>:
 560:	2200      	movs	r2, #0
 562:	0843      	lsrs	r3, r0, #1
 564:	428b      	cmp	r3, r1
 566:	d374      	bcc.n	652 <__udivsi3+0xf2>
 568:	0903      	lsrs	r3, r0, #4
 56a:	428b      	cmp	r3, r1
 56c:	d35f      	bcc.n	62e <__udivsi3+0xce>
 56e:	0a03      	lsrs	r3, r0, #8
 570:	428b      	cmp	r3, r1
 572:	d344      	bcc.n	5fe <__udivsi3+0x9e>
 574:	0b03      	lsrs	r3, r0, #12
 576:	428b      	cmp	r3, r1
 578:	d328      	bcc.n	5cc <__udivsi3+0x6c>
 57a:	0c03      	lsrs	r3, r0, #16
 57c:	428b      	cmp	r3, r1
 57e:	d30d      	bcc.n	59c <__udivsi3+0x3c>
 580:	22ff      	movs	r2, #255	; 0xff
 582:	0209      	lsls	r1, r1, #8
 584:	ba12      	rev	r2, r2
 586:	0c03      	lsrs	r3, r0, #16
 588:	428b      	cmp	r3, r1
 58a:	d302      	bcc.n	592 <__udivsi3+0x32>
 58c:	1212      	asrs	r2, r2, #8
 58e:	0209      	lsls	r1, r1, #8
 590:	d065      	beq.n	65e <__udivsi3+0xfe>
 592:	0b03      	lsrs	r3, r0, #12
 594:	428b      	cmp	r3, r1
 596:	d319      	bcc.n	5cc <__udivsi3+0x6c>
 598:	e000      	b.n	59c <__udivsi3+0x3c>
 59a:	0a09      	lsrs	r1, r1, #8
 59c:	0bc3      	lsrs	r3, r0, #15
 59e:	428b      	cmp	r3, r1
 5a0:	d301      	bcc.n	5a6 <__udivsi3+0x46>
 5a2:	03cb      	lsls	r3, r1, #15
 5a4:	1ac0      	subs	r0, r0, r3
 5a6:	4152      	adcs	r2, r2
 5a8:	0b83      	lsrs	r3, r0, #14
 5aa:	428b      	cmp	r3, r1
 5ac:	d301      	bcc.n	5b2 <__udivsi3+0x52>
 5ae:	038b      	lsls	r3, r1, #14
 5b0:	1ac0      	subs	r0, r0, r3
 5b2:	4152      	adcs	r2, r2
 5b4:	0b43      	lsrs	r3, r0, #13
 5b6:	428b      	cmp	r3, r1
 5b8:	d301      	bcc.n	5be <__udivsi3+0x5e>
 5ba:	034b      	lsls	r3, r1, #13
 5bc:	1ac0      	subs	r0, r0, r3
 5be:	4152      	adcs	r2, r2
 5c0:	0b03      	lsrs	r3, r0, #12
 5c2:	428b      	cmp	r3, r1
 5c4:	d301      	bcc.n	5ca <__udivsi3+0x6a>
 5c6:	030b      	lsls	r3, r1, #12
 5c8:	1ac0      	subs	r0, r0, r3
 5ca:	4152      	adcs	r2, r2
 5cc:	0ac3      	lsrs	r3, r0, #11
 5ce:	428b      	cmp	r3, r1
 5d0:	d301      	bcc.n	5d6 <__udivsi3+0x76>
 5d2:	02cb      	lsls	r3, r1, #11
 5d4:	1ac0      	subs	r0, r0, r3
 5d6:	4152      	adcs	r2, r2
 5d8:	0a83      	lsrs	r3, r0, #10
 5da:	428b      	cmp	r3, r1
 5dc:	d301      	bcc.n	5e2 <__udivsi3+0x82>
 5de:	028b      	lsls	r3, r1, #10
 5e0:	1ac0      	subs	r0, r0, r3
 5e2:	4152      	adcs	r2, r2
 5e4:	0a43      	lsrs	r3, r0, #9
 5e6:	428b      	cmp	r3, r1
 5e8:	d301      	bcc.n	5ee <__udivsi3+0x8e>
 5ea:	024b      	lsls	r3, r1, #9
 5ec:	1ac0      	subs	r0, r0, r3
 5ee:	4152      	adcs	r2, r2
 5f0:	0a03      	lsrs	r3, r0, #8
 5f2:	428b      	cmp	r3, r1
 5f4:	d301      	bcc.n	5fa <__udivsi3+0x9a>
 5f6:	020b      	lsls	r3, r1, #8
 5f8:	1ac0      	subs	r0, r0, r3
 5fa:	4152      	adcs	r2, r2
 5fc:	d2cd      	bcs.n	59a <__udivsi3+0x3a>
 5fe:	09c3      	lsrs	r3, r0, #7
 600:	428b      	cmp	r3, r1
 602:	d301      	bcc.n	608 <__udivsi3+0xa8>
 604:	01cb      	lsls	r3, r1, #7
 606:	1ac0      	subs	r0, r0, r3
 608:	4152      	adcs	r2, r2
 60a:	0983      	lsrs	r3, r0, #6
 60c:	428b      	cmp	r3, r1
 60e:	d301      	bcc.n	614 <__udivsi3+0xb4>
 610:	018b      	lsls	r3, r1, #6
 612:	1ac0      	subs	r0, r0, r3
 614:	4152      	adcs	r2, r2
 616:	0943      	lsrs	r3, r0, #5
 618:	428b      	cmp	r3, r1
 61a:	d301      	bcc.n	620 <__udivsi3+0xc0>
 61c:	014b      	lsls	r3, r1, #5
 61e:	1ac0      	subs	r0, r0, r3
 620:	4152      	adcs	r2, r2
 622:	0903      	lsrs	r3, r0, #4
 624:	428b      	cmp	r3, r1
 626:	d301      	bcc.n	62c <__udivsi3+0xcc>
 628:	010b      	lsls	r3, r1, #4
 62a:	1ac0      	subs	r0, r0, r3
 62c:	4152      	adcs	r2, r2
 62e:	08c3      	lsrs	r3, r0, #3
 630:	428b      	cmp	r3, r1
 632:	d301      	bcc.n	638 <__udivsi3+0xd8>
 634:	00cb      	lsls	r3, r1, #3
 636:	1ac0      	subs	r0, r0, r3
 638:	4152      	adcs	r2, r2
 63a:	0883      	lsrs	r3, r0, #2
 63c:	428b      	cmp	r3, r1
 63e:	d301      	bcc.n	644 <__udivsi3+0xe4>
 640:	008b      	lsls	r3, r1, #2
 642:	1ac0      	subs	r0, r0, r3
 644:	4152      	adcs	r2, r2
 646:	0843      	lsrs	r3, r0, #1
 648:	428b      	cmp	r3, r1
 64a:	d301      	bcc.n	650 <__udivsi3+0xf0>
 64c:	004b      	lsls	r3, r1, #1
 64e:	1ac0      	subs	r0, r0, r3
 650:	4152      	adcs	r2, r2
 652:	1a41      	subs	r1, r0, r1
 654:	d200      	bcs.n	658 <__udivsi3+0xf8>
 656:	4601      	mov	r1, r0
 658:	4152      	adcs	r2, r2
 65a:	4610      	mov	r0, r2
 65c:	4770      	bx	lr
 65e:	e7ff      	b.n	660 <__udivsi3+0x100>
 660:	b501      	push	{r0, lr}
 662:	2000      	movs	r0, #0
 664:	f000 f806 	bl	674 <__aeabi_idiv0>
 668:	bd02      	pop	{r1, pc}
 66a:	46c0      	nop			; (mov r8, r8)

0000066c <__aeabi_uidivmod>:
 66c:	2900      	cmp	r1, #0
 66e:	d0f7      	beq.n	660 <__udivsi3+0x100>
 670:	e776      	b.n	560 <__udivsi3>
 672:	4770      	bx	lr

00000674 <__aeabi_idiv0>:
 674:	4770      	bx	lr
 676:	46c0      	nop			; (mov r8, r8)

00000678 <__popcountsi2>:
 678:	4a09      	ldr	r2, [pc, #36]	; (6a0 <__popcountsi2+0x28>)
 67a:	0843      	lsrs	r3, r0, #1
 67c:	4013      	ands	r3, r2
 67e:	1ac0      	subs	r0, r0, r3
 680:	0003      	movs	r3, r0
 682:	4a08      	ldr	r2, [pc, #32]	; (6a4 <__popcountsi2+0x2c>)
 684:	0880      	lsrs	r0, r0, #2
 686:	4010      	ands	r0, r2
 688:	4013      	ands	r3, r2
 68a:	181b      	adds	r3, r3, r0
 68c:	0918      	lsrs	r0, r3, #4
 68e:	18c0      	adds	r0, r0, r3
 690:	4b05      	ldr	r3, [pc, #20]	; (6a8 <__popcountsi2+0x30>)
 692:	4003      	ands	r3, r0
 694:	0218      	lsls	r0, r3, #8
 696:	18c0      	adds	r0, r0, r3
 698:	0403      	lsls	r3, r0, #16
 69a:	18c0      	adds	r0, r0, r3
 69c:	0e00      	lsrs	r0, r0, #24
 69e:	4770      	bx	lr
 6a0:	55555555 	.word	0x55555555
 6a4:	33333333 	.word	0x33333333
 6a8:	0f0f0f0f 	.word	0x0f0f0f0f

000006ac <__libc_init_array>:
 6ac:	b570      	push	{r4, r5, r6, lr}
 6ae:	2600      	movs	r6, #0
 6b0:	4d0c      	ldr	r5, [pc, #48]	; (6e4 <__libc_init_array+0x38>)
 6b2:	4c0d      	ldr	r4, [pc, #52]	; (6e8 <__libc_init_array+0x3c>)
 6b4:	1b64      	subs	r4, r4, r5
 6b6:	10a4      	asrs	r4, r4, #2
 6b8:	42a6      	cmp	r6, r4
 6ba:	d109      	bne.n	6d0 <__libc_init_array+0x24>
 6bc:	2600      	movs	r6, #0
 6be:	f000 f879 	bl	7b4 <_init>
 6c2:	4d0a      	ldr	r5, [pc, #40]	; (6ec <__libc_init_array+0x40>)
 6c4:	4c0a      	ldr	r4, [pc, #40]	; (6f0 <__libc_init_array+0x44>)
 6c6:	1b64      	subs	r4, r4, r5
 6c8:	10a4      	asrs	r4, r4, #2
 6ca:	42a6      	cmp	r6, r4
 6cc:	d105      	bne.n	6da <__libc_init_array+0x2e>
 6ce:	bd70      	pop	{r4, r5, r6, pc}
 6d0:	00b3      	lsls	r3, r6, #2
 6d2:	58eb      	ldr	r3, [r5, r3]
 6d4:	4798      	blx	r3
 6d6:	3601      	adds	r6, #1
 6d8:	e7ee      	b.n	6b8 <__libc_init_array+0xc>
 6da:	00b3      	lsls	r3, r6, #2
 6dc:	58eb      	ldr	r3, [r5, r3]
 6de:	4798      	blx	r3
 6e0:	3601      	adds	r6, #1
 6e2:	e7f2      	b.n	6ca <__libc_init_array+0x1e>
 6e4:	000007c0 	.word	0x000007c0
 6e8:	000007c0 	.word	0x000007c0
 6ec:	000007c0 	.word	0x000007c0
 6f0:	000007c4 	.word	0x000007c4

000006f4 <_cfgs>:
	...

000007b4 <_init>:
 7b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 7b6:	46c0      	nop			; (mov r8, r8)
 7b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 7ba:	bc08      	pop	{r3}
 7bc:	469e      	mov	lr, r3
 7be:	4770      	bx	lr

000007c0 <__init_array_start>:
 7c0:	000000dd 	.word	0x000000dd

000007c4 <_fini>:
 7c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 7c6:	46c0      	nop			; (mov r8, r8)
 7c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 7ca:	bc08      	pop	{r3}
 7cc:	469e      	mov	lr, r3
 7ce:	4770      	bx	lr

000007d0 <__fini_array_start>:
 7d0:	000000b5 	.word	0x000000b5
