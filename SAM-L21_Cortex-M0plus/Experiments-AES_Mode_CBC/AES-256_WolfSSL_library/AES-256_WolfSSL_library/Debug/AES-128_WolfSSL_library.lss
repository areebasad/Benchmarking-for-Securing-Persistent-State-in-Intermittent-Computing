
AES-128_WolfSSL_library.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000042cc  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000084  20000000  000042cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  00020084  2**0
                  CONTENTS
  3 .bss          00001854  20000084  00004350  00020084  2**2
                  ALLOC
  4 .stack        00002000  200018d8  00005ba4  00020084  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001e4cd  00000000  00000000  00020105  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003147  00000000  00000000  0003e5d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000e7e3  00000000  00000000  00041719  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000a10  00000000  00000000  0004fefc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001078  00000000  00000000  0005090c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001b839  00000000  00000000  00051984  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000fe42  00000000  00000000  0006d1bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00093505  00000000  00000000  0007cfff  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001c54  00000000  00000000  00110504  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	d8 38 00 20 2d 01 00 00 29 01 00 00 29 01 00 00     .8. -...)...)...
	...
      2c:	29 01 00 00 00 00 00 00 00 00 00 00 29 01 00 00     )...........)...
      3c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      4c:	29 01 00 00 8d 07 00 00 29 01 00 00 29 01 00 00     ).......)...)...
      5c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      6c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      7c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      8c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      9c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      ac:	29 01 00 00 00 00 00 00                             ).......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000084 	.word	0x20000084
      d4:	00000000 	.word	0x00000000
      d8:	000042cc 	.word	0x000042cc

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000088 	.word	0x20000088
     108:	000042cc 	.word	0x000042cc
     10c:	000042cc 	.word	0x000042cc
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     114:	b510      	push	{r4, lr}
	system_init();
     116:	4b02      	ldr	r3, [pc, #8]	; (120 <atmel_start_init+0xc>)
     118:	4798      	blx	r3
	
	gpio_init();
     11a:	4b02      	ldr	r3, [pc, #8]	; (124 <atmel_start_init+0x10>)
     11c:	4798      	blx	r3

}
     11e:	bd10      	pop	{r4, pc}
     120:	0000029d 	.word	0x0000029d
     124:	000002f1 	.word	0x000002f1

00000128 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     128:	e7fe      	b.n	128 <Dummy_Handler>
	...

0000012c <Reset_Handler>:
{
     12c:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     12e:	4a1a      	ldr	r2, [pc, #104]	; (198 <Reset_Handler+0x6c>)
     130:	4b1a      	ldr	r3, [pc, #104]	; (19c <Reset_Handler+0x70>)
     132:	429a      	cmp	r2, r3
     134:	d011      	beq.n	15a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     136:	001a      	movs	r2, r3
     138:	4b19      	ldr	r3, [pc, #100]	; (1a0 <Reset_Handler+0x74>)
     13a:	429a      	cmp	r2, r3
     13c:	d20d      	bcs.n	15a <Reset_Handler+0x2e>
     13e:	4a19      	ldr	r2, [pc, #100]	; (1a4 <Reset_Handler+0x78>)
     140:	3303      	adds	r3, #3
     142:	1a9b      	subs	r3, r3, r2
     144:	089b      	lsrs	r3, r3, #2
     146:	3301      	adds	r3, #1
     148:	009b      	lsls	r3, r3, #2
     14a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     14c:	4813      	ldr	r0, [pc, #76]	; (19c <Reset_Handler+0x70>)
     14e:	4912      	ldr	r1, [pc, #72]	; (198 <Reset_Handler+0x6c>)
     150:	588c      	ldr	r4, [r1, r2]
     152:	5084      	str	r4, [r0, r2]
     154:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     156:	429a      	cmp	r2, r3
     158:	d1fa      	bne.n	150 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     15a:	4a13      	ldr	r2, [pc, #76]	; (1a8 <Reset_Handler+0x7c>)
     15c:	4b13      	ldr	r3, [pc, #76]	; (1ac <Reset_Handler+0x80>)
     15e:	429a      	cmp	r2, r3
     160:	d20a      	bcs.n	178 <Reset_Handler+0x4c>
     162:	43d3      	mvns	r3, r2
     164:	4911      	ldr	r1, [pc, #68]	; (1ac <Reset_Handler+0x80>)
     166:	185b      	adds	r3, r3, r1
     168:	2103      	movs	r1, #3
     16a:	438b      	bics	r3, r1
     16c:	3304      	adds	r3, #4
     16e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     170:	2100      	movs	r1, #0
     172:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     174:	4293      	cmp	r3, r2
     176:	d1fc      	bne.n	172 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     178:	4a0d      	ldr	r2, [pc, #52]	; (1b0 <Reset_Handler+0x84>)
     17a:	21ff      	movs	r1, #255	; 0xff
     17c:	4b0d      	ldr	r3, [pc, #52]	; (1b4 <Reset_Handler+0x88>)
     17e:	438b      	bics	r3, r1
     180:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
     182:	4a0d      	ldr	r2, [pc, #52]	; (1b8 <Reset_Handler+0x8c>)
     184:	6853      	ldr	r3, [r2, #4]
     186:	397f      	subs	r1, #127	; 0x7f
     188:	430b      	orrs	r3, r1
     18a:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     18c:	4b0b      	ldr	r3, [pc, #44]	; (1bc <Reset_Handler+0x90>)
     18e:	4798      	blx	r3
        main();
     190:	4b0b      	ldr	r3, [pc, #44]	; (1c0 <Reset_Handler+0x94>)
     192:	4798      	blx	r3
     194:	e7fe      	b.n	194 <Reset_Handler+0x68>
     196:	46c0      	nop			; (mov r8, r8)
     198:	000042cc 	.word	0x000042cc
     19c:	20000000 	.word	0x20000000
     1a0:	20000084 	.word	0x20000084
     1a4:	20000004 	.word	0x20000004
     1a8:	20000084 	.word	0x20000084
     1ac:	200018d8 	.word	0x200018d8
     1b0:	e000ed00 	.word	0xe000ed00
     1b4:	00000000 	.word	0x00000000
     1b8:	41004000 	.word	0x41004000
     1bc:	00001f7d 	.word	0x00001f7d
     1c0:	00000dfd 	.word	0x00000dfd

000001c4 <FLASH_0_CLOCK_init>:
}

static inline void hri_mclk_set_AHBMASK_NVMCTRL_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
     1c4:	4a03      	ldr	r2, [pc, #12]	; (1d4 <FLASH_0_CLOCK_init+0x10>)
     1c6:	6911      	ldr	r1, [r2, #16]
     1c8:	2380      	movs	r3, #128	; 0x80
     1ca:	005b      	lsls	r3, r3, #1
     1cc:	430b      	orrs	r3, r1
     1ce:	6113      	str	r3, [r2, #16]

void FLASH_0_CLOCK_init(void)
{

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}
     1d0:	4770      	bx	lr
     1d2:	46c0      	nop			; (mov r8, r8)
     1d4:	40000400 	.word	0x40000400

000001d8 <FLASH_0_init>:

void FLASH_0_init(void)
{
     1d8:	b510      	push	{r4, lr}
	FLASH_0_CLOCK_init();
     1da:	4b03      	ldr	r3, [pc, #12]	; (1e8 <FLASH_0_init+0x10>)
     1dc:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     1de:	4903      	ldr	r1, [pc, #12]	; (1ec <FLASH_0_init+0x14>)
     1e0:	4803      	ldr	r0, [pc, #12]	; (1f0 <FLASH_0_init+0x18>)
     1e2:	4b04      	ldr	r3, [pc, #16]	; (1f4 <FLASH_0_init+0x1c>)
     1e4:	4798      	blx	r3
}
     1e6:	bd10      	pop	{r4, pc}
     1e8:	000001c5 	.word	0x000001c5
     1ec:	41004000 	.word	0x41004000
     1f0:	200000b0 	.word	0x200000b0
     1f4:	000003f5 	.word	0x000003f5

000001f8 <USART_0_PORT_init>:

void USART_0_PORT_init(void)
{
     1f8:	b530      	push	{r4, r5, lr}
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     1fa:	4b0e      	ldr	r3, [pc, #56]	; (234 <USART_0_PORT_init+0x3c>)
     1fc:	2256      	movs	r2, #86	; 0x56
     1fe:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     200:	2501      	movs	r5, #1
     202:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     204:	2401      	movs	r4, #1
     206:	4321      	orrs	r1, r4
     208:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     20a:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     20c:	203b      	movs	r0, #59	; 0x3b
     20e:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     210:	3a47      	subs	r2, #71	; 0x47
     212:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     214:	3a0d      	subs	r2, #13
     216:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     218:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     21a:	2157      	movs	r1, #87	; 0x57
     21c:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     21e:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     220:	4322      	orrs	r2, r4
     222:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     224:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     226:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     228:	3948      	subs	r1, #72	; 0x48
     22a:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     22c:	3111      	adds	r1, #17
     22e:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     230:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PA22, PINMUX_PA22C_SERCOM3_PAD0);

	gpio_set_pin_function(PA23, PINMUX_PA23C_SERCOM3_PAD1);
}
     232:	bd30      	pop	{r4, r5, pc}
     234:	40002800 	.word	0x40002800

00000238 <USART_0_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     238:	4b06      	ldr	r3, [pc, #24]	; (254 <USART_0_CLOCK_init+0x1c>)
     23a:	2140      	movs	r1, #64	; 0x40
     23c:	22d4      	movs	r2, #212	; 0xd4
     23e:	5099      	str	r1, [r3, r2]
     240:	3103      	adds	r1, #3
     242:	3a10      	subs	r2, #16
     244:	5099      	str	r1, [r3, r2]
}

static inline void hri_mclk_set_APBCMASK_SERCOM3_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM3;
     246:	4a04      	ldr	r2, [pc, #16]	; (258 <USART_0_CLOCK_init+0x20>)
     248:	69d3      	ldr	r3, [r2, #28]
     24a:	393b      	subs	r1, #59	; 0x3b
     24c:	430b      	orrs	r3, r1
     24e:	61d3      	str	r3, [r2, #28]
{
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM3_GCLK_ID_SLOW, CONF_GCLK_SERCOM3_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBCMASK_SERCOM3_bit(MCLK);
}
     250:	4770      	bx	lr
     252:	46c0      	nop			; (mov r8, r8)
     254:	40001800 	.word	0x40001800
     258:	40000400 	.word	0x40000400

0000025c <USART_0_init>:

void USART_0_init(void)
{
     25c:	b510      	push	{r4, lr}
	USART_0_CLOCK_init();
     25e:	4b05      	ldr	r3, [pc, #20]	; (274 <USART_0_init+0x18>)
     260:	4798      	blx	r3
	usart_sync_init(&USART_0, SERCOM3, (void *)NULL);
     262:	2200      	movs	r2, #0
     264:	4904      	ldr	r1, [pc, #16]	; (278 <USART_0_init+0x1c>)
     266:	4805      	ldr	r0, [pc, #20]	; (27c <USART_0_init+0x20>)
     268:	4b05      	ldr	r3, [pc, #20]	; (280 <USART_0_init+0x24>)
     26a:	4798      	blx	r3
	USART_0_PORT_init();
     26c:	4b05      	ldr	r3, [pc, #20]	; (284 <USART_0_init+0x28>)
     26e:	4798      	blx	r3
}
     270:	bd10      	pop	{r4, pc}
     272:	46c0      	nop			; (mov r8, r8)
     274:	00000239 	.word	0x00000239
     278:	42000c00 	.word	0x42000c00
     27c:	200000cc 	.word	0x200000cc
     280:	00000521 	.word	0x00000521
     284:	000001f9 	.word	0x000001f9

00000288 <delay_driver_init>:

void delay_driver_init(void)
{
     288:	b510      	push	{r4, lr}
	delay_init(SysTick);
     28a:	4802      	ldr	r0, [pc, #8]	; (294 <delay_driver_init+0xc>)
     28c:	4b02      	ldr	r3, [pc, #8]	; (298 <delay_driver_init+0x10>)
     28e:	4798      	blx	r3
}
     290:	bd10      	pop	{r4, pc}
     292:	46c0      	nop			; (mov r8, r8)
     294:	e000e010 	.word	0xe000e010
     298:	000003a9 	.word	0x000003a9

0000029c <system_init>:

void system_init(void)
{
     29c:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     29e:	4b0e      	ldr	r3, [pc, #56]	; (2d8 <system_init+0x3c>)
     2a0:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2a2:	23c0      	movs	r3, #192	; 0xc0
     2a4:	05db      	lsls	r3, r3, #23
     2a6:	2280      	movs	r2, #128	; 0x80
     2a8:	00d2      	lsls	r2, r2, #3
     2aa:	2194      	movs	r1, #148	; 0x94
     2ac:	505a      	str	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     2ae:	390c      	subs	r1, #12
     2b0:	505a      	str	r2, [r3, r1]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     2b2:	4b0a      	ldr	r3, [pc, #40]	; (2dc <system_init+0x40>)
     2b4:	22a8      	movs	r2, #168	; 0xa8
     2b6:	490a      	ldr	r1, [pc, #40]	; (2e0 <system_init+0x44>)
     2b8:	5099      	str	r1, [r3, r2]
     2ba:	21c0      	movs	r1, #192	; 0xc0
     2bc:	0609      	lsls	r1, r1, #24
     2be:	5099      	str	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2c0:	21ca      	movs	r1, #202	; 0xca
     2c2:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2c4:	2001      	movs	r0, #1
     2c6:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2c8:	545a      	strb	r2, [r3, r1]
	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);

	FLASH_0_init();
     2ca:	4b06      	ldr	r3, [pc, #24]	; (2e4 <system_init+0x48>)
     2cc:	4798      	blx	r3

	USART_0_init();
     2ce:	4b06      	ldr	r3, [pc, #24]	; (2e8 <system_init+0x4c>)
     2d0:	4798      	blx	r3

	delay_driver_init();
     2d2:	4b06      	ldr	r3, [pc, #24]	; (2ec <system_init+0x50>)
     2d4:	4798      	blx	r3
}
     2d6:	bd10      	pop	{r4, pc}
     2d8:	000005d5 	.word	0x000005d5
     2dc:	40002800 	.word	0x40002800
     2e0:	40000400 	.word	0x40000400
     2e4:	000001d9 	.word	0x000001d9
     2e8:	0000025d 	.word	0x0000025d
     2ec:	00000289 	.word	0x00000289

000002f0 <gpio_init>:

#include "driver_init.h"
#include "gpio_init.h"

void gpio_init(void)
{
     2f0:	b5f0      	push	{r4, r5, r6, r7, lr}
     2f2:	46c6      	mov	lr, r8
     2f4:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2f6:	22c0      	movs	r2, #192	; 0xc0
     2f8:	05d2      	lsls	r2, r2, #23
     2fa:	2302      	movs	r3, #2
     2fc:	2194      	movs	r1, #148	; 0x94
     2fe:	5053      	str	r3, [r2, r1]
     300:	2180      	movs	r1, #128	; 0x80
     302:	0249      	lsls	r1, r1, #9
     304:	6151      	str	r1, [r2, #20]
     306:	2780      	movs	r7, #128	; 0x80
     308:	037f      	lsls	r7, r7, #13
     30a:	6157      	str	r7, [r2, #20]
     30c:	2080      	movs	r0, #128	; 0x80
     30e:	0380      	lsls	r0, r0, #14
     310:	4680      	mov	r8, r0
     312:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     314:	2688      	movs	r6, #136	; 0x88
     316:	5193      	str	r3, [r2, r6]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     318:	4b1c      	ldr	r3, [pc, #112]	; (38c <gpio_init+0x9c>)
     31a:	20a8      	movs	r0, #168	; 0xa8
     31c:	4d1c      	ldr	r5, [pc, #112]	; (390 <gpio_init+0xa0>)
     31e:	501d      	str	r5, [r3, r0]
     320:	25c0      	movs	r5, #192	; 0xc0
     322:	062d      	lsls	r5, r5, #24
     324:	501d      	str	r5, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     326:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     328:	2180      	movs	r1, #128	; 0x80
     32a:	05c9      	lsls	r1, r1, #23
     32c:	6299      	str	r1, [r3, #40]	; 0x28
     32e:	4c19      	ldr	r4, [pc, #100]	; (394 <gpio_init+0xa4>)
     330:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     332:	6097      	str	r7, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     334:	6299      	str	r1, [r3, #40]	; 0x28
     336:	4f18      	ldr	r7, [pc, #96]	; (398 <gpio_init+0xa8>)
     338:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     33a:	4644      	mov	r4, r8
     33c:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     33e:	6299      	str	r1, [r3, #40]	; 0x28
     340:	4916      	ldr	r1, [pc, #88]	; (39c <gpio_init+0xac>)
     342:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     344:	27c1      	movs	r7, #193	; 0xc1
     346:	5ddc      	ldrb	r4, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     348:	2101      	movs	r1, #1
     34a:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     34c:	55dc      	strb	r4, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     34e:	3f71      	subs	r7, #113	; 0x71
     350:	5ddc      	ldrb	r4, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     352:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     354:	55dc      	strb	r4, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     356:	3704      	adds	r7, #4
     358:	5ddc      	ldrb	r4, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     35a:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     35c:	55dc      	strb	r4, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     35e:	3701      	adds	r7, #1
     360:	5ddc      	ldrb	r4, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     362:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     364:	55dc      	strb	r4, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     366:	2480      	movs	r4, #128	; 0x80
     368:	00e4      	lsls	r4, r4, #3
     36a:	3743      	adds	r7, #67	; 0x43
     36c:	51d4      	str	r4, [r2, r7]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     36e:	5194      	str	r4, [r2, r6]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     370:	4a0b      	ldr	r2, [pc, #44]	; (3a0 <gpio_init+0xb0>)
     372:	501a      	str	r2, [r3, r0]
     374:	501d      	str	r5, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     376:	3022      	adds	r0, #34	; 0x22
     378:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     37a:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     37c:	541a      	strb	r2, [r3, r0]
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
#endif

	delay_ms(10);
     37e:	38c0      	subs	r0, #192	; 0xc0
     380:	4b08      	ldr	r3, [pc, #32]	; (3a4 <gpio_init+0xb4>)
     382:	4798      	blx	r3
     384:	bc04      	pop	{r2}
     386:	4690      	mov	r8, r2
     388:	bdf0      	pop	{r4, r5, r6, r7, pc}
     38a:	46c0      	nop			; (mov r8, r8)
     38c:	40002800 	.word	0x40002800
     390:	40000002 	.word	0x40000002
     394:	c0000001 	.word	0xc0000001
     398:	c0000010 	.word	0xc0000010
     39c:	c0000020 	.word	0xc0000020
     3a0:	40000400 	.word	0x40000400
     3a4:	000003bd 	.word	0x000003bd

000003a8 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     3a8:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
     3aa:	4b02      	ldr	r3, [pc, #8]	; (3b4 <delay_init+0xc>)
     3ac:	6018      	str	r0, [r3, #0]
     3ae:	4b02      	ldr	r3, [pc, #8]	; (3b8 <delay_init+0x10>)
     3b0:	4798      	blx	r3
}
     3b2:	bd10      	pop	{r4, pc}
     3b4:	200000a0 	.word	0x200000a0
     3b8:	00000acd 	.word	0x00000acd

000003bc <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     3bc:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     3be:	4b04      	ldr	r3, [pc, #16]	; (3d0 <delay_ms+0x14>)
     3c0:	681c      	ldr	r4, [r3, #0]
     3c2:	4b04      	ldr	r3, [pc, #16]	; (3d4 <delay_ms+0x18>)
     3c4:	4798      	blx	r3
     3c6:	0001      	movs	r1, r0
     3c8:	0020      	movs	r0, r4
     3ca:	4b03      	ldr	r3, [pc, #12]	; (3d8 <delay_ms+0x1c>)
     3cc:	4798      	blx	r3
}
     3ce:	bd10      	pop	{r4, pc}
     3d0:	200000a0 	.word	0x200000a0
     3d4:	000005cd 	.word	0x000005cd
     3d8:	00000ae1 	.word	0x00000ae1

000003dc <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
     3dc:	b510      	push	{r4, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
     3de:	6943      	ldr	r3, [r0, #20]
     3e0:	2b00      	cmp	r3, #0
     3e2:	d000      	beq.n	3e6 <flash_ready+0xa>
		descr->callbacks.cb_ready(descr);
     3e4:	4798      	blx	r3
	}
}
     3e6:	bd10      	pop	{r4, pc}

000003e8 <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
     3e8:	b510      	push	{r4, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
     3ea:	6983      	ldr	r3, [r0, #24]
     3ec:	2b00      	cmp	r3, #0
     3ee:	d000      	beq.n	3f2 <flash_error+0xa>
		descr->callbacks.cb_error(descr);
     3f0:	4798      	blx	r3
	}
}
     3f2:	bd10      	pop	{r4, pc}

000003f4 <flash_init>:
{
     3f4:	b570      	push	{r4, r5, r6, lr}
     3f6:	0005      	movs	r5, r0
     3f8:	000c      	movs	r4, r1
	ASSERT(flash && hw);
     3fa:	2800      	cmp	r0, #0
     3fc:	d012      	beq.n	424 <flash_init+0x30>
     3fe:	0008      	movs	r0, r1
     400:	1e43      	subs	r3, r0, #1
     402:	4198      	sbcs	r0, r3
     404:	b2c0      	uxtb	r0, r0
     406:	2238      	movs	r2, #56	; 0x38
     408:	4907      	ldr	r1, [pc, #28]	; (428 <flash_init+0x34>)
     40a:	4b08      	ldr	r3, [pc, #32]	; (42c <flash_init+0x38>)
     40c:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
     40e:	0021      	movs	r1, r4
     410:	0028      	movs	r0, r5
     412:	4b07      	ldr	r3, [pc, #28]	; (430 <flash_init+0x3c>)
     414:	4798      	blx	r3
	if (rc) {
     416:	2800      	cmp	r0, #0
     418:	d103      	bne.n	422 <flash_init+0x2e>
	flash->dev.flash_cb.ready_cb = flash_ready;
     41a:	4b06      	ldr	r3, [pc, #24]	; (434 <flash_init+0x40>)
     41c:	602b      	str	r3, [r5, #0]
	flash->dev.flash_cb.error_cb = flash_error;
     41e:	4b06      	ldr	r3, [pc, #24]	; (438 <flash_init+0x44>)
     420:	606b      	str	r3, [r5, #4]
}
     422:	bd70      	pop	{r4, r5, r6, pc}
     424:	2000      	movs	r0, #0
     426:	e7ee      	b.n	406 <flash_init+0x12>
     428:	00002094 	.word	0x00002094
     42c:	000005c5 	.word	0x000005c5
     430:	000006dd 	.word	0x000006dd
     434:	000003dd 	.word	0x000003dd
     438:	000003e9 	.word	0x000003e9

0000043c <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     43c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     43e:	46ce      	mov	lr, r9
     440:	4647      	mov	r7, r8
     442:	b580      	push	{r7, lr}
     444:	0004      	movs	r4, r0
     446:	000f      	movs	r7, r1
     448:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     44a:	2800      	cmp	r0, #0
     44c:	d026      	beq.n	49c <usart_sync_write+0x60>
     44e:	2900      	cmp	r1, #0
     450:	d026      	beq.n	4a0 <usart_sync_write+0x64>
     452:	0010      	movs	r0, r2
     454:	1e43      	subs	r3, r0, #1
     456:	4198      	sbcs	r0, r3
     458:	22f1      	movs	r2, #241	; 0xf1
     45a:	4912      	ldr	r1, [pc, #72]	; (4a4 <usart_sync_write+0x68>)
     45c:	4b12      	ldr	r3, [pc, #72]	; (4a8 <usart_sync_write+0x6c>)
     45e:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     460:	3408      	adds	r4, #8
     462:	4d12      	ldr	r5, [pc, #72]	; (4ac <usart_sync_write+0x70>)
     464:	0020      	movs	r0, r4
     466:	47a8      	blx	r5
     468:	2800      	cmp	r0, #0
     46a:	d0fb      	beq.n	464 <usart_sync_write+0x28>
     46c:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     46e:	4b10      	ldr	r3, [pc, #64]	; (4b0 <usart_sync_write+0x74>)
     470:	4699      	mov	r9, r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
     472:	4d0e      	ldr	r5, [pc, #56]	; (4ac <usart_sync_write+0x70>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
     474:	5db9      	ldrb	r1, [r7, r6]
     476:	0020      	movs	r0, r4
     478:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
     47a:	0020      	movs	r0, r4
     47c:	47a8      	blx	r5
     47e:	2800      	cmp	r0, #0
     480:	d0fb      	beq.n	47a <usart_sync_write+0x3e>
			;
	} while (++offset < length);
     482:	3601      	adds	r6, #1
     484:	4546      	cmp	r6, r8
     486:	d3f5      	bcc.n	474 <usart_sync_write+0x38>
	while (!_usart_sync_is_transmit_done(&descr->device))
     488:	4d0a      	ldr	r5, [pc, #40]	; (4b4 <usart_sync_write+0x78>)
     48a:	0020      	movs	r0, r4
     48c:	47a8      	blx	r5
     48e:	2800      	cmp	r0, #0
     490:	d0fb      	beq.n	48a <usart_sync_write+0x4e>
		;
	return (int32_t)offset;
}
     492:	0030      	movs	r0, r6
     494:	bc0c      	pop	{r2, r3}
     496:	4690      	mov	r8, r2
     498:	4699      	mov	r9, r3
     49a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     49c:	2000      	movs	r0, #0
     49e:	e7db      	b.n	458 <usart_sync_write+0x1c>
     4a0:	2000      	movs	r0, #0
     4a2:	e7d9      	b.n	458 <usart_sync_write+0x1c>
     4a4:	000020ac 	.word	0x000020ac
     4a8:	000005c5 	.word	0x000005c5
     4ac:	00000aad 	.word	0x00000aad
     4b0:	00000a9d 	.word	0x00000a9d
     4b4:	00000ab7 	.word	0x00000ab7

000004b8 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     4ba:	46ce      	mov	lr, r9
     4bc:	4647      	mov	r7, r8
     4be:	b580      	push	{r7, lr}
     4c0:	0004      	movs	r4, r0
     4c2:	000f      	movs	r7, r1
     4c4:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     4c6:	2800      	cmp	r0, #0
     4c8:	d01d      	beq.n	506 <usart_sync_read+0x4e>
     4ca:	2900      	cmp	r1, #0
     4cc:	d01d      	beq.n	50a <usart_sync_read+0x52>
     4ce:	0010      	movs	r0, r2
     4d0:	1e43      	subs	r3, r0, #1
     4d2:	4198      	sbcs	r0, r3
     4d4:	2286      	movs	r2, #134	; 0x86
     4d6:	0052      	lsls	r2, r2, #1
     4d8:	490d      	ldr	r1, [pc, #52]	; (510 <usart_sync_read+0x58>)
     4da:	4b0e      	ldr	r3, [pc, #56]	; (514 <usart_sync_read+0x5c>)
     4dc:	4798      	blx	r3
	uint32_t                      offset = 0;
     4de:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     4e0:	3408      	adds	r4, #8
     4e2:	4d0d      	ldr	r5, [pc, #52]	; (518 <usart_sync_read+0x60>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     4e4:	4b0d      	ldr	r3, [pc, #52]	; (51c <usart_sync_read+0x64>)
     4e6:	4699      	mov	r9, r3
		while (!_usart_sync_is_byte_received(&descr->device))
     4e8:	0020      	movs	r0, r4
     4ea:	47a8      	blx	r5
     4ec:	2800      	cmp	r0, #0
     4ee:	d0fb      	beq.n	4e8 <usart_sync_read+0x30>
		buf[offset] = _usart_sync_read_byte(&descr->device);
     4f0:	0020      	movs	r0, r4
     4f2:	47c8      	blx	r9
     4f4:	55b8      	strb	r0, [r7, r6]
	} while (++offset < length);
     4f6:	3601      	adds	r6, #1
     4f8:	4546      	cmp	r6, r8
     4fa:	d3f5      	bcc.n	4e8 <usart_sync_read+0x30>

	return (int32_t)offset;
}
     4fc:	0030      	movs	r0, r6
     4fe:	bc0c      	pop	{r2, r3}
     500:	4690      	mov	r8, r2
     502:	4699      	mov	r9, r3
     504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     506:	2000      	movs	r0, #0
     508:	e7e4      	b.n	4d4 <usart_sync_read+0x1c>
     50a:	2000      	movs	r0, #0
     50c:	e7e2      	b.n	4d4 <usart_sync_read+0x1c>
     50e:	46c0      	nop			; (mov r8, r8)
     510:	000020ac 	.word	0x000020ac
     514:	000005c5 	.word	0x000005c5
     518:	00000ac1 	.word	0x00000ac1
     51c:	00000aa5 	.word	0x00000aa5

00000520 <usart_sync_init>:
{
     520:	b570      	push	{r4, r5, r6, lr}
     522:	0005      	movs	r5, r0
     524:	000c      	movs	r4, r1
	ASSERT(descr && hw);
     526:	2800      	cmp	r0, #0
     528:	d013      	beq.n	552 <usart_sync_init+0x32>
     52a:	0008      	movs	r0, r1
     52c:	1e43      	subs	r3, r0, #1
     52e:	4198      	sbcs	r0, r3
     530:	b2c0      	uxtb	r0, r0
     532:	2234      	movs	r2, #52	; 0x34
     534:	4908      	ldr	r1, [pc, #32]	; (558 <usart_sync_init+0x38>)
     536:	4b09      	ldr	r3, [pc, #36]	; (55c <usart_sync_init+0x3c>)
     538:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     53a:	0028      	movs	r0, r5
     53c:	3008      	adds	r0, #8
     53e:	0021      	movs	r1, r4
     540:	4b07      	ldr	r3, [pc, #28]	; (560 <usart_sync_init+0x40>)
     542:	4798      	blx	r3
	if (init_status) {
     544:	2800      	cmp	r0, #0
     546:	d103      	bne.n	550 <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
     548:	4b06      	ldr	r3, [pc, #24]	; (564 <usart_sync_init+0x44>)
     54a:	606b      	str	r3, [r5, #4]
	descr->io.write = usart_sync_write;
     54c:	4b06      	ldr	r3, [pc, #24]	; (568 <usart_sync_init+0x48>)
     54e:	602b      	str	r3, [r5, #0]
}
     550:	bd70      	pop	{r4, r5, r6, pc}
     552:	2000      	movs	r0, #0
     554:	e7ed      	b.n	532 <usart_sync_init+0x12>
     556:	46c0      	nop			; (mov r8, r8)
     558:	000020ac 	.word	0x000020ac
     55c:	000005c5 	.word	0x000005c5
     560:	00000a5d 	.word	0x00000a5d
     564:	000004b9 	.word	0x000004b9
     568:	0000043d 	.word	0x0000043d

0000056c <usart_sync_enable>:
{
     56c:	b510      	push	{r4, lr}
     56e:	0004      	movs	r4, r0
	ASSERT(descr);
     570:	1e43      	subs	r3, r0, #1
     572:	4198      	sbcs	r0, r3
     574:	b2c0      	uxtb	r0, r0
     576:	2253      	movs	r2, #83	; 0x53
     578:	4904      	ldr	r1, [pc, #16]	; (58c <usart_sync_enable+0x20>)
     57a:	4b05      	ldr	r3, [pc, #20]	; (590 <usart_sync_enable+0x24>)
     57c:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
     57e:	0020      	movs	r0, r4
     580:	3008      	adds	r0, #8
     582:	4b04      	ldr	r3, [pc, #16]	; (594 <usart_sync_enable+0x28>)
     584:	4798      	blx	r3
}
     586:	2000      	movs	r0, #0
     588:	bd10      	pop	{r4, pc}
     58a:	46c0      	nop			; (mov r8, r8)
     58c:	000020ac 	.word	0x000020ac
     590:	000005c5 	.word	0x000005c5
     594:	00000a89 	.word	0x00000a89

00000598 <usart_sync_get_io_descriptor>:
{
     598:	b570      	push	{r4, r5, r6, lr}
     59a:	0004      	movs	r4, r0
     59c:	000d      	movs	r5, r1
	ASSERT(descr && io);
     59e:	2800      	cmp	r0, #0
     5a0:	d00a      	beq.n	5b8 <usart_sync_get_io_descriptor+0x20>
     5a2:	0008      	movs	r0, r1
     5a4:	1e43      	subs	r3, r0, #1
     5a6:	4198      	sbcs	r0, r3
     5a8:	b2c0      	uxtb	r0, r0
     5aa:	2269      	movs	r2, #105	; 0x69
     5ac:	4903      	ldr	r1, [pc, #12]	; (5bc <usart_sync_get_io_descriptor+0x24>)
     5ae:	4b04      	ldr	r3, [pc, #16]	; (5c0 <usart_sync_get_io_descriptor+0x28>)
     5b0:	4798      	blx	r3
	*io = &descr->io;
     5b2:	602c      	str	r4, [r5, #0]
}
     5b4:	2000      	movs	r0, #0
     5b6:	bd70      	pop	{r4, r5, r6, pc}
     5b8:	2000      	movs	r0, #0
     5ba:	e7f6      	b.n	5aa <usart_sync_get_io_descriptor+0x12>
     5bc:	000020ac 	.word	0x000020ac
     5c0:	000005c5 	.word	0x000005c5

000005c4 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     5c4:	2800      	cmp	r0, #0
     5c6:	d100      	bne.n	5ca <assert+0x6>
		__asm("BKPT #0");
     5c8:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     5ca:	4770      	bx	lr

000005cc <_get_cycles_for_ms>:
{
	switch (power) {
	case 8:
		return (ms * (freq / 100000)) * 100;
	case 7:
		return (ms * (freq / 10000)) * 10;
     5cc:	23fa      	movs	r3, #250	; 0xfa
     5ce:	011b      	lsls	r3, r3, #4
     5d0:	4358      	muls	r0, r3
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     5d2:	4770      	bx	lr

000005d4 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     5d4:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     5d6:	4b09      	ldr	r3, [pc, #36]	; (5fc <_init_chip+0x28>)
     5d8:	685a      	ldr	r2, [r3, #4]
     5da:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_set_performance_level(2);
     5dc:	2002      	movs	r0, #2
     5de:	4b08      	ldr	r3, [pc, #32]	; (600 <_init_chip+0x2c>)
     5e0:	4798      	blx	r3

	_osc32kctrl_init_sources();
     5e2:	4b08      	ldr	r3, [pc, #32]	; (604 <_init_chip+0x30>)
     5e4:	4798      	blx	r3
	_oscctrl_init_sources();
     5e6:	4b08      	ldr	r3, [pc, #32]	; (608 <_init_chip+0x34>)
     5e8:	4798      	blx	r3
	_mclk_init();
     5ea:	4b08      	ldr	r3, [pc, #32]	; (60c <_init_chip+0x38>)
     5ec:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     5ee:	4b08      	ldr	r3, [pc, #32]	; (610 <_init_chip+0x3c>)
     5f0:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     5f2:	20ff      	movs	r0, #255	; 0xff
     5f4:	4b07      	ldr	r3, [pc, #28]	; (614 <_init_chip+0x40>)
     5f6:	4798      	blx	r3
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
     5f8:	bd10      	pop	{r4, pc}
     5fa:	46c0      	nop			; (mov r8, r8)
     5fc:	41004000 	.word	0x41004000
     600:	00000993 	.word	0x00000993
     604:	00000941 	.word	0x00000941
     608:	00000959 	.word	0x00000959
     60c:	0000063d 	.word	0x0000063d
     610:	00000991 	.word	0x00000991
     614:	00000619 	.word	0x00000619

00000618 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     618:	07c3      	lsls	r3, r0, #31
     61a:	d507      	bpl.n	62c <_gclk_init_generators_by_fref+0x14>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     61c:	4a04      	ldr	r2, [pc, #16]	; (630 <_gclk_init_generators_by_fref+0x18>)
     61e:	4b05      	ldr	r3, [pc, #20]	; (634 <_gclk_init_generators_by_fref+0x1c>)
     620:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     622:	0019      	movs	r1, r3
     624:	4a04      	ldr	r2, [pc, #16]	; (638 <_gclk_init_generators_by_fref+0x20>)
     626:	684b      	ldr	r3, [r1, #4]
     628:	4213      	tst	r3, r2
     62a:	d1fc      	bne.n	626 <_gclk_init_generators_by_fref+0xe>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
}
     62c:	4770      	bx	lr
     62e:	46c0      	nop			; (mov r8, r8)
     630:	00010106 	.word	0x00010106
     634:	40001800 	.word	0x40001800
     638:	000007fd 	.word	0x000007fd

0000063c <_mclk_init>:
	((Mclk *)hw)->BUPDIV.reg = data;
     63c:	4b03      	ldr	r3, [pc, #12]	; (64c <_mclk_init+0x10>)
     63e:	2208      	movs	r2, #8
     640:	719a      	strb	r2, [r3, #6]
	((Mclk *)hw)->LPDIV.reg = data;
     642:	3a04      	subs	r2, #4
     644:	715a      	strb	r2, [r3, #5]
	((Mclk *)hw)->CPUDIV.reg = data;
     646:	3a03      	subs	r2, #3
     648:	711a      	strb	r2, [r3, #4]
{
	void *hw = (void *)MCLK;
	hri_mclk_write_BUPDIV_reg(hw, MCLK_BUPDIV_BUPDIV(CONF_MCLK_BUPDIV));
	hri_mclk_write_LPDIV_reg(hw, MCLK_LPDIV_LPDIV(CONF_MCLK_LPDIV));
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
}
     64a:	4770      	bx	lr
     64c:	40000400 	.word	0x40000400

00000650 <_flash_program>:
 *                           write is stored
 * \param[in] size           The size of data to write to a page
 */
static void _flash_program(void *const hw, const uint32_t dst_addr, const uint8_t *buffer, const uint16_t size,
                           uint32_t nvmctrl_cmd)
{
     650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     652:	0004      	movs	r4, r0
     654:	000d      	movs	r5, r1
     656:	0017      	movs	r7, r2
     658:	001e      	movs	r6, r3
	ASSERT(!(dst_addr % 2));
     65a:	2301      	movs	r3, #1
     65c:	404b      	eors	r3, r1
     65e:	2001      	movs	r0, #1
     660:	4018      	ands	r0, r3
     662:	22c5      	movs	r2, #197	; 0xc5
     664:	0052      	lsls	r2, r2, #1
     666:	4919      	ldr	r1, [pc, #100]	; (6cc <_flash_program+0x7c>)
     668:	4b19      	ldr	r3, [pc, #100]	; (6d0 <_flash_program+0x80>)
     66a:	4798      	blx	r3

	uint32_t nvm_address = dst_addr / 2;
     66c:	0868      	lsrs	r0, r5, #1
	uint16_t i, data;

	while (!hri_nvmctrl_get_interrupt_READY_bit(hw)) {
     66e:	2201      	movs	r2, #1
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
     670:	7d23      	ldrb	r3, [r4, #20]
     672:	4213      	tst	r3, r2
     674:	d0fc      	beq.n	670 <_flash_program+0x20>
	((Nvmctrl *)hw)->CTRLA.reg = data;
     676:	4b17      	ldr	r3, [pc, #92]	; (6d4 <_flash_program+0x84>)
     678:	8023      	strh	r3, [r4, #0]
		/* Wait until this module isn't busy */
	}

	hri_nvmctrl_write_CTRLA_reg(hw, NVMCTRL_CTRLA_CMD_PBC | NVMCTRL_CTRLA_CMDEX_KEY);

	while (!hri_nvmctrl_get_interrupt_READY_bit(hw)) {
     67a:	2201      	movs	r2, #1
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
     67c:	7d23      	ldrb	r3, [r4, #20]
     67e:	4213      	tst	r3, r2
     680:	d0fc      	beq.n	67c <_flash_program+0x2c>
}

static inline void hri_nvmctrl_clear_STATUS_reg(const void *const hw, hri_nvmctrl_status_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->STATUS.reg = mask;
     682:	2320      	movs	r3, #32
     684:	33ff      	adds	r3, #255	; 0xff
     686:	8323      	strh	r3, [r4, #24]
	}

	/* Clear flags */
	hri_nvmctrl_clear_STATUS_reg(hw, NVMCTRL_STATUS_MASK);

	for (i = 0; i < size; i += 2) {
     688:	2e00      	cmp	r6, #0
     68a:	d00e      	beq.n	6aa <_flash_program+0x5a>
     68c:	3b1f      	subs	r3, #31
     68e:	3bff      	subs	r3, #255	; 0xff
     690:	0029      	movs	r1, r5
     692:	4399      	bics	r1, r3
     694:	2300      	movs	r3, #0
		data = buffer[i];
     696:	5cfd      	ldrb	r5, [r7, r3]
     698:	b2aa      	uxth	r2, r5
		if (i < NVMCTRL_PAGE_SIZE - 1) {
     69a:	2b3e      	cmp	r3, #62	; 0x3e
     69c:	d910      	bls.n	6c0 <_flash_program+0x70>
			data |= (buffer[i + 1] << 8);
		}
		NVM_MEMORY[nvm_address++] = data;
     69e:	800a      	strh	r2, [r1, #0]
	for (i = 0; i < size; i += 2) {
     6a0:	3302      	adds	r3, #2
     6a2:	b29b      	uxth	r3, r3
     6a4:	3102      	adds	r1, #2
     6a6:	429e      	cmp	r6, r3
     6a8:	d8f5      	bhi.n	696 <_flash_program+0x46>
	}

	while (!hri_nvmctrl_get_interrupt_READY_bit(hw)) {
     6aa:	2201      	movs	r2, #1
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
     6ac:	7d23      	ldrb	r3, [r4, #20]
     6ae:	4213      	tst	r3, r2
     6b0:	d0fc      	beq.n	6ac <_flash_program+0x5c>
	((Nvmctrl *)hw)->ADDR.reg = data;
     6b2:	61e0      	str	r0, [r4, #28]
		/* Wait until this module isn't busy */
	}

	hri_nvmctrl_write_ADDR_reg(hw, dst_addr / 2);
	hri_nvmctrl_write_CTRLA_reg(hw, nvmctrl_cmd | NVMCTRL_CTRLA_CMDEX_KEY);
     6b4:	4b08      	ldr	r3, [pc, #32]	; (6d8 <_flash_program+0x88>)
     6b6:	9a06      	ldr	r2, [sp, #24]
     6b8:	4313      	orrs	r3, r2
     6ba:	b29b      	uxth	r3, r3
	((Nvmctrl *)hw)->CTRLA.reg = data;
     6bc:	8023      	strh	r3, [r4, #0]
}
     6be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			data |= (buffer[i + 1] << 8);
     6c0:	18fa      	adds	r2, r7, r3
     6c2:	7852      	ldrb	r2, [r2, #1]
     6c4:	0212      	lsls	r2, r2, #8
     6c6:	432a      	orrs	r2, r5
     6c8:	e7e9      	b.n	69e <_flash_program+0x4e>
     6ca:	46c0      	nop			; (mov r8, r8)
     6cc:	000020c8 	.word	0x000020c8
     6d0:	000005c5 	.word	0x000005c5
     6d4:	ffffa544 	.word	0xffffa544
     6d8:	ffffa500 	.word	0xffffa500

000006dc <_flash_init>:
{
     6dc:	b570      	push	{r4, r5, r6, lr}
     6de:	0005      	movs	r5, r0
     6e0:	000c      	movs	r4, r1
	ASSERT(device && (hw == NVMCTRL));
     6e2:	2800      	cmp	r0, #0
     6e4:	d01d      	beq.n	722 <_flash_init+0x46>
     6e6:	4b10      	ldr	r3, [pc, #64]	; (728 <_flash_init+0x4c>)
     6e8:	18c8      	adds	r0, r1, r3
     6ea:	4243      	negs	r3, r0
     6ec:	4158      	adcs	r0, r3
     6ee:	b2c0      	uxtb	r0, r0
     6f0:	2246      	movs	r2, #70	; 0x46
     6f2:	490e      	ldr	r1, [pc, #56]	; (72c <_flash_init+0x50>)
     6f4:	4b0e      	ldr	r3, [pc, #56]	; (730 <_flash_init+0x54>)
     6f6:	4798      	blx	r3
	device->hw = hw;
     6f8:	612c      	str	r4, [r5, #16]
	tmp = ((Nvmctrl *)hw)->CTRLB.reg;
     6fa:	6862      	ldr	r2, [r4, #4]
	tmp &= mask;
     6fc:	239e      	movs	r3, #158	; 0x9e
     6fe:	4013      	ands	r3, r2
	((Nvmctrl *)hw)->CTRLB.reg = data;
     700:	6063      	str	r3, [r4, #4]
	_nvm_dev = device;
     702:	4b0c      	ldr	r3, [pc, #48]	; (734 <_flash_init+0x58>)
     704:	601d      	str	r5, [r3, #0]
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     706:	4b0c      	ldr	r3, [pc, #48]	; (738 <_flash_init+0x5c>)
     708:	2210      	movs	r2, #16
     70a:	2180      	movs	r1, #128	; 0x80
     70c:	505a      	str	r2, [r3, r1]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     70e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     712:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     716:	3101      	adds	r1, #1
     718:	31ff      	adds	r1, #255	; 0xff
     71a:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     71c:	601a      	str	r2, [r3, #0]
}
     71e:	2000      	movs	r0, #0
     720:	bd70      	pop	{r4, r5, r6, pc}
     722:	2000      	movs	r0, #0
     724:	e7e4      	b.n	6f0 <_flash_init+0x14>
     726:	46c0      	nop			; (mov r8, r8)
     728:	beffc000 	.word	0xbeffc000
     72c:	000020c8 	.word	0x000020c8
     730:	000005c5 	.word	0x000005c5
     734:	200000a4 	.word	0x200000a4
     738:	e000e100 	.word	0xe000e100

0000073c <_flash_read>:
{
     73c:	b570      	push	{r4, r5, r6, lr}
	uint32_t nvm_address = src_addr / 2;
     73e:	084c      	lsrs	r4, r1, #1
	while (!hri_nvmctrl_get_interrupt_READY_bit(device->hw)) {
     740:	6905      	ldr	r5, [r0, #16]
     742:	2601      	movs	r6, #1
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
     744:	7d28      	ldrb	r0, [r5, #20]
     746:	4230      	tst	r0, r6
     748:	d0fc      	beq.n	744 <_flash_read+0x8>
	((Nvmctrl *)hw)->STATUS.reg = mask;
     74a:	2020      	movs	r0, #32
     74c:	30ff      	adds	r0, #255	; 0xff
     74e:	8328      	strh	r0, [r5, #24]
		i = 0;
     750:	2000      	movs	r0, #0
	if (src_addr % 2) {
     752:	07cd      	lsls	r5, r1, #31
     754:	d505      	bpl.n	762 <_flash_read+0x26>
		data      = NVM_MEMORY[nvm_address++];
     756:	3401      	adds	r4, #1
     758:	3001      	adds	r0, #1
     75a:	4381      	bics	r1, r0
     75c:	8809      	ldrh	r1, [r1, #0]
		buffer[0] = data >> 8;
     75e:	0a09      	lsrs	r1, r1, #8
     760:	7011      	strb	r1, [r2, #0]
	while (i < length) {
     762:	4298      	cmp	r0, r3
     764:	d211      	bcs.n	78a <_flash_read+0x4e>
     766:	1812      	adds	r2, r2, r0
     768:	0064      	lsls	r4, r4, #1
     76a:	1a24      	subs	r4, r4, r0
		if (i < (length - 1)) {
     76c:	1e5d      	subs	r5, r3, #1
     76e:	e003      	b.n	778 <_flash_read+0x3c>
		i += 2;
     770:	3002      	adds	r0, #2
     772:	3202      	adds	r2, #2
	while (i < length) {
     774:	4283      	cmp	r3, r0
     776:	d908      	bls.n	78a <_flash_read+0x4e>
     778:	1821      	adds	r1, r4, r0
		data      = NVM_MEMORY[nvm_address++];
     77a:	8809      	ldrh	r1, [r1, #0]
     77c:	b289      	uxth	r1, r1
		buffer[i] = (data & 0xFF);
     77e:	7011      	strb	r1, [r2, #0]
		if (i < (length - 1)) {
     780:	4285      	cmp	r5, r0
     782:	d9f5      	bls.n	770 <_flash_read+0x34>
			buffer[i + 1] = (data >> 8);
     784:	0a09      	lsrs	r1, r1, #8
     786:	7051      	strb	r1, [r2, #1]
     788:	e7f2      	b.n	770 <_flash_read+0x34>
}
     78a:	bd70      	pop	{r4, r5, r6, pc}

0000078c <NVMCTRL_Handler>:

/**
 * \internal NVM interrupt handler
 */
void NVMCTRL_Handler(void)
{
     78c:	b510      	push	{r4, lr}
	void *const hw = _nvm_dev->hw;
     78e:	4b0a      	ldr	r3, [pc, #40]	; (7b8 <NVMCTRL_Handler+0x2c>)
     790:	6818      	ldr	r0, [r3, #0]
     792:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
     794:	7d1a      	ldrb	r2, [r3, #20]

	if (hri_nvmctrl_get_interrupt_READY_bit(hw)) {
     796:	07d2      	lsls	r2, r2, #31
     798:	d504      	bpl.n	7a4 <NVMCTRL_Handler+0x18>
		if (NULL != _nvm_dev->flash_cb.ready_cb) {
     79a:	6803      	ldr	r3, [r0, #0]
     79c:	2b00      	cmp	r3, #0
     79e:	d000      	beq.n	7a2 <NVMCTRL_Handler+0x16>
			_nvm_dev->flash_cb.ready_cb(_nvm_dev);
     7a0:	4798      	blx	r3
		hri_nvmctrl_clear_interrupt_ERROR_bit(hw);
		if (NULL != _nvm_dev->flash_cb.error_cb) {
			_nvm_dev->flash_cb.error_cb(_nvm_dev);
		}
	}
}
     7a2:	bd10      	pop	{r4, pc}
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_ERROR) >> NVMCTRL_INTFLAG_ERROR_Pos;
     7a4:	7d1a      	ldrb	r2, [r3, #20]
	} else if (hri_nvmctrl_get_interrupt_ERROR_bit(hw)) {
     7a6:	0792      	lsls	r2, r2, #30
     7a8:	d5fb      	bpl.n	7a2 <NVMCTRL_Handler+0x16>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_ERROR;
     7aa:	2202      	movs	r2, #2
     7ac:	751a      	strb	r2, [r3, #20]
		if (NULL != _nvm_dev->flash_cb.error_cb) {
     7ae:	6843      	ldr	r3, [r0, #4]
     7b0:	2b00      	cmp	r3, #0
     7b2:	d0f6      	beq.n	7a2 <NVMCTRL_Handler+0x16>
			_nvm_dev->flash_cb.error_cb(_nvm_dev);
     7b4:	4798      	blx	r3
}
     7b6:	e7f4      	b.n	7a2 <NVMCTRL_Handler+0x16>
     7b8:	200000a4 	.word	0x200000a4

000007bc <_rww_flash_read>:

/**
 * \brief Reads a number of bytes in the internal RWWEE Flash.
 */
int32_t _rww_flash_read(struct _flash_device *const device, const uint32_t src_addr, uint8_t *buffer, uint32_t length)
{
     7bc:	b570      	push	{r4, r5, r6, lr}
	    || (addr > (NVMCTRL_RWW_EEPROM_ADDR + NVMCTRL_PAGE_SIZE * NVMCTRL_RWWEE_PAGES))) {
     7be:	4c0b      	ldr	r4, [pc, #44]	; (7ec <_rww_flash_read+0x30>)
     7c0:	190d      	adds	r5, r1, r4
	/* Check if the address is valid */
	if (!_is_valid_rww_flash_address(src_addr) || !_is_valid_rww_flash_address(src_addr + length)) {
     7c2:	2480      	movs	r4, #128	; 0x80
     7c4:	01a4      	lsls	r4, r4, #6
     7c6:	42a5      	cmp	r5, r4
     7c8:	d80a      	bhi.n	7e0 <_rww_flash_read+0x24>
	    || (addr > (NVMCTRL_RWW_EEPROM_ADDR + NVMCTRL_PAGE_SIZE * NVMCTRL_RWWEE_PAGES))) {
     7ca:	4c08      	ldr	r4, [pc, #32]	; (7ec <_rww_flash_read+0x30>)
     7cc:	191c      	adds	r4, r3, r4
     7ce:	1864      	adds	r4, r4, r1
	if (!_is_valid_rww_flash_address(src_addr) || !_is_valid_rww_flash_address(src_addr + length)) {
     7d0:	2580      	movs	r5, #128	; 0x80
     7d2:	01ad      	lsls	r5, r5, #6
     7d4:	42ac      	cmp	r4, r5
     7d6:	d806      	bhi.n	7e6 <_rww_flash_read+0x2a>
		return ERR_BAD_ADDRESS;
	}

	_flash_read(device, src_addr, buffer, length);
     7d8:	4c05      	ldr	r4, [pc, #20]	; (7f0 <_rww_flash_read+0x34>)
     7da:	47a0      	blx	r4

	return ERR_NONE;
     7dc:	2000      	movs	r0, #0
}
     7de:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_BAD_ADDRESS;
     7e0:	200e      	movs	r0, #14
     7e2:	4240      	negs	r0, r0
     7e4:	e7fb      	b.n	7de <_rww_flash_read+0x22>
     7e6:	200e      	movs	r0, #14
     7e8:	4240      	negs	r0, r0
     7ea:	e7f8      	b.n	7de <_rww_flash_read+0x22>
     7ec:	ffc00000 	.word	0xffc00000
     7f0:	0000073d 	.word	0x0000073d

000007f4 <_rww_flash_write>:

/**
 * \brief Writes a number of bytes in the internal RWWEE Flash.
 */
int32_t _rww_flash_write(struct _flash_device *const device, const uint32_t dst_addr, uint8_t *buffer, uint32_t length)
{
     7f4:	b5f0      	push	{r4, r5, r6, r7, lr}
     7f6:	46de      	mov	lr, fp
     7f8:	4657      	mov	r7, sl
     7fa:	464e      	mov	r6, r9
     7fc:	4645      	mov	r5, r8
     7fe:	b5e0      	push	{r5, r6, r7, lr}
     800:	b0c5      	sub	sp, #276	; 0x114
     802:	4683      	mov	fp, r0
     804:	0016      	movs	r6, r2
     806:	001d      	movs	r5, r3
	    || (addr > (NVMCTRL_RWW_EEPROM_ADDR + NVMCTRL_PAGE_SIZE * NVMCTRL_RWWEE_PAGES))) {
     808:	4b49      	ldr	r3, [pc, #292]	; (930 <_rww_flash_write+0x13c>)
     80a:	18ca      	adds	r2, r1, r3
	uint32_t row_start_addr, row_end_addr;
	uint32_t i, j, k;
	uint32_t wr_start_addr = dst_addr;

	/* Check if the address is valid */
	if (!_is_valid_rww_flash_address(dst_addr) || !_is_valid_rww_flash_address(dst_addr + length)) {
     80c:	2380      	movs	r3, #128	; 0x80
     80e:	019b      	lsls	r3, r3, #6
     810:	429a      	cmp	r2, r3
     812:	d900      	bls.n	816 <_rww_flash_write+0x22>
     814:	e086      	b.n	924 <_rww_flash_write+0x130>
	    || (addr > (NVMCTRL_RWW_EEPROM_ADDR + NVMCTRL_PAGE_SIZE * NVMCTRL_RWWEE_PAGES))) {
     816:	4b46      	ldr	r3, [pc, #280]	; (930 <_rww_flash_write+0x13c>)
     818:	18eb      	adds	r3, r5, r3
     81a:	185b      	adds	r3, r3, r1
	if (!_is_valid_rww_flash_address(dst_addr) || !_is_valid_rww_flash_address(dst_addr + length)) {
     81c:	2280      	movs	r2, #128	; 0x80
     81e:	0192      	lsls	r2, r2, #6
     820:	4293      	cmp	r3, r2
     822:	d900      	bls.n	826 <_rww_flash_write+0x32>
     824:	e081      	b.n	92a <_rww_flash_write+0x136>
     826:	000c      	movs	r4, r1
     828:	e02f      	b.n	88a <_rww_flash_write+0x96>
     82a:	46ba      	mov	sl, r7
     82c:	4667      	mov	r7, ip
			buffer++;
			length--;
		}

		/* erase row before write */
		_flash_erase_row(device->hw, row_start_addr, NVMCTRL_CTRLA_CMD_RWWEEER);
     82e:	465b      	mov	r3, fp
     830:	691a      	ldr	r2, [r3, #16]
	while (!hri_nvmctrl_get_interrupt_READY_bit(hw)) {
     832:	2101      	movs	r1, #1
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
     834:	7d13      	ldrb	r3, [r2, #20]
     836:	420b      	tst	r3, r1
     838:	d0fc      	beq.n	834 <_rww_flash_write+0x40>
	((Nvmctrl *)hw)->STATUS.reg = mask;
     83a:	2320      	movs	r3, #32
     83c:	33ff      	adds	r3, #255	; 0xff
     83e:	8313      	strh	r3, [r2, #24]
	hri_nvmctrl_write_ADDR_reg(hw, dst_addr / 2);
     840:	464b      	mov	r3, r9
     842:	085b      	lsrs	r3, r3, #1
	((Nvmctrl *)hw)->ADDR.reg = data;
     844:	61d3      	str	r3, [r2, #28]
	((Nvmctrl *)hw)->CTRLA.reg = data;
     846:	4b3b      	ldr	r3, [pc, #236]	; (934 <_rww_flash_write+0x140>)
     848:	8013      	strh	r3, [r2, #0]

		/* write buffer to flash */
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
			_flash_program(device->hw,
     84a:	464b      	mov	r3, r9
     84c:	46a0      	mov	r8, r4
     84e:	9703      	str	r7, [sp, #12]
     850:	002a      	movs	r2, r5
     852:	464d      	mov	r5, r9
     854:	46b1      	mov	r9, r6
     856:	465e      	mov	r6, fp
     858:	4693      	mov	fp, r2
     85a:	001f      	movs	r7, r3
     85c:	1b7a      	subs	r2, r7, r5
     85e:	ab04      	add	r3, sp, #16
     860:	469c      	mov	ip, r3
     862:	4462      	add	r2, ip
     864:	231c      	movs	r3, #28
     866:	9300      	str	r3, [sp, #0]
     868:	3324      	adds	r3, #36	; 0x24
     86a:	0039      	movs	r1, r7
     86c:	6930      	ldr	r0, [r6, #16]
     86e:	4c32      	ldr	r4, [pc, #200]	; (938 <_rww_flash_write+0x144>)
     870:	47a0      	blx	r4
     872:	3740      	adds	r7, #64	; 0x40
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
     874:	9b03      	ldr	r3, [sp, #12]
     876:	42bb      	cmp	r3, r7
     878:	d1f0      	bne.n	85c <_rww_flash_write+0x68>
     87a:	4644      	mov	r4, r8
     87c:	465d      	mov	r5, fp
     87e:	46b3      	mov	fp, r6
     880:	464e      	mov	r6, r9
			               tmp_buffer[i],
			               NVMCTRL_PAGE_SIZE,
			               NVMCTRL_CTRLA_CMD_RWWEEWP);
		}

	} while (row_end_addr < (wr_start_addr + length - 1));
     882:	192b      	adds	r3, r5, r4
     884:	3b01      	subs	r3, #1
     886:	459a      	cmp	sl, r3
     888:	d244      	bcs.n	914 <_rww_flash_write+0x120>
		row_start_addr = wr_start_addr & ~((NVMCTRL_PAGE_SIZE * NVMCTRL_ROW_PAGES) - 1);
     88a:	23ff      	movs	r3, #255	; 0xff
     88c:	0022      	movs	r2, r4
     88e:	439a      	bics	r2, r3
     890:	4691      	mov	r9, r2
		row_end_addr   = row_start_addr + NVMCTRL_ROW_PAGES * NVMCTRL_PAGE_SIZE - 1;
     892:	444b      	add	r3, r9
     894:	469a      	mov	sl, r3
     896:	2380      	movs	r3, #128	; 0x80
     898:	005b      	lsls	r3, r3, #1
     89a:	444b      	add	r3, r9
     89c:	4698      	mov	r8, r3
     89e:	0017      	movs	r7, r2
     8a0:	4642      	mov	r2, r8
     8a2:	9203      	str	r2, [sp, #12]
     8a4:	46a0      	mov	r8, r4
     8a6:	464c      	mov	r4, r9
     8a8:	46b1      	mov	r9, r6
     8aa:	465e      	mov	r6, fp
     8ac:	46ab      	mov	fp, r5
			_rww_flash_read(device, row_start_addr + i * NVMCTRL_PAGE_SIZE, tmp_buffer[i], NVMCTRL_PAGE_SIZE);
     8ae:	1b3a      	subs	r2, r7, r4
     8b0:	ab04      	add	r3, sp, #16
     8b2:	469c      	mov	ip, r3
     8b4:	4462      	add	r2, ip
     8b6:	2340      	movs	r3, #64	; 0x40
     8b8:	0039      	movs	r1, r7
     8ba:	0030      	movs	r0, r6
     8bc:	4d1f      	ldr	r5, [pc, #124]	; (93c <_rww_flash_write+0x148>)
     8be:	47a8      	blx	r5
     8c0:	3740      	adds	r7, #64	; 0x40
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
     8c2:	9b03      	ldr	r3, [sp, #12]
     8c4:	429f      	cmp	r7, r3
     8c6:	d1f2      	bne.n	8ae <_rww_flash_write+0xba>
     8c8:	465d      	mov	r5, fp
     8ca:	46b3      	mov	fp, r6
     8cc:	464e      	mov	r6, r9
     8ce:	46a1      	mov	r9, r4
     8d0:	4644      	mov	r4, r8
		j = (wr_start_addr - row_start_addr) / NVMCTRL_PAGE_SIZE;
     8d2:	464b      	mov	r3, r9
     8d4:	1ae3      	subs	r3, r4, r3
     8d6:	0999      	lsrs	r1, r3, #6
     8d8:	223f      	movs	r2, #63	; 0x3f
     8da:	4013      	ands	r3, r2
		while ((wr_start_addr <= row_end_addr) && (length > 0)) {
     8dc:	4554      	cmp	r4, sl
     8de:	d8a6      	bhi.n	82e <_rww_flash_write+0x3a>
     8e0:	2d00      	cmp	r5, #0
     8e2:	d0a4      	beq.n	82e <_rww_flash_write+0x3a>
			k                = (k + 1) % NVMCTRL_PAGE_SIZE;
     8e4:	46bc      	mov	ip, r7
     8e6:	4657      	mov	r7, sl
			tmp_buffer[j][k] = *buffer;
     8e8:	018a      	lsls	r2, r1, #6
     8ea:	a804      	add	r0, sp, #16
     8ec:	4680      	mov	r8, r0
     8ee:	4442      	add	r2, r8
     8f0:	7830      	ldrb	r0, [r6, #0]
     8f2:	54d0      	strb	r0, [r2, r3]
			k                = (k + 1) % NVMCTRL_PAGE_SIZE;
     8f4:	3301      	adds	r3, #1
     8f6:	223f      	movs	r2, #63	; 0x3f
     8f8:	4013      	ands	r3, r2
				j++;
     8fa:	425a      	negs	r2, r3
     8fc:	415a      	adcs	r2, r3
     8fe:	1889      	adds	r1, r1, r2
			wr_start_addr++;
     900:	3401      	adds	r4, #1
			buffer++;
     902:	3601      	adds	r6, #1
			length--;
     904:	3d01      	subs	r5, #1
		while ((wr_start_addr <= row_end_addr) && (length > 0)) {
     906:	42a7      	cmp	r7, r4
     908:	d38f      	bcc.n	82a <_rww_flash_write+0x36>
     90a:	2d00      	cmp	r5, #0
     90c:	d1ec      	bne.n	8e8 <_rww_flash_write+0xf4>
     90e:	46ba      	mov	sl, r7
     910:	4667      	mov	r7, ip
     912:	e78c      	b.n	82e <_rww_flash_write+0x3a>

	return ERR_NONE;
     914:	2000      	movs	r0, #0
}
     916:	b045      	add	sp, #276	; 0x114
     918:	bc3c      	pop	{r2, r3, r4, r5}
     91a:	4690      	mov	r8, r2
     91c:	4699      	mov	r9, r3
     91e:	46a2      	mov	sl, r4
     920:	46ab      	mov	fp, r5
     922:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ERR_BAD_ADDRESS;
     924:	200e      	movs	r0, #14
     926:	4240      	negs	r0, r0
     928:	e7f5      	b.n	916 <_rww_flash_write+0x122>
     92a:	200e      	movs	r0, #14
     92c:	4240      	negs	r0, r0
     92e:	e7f2      	b.n	916 <_rww_flash_write+0x122>
     930:	ffc00000 	.word	0xffc00000
     934:	ffffa51a 	.word	0xffffa51a
     938:	00000651 	.word	0x00000651
     93c:	000007bd 	.word	0x000007bd

00000940 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
     940:	4b04      	ldr	r3, [pc, #16]	; (954 <_osc32kctrl_init_sources+0x14>)
     942:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSC32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSC32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
     944:	21f8      	movs	r1, #248	; 0xf8
     946:	0149      	lsls	r1, r1, #5
     948:	400a      	ands	r2, r1
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
     94a:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     94c:	2201      	movs	r2, #1
     94e:	611a      	str	r2, [r3, #16]
		;
#endif
#endif
	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
     950:	4770      	bx	lr
     952:	46c0      	nop			; (mov r8, r8)
     954:	40001000 	.word	0x40001000

00000958 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_OSC16MCTRL_reg(const void *const hw, hri_oscctrl_osc16mctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC16MCTRL.reg = data;
     958:	2282      	movs	r2, #130	; 0x82
     95a:	4b0c      	ldr	r3, [pc, #48]	; (98c <_oscctrl_init_sources+0x34>)
     95c:	751a      	strb	r2, [r3, #20]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
     95e:	0018      	movs	r0, r3
     960:	2138      	movs	r1, #56	; 0x38
     962:	3a80      	subs	r2, #128	; 0x80
     964:	5c43      	ldrb	r3, [r0, r1]
     966:	4213      	tst	r3, r2
     968:	d1fc      	bne.n	964 <_oscctrl_init_sources+0xc>
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC16MRDY) >> OSCCTRL_STATUS_OSC16MRDY_Pos;
     96a:	4908      	ldr	r1, [pc, #32]	; (98c <_oscctrl_init_sources+0x34>)
#endif
#endif

#if CONF_OSC16M_CONFIG == 1
#if CONF_OSC16M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC16MRDY_bit(hw))
     96c:	2210      	movs	r2, #16
     96e:	68cb      	ldr	r3, [r1, #12]
     970:	421a      	tst	r2, r3
     972:	d0fc      	beq.n	96e <_oscctrl_init_sources+0x16>
	((Oscctrl *)hw)->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND;
     974:	4a05      	ldr	r2, [pc, #20]	; (98c <_oscctrl_init_sources+0x34>)
     976:	7d13      	ldrb	r3, [r2, #20]
     978:	2180      	movs	r1, #128	; 0x80
     97a:	430b      	orrs	r3, r1
     97c:	7513      	strb	r3, [r2, #20]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
     97e:	0010      	movs	r0, r2
     980:	3948      	subs	r1, #72	; 0x48
     982:	220e      	movs	r2, #14
     984:	5c43      	ldrb	r3, [r0, r1]
     986:	4213      	tst	r3, r2
     988:	d1fc      	bne.n	984 <_oscctrl_init_sources+0x2c>
#if CONF_OSC16M_ONDEMAND == 1
	hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
     98a:	4770      	bx	lr
     98c:	40000c00 	.word	0x40000c00

00000990 <_oscctrl_init_referenced_generators>:
#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
		;
#endif
	(void)hw, (void)tmp;
}
     990:	4770      	bx	lr

00000992 <_set_performance_level>:
}

static inline hri_pm_plcfg_reg_t hri_pm_get_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Pm *)hw)->PLCFG.reg;
     992:	2380      	movs	r3, #128	; 0x80
     994:	05db      	lsls	r3, r3, #23
     996:	789b      	ldrb	r3, [r3, #2]
/**
 * \brief Set performance level
 */
void _set_performance_level(const uint8_t level)
{
	if (hri_pm_get_PLCFG_PLSEL_bf(PM, PM_PLCFG_PLSEL_Msk) != level) {
     998:	2203      	movs	r2, #3
     99a:	4013      	ands	r3, r2
     99c:	4298      	cmp	r0, r3
     99e:	d00c      	beq.n	9ba <_set_performance_level+0x28>
	((Pm *)hw)->INTFLAG.reg = mask;
     9a0:	2280      	movs	r2, #128	; 0x80
     9a2:	05d2      	lsls	r2, r2, #23
     9a4:	23ff      	movs	r3, #255	; 0xff
     9a6:	7193      	strb	r3, [r2, #6]

static inline void hri_pm_write_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t data)
{
	uint8_t tmp;
	PM_CRITICAL_SECTION_ENTER();
	tmp = ((Pm *)hw)->PLCFG.reg;
     9a8:	7893      	ldrb	r3, [r2, #2]
	tmp &= ~PM_PLCFG_PLSEL_Msk;
     9aa:	2103      	movs	r1, #3
     9ac:	438b      	bics	r3, r1
	tmp |= PM_PLCFG_PLSEL(data);
     9ae:	4008      	ands	r0, r1
     9b0:	4318      	orrs	r0, r3
	((Pm *)hw)->PLCFG.reg = tmp;
     9b2:	7090      	strb	r0, [r2, #2]
	return ((Pm *)hw)->INTFLAG.reg;
     9b4:	7993      	ldrb	r3, [r2, #6]
		hri_pm_clear_INTFLAG_reg(PM, 0xFF);
		hri_pm_write_PLCFG_PLSEL_bf(PM, level);
		while (!hri_pm_read_INTFLAG_reg(PM))
     9b6:	2b00      	cmp	r3, #0
     9b8:	d0fc      	beq.n	9b4 <_set_performance_level+0x22>
			;
	}
}
     9ba:	4770      	bx	lr

000009bc <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
     9bc:	b510      	push	{r4, lr}
     9be:	0004      	movs	r4, r0
	if ((uint32_t)SERCOM5 == (uint32_t)hw) {
     9c0:	4b20      	ldr	r3, [pc, #128]	; (a44 <_usart_init+0x88>)
     9c2:	4298      	cmp	r0, r3
     9c4:	d003      	beq.n	9ce <_usart_init+0x12>
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
     9c6:	0383      	lsls	r3, r0, #14
		if (_usarts[i].number == sercom_offset) {
     9c8:	0e1b      	lsrs	r3, r3, #24
     9ca:	2b03      	cmp	r3, #3
     9cc:	d004      	beq.n	9d8 <_usart_init+0x1c>
	ASSERT(false);
     9ce:	4a1e      	ldr	r2, [pc, #120]	; (a48 <_usart_init+0x8c>)
     9d0:	491e      	ldr	r1, [pc, #120]	; (a4c <_usart_init+0x90>)
     9d2:	2000      	movs	r0, #0
     9d4:	4b1e      	ldr	r3, [pc, #120]	; (a50 <_usart_init+0x94>)
     9d6:	4798      	blx	r3
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
     9d8:	69e3      	ldr	r3, [r4, #28]
	uint8_t i = _get_sercom_index(hw);

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
     9da:	07db      	lsls	r3, r3, #31
     9dc:	d418      	bmi.n	a10 <_usart_init+0x54>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     9de:	2203      	movs	r2, #3
     9e0:	69e3      	ldr	r3, [r4, #28]
     9e2:	421a      	tst	r2, r3
     9e4:	d1fc      	bne.n	9e0 <_usart_init+0x24>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     9e6:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
     9e8:	079b      	lsls	r3, r3, #30
     9ea:	d50b      	bpl.n	a04 <_usart_init+0x48>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     9ec:	6823      	ldr	r3, [r4, #0]
     9ee:	2202      	movs	r2, #2
     9f0:	4393      	bics	r3, r2
     9f2:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     9f4:	3201      	adds	r2, #1
     9f6:	69e3      	ldr	r3, [r4, #28]
     9f8:	421a      	tst	r2, r3
     9fa:	d1fc      	bne.n	9f6 <_usart_init+0x3a>
     9fc:	2202      	movs	r2, #2
     9fe:	69e3      	ldr	r3, [r4, #28]
     a00:	421a      	tst	r2, r3
     a02:	d1fc      	bne.n	9fe <_usart_init+0x42>
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
     a04:	2305      	movs	r3, #5
     a06:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     a08:	2203      	movs	r2, #3
     a0a:	69e3      	ldr	r3, [r4, #28]
     a0c:	421a      	tst	r2, r3
     a0e:	d1fc      	bne.n	a0a <_usart_init+0x4e>
     a10:	2201      	movs	r2, #1
     a12:	69e3      	ldr	r3, [r4, #28]
     a14:	421a      	tst	r2, r3
     a16:	d1fc      	bne.n	a12 <_usart_init+0x56>
	((Sercom *)hw)->USART.CTRLA.reg = data;
     a18:	4b0e      	ldr	r3, [pc, #56]	; (a54 <_usart_init+0x98>)
     a1a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     a1c:	2203      	movs	r2, #3
     a1e:	69e3      	ldr	r3, [r4, #28]
     a20:	421a      	tst	r2, r3
     a22:	d1fc      	bne.n	a1e <_usart_init+0x62>
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
     a24:	23c0      	movs	r3, #192	; 0xc0
     a26:	029b      	lsls	r3, r3, #10
     a28:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     a2a:	2207      	movs	r2, #7
     a2c:	69e3      	ldr	r3, [r4, #28]
     a2e:	421a      	tst	r2, r3
     a30:	d1fc      	bne.n	a2c <_usart_init+0x70>
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
     a32:	4b09      	ldr	r3, [pc, #36]	; (a58 <_usart_init+0x9c>)
     a34:	81a3      	strh	r3, [r4, #12]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
     a36:	2300      	movs	r3, #0
     a38:	73a3      	strb	r3, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
     a3a:	2230      	movs	r2, #48	; 0x30
     a3c:	54a3      	strb	r3, [r4, r2]

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);

	return ERR_NONE;
}
     a3e:	2000      	movs	r0, #0
     a40:	bd10      	pop	{r4, pc}
     a42:	46c0      	nop			; (mov r8, r8)
     a44:	43000400 	.word	0x43000400
     a48:	0000023d 	.word	0x0000023d
     a4c:	000020e8 	.word	0x000020e8
     a50:	000005c5 	.word	0x000005c5
     a54:	40100004 	.word	0x40100004
     a58:	fffff62b 	.word	0xfffff62b

00000a5c <_usart_sync_init>:
{
     a5c:	b570      	push	{r4, r5, r6, lr}
     a5e:	0005      	movs	r5, r0
     a60:	000c      	movs	r4, r1
	ASSERT(device);
     a62:	1e43      	subs	r3, r0, #1
     a64:	4198      	sbcs	r0, r3
     a66:	b2c0      	uxtb	r0, r0
     a68:	22b4      	movs	r2, #180	; 0xb4
     a6a:	4904      	ldr	r1, [pc, #16]	; (a7c <_usart_sync_init+0x20>)
     a6c:	4b04      	ldr	r3, [pc, #16]	; (a80 <_usart_sync_init+0x24>)
     a6e:	4798      	blx	r3
	device->hw = hw;
     a70:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
     a72:	0020      	movs	r0, r4
     a74:	4b03      	ldr	r3, [pc, #12]	; (a84 <_usart_sync_init+0x28>)
     a76:	4798      	blx	r3
}
     a78:	bd70      	pop	{r4, r5, r6, pc}
     a7a:	46c0      	nop			; (mov r8, r8)
     a7c:	000020e8 	.word	0x000020e8
     a80:	000005c5 	.word	0x000005c5
     a84:	000009bd 	.word	0x000009bd

00000a88 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
     a88:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     a8a:	6813      	ldr	r3, [r2, #0]
     a8c:	2102      	movs	r1, #2
     a8e:	430b      	orrs	r3, r1
     a90:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     a92:	3101      	adds	r1, #1
     a94:	69d3      	ldr	r3, [r2, #28]
     a96:	4219      	tst	r1, r3
     a98:	d1fc      	bne.n	a94 <_usart_sync_enable+0xc>
}
     a9a:	4770      	bx	lr

00000a9c <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
     a9c:	6803      	ldr	r3, [r0, #0]
     a9e:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
     aa0:	8519      	strh	r1, [r3, #40]	; 0x28
}
     aa2:	4770      	bx	lr

00000aa4 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
     aa4:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
     aa6:	8d18      	ldrh	r0, [r3, #40]	; 0x28
     aa8:	b2c0      	uxtb	r0, r0
}
     aaa:	4770      	bx	lr

00000aac <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
     aac:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     aae:	7e18      	ldrb	r0, [r3, #24]
     ab0:	2301      	movs	r3, #1
     ab2:	4018      	ands	r0, r3
}
     ab4:	4770      	bx	lr

00000ab6 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
     ab6:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
     ab8:	7e18      	ldrb	r0, [r3, #24]
     aba:	0780      	lsls	r0, r0, #30
     abc:	0fc0      	lsrs	r0, r0, #31
}
     abe:	4770      	bx	lr

00000ac0 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
     ac0:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     ac2:	7e18      	ldrb	r0, [r3, #24]
     ac4:	0740      	lsls	r0, r0, #29
     ac6:	0fc0      	lsrs	r0, r0, #31
}
     ac8:	4770      	bx	lr
	...

00000acc <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
     acc:	4b02      	ldr	r3, [pc, #8]	; (ad8 <_delay_init+0xc>)
     ace:	4a03      	ldr	r2, [pc, #12]	; (adc <_delay_init+0x10>)
     ad0:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
     ad2:	2205      	movs	r2, #5
     ad4:	601a      	str	r2, [r3, #0]
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
	_system_time_init(hw);
}
     ad6:	4770      	bx	lr
     ad8:	e000e010 	.word	0xe000e010
     adc:	00ffffff 	.word	0x00ffffff

00000ae0 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
     ae0:	b570      	push	{r4, r5, r6, lr}
	(void)hw;
	uint8_t  n   = cycles >> 24;
     ae2:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
     ae4:	1e5e      	subs	r6, r3, #1
     ae6:	b2f6      	uxtb	r6, r6
     ae8:	2b00      	cmp	r3, #0
     aea:	d013      	beq.n	b14 <_delay_cycles+0x34>
     aec:	0034      	movs	r4, r6
		SysTick->LOAD = 0xFFFFFF;
     aee:	4a0e      	ldr	r2, [pc, #56]	; (b28 <_delay_cycles+0x48>)
     af0:	4d0e      	ldr	r5, [pc, #56]	; (b2c <_delay_cycles+0x4c>)
		SysTick->VAL  = 0xFFFFFF;
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
     af2:	2080      	movs	r0, #128	; 0x80
     af4:	0240      	lsls	r0, r0, #9
		SysTick->LOAD = 0xFFFFFF;
     af6:	6055      	str	r5, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
     af8:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
     afa:	6813      	ldr	r3, [r2, #0]
     afc:	4203      	tst	r3, r0
     afe:	d0fc      	beq.n	afa <_delay_cycles+0x1a>
	while (n--) {
     b00:	3c01      	subs	r4, #1
     b02:	b2e4      	uxtb	r4, r4
     b04:	2cff      	cmp	r4, #255	; 0xff
     b06:	d1f6      	bne.n	af6 <_delay_cycles+0x16>
     b08:	0633      	lsls	r3, r6, #24
     b0a:	1af6      	subs	r6, r6, r3
     b0c:	4b08      	ldr	r3, [pc, #32]	; (b30 <_delay_cycles+0x50>)
     b0e:	469c      	mov	ip, r3
     b10:	4461      	add	r1, ip
     b12:	1871      	adds	r1, r6, r1
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
     b14:	4b04      	ldr	r3, [pc, #16]	; (b28 <_delay_cycles+0x48>)
     b16:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
     b18:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
     b1a:	0019      	movs	r1, r3
     b1c:	2280      	movs	r2, #128	; 0x80
     b1e:	0252      	lsls	r2, r2, #9
     b20:	680b      	ldr	r3, [r1, #0]
     b22:	4213      	tst	r3, r2
     b24:	d0fc      	beq.n	b20 <_delay_cycles+0x40>
		;
}
     b26:	bd70      	pop	{r4, r5, r6, pc}
     b28:	e000e010 	.word	0xe000e010
     b2c:	00ffffff 	.word	0x00ffffff
     b30:	ff000001 	.word	0xff000001

00000b34 <UART_EDBG_init>:
static uint8_t hello_str[] = "\r\nCrypto Accelerator \r\n";

static struct io_descriptor *terminal_io;

void UART_EDBG_init()
{
     b34:	b510      	push	{r4, lr}
	usart_sync_get_io_descriptor(&USART_0, &terminal_io);
     b36:	4c04      	ldr	r4, [pc, #16]	; (b48 <UART_EDBG_init+0x14>)
     b38:	4904      	ldr	r1, [pc, #16]	; (b4c <UART_EDBG_init+0x18>)
     b3a:	0020      	movs	r0, r4
     b3c:	4b04      	ldr	r3, [pc, #16]	; (b50 <UART_EDBG_init+0x1c>)
     b3e:	4798      	blx	r3
	usart_sync_enable(&USART_0);
     b40:	0020      	movs	r0, r4
     b42:	4b04      	ldr	r3, [pc, #16]	; (b54 <UART_EDBG_init+0x20>)
     b44:	4798      	blx	r3
}
     b46:	bd10      	pop	{r4, pc}
     b48:	200000cc 	.word	0x200000cc
     b4c:	200000a8 	.word	0x200000a8
     b50:	00000599 	.word	0x00000599
     b54:	0000056d 	.word	0x0000056d

00000b58 <aes_measurement>:

uint8_t input[MAX_NUM_BYTES];


void aes_measurement(void)
{
     b58:	b5f0      	push	{r4, r5, r6, r7, lr}
     b5a:	46de      	mov	lr, fp
     b5c:	4657      	mov	r7, sl
     b5e:	464e      	mov	r6, r9
     b60:	4645      	mov	r5, r8
     b62:	b5e0      	push	{r5, r6, r7, lr}
     b64:	4c99      	ldr	r4, [pc, #612]	; (dcc <aes_measurement+0x274>)
     b66:	44a5      	add	sp, r4
	};*/

	Aes enc;
	Aes dec;
	
	const uint8_t key[32] = {
     b68:	a906      	add	r1, sp, #24
     b6a:	4b99      	ldr	r3, [pc, #612]	; (dd0 <aes_measurement+0x278>)
     b6c:	000a      	movs	r2, r1
     b6e:	cb13      	ldmia	r3!, {r0, r1, r4}
     b70:	c213      	stmia	r2!, {r0, r1, r4}
     b72:	cb13      	ldmia	r3!, {r0, r1, r4}
     b74:	c213      	stmia	r2!, {r0, r1, r4}
     b76:	cb03      	ldmia	r3!, {r0, r1}
     b78:	c203      	stmia	r2!, {r0, r1}
	
	// Allocate buffer memory
	//uint8_t *input = malloc(sizeof(uint8_t) * MAX_NUM_BYTES);
	//uint8_t input[MAX_NUM_BYTES];

    delay_ms(10);
     b7a:	200a      	movs	r0, #10
     b7c:	4b95      	ldr	r3, [pc, #596]	; (dd4 <aes_measurement+0x27c>)
     b7e:	4798      	blx	r3
     b80:	2320      	movs	r3, #32
     b82:	4699      	mov	r9, r3
     b84:	2410      	movs	r4, #16

	for (size_t num_bytes = MIN_NUM_BYTES; num_bytes <= MAX_NUM_BYTES; num_bytes += STEP_SIZE) {
		
		// Fill with sequential data.
		for (size_t byte = 0; byte < num_bytes; byte++) {
			input[byte] = byte; // 0x00 to write 0's OR 0xFF to write 1's.
     b86:	4d94      	ldr	r5, [pc, #592]	; (dd8 <aes_measurement+0x280>)
		/* Read data from flash (Solution 2) */
		//flash_read(&FLASH_0, target_addr, output, num_bytes);
		STOP_MEASURE(DGI_GPIO3);
		
	
		wc_AesSetKey(&dec, key, sizeof(key), iv2, AES_DECRYPTION);
     b88:	4b94      	ldr	r3, [pc, #592]	; (ddc <aes_measurement+0x284>)
     b8a:	3310      	adds	r3, #16
     b8c:	9304      	str	r3, [sp, #16]
     b8e:	4b93      	ldr	r3, [pc, #588]	; (ddc <aes_measurement+0x284>)
     b90:	3310      	adds	r3, #16
     b92:	9305      	str	r3, [sp, #20]
     b94:	464b      	mov	r3, r9
     b96:	9303      	str	r3, [sp, #12]
     b98:	e078      	b.n	c8c <aes_measurement+0x134>
		wc_AesSetKey(&enc, key, sizeof(key), iv, AES_ENCRYPTION);
     b9a:	2300      	movs	r3, #0
     b9c:	9300      	str	r3, [sp, #0]
     b9e:	4b8f      	ldr	r3, [pc, #572]	; (ddc <aes_measurement+0x284>)
     ba0:	2220      	movs	r2, #32
     ba2:	a906      	add	r1, sp, #24
     ba4:	a855      	add	r0, sp, #340	; 0x154
     ba6:	4e8e      	ldr	r6, [pc, #568]	; (de0 <aes_measurement+0x288>)
     ba8:	47b0      	blx	r6
		START_MEASURE(DGI_GPIO2);
     baa:	2002      	movs	r0, #2
     bac:	4b89      	ldr	r3, [pc, #548]	; (dd4 <aes_measurement+0x27c>)
     bae:	4699      	mov	r9, r3
     bb0:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     bb2:	26c0      	movs	r6, #192	; 0xc0
     bb4:	05f6      	lsls	r6, r6, #23
     bb6:	2380      	movs	r3, #128	; 0x80
     bb8:	035b      	lsls	r3, r3, #13
     bba:	469a      	mov	sl, r3
     bbc:	61b3      	str	r3, [r6, #24]
		wc_AesCbcEncrypt(&enc, input, input, num_bytes);
     bbe:	2300      	movs	r3, #0
     bc0:	4a85      	ldr	r2, [pc, #532]	; (dd8 <aes_measurement+0x280>)
     bc2:	0011      	movs	r1, r2
     bc4:	a855      	add	r0, sp, #340	; 0x154
     bc6:	4f87      	ldr	r7, [pc, #540]	; (de4 <aes_measurement+0x28c>)
     bc8:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     bca:	4653      	mov	r3, sl
     bcc:	6173      	str	r3, [r6, #20]
		STOP_MEASURE(DGI_GPIO2);
     bce:	2002      	movs	r0, #2
     bd0:	47c8      	blx	r9
		START_MEASURE(DGI_GPIO3);
     bd2:	2002      	movs	r0, #2
     bd4:	47c8      	blx	r9
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     bd6:	2380      	movs	r3, #128	; 0x80
     bd8:	039b      	lsls	r3, r3, #14
     bda:	61b3      	str	r3, [r6, #24]
		if (_rww_flash_write(&FLASH_0.dev, NVMCTRL_RWW_EEPROM_ADDR, input, num_bytes ) != ERR_NONE) {
     bdc:	2300      	movs	r3, #0
     bde:	4a7e      	ldr	r2, [pc, #504]	; (dd8 <aes_measurement+0x280>)
     be0:	2180      	movs	r1, #128	; 0x80
     be2:	03c9      	lsls	r1, r1, #15
     be4:	4880      	ldr	r0, [pc, #512]	; (de8 <aes_measurement+0x290>)
     be6:	4e81      	ldr	r6, [pc, #516]	; (dec <aes_measurement+0x294>)
     be8:	47b0      	blx	r6
     bea:	2800      	cmp	r0, #0
     bec:	d000      	beq.n	bf0 <aes_measurement+0x98>
     bee:	e0c5      	b.n	d7c <aes_measurement+0x224>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     bf0:	23c0      	movs	r3, #192	; 0xc0
     bf2:	05db      	lsls	r3, r3, #23
     bf4:	4698      	mov	r8, r3
     bf6:	2380      	movs	r3, #128	; 0x80
     bf8:	039b      	lsls	r3, r3, #14
     bfa:	4699      	mov	r9, r3
     bfc:	4643      	mov	r3, r8
     bfe:	464a      	mov	r2, r9
     c00:	615a      	str	r2, [r3, #20]
		STOP_MEASURE(DGI_GPIO3);
     c02:	2002      	movs	r0, #2
     c04:	4e73      	ldr	r6, [pc, #460]	; (dd4 <aes_measurement+0x27c>)
     c06:	47b0      	blx	r6
		SLEEP;
     c08:	2002      	movs	r0, #2
     c0a:	47b0      	blx	r6
		delay_ms(20);
     c0c:	2014      	movs	r0, #20
     c0e:	47b0      	blx	r6
		START_MEASURE(DGI_GPIO3);
     c10:	2002      	movs	r0, #2
     c12:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     c14:	4643      	mov	r3, r8
     c16:	464a      	mov	r2, r9
     c18:	619a      	str	r2, [r3, #24]
		if (_rww_flash_read(&FLASH_0.dev, NVMCTRL_RWW_EEPROM_ADDR, input, num_bytes) != ERR_NONE) {
     c1a:	2300      	movs	r3, #0
     c1c:	4a6e      	ldr	r2, [pc, #440]	; (dd8 <aes_measurement+0x280>)
     c1e:	2180      	movs	r1, #128	; 0x80
     c20:	03c9      	lsls	r1, r1, #15
     c22:	4871      	ldr	r0, [pc, #452]	; (de8 <aes_measurement+0x290>)
     c24:	4e72      	ldr	r6, [pc, #456]	; (df0 <aes_measurement+0x298>)
     c26:	47b0      	blx	r6
     c28:	2800      	cmp	r0, #0
     c2a:	d100      	bne.n	c2e <aes_measurement+0xd6>
     c2c:	e0a7      	b.n	d7e <aes_measurement+0x226>
     c2e:	e087      	b.n	d40 <aes_measurement+0x1e8>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c30:	23c0      	movs	r3, #192	; 0xc0
     c32:	05db      	lsls	r3, r3, #23
     c34:	4698      	mov	r8, r3
     c36:	2380      	movs	r3, #128	; 0x80
     c38:	039b      	lsls	r3, r3, #14
     c3a:	4642      	mov	r2, r8
     c3c:	6153      	str	r3, [r2, #20]
		STOP_MEASURE(DGI_GPIO3);
     c3e:	2002      	movs	r0, #2
     c40:	4e64      	ldr	r6, [pc, #400]	; (dd4 <aes_measurement+0x27c>)
     c42:	47b0      	blx	r6
		wc_AesSetKey(&dec, key, sizeof(key), iv2, AES_DECRYPTION);
     c44:	2301      	movs	r3, #1
     c46:	9300      	str	r3, [sp, #0]
     c48:	9b04      	ldr	r3, [sp, #16]
     c4a:	2220      	movs	r2, #32
     c4c:	a906      	add	r1, sp, #24
     c4e:	a80e      	add	r0, sp, #56	; 0x38
     c50:	4f63      	ldr	r7, [pc, #396]	; (de0 <aes_measurement+0x288>)
     c52:	47b8      	blx	r7

		// Start decryption
		START_MEASURE(DGI_GPIO2);
     c54:	2002      	movs	r0, #2
     c56:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     c58:	2380      	movs	r3, #128	; 0x80
     c5a:	035b      	lsls	r3, r3, #13
     c5c:	4699      	mov	r9, r3
     c5e:	4643      	mov	r3, r8
     c60:	464a      	mov	r2, r9
     c62:	619a      	str	r2, [r3, #24]
		/*decrypt*/
		wc_AesCbcDecrypt(&dec, input, input,num_bytes);
     c64:	495c      	ldr	r1, [pc, #368]	; (dd8 <aes_measurement+0x280>)
     c66:	0023      	movs	r3, r4
     c68:	000a      	movs	r2, r1
     c6a:	a80e      	add	r0, sp, #56	; 0x38
     c6c:	4f61      	ldr	r7, [pc, #388]	; (df4 <aes_measurement+0x29c>)
     c6e:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c70:	4643      	mov	r3, r8
     c72:	464a      	mov	r2, r9
     c74:	615a      	str	r2, [r3, #20]
		STOP_MEASURE(DGI_GPIO2);
     c76:	2002      	movs	r0, #2
     c78:	47b0      	blx	r6
	for (size_t num_bytes = MIN_NUM_BYTES; num_bytes <= MAX_NUM_BYTES; num_bytes += STEP_SIZE) {
     c7a:	23c0      	movs	r3, #192	; 0xc0
     c7c:	015b      	lsls	r3, r3, #5
     c7e:	9a03      	ldr	r2, [sp, #12]
     c80:	429a      	cmp	r2, r3
     c82:	d85e      	bhi.n	d42 <aes_measurement+0x1ea>
     c84:	3410      	adds	r4, #16
     c86:	9b03      	ldr	r3, [sp, #12]
     c88:	3310      	adds	r3, #16
     c8a:	9303      	str	r3, [sp, #12]
		for (size_t byte = 0; byte < num_bytes; byte++) {
     c8c:	2300      	movs	r3, #0
     c8e:	2c00      	cmp	r4, #0
     c90:	d083      	beq.n	b9a <aes_measurement+0x42>
     c92:	9f03      	ldr	r7, [sp, #12]
			input[byte] = byte; // 0x00 to write 0's OR 0xFF to write 1's.
     c94:	54eb      	strb	r3, [r5, r3]
		for (size_t byte = 0; byte < num_bytes; byte++) {
     c96:	3301      	adds	r3, #1
     c98:	429c      	cmp	r4, r3
     c9a:	d1fb      	bne.n	c94 <aes_measurement+0x13c>
     c9c:	9703      	str	r7, [sp, #12]
		wc_AesSetKey(&enc, key, sizeof(key), iv, AES_ENCRYPTION);
     c9e:	2300      	movs	r3, #0
     ca0:	9300      	str	r3, [sp, #0]
     ca2:	4b4e      	ldr	r3, [pc, #312]	; (ddc <aes_measurement+0x284>)
     ca4:	2220      	movs	r2, #32
     ca6:	a906      	add	r1, sp, #24
     ca8:	a855      	add	r0, sp, #340	; 0x154
     caa:	4e4d      	ldr	r6, [pc, #308]	; (de0 <aes_measurement+0x288>)
     cac:	47b0      	blx	r6
		START_MEASURE(DGI_GPIO2);
     cae:	2002      	movs	r0, #2
     cb0:	4b48      	ldr	r3, [pc, #288]	; (dd4 <aes_measurement+0x27c>)
     cb2:	4699      	mov	r9, r3
     cb4:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     cb6:	26c0      	movs	r6, #192	; 0xc0
     cb8:	05f6      	lsls	r6, r6, #23
     cba:	2380      	movs	r3, #128	; 0x80
     cbc:	035b      	lsls	r3, r3, #13
     cbe:	469a      	mov	sl, r3
     cc0:	61b3      	str	r3, [r6, #24]
		wc_AesCbcEncrypt(&enc, input, input, num_bytes);
     cc2:	0023      	movs	r3, r4
     cc4:	4a44      	ldr	r2, [pc, #272]	; (dd8 <aes_measurement+0x280>)
     cc6:	0011      	movs	r1, r2
     cc8:	a855      	add	r0, sp, #340	; 0x154
     cca:	4f46      	ldr	r7, [pc, #280]	; (de4 <aes_measurement+0x28c>)
     ccc:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     cce:	4653      	mov	r3, sl
     cd0:	6173      	str	r3, [r6, #20]
		STOP_MEASURE(DGI_GPIO2);
     cd2:	2002      	movs	r0, #2
     cd4:	47c8      	blx	r9
		START_MEASURE(DGI_GPIO3);
     cd6:	2002      	movs	r0, #2
     cd8:	47c8      	blx	r9
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     cda:	2380      	movs	r3, #128	; 0x80
     cdc:	039b      	lsls	r3, r3, #14
     cde:	61b3      	str	r3, [r6, #24]
		if (_rww_flash_write(&FLASH_0.dev, NVMCTRL_RWW_EEPROM_ADDR, input, num_bytes ) != ERR_NONE) {
     ce0:	0023      	movs	r3, r4
     ce2:	4a3d      	ldr	r2, [pc, #244]	; (dd8 <aes_measurement+0x280>)
     ce4:	2180      	movs	r1, #128	; 0x80
     ce6:	03c9      	lsls	r1, r1, #15
     ce8:	483f      	ldr	r0, [pc, #252]	; (de8 <aes_measurement+0x290>)
     cea:	4e40      	ldr	r6, [pc, #256]	; (dec <aes_measurement+0x294>)
     cec:	47b0      	blx	r6
     cee:	2800      	cmp	r0, #0
     cf0:	d144      	bne.n	d7c <aes_measurement+0x224>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     cf2:	2280      	movs	r2, #128	; 0x80
     cf4:	0392      	lsls	r2, r2, #14
     cf6:	23c0      	movs	r3, #192	; 0xc0
     cf8:	05db      	lsls	r3, r3, #23
     cfa:	615a      	str	r2, [r3, #20]
		STOP_MEASURE(DGI_GPIO3);
     cfc:	2002      	movs	r0, #2
     cfe:	4e35      	ldr	r6, [pc, #212]	; (dd4 <aes_measurement+0x27c>)
     d00:	47b0      	blx	r6
		SLEEP;
     d02:	2002      	movs	r0, #2
     d04:	47b0      	blx	r6
		delay_ms(20);
     d06:	2014      	movs	r0, #20
     d08:	47b0      	blx	r6
     d0a:	2300      	movs	r3, #0
			input[byte] = 0xfe;
     d0c:	4932      	ldr	r1, [pc, #200]	; (dd8 <aes_measurement+0x280>)
     d0e:	22fe      	movs	r2, #254	; 0xfe
     d10:	9f03      	ldr	r7, [sp, #12]
     d12:	54ca      	strb	r2, [r1, r3]
		for (size_t byte = 0; byte < num_bytes; byte++) {
     d14:	3301      	adds	r3, #1
     d16:	429c      	cmp	r4, r3
     d18:	d8fb      	bhi.n	d12 <aes_measurement+0x1ba>
     d1a:	9703      	str	r7, [sp, #12]
		START_MEASURE(DGI_GPIO3);
     d1c:	2002      	movs	r0, #2
     d1e:	4b2d      	ldr	r3, [pc, #180]	; (dd4 <aes_measurement+0x27c>)
     d20:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     d22:	2280      	movs	r2, #128	; 0x80
     d24:	0392      	lsls	r2, r2, #14
     d26:	23c0      	movs	r3, #192	; 0xc0
     d28:	05db      	lsls	r3, r3, #23
     d2a:	619a      	str	r2, [r3, #24]
		if (_rww_flash_read(&FLASH_0.dev, NVMCTRL_RWW_EEPROM_ADDR, input, num_bytes) != ERR_NONE) {
     d2c:	0023      	movs	r3, r4
     d2e:	4a2a      	ldr	r2, [pc, #168]	; (dd8 <aes_measurement+0x280>)
     d30:	2180      	movs	r1, #128	; 0x80
     d32:	03c9      	lsls	r1, r1, #15
     d34:	482c      	ldr	r0, [pc, #176]	; (de8 <aes_measurement+0x290>)
     d36:	4e2e      	ldr	r6, [pc, #184]	; (df0 <aes_measurement+0x298>)
     d38:	47b0      	blx	r6
     d3a:	2800      	cmp	r0, #0
     d3c:	d100      	bne.n	d40 <aes_measurement+0x1e8>
     d3e:	e777      	b.n	c30 <aes_measurement+0xd8>
     d40:	e7fe      	b.n	d40 <aes_measurement+0x1e8>
		
	}
	
	
		// Free the memory
		free(input);
     d42:	4825      	ldr	r0, [pc, #148]	; (dd8 <aes_measurement+0x280>)
     d44:	4b2c      	ldr	r3, [pc, #176]	; (df8 <aes_measurement+0x2a0>)
     d46:	4798      	blx	r3

		END_MEASUREMENT;
     d48:	200a      	movs	r0, #10
     d4a:	4b22      	ldr	r3, [pc, #136]	; (dd4 <aes_measurement+0x27c>)
     d4c:	4798      	blx	r3
     d4e:	23c0      	movs	r3, #192	; 0xc0
     d50:	05db      	lsls	r3, r3, #23
     d52:	2102      	movs	r1, #2
     d54:	2298      	movs	r2, #152	; 0x98
     d56:	5099      	str	r1, [r3, r2]
     d58:	2280      	movs	r2, #128	; 0x80
     d5a:	0252      	lsls	r2, r2, #9
     d5c:	619a      	str	r2, [r3, #24]
     d5e:	2280      	movs	r2, #128	; 0x80
     d60:	0352      	lsls	r2, r2, #13
     d62:	619a      	str	r2, [r3, #24]
     d64:	2280      	movs	r2, #128	; 0x80
     d66:	0392      	lsls	r2, r2, #14
     d68:	619a      	str	r2, [r3, #24]
			
	
}
     d6a:	239d      	movs	r3, #157	; 0x9d
     d6c:	009b      	lsls	r3, r3, #2
     d6e:	449d      	add	sp, r3
     d70:	bc3c      	pop	{r2, r3, r4, r5}
     d72:	4690      	mov	r8, r2
     d74:	4699      	mov	r9, r3
     d76:	46a2      	mov	sl, r4
     d78:	46ab      	mov	fp, r5
     d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d7c:	e7fe      	b.n	d7c <aes_measurement+0x224>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d7e:	23c0      	movs	r3, #192	; 0xc0
     d80:	05db      	lsls	r3, r3, #23
     d82:	4698      	mov	r8, r3
     d84:	2380      	movs	r3, #128	; 0x80
     d86:	039b      	lsls	r3, r3, #14
     d88:	4642      	mov	r2, r8
     d8a:	6153      	str	r3, [r2, #20]
		STOP_MEASURE(DGI_GPIO3);
     d8c:	2002      	movs	r0, #2
     d8e:	4e11      	ldr	r6, [pc, #68]	; (dd4 <aes_measurement+0x27c>)
     d90:	47b0      	blx	r6
		wc_AesSetKey(&dec, key, sizeof(key), iv2, AES_DECRYPTION);
     d92:	2301      	movs	r3, #1
     d94:	9300      	str	r3, [sp, #0]
     d96:	9b05      	ldr	r3, [sp, #20]
     d98:	2220      	movs	r2, #32
     d9a:	a906      	add	r1, sp, #24
     d9c:	a80e      	add	r0, sp, #56	; 0x38
     d9e:	4f10      	ldr	r7, [pc, #64]	; (de0 <aes_measurement+0x288>)
     da0:	47b8      	blx	r7
		START_MEASURE(DGI_GPIO2);
     da2:	2002      	movs	r0, #2
     da4:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     da6:	2380      	movs	r3, #128	; 0x80
     da8:	035b      	lsls	r3, r3, #13
     daa:	4699      	mov	r9, r3
     dac:	4643      	mov	r3, r8
     dae:	464a      	mov	r2, r9
     db0:	619a      	str	r2, [r3, #24]
		wc_AesCbcDecrypt(&dec, input, input,num_bytes);
     db2:	4909      	ldr	r1, [pc, #36]	; (dd8 <aes_measurement+0x280>)
     db4:	2300      	movs	r3, #0
     db6:	000a      	movs	r2, r1
     db8:	a80e      	add	r0, sp, #56	; 0x38
     dba:	4f0e      	ldr	r7, [pc, #56]	; (df4 <aes_measurement+0x29c>)
     dbc:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     dbe:	4643      	mov	r3, r8
     dc0:	464a      	mov	r2, r9
     dc2:	615a      	str	r2, [r3, #20]
		STOP_MEASURE(DGI_GPIO2);
     dc4:	2002      	movs	r0, #2
     dc6:	47b0      	blx	r6
     dc8:	e75c      	b.n	c84 <aes_measurement+0x12c>
     dca:	46c0      	nop			; (mov r8, r8)
     dcc:	fffffd8c 	.word	0xfffffd8c
     dd0:	00002104 	.word	0x00002104
     dd4:	000003bd 	.word	0x000003bd
     dd8:	200000d8 	.word	0x200000d8
     ddc:	20000000 	.word	0x20000000
     de0:	00000e51 	.word	0x00000e51
     de4:	000013c9 	.word	0x000013c9
     de8:	200000b0 	.word	0x200000b0
     dec:	000007f5 	.word	0x000007f5
     df0:	000007bd 	.word	0x000007bd
     df4:	00001a1d 	.word	0x00001a1d
     df8:	00001fc5 	.word	0x00001fc5

00000dfc <main>:

int main(void)
{
     dfc:	b510      	push	{r4, lr}
	atmel_start_init();
     dfe:	4b04      	ldr	r3, [pc, #16]	; (e10 <main+0x14>)
     e00:	4798      	blx	r3

	UART_EDBG_init();		/*For sending/receiving data to PC*/
     e02:	4b04      	ldr	r3, [pc, #16]	; (e14 <main+0x18>)
     e04:	4798      	blx	r3
	
	//io_write(terminal_io, hello_str, sizeof(hello_str) - 1);
	
	//FLASH_0_test();
	aes_measurement();
     e06:	4b04      	ldr	r3, [pc, #16]	; (e18 <main+0x1c>)
     e08:	4798      	blx	r3
	/*while (true) {
		delay_ms(500);
		gpio_toggle_pin_level(LED0);
	}*/
	
     e0a:	2000      	movs	r0, #0
     e0c:	bd10      	pop	{r4, pc}
     e0e:	46c0      	nop			; (mov r8, r8)
     e10:	00000115 	.word	0x00000115
     e14:	00000b35 	.word	0x00000b35
     e18:	00000b59 	.word	0x00000b59

00000e1c <wc_AesSetIV>:
#endif /* wc_AesSetKey block */


/* wc_AesSetIV is shared between software and hardware */
int wc_AesSetIV(Aes* aes, const byte* iv)
{
     e1c:	b510      	push	{r4, lr}
    if (aes == NULL)
     e1e:	2800      	cmp	r0, #0
     e20:	d00e      	beq.n	e40 <wc_AesSetIV+0x24>
        return BAD_FUNC_ARG;

    if (iv)
     e22:	2900      	cmp	r1, #0
     e24:	d005      	beq.n	e32 <wc_AesSetIV+0x16>
        XMEMCPY(aes->reg, iv, AES_BLOCK_SIZE);
     e26:	30f8      	adds	r0, #248	; 0xf8
     e28:	2210      	movs	r2, #16
     e2a:	4b07      	ldr	r3, [pc, #28]	; (e48 <wc_AesSetIV+0x2c>)
     e2c:	4798      	blx	r3
    else
        XMEMSET(aes->reg,  0, AES_BLOCK_SIZE);

    return 0;
     e2e:	2000      	movs	r0, #0
}
     e30:	bd10      	pop	{r4, pc}
        XMEMSET(aes->reg,  0, AES_BLOCK_SIZE);
     e32:	30f8      	adds	r0, #248	; 0xf8
     e34:	2210      	movs	r2, #16
     e36:	2100      	movs	r1, #0
     e38:	4b04      	ldr	r3, [pc, #16]	; (e4c <wc_AesSetIV+0x30>)
     e3a:	4798      	blx	r3
    return 0;
     e3c:	2000      	movs	r0, #0
     e3e:	e7f7      	b.n	e30 <wc_AesSetIV+0x14>
        return BAD_FUNC_ARG;
     e40:	20ad      	movs	r0, #173	; 0xad
     e42:	4240      	negs	r0, r0
     e44:	e7f4      	b.n	e30 <wc_AesSetIV+0x14>
     e46:	46c0      	nop			; (mov r8, r8)
     e48:	00001fd9 	.word	0x00001fd9
     e4c:	00001feb 	.word	0x00001feb

00000e50 <wc_AesSetKey>:
    {
     e50:	b5f0      	push	{r4, r5, r6, r7, lr}
     e52:	46de      	mov	lr, fp
     e54:	4657      	mov	r7, sl
     e56:	464e      	mov	r6, r9
     e58:	4645      	mov	r5, r8
     e5a:	b5e0      	push	{r5, r6, r7, lr}
     e5c:	b085      	sub	sp, #20
     e5e:	0007      	movs	r7, r0
     e60:	0014      	movs	r4, r2
     e62:	9301      	str	r3, [sp, #4]
        if (aes == NULL ||
     e64:	2800      	cmp	r0, #0
     e66:	d100      	bne.n	e6a <wc_AesSetKey+0x1a>
     e68:	e2a3      	b.n	13b2 <wc_AesSetKey+0x562>
     e6a:	2308      	movs	r3, #8
     e6c:	439a      	bics	r2, r3
     e6e:	2a10      	cmp	r2, #16
     e70:	d02c      	beq.n	ecc <wc_AesSetKey+0x7c>
                !((keylen == 16) || (keylen == 24) || (keylen == 32))) {
     e72:	2c20      	cmp	r4, #32
     e74:	d000      	beq.n	e78 <wc_AesSetKey+0x28>
     e76:	e29f      	b.n	13b8 <wc_AesSetKey+0x568>
        aes->keylen = keylen;
     e78:	23f4      	movs	r3, #244	; 0xf4
     e7a:	50c4      	str	r4, [r0, r3]
        aes->rounds = keylen/4 + 6;
     e7c:	08a6      	lsrs	r6, r4, #2
     e7e:	1db2      	adds	r2, r6, #6
     e80:	3b04      	subs	r3, #4
     e82:	50c2      	str	r2, [r0, r3]
        word32 *rk = aes->key;
     e84:	0005      	movs	r5, r0
        XMEMCPY(rk, userKey, keylen);
     e86:	0022      	movs	r2, r4
     e88:	4bb7      	ldr	r3, [pc, #732]	; (1168 <wc_AesSetKey+0x318>)
     e8a:	4798      	blx	r3
     e8c:	002a      	movs	r2, r5
     e8e:	00b1      	lsls	r1, r6, #2
     e90:	1869      	adds	r1, r5, r1
    /* 5 instructions with rotate instruction, 9 without */
    return (rotrFixed(value, 8U) & 0xff00ff00) |
           (rotlFixed(value, 8U) & 0x00ff00ff);
#else
    /* 6 instructions with rotate instruction, 8 without */
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
     e92:	4bb6      	ldr	r3, [pc, #728]	; (116c <wc_AesSetKey+0x31c>)
     e94:	469c      	mov	ip, r3
     e96:	4eb6      	ldr	r6, [pc, #728]	; (1170 <wc_AesSetKey+0x320>)
        return (x << y) | (x >> (sizeof(y) * 8 - y));
     e98:	2010      	movs	r0, #16
     e9a:	46a9      	mov	r9, r5
     e9c:	46a0      	mov	r8, r4
                                    word32 byteCount)
{
    word32 count = byteCount/(word32)sizeof(word32), i;

    for (i = 0; i < count; i++)
        out[i] = ByteReverseWord32(in[i]);
     e9e:	6814      	ldr	r4, [r2, #0]
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
     ea0:	0a23      	lsrs	r3, r4, #8
     ea2:	4665      	mov	r5, ip
     ea4:	402b      	ands	r3, r5
     ea6:	0224      	lsls	r4, r4, #8
     ea8:	4034      	ands	r4, r6
     eaa:	4323      	orrs	r3, r4
        return (x << y) | (x >> (sizeof(y) * 8 - y));
     eac:	41c3      	rors	r3, r0
        out[i] = ByteReverseWord32(in[i]);
     eae:	c208      	stmia	r2!, {r3}
    for (i = 0; i < count; i++)
     eb0:	428a      	cmp	r2, r1
     eb2:	d1f4      	bne.n	e9e <wc_AesSetKey+0x4e>
     eb4:	464d      	mov	r5, r9
     eb6:	4644      	mov	r4, r8
        switch (keylen) {
     eb8:	2c18      	cmp	r4, #24
     eba:	d060      	beq.n	f7e <wc_AesSetKey+0x12e>
     ebc:	2c20      	cmp	r4, #32
     ebe:	d100      	bne.n	ec2 <wc_AesSetKey+0x72>
     ec0:	e0bd      	b.n	103e <wc_AesSetKey+0x1ee>
     ec2:	2c10      	cmp	r4, #16
     ec4:	d00f      	beq.n	ee6 <wc_AesSetKey+0x96>
            return BAD_FUNC_ARG;
     ec6:	20ad      	movs	r0, #173	; 0xad
     ec8:	4240      	negs	r0, r0
     eca:	e140      	b.n	114e <wc_AesSetKey+0x2fe>
        aes->keylen = keylen;
     ecc:	23f4      	movs	r3, #244	; 0xf4
     ece:	50c4      	str	r4, [r0, r3]
        aes->rounds = keylen/4 + 6;
     ed0:	08a6      	lsrs	r6, r4, #2
     ed2:	1db2      	adds	r2, r6, #6
     ed4:	3b04      	subs	r3, #4
     ed6:	50c2      	str	r2, [r0, r3]
        word32 *rk = aes->key;
     ed8:	0005      	movs	r5, r0
        XMEMCPY(rk, userKey, keylen);
     eda:	0022      	movs	r2, r4
     edc:	4ba2      	ldr	r3, [pc, #648]	; (1168 <wc_AesSetKey+0x318>)
     ede:	4798      	blx	r3
     ee0:	2e00      	cmp	r6, #0
     ee2:	d1d3      	bne.n	e8c <wc_AesSetKey+0x3c>
     ee4:	e7e8      	b.n	eb8 <wc_AesSetKey+0x68>
     ee6:	4ea3      	ldr	r6, [pc, #652]	; (1174 <wc_AesSetKey+0x324>)
     ee8:	2390      	movs	r3, #144	; 0x90
     eea:	4699      	mov	r9, r3
     eec:	44a9      	add	r9, r5
        switch (keylen) {
     eee:	0029      	movs	r1, r5
                    (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
     ef0:	0034      	movs	r4, r6
     ef2:	20ff      	movs	r0, #255	; 0xff
     ef4:	23ff      	movs	r3, #255	; 0xff
     ef6:	021b      	lsls	r3, r3, #8
     ef8:	4698      	mov	r8, r3
                    (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
     efa:	23ff      	movs	r3, #255	; 0xff
     efc:	041b      	lsls	r3, r3, #16
     efe:	469c      	mov	ip, r3
     f00:	464b      	mov	r3, r9
     f02:	46a9      	mov	r9, r5
     f04:	46ba      	mov	sl, r7
     f06:	9300      	str	r3, [sp, #0]
                temp  = rk[3];
     f08:	68ca      	ldr	r2, [r1, #12]
                    (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
     f0a:	0003      	movs	r3, r0
     f0c:	4013      	ands	r3, r2
     f0e:	009b      	lsls	r3, r3, #2
     f10:	18e3      	adds	r3, r4, r3
     f12:	6a9f      	ldr	r7, [r3, #40]	; 0x28
     f14:	4643      	mov	r3, r8
     f16:	401f      	ands	r7, r3
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
     f18:	ce08      	ldmia	r6!, {r3}
     f1a:	680d      	ldr	r5, [r1, #0]
     f1c:	406b      	eors	r3, r5
     f1e:	407b      	eors	r3, r7
     f20:	0e17      	lsrs	r7, r2, #24
     f22:	3701      	adds	r7, #1
     f24:	37ff      	adds	r7, #255	; 0xff
     f26:	00bf      	lsls	r7, r7, #2
     f28:	19e7      	adds	r7, r4, r7
     f2a:	6abf      	ldr	r7, [r7, #40]	; 0x28
     f2c:	4007      	ands	r7, r0
     f2e:	407b      	eors	r3, r7
                    (Te[2][GETBYTE(temp, 2)] & 0xff000000) ^
     f30:	0c17      	lsrs	r7, r2, #16
     f32:	4007      	ands	r7, r0
     f34:	2580      	movs	r5, #128	; 0x80
     f36:	00ad      	lsls	r5, r5, #2
     f38:	46ab      	mov	fp, r5
     f3a:	445f      	add	r7, fp
     f3c:	00bf      	lsls	r7, r7, #2
     f3e:	19e7      	adds	r7, r4, r7
     f40:	6abf      	ldr	r7, [r7, #40]	; 0x28
     f42:	0e3f      	lsrs	r7, r7, #24
     f44:	063f      	lsls	r7, r7, #24
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
     f46:	407b      	eors	r3, r7
                    (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
     f48:	0a17      	lsrs	r7, r2, #8
     f4a:	4007      	ands	r7, r0
     f4c:	3501      	adds	r5, #1
     f4e:	35ff      	adds	r5, #255	; 0xff
     f50:	46ab      	mov	fp, r5
     f52:	445f      	add	r7, fp
     f54:	00bf      	lsls	r7, r7, #2
     f56:	19e7      	adds	r7, r4, r7
     f58:	6abf      	ldr	r7, [r7, #40]	; 0x28
     f5a:	4665      	mov	r5, ip
     f5c:	402f      	ands	r7, r5
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
     f5e:	407b      	eors	r3, r7
                rk[4] = rk[0] ^
     f60:	610b      	str	r3, [r1, #16]
                rk[5] = rk[1] ^ rk[4];
     f62:	684d      	ldr	r5, [r1, #4]
     f64:	406b      	eors	r3, r5
     f66:	614b      	str	r3, [r1, #20]
                rk[6] = rk[2] ^ rk[5];
     f68:	688d      	ldr	r5, [r1, #8]
     f6a:	406b      	eors	r3, r5
     f6c:	618b      	str	r3, [r1, #24]
                rk[7] = rk[3] ^ rk[6];
     f6e:	4053      	eors	r3, r2
     f70:	61cb      	str	r3, [r1, #28]
                if (++i == 10)
     f72:	9b00      	ldr	r3, [sp, #0]
     f74:	4299      	cmp	r1, r3
     f76:	d100      	bne.n	f7a <wc_AesSetKey+0x12a>
     f78:	e0e0      	b.n	113c <wc_AesSetKey+0x2ec>
                rk += 4;
     f7a:	3110      	adds	r1, #16
     f7c:	e7c4      	b.n	f08 <wc_AesSetKey+0xb8>
     f7e:	4e7d      	ldr	r6, [pc, #500]	; (1174 <wc_AesSetKey+0x324>)
     f80:	23a8      	movs	r3, #168	; 0xa8
     f82:	4699      	mov	r9, r3
     f84:	44a9      	add	r9, r5
        switch (keylen) {
     f86:	0029      	movs	r1, r5
                    (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
     f88:	0034      	movs	r4, r6
     f8a:	20ff      	movs	r0, #255	; 0xff
     f8c:	23ff      	movs	r3, #255	; 0xff
     f8e:	021b      	lsls	r3, r3, #8
     f90:	4698      	mov	r8, r3
                    (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
     f92:	23ff      	movs	r3, #255	; 0xff
     f94:	041b      	lsls	r3, r3, #16
     f96:	469c      	mov	ip, r3
     f98:	464b      	mov	r3, r9
     f9a:	9502      	str	r5, [sp, #8]
     f9c:	46bb      	mov	fp, r7
     f9e:	9300      	str	r3, [sp, #0]
                temp = rk[ 5];
     fa0:	694a      	ldr	r2, [r1, #20]
                    (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
     fa2:	0003      	movs	r3, r0
     fa4:	4013      	ands	r3, r2
     fa6:	009b      	lsls	r3, r3, #2
     fa8:	18e3      	adds	r3, r4, r3
     faa:	6a9f      	ldr	r7, [r3, #40]	; 0x28
     fac:	4643      	mov	r3, r8
     fae:	401f      	ands	r7, r3
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
     fb0:	ce08      	ldmia	r6!, {r3}
     fb2:	680d      	ldr	r5, [r1, #0]
     fb4:	406b      	eors	r3, r5
     fb6:	407b      	eors	r3, r7
     fb8:	0e17      	lsrs	r7, r2, #24
     fba:	1c7d      	adds	r5, r7, #1
     fbc:	35ff      	adds	r5, #255	; 0xff
     fbe:	00ad      	lsls	r5, r5, #2
     fc0:	46aa      	mov	sl, r5
     fc2:	44a2      	add	sl, r4
     fc4:	4655      	mov	r5, sl
     fc6:	6aad      	ldr	r5, [r5, #40]	; 0x28
     fc8:	002f      	movs	r7, r5
     fca:	4007      	ands	r7, r0
     fcc:	407b      	eors	r3, r7
                    (Te[2][GETBYTE(temp, 2)] & 0xff000000) ^
     fce:	0c15      	lsrs	r5, r2, #16
     fd0:	002f      	movs	r7, r5
     fd2:	4007      	ands	r7, r0
     fd4:	46ba      	mov	sl, r7
     fd6:	2580      	movs	r5, #128	; 0x80
     fd8:	00ad      	lsls	r5, r5, #2
     fda:	46a9      	mov	r9, r5
     fdc:	44ca      	add	sl, r9
     fde:	4655      	mov	r5, sl
     fe0:	00ad      	lsls	r5, r5, #2
     fe2:	46aa      	mov	sl, r5
     fe4:	44a2      	add	sl, r4
     fe6:	4655      	mov	r5, sl
     fe8:	6aad      	ldr	r5, [r5, #40]	; 0x28
     fea:	0e2d      	lsrs	r5, r5, #24
     fec:	062d      	lsls	r5, r5, #24
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
     fee:	406b      	eors	r3, r5
                    (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
     ff0:	0a15      	lsrs	r5, r2, #8
     ff2:	002f      	movs	r7, r5
     ff4:	4007      	ands	r7, r0
     ff6:	46ba      	mov	sl, r7
     ff8:	25c0      	movs	r5, #192	; 0xc0
     ffa:	00ad      	lsls	r5, r5, #2
     ffc:	46a9      	mov	r9, r5
     ffe:	44ca      	add	sl, r9
    1000:	4655      	mov	r5, sl
    1002:	00ad      	lsls	r5, r5, #2
    1004:	46aa      	mov	sl, r5
    1006:	44a2      	add	sl, r4
    1008:	4655      	mov	r5, sl
    100a:	6aad      	ldr	r5, [r5, #40]	; 0x28
    100c:	002f      	movs	r7, r5
    100e:	4665      	mov	r5, ip
    1010:	402f      	ands	r7, r5
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
    1012:	407b      	eors	r3, r7
                rk[ 6] = rk[ 0] ^
    1014:	618b      	str	r3, [r1, #24]
                rk[ 7] = rk[ 1] ^ rk[ 6];
    1016:	684d      	ldr	r5, [r1, #4]
    1018:	406b      	eors	r3, r5
    101a:	61cb      	str	r3, [r1, #28]
                rk[ 8] = rk[ 2] ^ rk[ 7];
    101c:	688d      	ldr	r5, [r1, #8]
    101e:	406b      	eors	r3, r5
    1020:	620b      	str	r3, [r1, #32]
                rk[ 9] = rk[ 3] ^ rk[ 8];
    1022:	68cd      	ldr	r5, [r1, #12]
    1024:	406b      	eors	r3, r5
    1026:	624b      	str	r3, [r1, #36]	; 0x24
                if (++i == 8)
    1028:	9d00      	ldr	r5, [sp, #0]
    102a:	42a9      	cmp	r1, r5
    102c:	d100      	bne.n	1030 <wc_AesSetKey+0x1e0>
    102e:	e095      	b.n	115c <wc_AesSetKey+0x30c>
                rk[10] = rk[ 4] ^ rk[ 9];
    1030:	690d      	ldr	r5, [r1, #16]
    1032:	406b      	eors	r3, r5
    1034:	628b      	str	r3, [r1, #40]	; 0x28
                rk[11] = rk[ 5] ^ rk[10];
    1036:	4053      	eors	r3, r2
    1038:	62cb      	str	r3, [r1, #44]	; 0x2c
                rk += 6;
    103a:	3118      	adds	r1, #24
    103c:	e7b0      	b.n	fa0 <wc_AesSetKey+0x150>
    103e:	4b4d      	ldr	r3, [pc, #308]	; (1174 <wc_AesSetKey+0x324>)
    1040:	4699      	mov	r9, r3
    1042:	23c0      	movs	r3, #192	; 0xc0
    1044:	469c      	mov	ip, r3
    1046:	44ac      	add	ip, r5
    1048:	4663      	mov	r3, ip
        switch (keylen) {
    104a:	002c      	movs	r4, r5
                    (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
    104c:	46cc      	mov	ip, r9
    104e:	26ff      	movs	r6, #255	; 0xff
    1050:	22ff      	movs	r2, #255	; 0xff
    1052:	0212      	lsls	r2, r2, #8
    1054:	4693      	mov	fp, r2
                    (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
    1056:	22ff      	movs	r2, #255	; 0xff
    1058:	0412      	lsls	r2, r2, #16
    105a:	4692      	mov	sl, r2
                    (Te[3][GETBYTE(temp, 2)] & 0x00ff0000) ^
    105c:	464a      	mov	r2, r9
    105e:	46c8      	mov	r8, r9
    1060:	9502      	str	r5, [sp, #8]
    1062:	9703      	str	r7, [sp, #12]
    1064:	001f      	movs	r7, r3
    1066:	9200      	str	r2, [sp, #0]
                temp = rk[ 7];
    1068:	69e1      	ldr	r1, [r4, #28]
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
    106a:	9a00      	ldr	r2, [sp, #0]
    106c:	ca08      	ldmia	r2!, {r3}
    106e:	9200      	str	r2, [sp, #0]
    1070:	6822      	ldr	r2, [r4, #0]
    1072:	4053      	eors	r3, r2
                    (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
    1074:	0032      	movs	r2, r6
    1076:	400a      	ands	r2, r1
    1078:	0092      	lsls	r2, r2, #2
    107a:	4462      	add	r2, ip
    107c:	6a92      	ldr	r2, [r2, #40]	; 0x28
    107e:	4658      	mov	r0, fp
    1080:	4002      	ands	r2, r0
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
    1082:	4053      	eors	r3, r2
    1084:	0e0a      	lsrs	r2, r1, #24
    1086:	3201      	adds	r2, #1
    1088:	32ff      	adds	r2, #255	; 0xff
    108a:	0092      	lsls	r2, r2, #2
    108c:	4462      	add	r2, ip
    108e:	6a92      	ldr	r2, [r2, #40]	; 0x28
    1090:	4032      	ands	r2, r6
    1092:	4053      	eors	r3, r2
                    (Te[2][GETBYTE(temp, 2)] & 0xff000000) ^
    1094:	0c0a      	lsrs	r2, r1, #16
    1096:	4032      	ands	r2, r6
    1098:	2080      	movs	r0, #128	; 0x80
    109a:	0080      	lsls	r0, r0, #2
    109c:	4681      	mov	r9, r0
    109e:	444a      	add	r2, r9
    10a0:	0092      	lsls	r2, r2, #2
    10a2:	4462      	add	r2, ip
    10a4:	6a92      	ldr	r2, [r2, #40]	; 0x28
    10a6:	0e12      	lsrs	r2, r2, #24
    10a8:	0612      	lsls	r2, r2, #24
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
    10aa:	4053      	eors	r3, r2
                    (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
    10ac:	0a0a      	lsrs	r2, r1, #8
    10ae:	4032      	ands	r2, r6
    10b0:	3001      	adds	r0, #1
    10b2:	30ff      	adds	r0, #255	; 0xff
    10b4:	4681      	mov	r9, r0
    10b6:	444a      	add	r2, r9
    10b8:	0092      	lsls	r2, r2, #2
    10ba:	4462      	add	r2, ip
    10bc:	6a92      	ldr	r2, [r2, #40]	; 0x28
    10be:	4650      	mov	r0, sl
    10c0:	4002      	ands	r2, r0
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
    10c2:	4053      	eors	r3, r2
                rk[ 8] = rk[ 0] ^
    10c4:	6223      	str	r3, [r4, #32]
                rk[ 9] = rk[ 1] ^ rk[ 8];
    10c6:	6862      	ldr	r2, [r4, #4]
    10c8:	4053      	eors	r3, r2
    10ca:	6263      	str	r3, [r4, #36]	; 0x24
                rk[10] = rk[ 2] ^ rk[ 9];
    10cc:	68a2      	ldr	r2, [r4, #8]
    10ce:	4053      	eors	r3, r2
    10d0:	62a3      	str	r3, [r4, #40]	; 0x28
                rk[11] = rk[ 3] ^ rk[10];
    10d2:	68e2      	ldr	r2, [r4, #12]
    10d4:	4053      	eors	r3, r2
    10d6:	62e3      	str	r3, [r4, #44]	; 0x2c
                if (++i == 7)
    10d8:	42bc      	cmp	r4, r7
    10da:	d042      	beq.n	1162 <wc_AesSetKey+0x312>
                    (Te[3][GETBYTE(temp, 2)] & 0x00ff0000) ^
    10dc:	0c1a      	lsrs	r2, r3, #16
    10de:	4032      	ands	r2, r6
    10e0:	444a      	add	r2, r9
    10e2:	0092      	lsls	r2, r2, #2
    10e4:	4442      	add	r2, r8
    10e6:	6a92      	ldr	r2, [r2, #40]	; 0x28
    10e8:	4650      	mov	r0, sl
    10ea:	4002      	ands	r2, r0
                    (Te[0][GETBYTE(temp, 1)] & 0x0000ff00) ^
    10ec:	0a18      	lsrs	r0, r3, #8
    10ee:	4030      	ands	r0, r6
    10f0:	0080      	lsls	r0, r0, #2
    10f2:	4440      	add	r0, r8
    10f4:	6a80      	ldr	r0, [r0, #40]	; 0x28
    10f6:	465d      	mov	r5, fp
    10f8:	4028      	ands	r0, r5
    10fa:	4302      	orrs	r2, r0
    10fc:	6920      	ldr	r0, [r4, #16]
    10fe:	4042      	eors	r2, r0
                    (Te[2][GETBYTE(temp, 3)] & 0xff000000) ^
    1100:	0e18      	lsrs	r0, r3, #24
    1102:	2580      	movs	r5, #128	; 0x80
    1104:	00ad      	lsls	r5, r5, #2
    1106:	46a9      	mov	r9, r5
    1108:	4448      	add	r0, r9
    110a:	0080      	lsls	r0, r0, #2
    110c:	4440      	add	r0, r8
    110e:	6a80      	ldr	r0, [r0, #40]	; 0x28
    1110:	0e00      	lsrs	r0, r0, #24
    1112:	0600      	lsls	r0, r0, #24
                    (Te[1][GETBYTE(temp, 0)] & 0x000000ff);
    1114:	4033      	ands	r3, r6
    1116:	3301      	adds	r3, #1
    1118:	33ff      	adds	r3, #255	; 0xff
    111a:	009b      	lsls	r3, r3, #2
    111c:	4443      	add	r3, r8
    111e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1120:	4033      	ands	r3, r6
                    (Te[0][GETBYTE(temp, 1)] & 0x0000ff00) ^
    1122:	4318      	orrs	r0, r3
    1124:	4042      	eors	r2, r0
                rk[12] = rk[ 4] ^
    1126:	6322      	str	r2, [r4, #48]	; 0x30
                rk[13] = rk[ 5] ^ rk[12];
    1128:	6963      	ldr	r3, [r4, #20]
    112a:	405a      	eors	r2, r3
    112c:	6362      	str	r2, [r4, #52]	; 0x34
                rk[14] = rk[ 6] ^ rk[13];
    112e:	69a3      	ldr	r3, [r4, #24]
    1130:	405a      	eors	r2, r3
    1132:	63a2      	str	r2, [r4, #56]	; 0x38
                rk[15] = rk[ 7] ^ rk[14];
    1134:	4051      	eors	r1, r2
    1136:	63e1      	str	r1, [r4, #60]	; 0x3c
                rk += 8;
    1138:	3420      	adds	r4, #32
    113a:	e795      	b.n	1068 <wc_AesSetKey+0x218>
    113c:	464d      	mov	r5, r9
    113e:	4657      	mov	r7, sl
        if (dir == AES_DECRYPTION) {
    1140:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1142:	2b01      	cmp	r3, #1
    1144:	d01a      	beq.n	117c <wc_AesSetKey+0x32c>
        return wc_AesSetIV(aes, iv);
    1146:	9901      	ldr	r1, [sp, #4]
    1148:	0038      	movs	r0, r7
    114a:	4b0b      	ldr	r3, [pc, #44]	; (1178 <wc_AesSetKey+0x328>)
    114c:	4798      	blx	r3
    }
    114e:	b005      	add	sp, #20
    1150:	bc3c      	pop	{r2, r3, r4, r5}
    1152:	4690      	mov	r8, r2
    1154:	4699      	mov	r9, r3
    1156:	46a2      	mov	sl, r4
    1158:	46ab      	mov	fp, r5
    115a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    115c:	9d02      	ldr	r5, [sp, #8]
    115e:	465f      	mov	r7, fp
    1160:	e7ee      	b.n	1140 <wc_AesSetKey+0x2f0>
    1162:	9d02      	ldr	r5, [sp, #8]
    1164:	9f03      	ldr	r7, [sp, #12]
    1166:	e7eb      	b.n	1140 <wc_AesSetKey+0x2f0>
    1168:	00001fd9 	.word	0x00001fd9
    116c:	00ff00ff 	.word	0x00ff00ff
    1170:	ff00ff00 	.word	0xff00ff00
    1174:	00002124 	.word	0x00002124
    1178:	00000e1d 	.word	0x00000e1d
            for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
    117c:	33ef      	adds	r3, #239	; 0xef
    117e:	58fc      	ldr	r4, [r7, r3]
    1180:	00a4      	lsls	r4, r4, #2
    1182:	d019      	beq.n	11b8 <wc_AesSetKey+0x368>
    1184:	002a      	movs	r2, r5
    1186:	00a3      	lsls	r3, r4, #2
    1188:	18eb      	adds	r3, r5, r3
    118a:	2100      	movs	r1, #0
                temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
    118c:	6810      	ldr	r0, [r2, #0]
    118e:	681e      	ldr	r6, [r3, #0]
    1190:	6016      	str	r6, [r2, #0]
    1192:	6018      	str	r0, [r3, #0]
                temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
    1194:	6850      	ldr	r0, [r2, #4]
    1196:	685e      	ldr	r6, [r3, #4]
    1198:	6056      	str	r6, [r2, #4]
    119a:	6058      	str	r0, [r3, #4]
                temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
    119c:	6890      	ldr	r0, [r2, #8]
    119e:	689e      	ldr	r6, [r3, #8]
    11a0:	6096      	str	r6, [r2, #8]
    11a2:	6098      	str	r0, [r3, #8]
                temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
    11a4:	68d0      	ldr	r0, [r2, #12]
    11a6:	68de      	ldr	r6, [r3, #12]
    11a8:	60d6      	str	r6, [r2, #12]
    11aa:	60d8      	str	r0, [r3, #12]
            for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
    11ac:	3104      	adds	r1, #4
    11ae:	3210      	adds	r2, #16
    11b0:	3b10      	subs	r3, #16
    11b2:	1a60      	subs	r0, r4, r1
    11b4:	4281      	cmp	r1, r0
    11b6:	d3e9      	bcc.n	118c <wc_AesSetKey+0x33c>
            for (i = 1; i < aes->rounds; i++) {
    11b8:	23f0      	movs	r3, #240	; 0xf0
    11ba:	58fb      	ldr	r3, [r7, r3]
    11bc:	2b01      	cmp	r3, #1
    11be:	d9c2      	bls.n	1146 <wc_AesSetKey+0x2f6>
    11c0:	2401      	movs	r4, #1
                    Td[0][Te[1][GETBYTE(rk[0], 3)] & 0xff] ^
    11c2:	497f      	ldr	r1, [pc, #508]	; (13c0 <wc_AesSetKey+0x570>)
    11c4:	4a7f      	ldr	r2, [pc, #508]	; (13c4 <wc_AesSetKey+0x574>)
    11c6:	23ff      	movs	r3, #255	; 0xff
            for (i = 1; i < aes->rounds; i++) {
    11c8:	20f0      	movs	r0, #240	; 0xf0
    11ca:	4682      	mov	sl, r0
    11cc:	46bc      	mov	ip, r7
    11ce:	0027      	movs	r7, r4
                rk += 4;
    11d0:	3510      	adds	r5, #16
                    Td[0][Te[1][GETBYTE(rk[0], 3)] & 0xff] ^
    11d2:	6828      	ldr	r0, [r5, #0]
    11d4:	0e04      	lsrs	r4, r0, #24
    11d6:	3401      	adds	r4, #1
    11d8:	34ff      	adds	r4, #255	; 0xff
    11da:	00a4      	lsls	r4, r4, #2
    11dc:	1914      	adds	r4, r2, r4
    11de:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    11e0:	401c      	ands	r4, r3
    11e2:	00a4      	lsls	r4, r4, #2
    11e4:	46a0      	mov	r8, r4
    11e6:	4488      	add	r8, r1
                    Td[3][Te[1][GETBYTE(rk[0], 0)] & 0xff];
    11e8:	001c      	movs	r4, r3
    11ea:	4004      	ands	r4, r0
    11ec:	3401      	adds	r4, #1
    11ee:	34ff      	adds	r4, #255	; 0xff
    11f0:	00a4      	lsls	r4, r4, #2
    11f2:	1914      	adds	r4, r2, r4
    11f4:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    11f6:	401c      	ands	r4, r3
    11f8:	26c0      	movs	r6, #192	; 0xc0
    11fa:	00b6      	lsls	r6, r6, #2
    11fc:	46b1      	mov	r9, r6
    11fe:	444c      	add	r4, r9
    1200:	00a4      	lsls	r4, r4, #2
    1202:	190c      	adds	r4, r1, r4
                    Td[2][Te[1][GETBYTE(rk[0], 1)] & 0xff] ^
    1204:	4646      	mov	r6, r8
    1206:	6ab6      	ldr	r6, [r6, #40]	; 0x28
    1208:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    120a:	4066      	eors	r6, r4
                    Td[1][Te[1][GETBYTE(rk[0], 2)] & 0xff] ^
    120c:	0c04      	lsrs	r4, r0, #16
    120e:	401c      	ands	r4, r3
    1210:	3401      	adds	r4, #1
    1212:	34ff      	adds	r4, #255	; 0xff
    1214:	00a4      	lsls	r4, r4, #2
    1216:	1914      	adds	r4, r2, r4
    1218:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    121a:	401c      	ands	r4, r3
    121c:	3401      	adds	r4, #1
    121e:	34ff      	adds	r4, #255	; 0xff
    1220:	00a4      	lsls	r4, r4, #2
    1222:	190c      	adds	r4, r1, r4
                    Td[2][Te[1][GETBYTE(rk[0], 1)] & 0xff] ^
    1224:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    1226:	4074      	eors	r4, r6
    1228:	0a00      	lsrs	r0, r0, #8
    122a:	4018      	ands	r0, r3
    122c:	3001      	adds	r0, #1
    122e:	30ff      	adds	r0, #255	; 0xff
    1230:	0080      	lsls	r0, r0, #2
    1232:	1810      	adds	r0, r2, r0
    1234:	6a80      	ldr	r0, [r0, #40]	; 0x28
    1236:	4018      	ands	r0, r3
    1238:	2680      	movs	r6, #128	; 0x80
    123a:	00b6      	lsls	r6, r6, #2
    123c:	46b0      	mov	r8, r6
    123e:	4440      	add	r0, r8
    1240:	0080      	lsls	r0, r0, #2
    1242:	1808      	adds	r0, r1, r0
    1244:	6a80      	ldr	r0, [r0, #40]	; 0x28
    1246:	4044      	eors	r4, r0
                rk[0] =
    1248:	602c      	str	r4, [r5, #0]
                    Td[0][Te[1][GETBYTE(rk[1], 3)] & 0xff] ^
    124a:	6868      	ldr	r0, [r5, #4]
    124c:	0e04      	lsrs	r4, r0, #24
    124e:	3401      	adds	r4, #1
    1250:	34ff      	adds	r4, #255	; 0xff
    1252:	00a4      	lsls	r4, r4, #2
    1254:	1914      	adds	r4, r2, r4
    1256:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    1258:	401c      	ands	r4, r3
    125a:	00a4      	lsls	r4, r4, #2
    125c:	46a0      	mov	r8, r4
    125e:	4488      	add	r8, r1
                    Td[3][Te[1][GETBYTE(rk[1], 0)] & 0xff];
    1260:	001c      	movs	r4, r3
    1262:	4004      	ands	r4, r0
    1264:	3401      	adds	r4, #1
    1266:	34ff      	adds	r4, #255	; 0xff
    1268:	00a4      	lsls	r4, r4, #2
    126a:	1914      	adds	r4, r2, r4
    126c:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    126e:	401c      	ands	r4, r3
    1270:	444c      	add	r4, r9
    1272:	00a4      	lsls	r4, r4, #2
    1274:	190c      	adds	r4, r1, r4
                    Td[2][Te[1][GETBYTE(rk[1], 1)] & 0xff] ^
    1276:	4646      	mov	r6, r8
    1278:	6ab6      	ldr	r6, [r6, #40]	; 0x28
    127a:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    127c:	4066      	eors	r6, r4
                    Td[1][Te[1][GETBYTE(rk[1], 2)] & 0xff] ^
    127e:	0c04      	lsrs	r4, r0, #16
    1280:	401c      	ands	r4, r3
    1282:	3401      	adds	r4, #1
    1284:	34ff      	adds	r4, #255	; 0xff
    1286:	00a4      	lsls	r4, r4, #2
    1288:	1914      	adds	r4, r2, r4
    128a:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    128c:	401c      	ands	r4, r3
    128e:	3401      	adds	r4, #1
    1290:	34ff      	adds	r4, #255	; 0xff
    1292:	00a4      	lsls	r4, r4, #2
    1294:	190c      	adds	r4, r1, r4
                    Td[2][Te[1][GETBYTE(rk[1], 1)] & 0xff] ^
    1296:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    1298:	4074      	eors	r4, r6
    129a:	0a00      	lsrs	r0, r0, #8
    129c:	4018      	ands	r0, r3
    129e:	3001      	adds	r0, #1
    12a0:	30ff      	adds	r0, #255	; 0xff
    12a2:	0080      	lsls	r0, r0, #2
    12a4:	1810      	adds	r0, r2, r0
    12a6:	6a80      	ldr	r0, [r0, #40]	; 0x28
    12a8:	4018      	ands	r0, r3
    12aa:	2680      	movs	r6, #128	; 0x80
    12ac:	00b6      	lsls	r6, r6, #2
    12ae:	46b0      	mov	r8, r6
    12b0:	4440      	add	r0, r8
    12b2:	0080      	lsls	r0, r0, #2
    12b4:	1808      	adds	r0, r1, r0
    12b6:	6a80      	ldr	r0, [r0, #40]	; 0x28
    12b8:	4044      	eors	r4, r0
                rk[1] =
    12ba:	606c      	str	r4, [r5, #4]
                    Td[0][Te[1][GETBYTE(rk[2], 3)] & 0xff] ^
    12bc:	68a8      	ldr	r0, [r5, #8]
    12be:	0e04      	lsrs	r4, r0, #24
    12c0:	3401      	adds	r4, #1
    12c2:	34ff      	adds	r4, #255	; 0xff
    12c4:	00a4      	lsls	r4, r4, #2
    12c6:	1914      	adds	r4, r2, r4
    12c8:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    12ca:	401c      	ands	r4, r3
    12cc:	00a4      	lsls	r4, r4, #2
    12ce:	46a0      	mov	r8, r4
    12d0:	4488      	add	r8, r1
                    Td[3][Te[1][GETBYTE(rk[2], 0)] & 0xff];
    12d2:	001c      	movs	r4, r3
    12d4:	4004      	ands	r4, r0
    12d6:	3401      	adds	r4, #1
    12d8:	34ff      	adds	r4, #255	; 0xff
    12da:	00a4      	lsls	r4, r4, #2
    12dc:	1914      	adds	r4, r2, r4
    12de:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    12e0:	401c      	ands	r4, r3
    12e2:	444c      	add	r4, r9
    12e4:	00a4      	lsls	r4, r4, #2
    12e6:	190c      	adds	r4, r1, r4
                    Td[2][Te[1][GETBYTE(rk[2], 1)] & 0xff] ^
    12e8:	4646      	mov	r6, r8
    12ea:	6ab6      	ldr	r6, [r6, #40]	; 0x28
    12ec:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    12ee:	4066      	eors	r6, r4
                    Td[1][Te[1][GETBYTE(rk[2], 2)] & 0xff] ^
    12f0:	0c04      	lsrs	r4, r0, #16
    12f2:	401c      	ands	r4, r3
    12f4:	3401      	adds	r4, #1
    12f6:	34ff      	adds	r4, #255	; 0xff
    12f8:	00a4      	lsls	r4, r4, #2
    12fa:	1914      	adds	r4, r2, r4
    12fc:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    12fe:	401c      	ands	r4, r3
    1300:	3401      	adds	r4, #1
    1302:	34ff      	adds	r4, #255	; 0xff
    1304:	00a4      	lsls	r4, r4, #2
    1306:	190c      	adds	r4, r1, r4
                    Td[2][Te[1][GETBYTE(rk[2], 1)] & 0xff] ^
    1308:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    130a:	4074      	eors	r4, r6
    130c:	0a00      	lsrs	r0, r0, #8
    130e:	4018      	ands	r0, r3
    1310:	3001      	adds	r0, #1
    1312:	30ff      	adds	r0, #255	; 0xff
    1314:	0080      	lsls	r0, r0, #2
    1316:	1810      	adds	r0, r2, r0
    1318:	6a80      	ldr	r0, [r0, #40]	; 0x28
    131a:	4018      	ands	r0, r3
    131c:	2680      	movs	r6, #128	; 0x80
    131e:	00b6      	lsls	r6, r6, #2
    1320:	46b0      	mov	r8, r6
    1322:	4440      	add	r0, r8
    1324:	0080      	lsls	r0, r0, #2
    1326:	1808      	adds	r0, r1, r0
    1328:	6a80      	ldr	r0, [r0, #40]	; 0x28
    132a:	4044      	eors	r4, r0
                rk[2] =
    132c:	60ac      	str	r4, [r5, #8]
                    Td[0][Te[1][GETBYTE(rk[3], 3)] & 0xff] ^
    132e:	68e8      	ldr	r0, [r5, #12]
    1330:	0e04      	lsrs	r4, r0, #24
    1332:	3401      	adds	r4, #1
    1334:	34ff      	adds	r4, #255	; 0xff
    1336:	00a4      	lsls	r4, r4, #2
    1338:	1914      	adds	r4, r2, r4
    133a:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    133c:	401c      	ands	r4, r3
    133e:	00a4      	lsls	r4, r4, #2
    1340:	46a0      	mov	r8, r4
    1342:	4488      	add	r8, r1
                    Td[3][Te[1][GETBYTE(rk[3], 0)] & 0xff];
    1344:	001c      	movs	r4, r3
    1346:	4004      	ands	r4, r0
    1348:	3401      	adds	r4, #1
    134a:	34ff      	adds	r4, #255	; 0xff
    134c:	00a4      	lsls	r4, r4, #2
    134e:	1914      	adds	r4, r2, r4
    1350:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    1352:	401c      	ands	r4, r3
    1354:	444c      	add	r4, r9
    1356:	00a4      	lsls	r4, r4, #2
    1358:	190c      	adds	r4, r1, r4
                    Td[2][Te[1][GETBYTE(rk[3], 1)] & 0xff] ^
    135a:	4646      	mov	r6, r8
    135c:	6ab6      	ldr	r6, [r6, #40]	; 0x28
    135e:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    1360:	4066      	eors	r6, r4
                    Td[1][Te[1][GETBYTE(rk[3], 2)] & 0xff] ^
    1362:	0c04      	lsrs	r4, r0, #16
    1364:	401c      	ands	r4, r3
    1366:	3401      	adds	r4, #1
    1368:	34ff      	adds	r4, #255	; 0xff
    136a:	00a4      	lsls	r4, r4, #2
    136c:	1914      	adds	r4, r2, r4
    136e:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    1370:	401c      	ands	r4, r3
    1372:	3401      	adds	r4, #1
    1374:	34ff      	adds	r4, #255	; 0xff
    1376:	00a4      	lsls	r4, r4, #2
    1378:	190c      	adds	r4, r1, r4
                    Td[2][Te[1][GETBYTE(rk[3], 1)] & 0xff] ^
    137a:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    137c:	4074      	eors	r4, r6
    137e:	0a00      	lsrs	r0, r0, #8
    1380:	4018      	ands	r0, r3
    1382:	3001      	adds	r0, #1
    1384:	30ff      	adds	r0, #255	; 0xff
    1386:	0080      	lsls	r0, r0, #2
    1388:	1810      	adds	r0, r2, r0
    138a:	6a80      	ldr	r0, [r0, #40]	; 0x28
    138c:	4018      	ands	r0, r3
    138e:	2680      	movs	r6, #128	; 0x80
    1390:	00b6      	lsls	r6, r6, #2
    1392:	46b0      	mov	r8, r6
    1394:	4440      	add	r0, r8
    1396:	0080      	lsls	r0, r0, #2
    1398:	1808      	adds	r0, r1, r0
    139a:	6a80      	ldr	r0, [r0, #40]	; 0x28
    139c:	4044      	eors	r4, r0
                rk[3] =
    139e:	60ec      	str	r4, [r5, #12]
            for (i = 1; i < aes->rounds; i++) {
    13a0:	3701      	adds	r7, #1
    13a2:	4660      	mov	r0, ip
    13a4:	4654      	mov	r4, sl
    13a6:	5900      	ldr	r0, [r0, r4]
    13a8:	4287      	cmp	r7, r0
    13aa:	d200      	bcs.n	13ae <wc_AesSetKey+0x55e>
    13ac:	e710      	b.n	11d0 <wc_AesSetKey+0x380>
    13ae:	4667      	mov	r7, ip
    13b0:	e6c9      	b.n	1146 <wc_AesSetKey+0x2f6>
            return BAD_FUNC_ARG;
    13b2:	20ad      	movs	r0, #173	; 0xad
    13b4:	4240      	negs	r0, r0
    13b6:	e6ca      	b.n	114e <wc_AesSetKey+0x2fe>
    13b8:	20ad      	movs	r0, #173	; 0xad
    13ba:	4240      	negs	r0, r0
    13bc:	e6c7      	b.n	114e <wc_AesSetKey+0x2fe>
    13be:	46c0      	nop			; (mov r8, r8)
    13c0:	00003124 	.word	0x00003124
    13c4:	00002124 	.word	0x00002124

000013c8 <wc_AesCbcEncrypt>:

#else

    /* Software AES - CBC Encrypt */
    int wc_AesCbcEncrypt(Aes* aes, byte* out, const byte* in, word32 sz)
    {
    13c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    13ca:	46de      	mov	lr, fp
    13cc:	4657      	mov	r7, sl
    13ce:	464e      	mov	r6, r9
    13d0:	4645      	mov	r5, r8
    13d2:	b5e0      	push	{r5, r6, r7, lr}
    13d4:	b093      	sub	sp, #76	; 0x4c
    13d6:	9001      	str	r0, [sp, #4]
    13d8:	9106      	str	r1, [sp, #24]
    13da:	9202      	str	r2, [sp, #8]
        word32 blocks = (sz / AES_BLOCK_SIZE);
    13dc:	091b      	lsrs	r3, r3, #4

        if (aes == NULL || out == NULL || in == NULL) {
    13de:	2800      	cmp	r0, #0
    13e0:	d100      	bne.n	13e4 <wc_AesCbcEncrypt+0x1c>
    13e2:	e307      	b.n	19f4 <wc_AesCbcEncrypt+0x62c>
    13e4:	2900      	cmp	r1, #0
    13e6:	d100      	bne.n	13ea <wc_AesCbcEncrypt+0x22>
    13e8:	e307      	b.n	19fa <wc_AesCbcEncrypt+0x632>
    13ea:	2a00      	cmp	r2, #0
    13ec:	d100      	bne.n	13f0 <wc_AesCbcEncrypt+0x28>
    13ee:	e307      	b.n	1a00 <wc_AesCbcEncrypt+0x638>

            return 0;
        }
    #endif

        while (blocks--) {
    13f0:	1e5a      	subs	r2, r3, #1
    13f2:	9205      	str	r2, [sp, #20]
    13f4:	2b00      	cmp	r3, #0
    13f6:	d100      	bne.n	13fa <wc_AesCbcEncrypt+0x32>
    13f8:	e305      	b.n	1a06 <wc_AesCbcEncrypt+0x63e>
            Te[0][GETBYTE(t0, 3)] ^
    13fa:	4eed      	ldr	r6, [pc, #948]	; (17b0 <wc_AesCbcEncrypt+0x3e8>)
    13fc:	e021      	b.n	1442 <wc_AesCbcEncrypt+0x7a>
}


WC_STATIC WC_INLINE void xorbuf(void* buf, const void* mask, word32 count)
{
    if (((wolfssl_word)buf | (wolfssl_word)mask | count) % WOLFSSL_WORD_SIZE == 0)
    13fe:	2300      	movs	r3, #0
    1400:	9904      	ldr	r1, [sp, #16]
    1402:	9c02      	ldr	r4, [sp, #8]
    else {
        word32 i;
        byte*       b = (byte*)buf;
        const byte* m = (const byte*)mask;

        for (i = 0; i < count; i++) b[i] ^= m[i];
    1404:	5cca      	ldrb	r2, [r1, r3]
    1406:	5ce0      	ldrb	r0, [r4, r3]
    1408:	4042      	eors	r2, r0
    140a:	54ca      	strb	r2, [r1, r3]
    140c:	3301      	adds	r3, #1
    140e:	2b10      	cmp	r3, #16
    1410:	d1f8      	bne.n	1404 <wc_AesCbcEncrypt+0x3c>
    word32 r = aes->rounds >> 1;
    1412:	23f0      	movs	r3, #240	; 0xf0
    1414:	9a01      	ldr	r2, [sp, #4]
    1416:	58d4      	ldr	r4, [r2, r3]
    1418:	0864      	lsrs	r4, r4, #1
    if (r > 7 || r == 0) {
    141a:	1e63      	subs	r3, r4, #1
    141c:	2b06      	cmp	r3, #6
    141e:	d923      	bls.n	1468 <wc_AesCbcEncrypt+0xa0>
            xorbuf((byte*)aes->reg, in, AES_BLOCK_SIZE);
            wc_AesEncrypt(aes, (byte*)aes->reg, (byte*)aes->reg);
            XMEMCPY(out, aes->reg, AES_BLOCK_SIZE);
    1420:	2210      	movs	r2, #16
    1422:	9904      	ldr	r1, [sp, #16]
    1424:	9c06      	ldr	r4, [sp, #24]
    1426:	0020      	movs	r0, r4
    1428:	4be2      	ldr	r3, [pc, #904]	; (17b4 <wc_AesCbcEncrypt+0x3ec>)
    142a:	4798      	blx	r3

            out += AES_BLOCK_SIZE;
    142c:	0023      	movs	r3, r4
    142e:	3310      	adds	r3, #16
    1430:	9306      	str	r3, [sp, #24]
            in  += AES_BLOCK_SIZE;
    1432:	9b02      	ldr	r3, [sp, #8]
    1434:	3310      	adds	r3, #16
    1436:	9302      	str	r3, [sp, #8]
        while (blocks--) {
    1438:	9b05      	ldr	r3, [sp, #20]
    143a:	1e5a      	subs	r2, r3, #1
    143c:	9205      	str	r2, [sp, #20]
    143e:	d200      	bcs.n	1442 <wc_AesCbcEncrypt+0x7a>
    1440:	e2d0      	b.n	19e4 <wc_AesCbcEncrypt+0x61c>
            xorbuf((byte*)aes->reg, in, AES_BLOCK_SIZE);
    1442:	9b01      	ldr	r3, [sp, #4]
    1444:	33f8      	adds	r3, #248	; 0xf8
    1446:	001a      	movs	r2, r3
    1448:	9304      	str	r3, [sp, #16]
    if (((wolfssl_word)buf | (wolfssl_word)mask | count) % WOLFSSL_WORD_SIZE == 0)
    144a:	9802      	ldr	r0, [sp, #8]
    144c:	0003      	movs	r3, r0
    144e:	4313      	orrs	r3, r2
    1450:	079b      	lsls	r3, r3, #30
    1452:	d1d4      	bne.n	13fe <wc_AesCbcEncrypt+0x36>
    1454:	2300      	movs	r3, #0
    1456:	0011      	movs	r1, r2
    for (i = 0; i < n; i++) r[i] ^= a[i];
    1458:	58ca      	ldr	r2, [r1, r3]
    145a:	58c4      	ldr	r4, [r0, r3]
    145c:	4062      	eors	r2, r4
    145e:	50ca      	str	r2, [r1, r3]
    1460:	3304      	adds	r3, #4
    1462:	2b10      	cmp	r3, #16
    1464:	d1f8      	bne.n	1458 <wc_AesCbcEncrypt+0x90>
    1466:	e7d4      	b.n	1412 <wc_AesCbcEncrypt+0x4a>
    XMEMCPY(&s0, inBlock,                  sizeof(s0));
    1468:	2204      	movs	r2, #4
    146a:	9904      	ldr	r1, [sp, #16]
    146c:	a80e      	add	r0, sp, #56	; 0x38
    146e:	4bd1      	ldr	r3, [pc, #836]	; (17b4 <wc_AesCbcEncrypt+0x3ec>)
    1470:	4798      	blx	r3
    XMEMCPY(&s1, inBlock + sizeof(s0),     sizeof(s1));
    1472:	9d01      	ldr	r5, [sp, #4]
    1474:	002b      	movs	r3, r5
    1476:	33fc      	adds	r3, #252	; 0xfc
    1478:	0019      	movs	r1, r3
    147a:	9308      	str	r3, [sp, #32]
    147c:	2204      	movs	r2, #4
    147e:	a80f      	add	r0, sp, #60	; 0x3c
    1480:	4bcc      	ldr	r3, [pc, #816]	; (17b4 <wc_AesCbcEncrypt+0x3ec>)
    1482:	4798      	blx	r3
    XMEMCPY(&s2, inBlock + 2 * sizeof(s0), sizeof(s2));
    1484:	002b      	movs	r3, r5
    1486:	3301      	adds	r3, #1
    1488:	33ff      	adds	r3, #255	; 0xff
    148a:	9309      	str	r3, [sp, #36]	; 0x24
    148c:	2204      	movs	r2, #4
    148e:	0019      	movs	r1, r3
    1490:	a810      	add	r0, sp, #64	; 0x40
    1492:	4bc8      	ldr	r3, [pc, #800]	; (17b4 <wc_AesCbcEncrypt+0x3ec>)
    1494:	4798      	blx	r3
    XMEMCPY(&s3, inBlock + 3 * sizeof(s0), sizeof(s3));
    1496:	9501      	str	r5, [sp, #4]
    1498:	1d6a      	adds	r2, r5, #5
    149a:	32ff      	adds	r2, #255	; 0xff
    149c:	0011      	movs	r1, r2
    149e:	920a      	str	r2, [sp, #40]	; 0x28
    14a0:	2204      	movs	r2, #4
    14a2:	a811      	add	r0, sp, #68	; 0x44
    14a4:	4fc3      	ldr	r7, [pc, #780]	; (17b4 <wc_AesCbcEncrypt+0x3ec>)
    14a6:	47b8      	blx	r7
    s0 = ByteReverseWord32(s0);
    14a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    s1 = ByteReverseWord32(s1);
    14aa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    s2 = ByteReverseWord32(s2);
    14ac:	9910      	ldr	r1, [sp, #64]	; 0x40
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
    14ae:	0a10      	lsrs	r0, r2, #8
    14b0:	4bc1      	ldr	r3, [pc, #772]	; (17b8 <wc_AesCbcEncrypt+0x3f0>)
    14b2:	4018      	ands	r0, r3
    14b4:	0212      	lsls	r2, r2, #8
    14b6:	4fc1      	ldr	r7, [pc, #772]	; (17bc <wc_AesCbcEncrypt+0x3f4>)
    14b8:	46b9      	mov	r9, r7
    14ba:	403a      	ands	r2, r7
    14bc:	4302      	orrs	r2, r0
        return (x << y) | (x >> (sizeof(y) * 8 - y));
    14be:	2710      	movs	r7, #16
    14c0:	41fa      	rors	r2, r7
    s0 ^= rk[0];
    14c2:	9801      	ldr	r0, [sp, #4]
    14c4:	6800      	ldr	r0, [r0, #0]
    14c6:	4042      	eors	r2, r0
    14c8:	4693      	mov	fp, r2
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
    14ca:	0a28      	lsrs	r0, r5, #8
    14cc:	4018      	ands	r0, r3
    14ce:	022d      	lsls	r5, r5, #8
    14d0:	464a      	mov	r2, r9
    14d2:	4015      	ands	r5, r2
    14d4:	4328      	orrs	r0, r5
        return (x << y) | (x >> (sizeof(y) * 8 - y));
    14d6:	41f8      	rors	r0, r7
    s1 ^= rk[1];
    14d8:	9d01      	ldr	r5, [sp, #4]
    14da:	686a      	ldr	r2, [r5, #4]
    14dc:	4050      	eors	r0, r2
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
    14de:	0a0d      	lsrs	r5, r1, #8
    14e0:	401d      	ands	r5, r3
    14e2:	0209      	lsls	r1, r1, #8
    14e4:	464a      	mov	r2, r9
    14e6:	4011      	ands	r1, r2
    14e8:	430d      	orrs	r5, r1
        return (x << y) | (x >> (sizeof(y) * 8 - y));
    14ea:	41fd      	rors	r5, r7
    s2 ^= rk[2];
    14ec:	9901      	ldr	r1, [sp, #4]
    14ee:	688a      	ldr	r2, [r1, #8]
    14f0:	4055      	eors	r5, r2
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
    14f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
    14f4:	0a11      	lsrs	r1, r2, #8
    14f6:	4019      	ands	r1, r3
    14f8:	0213      	lsls	r3, r2, #8
    14fa:	464a      	mov	r2, r9
    14fc:	4013      	ands	r3, r2
    14fe:	4319      	orrs	r1, r3
        return (x << y) | (x >> (sizeof(y) * 8 - y));
    1500:	41f9      	rors	r1, r7
    s3 ^= rk[3];
    1502:	9b01      	ldr	r3, [sp, #4]
    1504:	68db      	ldr	r3, [r3, #12]
    1506:	9300      	str	r3, [sp, #0]
    1508:	404b      	eors	r3, r1
    150a:	469c      	mov	ip, r3
    150c:	2104      	movs	r1, #4
    150e:	465a      	mov	r2, fp
    if (((wolfssl_word)buf | (wolfssl_word)mask | count) % WOLFSSL_WORD_SIZE == 0)
    1510:	2320      	movs	r3, #32
    1512:	3b01      	subs	r3, #1
        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
    1514:	2b00      	cmp	r3, #0
    1516:	d1fc      	bne.n	1512 <wc_AesCbcEncrypt+0x14a>
    1518:	3901      	subs	r1, #1
    for (i = 0; i < 4; i++) {
    151a:	2900      	cmp	r1, #0
    151c:	d1f8      	bne.n	1510 <wc_AesCbcEncrypt+0x148>
    151e:	4693      	mov	fp, r2
    const word32* rk = aes->key;
    1520:	9901      	ldr	r1, [sp, #4]
    1522:	468a      	mov	sl, r1
    1524:	0164      	lsls	r4, r4, #5
    1526:	4454      	add	r4, sl
    1528:	9407      	str	r4, [sp, #28]
            Te[0][GETBYTE(s0, 3)]  ^
    152a:	4aa1      	ldr	r2, [pc, #644]	; (17b0 <wc_AesCbcEncrypt+0x3e8>)
    152c:	4691      	mov	r9, r2
            Te[3][GETBYTE(s3, 0)]  ^
    152e:	27ff      	movs	r7, #255	; 0xff
    1530:	465a      	mov	r2, fp
    1532:	9403      	str	r4, [sp, #12]
            Te[0][GETBYTE(s0, 3)]  ^
    1534:	0e11      	lsrs	r1, r2, #24
    1536:	0089      	lsls	r1, r1, #2
    1538:	4449      	add	r1, r9
            Te[3][GETBYTE(s3, 0)]  ^
    153a:	4663      	mov	r3, ip
    153c:	403b      	ands	r3, r7
    153e:	24c0      	movs	r4, #192	; 0xc0
    1540:	00a4      	lsls	r4, r4, #2
    1542:	46a3      	mov	fp, r4
    1544:	445b      	add	r3, fp
    1546:	009b      	lsls	r3, r3, #2
    1548:	444b      	add	r3, r9
        t0 =
    154a:	6a89      	ldr	r1, [r1, #40]	; 0x28
    154c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    154e:	4059      	eors	r1, r3
    1550:	4653      	mov	r3, sl
    1552:	691b      	ldr	r3, [r3, #16]
    1554:	4059      	eors	r1, r3
            Te[1][GETBYTE(s1, 2)]  ^
    1556:	0c03      	lsrs	r3, r0, #16
    1558:	403b      	ands	r3, r7
    155a:	3301      	adds	r3, #1
    155c:	33ff      	adds	r3, #255	; 0xff
    155e:	009b      	lsls	r3, r3, #2
    1560:	444b      	add	r3, r9
        t0 =
    1562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1564:	4059      	eors	r1, r3
            Te[2][GETBYTE(s2, 1)]  ^
    1566:	0a2b      	lsrs	r3, r5, #8
    1568:	403b      	ands	r3, r7
    156a:	3c01      	subs	r4, #1
    156c:	3cff      	subs	r4, #255	; 0xff
    156e:	46a3      	mov	fp, r4
    1570:	445b      	add	r3, fp
    1572:	009b      	lsls	r3, r3, #2
    1574:	444b      	add	r3, r9
        t0 =
    1576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1578:	4059      	eors	r1, r3
    157a:	9100      	str	r1, [sp, #0]
            Te[0][GETBYTE(s1, 3)]  ^
    157c:	0e03      	lsrs	r3, r0, #24
    157e:	009b      	lsls	r3, r3, #2
    1580:	444b      	add	r3, r9
            Te[3][GETBYTE(s0, 0)]  ^
    1582:	003c      	movs	r4, r7
    1584:	4014      	ands	r4, r2
    1586:	21c0      	movs	r1, #192	; 0xc0
    1588:	0089      	lsls	r1, r1, #2
    158a:	468b      	mov	fp, r1
    158c:	445c      	add	r4, fp
    158e:	00a4      	lsls	r4, r4, #2
    1590:	444c      	add	r4, r9
        t1 =
    1592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1594:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    1596:	4063      	eors	r3, r4
    1598:	4651      	mov	r1, sl
    159a:	6949      	ldr	r1, [r1, #20]
    159c:	404b      	eors	r3, r1
            Te[1][GETBYTE(s2, 2)]  ^
    159e:	0c2c      	lsrs	r4, r5, #16
    15a0:	403c      	ands	r4, r7
    15a2:	3401      	adds	r4, #1
    15a4:	34ff      	adds	r4, #255	; 0xff
    15a6:	00a4      	lsls	r4, r4, #2
    15a8:	444c      	add	r4, r9
        t1 =
    15aa:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    15ac:	4063      	eors	r3, r4
            Te[2][GETBYTE(s3, 1)]  ^
    15ae:	4661      	mov	r1, ip
    15b0:	0a0c      	lsrs	r4, r1, #8
    15b2:	403c      	ands	r4, r7
    15b4:	2180      	movs	r1, #128	; 0x80
    15b6:	0089      	lsls	r1, r1, #2
    15b8:	468b      	mov	fp, r1
    15ba:	445c      	add	r4, fp
    15bc:	00a4      	lsls	r4, r4, #2
    15be:	444c      	add	r4, r9
        t1 =
    15c0:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    15c2:	4063      	eors	r3, r4
            Te[0][GETBYTE(s2, 3)] ^
    15c4:	0e2c      	lsrs	r4, r5, #24
    15c6:	00a4      	lsls	r4, r4, #2
    15c8:	444c      	add	r4, r9
    15ca:	46a3      	mov	fp, r4
            Te[3][GETBYTE(s1, 0)]  ^
    15cc:	003c      	movs	r4, r7
    15ce:	4004      	ands	r4, r0
    15d0:	3101      	adds	r1, #1
    15d2:	31ff      	adds	r1, #255	; 0xff
    15d4:	4688      	mov	r8, r1
    15d6:	4444      	add	r4, r8
    15d8:	00a4      	lsls	r4, r4, #2
    15da:	444c      	add	r4, r9
        t2 =
    15dc:	4659      	mov	r1, fp
    15de:	6a89      	ldr	r1, [r1, #40]	; 0x28
    15e0:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    15e2:	404c      	eors	r4, r1
    15e4:	4651      	mov	r1, sl
    15e6:	6989      	ldr	r1, [r1, #24]
    15e8:	4061      	eors	r1, r4
    15ea:	468b      	mov	fp, r1
            Te[1][GETBYTE(s3, 2)]  ^
    15ec:	4661      	mov	r1, ip
    15ee:	0c0c      	lsrs	r4, r1, #16
    15f0:	403c      	ands	r4, r7
    15f2:	3401      	adds	r4, #1
    15f4:	34ff      	adds	r4, #255	; 0xff
    15f6:	00a4      	lsls	r4, r4, #2
    15f8:	444c      	add	r4, r9
        t2 =
    15fa:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    15fc:	4659      	mov	r1, fp
    15fe:	4061      	eors	r1, r4
    1600:	468b      	mov	fp, r1
            Te[2][GETBYTE(s0, 1)]  ^
    1602:	0a14      	lsrs	r4, r2, #8
    1604:	403c      	ands	r4, r7
    1606:	2180      	movs	r1, #128	; 0x80
    1608:	0089      	lsls	r1, r1, #2
    160a:	4688      	mov	r8, r1
    160c:	4444      	add	r4, r8
    160e:	00a4      	lsls	r4, r4, #2
    1610:	444c      	add	r4, r9
        t2 =
    1612:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    1614:	4659      	mov	r1, fp
    1616:	404c      	eors	r4, r1
            Te[0][GETBYTE(s3, 3)] ^
    1618:	4661      	mov	r1, ip
    161a:	0e09      	lsrs	r1, r1, #24
    161c:	0089      	lsls	r1, r1, #2
    161e:	468c      	mov	ip, r1
    1620:	44cc      	add	ip, r9
            Te[3][GETBYTE(s2, 0)]  ^
    1622:	403d      	ands	r5, r7
    1624:	21c0      	movs	r1, #192	; 0xc0
    1626:	0089      	lsls	r1, r1, #2
    1628:	4688      	mov	r8, r1
    162a:	4445      	add	r5, r8
    162c:	00ad      	lsls	r5, r5, #2
    162e:	444d      	add	r5, r9
        t3 =
    1630:	4661      	mov	r1, ip
    1632:	6a89      	ldr	r1, [r1, #40]	; 0x28
    1634:	6aad      	ldr	r5, [r5, #40]	; 0x28
    1636:	404d      	eors	r5, r1
    1638:	4651      	mov	r1, sl
    163a:	69c9      	ldr	r1, [r1, #28]
    163c:	4069      	eors	r1, r5
            Te[1][GETBYTE(s0, 2)]  ^
    163e:	0c15      	lsrs	r5, r2, #16
    1640:	403d      	ands	r5, r7
    1642:	3501      	adds	r5, #1
    1644:	35ff      	adds	r5, #255	; 0xff
    1646:	00ad      	lsls	r5, r5, #2
    1648:	444d      	add	r5, r9
        t3 =
    164a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    164c:	404a      	eors	r2, r1
            Te[2][GETBYTE(s1, 1)]  ^
    164e:	0a00      	lsrs	r0, r0, #8
    1650:	4038      	ands	r0, r7
    1652:	2180      	movs	r1, #128	; 0x80
    1654:	0089      	lsls	r1, r1, #2
    1656:	468c      	mov	ip, r1
    1658:	4460      	add	r0, ip
    165a:	0080      	lsls	r0, r0, #2
    165c:	4448      	add	r0, r9
        t3 =
    165e:	6a80      	ldr	r0, [r0, #40]	; 0x28
    1660:	4042      	eors	r2, r0
    1662:	4694      	mov	ip, r2
        rk += 8;
    1664:	2220      	movs	r2, #32
    1666:	4690      	mov	r8, r2
    1668:	44c2      	add	sl, r8
        if (--r == 0) {
    166a:	9a03      	ldr	r2, [sp, #12]
    166c:	4592      	cmp	sl, r2
    166e:	d100      	bne.n	1672 <wc_AesCbcEncrypt+0x2aa>
    1670:	e0a6      	b.n	17c0 <wc_AesCbcEncrypt+0x3f8>
            Te[0][GETBYTE(t0, 3)] ^
    1672:	9900      	ldr	r1, [sp, #0]
    1674:	0e0a      	lsrs	r2, r1, #24
    1676:	0092      	lsls	r2, r2, #2
    1678:	18b2      	adds	r2, r6, r2
            Te[3][GETBYTE(t3, 0)] ^
    167a:	4660      	mov	r0, ip
    167c:	4038      	ands	r0, r7
    167e:	21c0      	movs	r1, #192	; 0xc0
    1680:	0089      	lsls	r1, r1, #2
    1682:	4688      	mov	r8, r1
    1684:	4440      	add	r0, r8
    1686:	0080      	lsls	r0, r0, #2
    1688:	1830      	adds	r0, r6, r0
    168a:	6a92      	ldr	r2, [r2, #40]	; 0x28
    168c:	6a80      	ldr	r0, [r0, #40]	; 0x28
    168e:	4042      	eors	r2, r0
    1690:	4651      	mov	r1, sl
    1692:	6809      	ldr	r1, [r1, #0]
    1694:	404a      	eors	r2, r1
            Te[1][GETBYTE(t1, 2)] ^
    1696:	0c18      	lsrs	r0, r3, #16
    1698:	4038      	ands	r0, r7
    169a:	3001      	adds	r0, #1
    169c:	30ff      	adds	r0, #255	; 0xff
    169e:	0080      	lsls	r0, r0, #2
    16a0:	1830      	adds	r0, r6, r0
            Te[3][GETBYTE(t3, 0)] ^
    16a2:	6a80      	ldr	r0, [r0, #40]	; 0x28
    16a4:	4042      	eors	r2, r0
            Te[2][GETBYTE(t2, 1)] ^
    16a6:	0a20      	lsrs	r0, r4, #8
    16a8:	4038      	ands	r0, r7
    16aa:	2180      	movs	r1, #128	; 0x80
    16ac:	0089      	lsls	r1, r1, #2
    16ae:	4688      	mov	r8, r1
    16b0:	4440      	add	r0, r8
    16b2:	0080      	lsls	r0, r0, #2
    16b4:	1830      	adds	r0, r6, r0
            Te[3][GETBYTE(t3, 0)] ^
    16b6:	6a80      	ldr	r0, [r0, #40]	; 0x28
    16b8:	4042      	eors	r2, r0
            Te[0][GETBYTE(t1, 3)] ^
    16ba:	0e18      	lsrs	r0, r3, #24
    16bc:	0080      	lsls	r0, r0, #2
    16be:	1830      	adds	r0, r6, r0
            Te[3][GETBYTE(t0, 0)] ^
    16c0:	003d      	movs	r5, r7
    16c2:	9900      	ldr	r1, [sp, #0]
    16c4:	400d      	ands	r5, r1
    16c6:	21c0      	movs	r1, #192	; 0xc0
    16c8:	0089      	lsls	r1, r1, #2
    16ca:	4688      	mov	r8, r1
    16cc:	4445      	add	r5, r8
    16ce:	00ad      	lsls	r5, r5, #2
    16d0:	1975      	adds	r5, r6, r5
    16d2:	6a80      	ldr	r0, [r0, #40]	; 0x28
    16d4:	6aad      	ldr	r5, [r5, #40]	; 0x28
    16d6:	4068      	eors	r0, r5
    16d8:	4651      	mov	r1, sl
    16da:	6849      	ldr	r1, [r1, #4]
    16dc:	4048      	eors	r0, r1
            Te[1][GETBYTE(t2, 2)] ^
    16de:	0c25      	lsrs	r5, r4, #16
    16e0:	403d      	ands	r5, r7
    16e2:	3501      	adds	r5, #1
    16e4:	35ff      	adds	r5, #255	; 0xff
    16e6:	00ad      	lsls	r5, r5, #2
    16e8:	1975      	adds	r5, r6, r5
            Te[3][GETBYTE(t0, 0)] ^
    16ea:	6aad      	ldr	r5, [r5, #40]	; 0x28
    16ec:	4068      	eors	r0, r5
            Te[2][GETBYTE(t3, 1)] ^
    16ee:	4661      	mov	r1, ip
    16f0:	0a0d      	lsrs	r5, r1, #8
    16f2:	403d      	ands	r5, r7
    16f4:	2180      	movs	r1, #128	; 0x80
    16f6:	0089      	lsls	r1, r1, #2
    16f8:	4688      	mov	r8, r1
    16fa:	4445      	add	r5, r8
    16fc:	00ad      	lsls	r5, r5, #2
    16fe:	1975      	adds	r5, r6, r5
            Te[3][GETBYTE(t0, 0)] ^
    1700:	6aad      	ldr	r5, [r5, #40]	; 0x28
    1702:	4068      	eors	r0, r5
            Te[0][GETBYTE(t2, 3)] ^
    1704:	0e25      	lsrs	r5, r4, #24
    1706:	00ad      	lsls	r5, r5, #2
    1708:	46ab      	mov	fp, r5
    170a:	44b3      	add	fp, r6
            Te[3][GETBYTE(t1, 0)] ^
    170c:	003d      	movs	r5, r7
    170e:	401d      	ands	r5, r3
    1710:	3101      	adds	r1, #1
    1712:	31ff      	adds	r1, #255	; 0xff
    1714:	4688      	mov	r8, r1
    1716:	4445      	add	r5, r8
    1718:	00ad      	lsls	r5, r5, #2
    171a:	1975      	adds	r5, r6, r5
    171c:	4659      	mov	r1, fp
    171e:	6a89      	ldr	r1, [r1, #40]	; 0x28
    1720:	6aad      	ldr	r5, [r5, #40]	; 0x28
    1722:	404d      	eors	r5, r1
    1724:	4651      	mov	r1, sl
    1726:	6889      	ldr	r1, [r1, #8]
    1728:	4069      	eors	r1, r5
    172a:	468b      	mov	fp, r1
            Te[1][GETBYTE(t3, 2)] ^
    172c:	4661      	mov	r1, ip
    172e:	0c0d      	lsrs	r5, r1, #16
    1730:	403d      	ands	r5, r7
    1732:	3501      	adds	r5, #1
    1734:	35ff      	adds	r5, #255	; 0xff
    1736:	00ad      	lsls	r5, r5, #2
    1738:	1975      	adds	r5, r6, r5
            Te[3][GETBYTE(t1, 0)] ^
    173a:	6aad      	ldr	r5, [r5, #40]	; 0x28
    173c:	4659      	mov	r1, fp
    173e:	4069      	eors	r1, r5
    1740:	468b      	mov	fp, r1
            Te[2][GETBYTE(t0, 1)] ^
    1742:	9900      	ldr	r1, [sp, #0]
    1744:	0a0d      	lsrs	r5, r1, #8
    1746:	403d      	ands	r5, r7
    1748:	2180      	movs	r1, #128	; 0x80
    174a:	0089      	lsls	r1, r1, #2
    174c:	4688      	mov	r8, r1
    174e:	4445      	add	r5, r8
    1750:	00ad      	lsls	r5, r5, #2
    1752:	1975      	adds	r5, r6, r5
            Te[3][GETBYTE(t1, 0)] ^
    1754:	6aad      	ldr	r5, [r5, #40]	; 0x28
    1756:	4659      	mov	r1, fp
    1758:	404d      	eors	r5, r1
            Te[0][GETBYTE(t3, 3)] ^
    175a:	4661      	mov	r1, ip
    175c:	0e09      	lsrs	r1, r1, #24
    175e:	0089      	lsls	r1, r1, #2
    1760:	468c      	mov	ip, r1
    1762:	44b4      	add	ip, r6
            Te[3][GETBYTE(t2, 0)] ^
    1764:	403c      	ands	r4, r7
    1766:	21c0      	movs	r1, #192	; 0xc0
    1768:	0089      	lsls	r1, r1, #2
    176a:	4688      	mov	r8, r1
    176c:	4444      	add	r4, r8
    176e:	00a4      	lsls	r4, r4, #2
    1770:	1934      	adds	r4, r6, r4
    1772:	4661      	mov	r1, ip
    1774:	6a89      	ldr	r1, [r1, #40]	; 0x28
    1776:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    1778:	404c      	eors	r4, r1
    177a:	4651      	mov	r1, sl
    177c:	68c9      	ldr	r1, [r1, #12]
    177e:	4061      	eors	r1, r4
    1780:	468c      	mov	ip, r1
            Te[1][GETBYTE(t0, 2)] ^
    1782:	9900      	ldr	r1, [sp, #0]
    1784:	0c0c      	lsrs	r4, r1, #16
    1786:	403c      	ands	r4, r7
    1788:	3401      	adds	r4, #1
    178a:	34ff      	adds	r4, #255	; 0xff
    178c:	00a4      	lsls	r4, r4, #2
    178e:	1934      	adds	r4, r6, r4
            Te[3][GETBYTE(t2, 0)] ^
    1790:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    1792:	4664      	mov	r4, ip
    1794:	4061      	eors	r1, r4
            Te[2][GETBYTE(t1, 1)] ^
    1796:	0a1b      	lsrs	r3, r3, #8
    1798:	403b      	ands	r3, r7
    179a:	2480      	movs	r4, #128	; 0x80
    179c:	00a4      	lsls	r4, r4, #2
    179e:	46a4      	mov	ip, r4
    17a0:	4463      	add	r3, ip
    17a2:	009b      	lsls	r3, r3, #2
    17a4:	18f3      	adds	r3, r6, r3
            Te[3][GETBYTE(t2, 0)] ^
    17a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    17a8:	4059      	eors	r1, r3
    17aa:	468c      	mov	ip, r1
    17ac:	e6c2      	b.n	1534 <wc_AesCbcEncrypt+0x16c>
    17ae:	46c0      	nop			; (mov r8, r8)
    17b0:	00002124 	.word	0x00002124
    17b4:	00001fd9 	.word	0x00001fd9
    17b8:	00ff00ff 	.word	0x00ff00ff
    17bc:	ff00ff00 	.word	0xff00ff00
    17c0:	4699      	mov	r9, r3
        (Te[1][GETBYTE(t3, 0)] & 0x000000ff) ^
    17c2:	4892      	ldr	r0, [pc, #584]	; (1a0c <wc_AesCbcEncrypt+0x644>)
    17c4:	22ff      	movs	r2, #255	; 0xff
    17c6:	4665      	mov	r5, ip
    17c8:	4015      	ands	r5, r2
    17ca:	3501      	adds	r5, #1
    17cc:	35ff      	adds	r5, #255	; 0xff
    17ce:	00ad      	lsls	r5, r5, #2
    17d0:	1945      	adds	r5, r0, r5
    17d2:	6aad      	ldr	r5, [r5, #40]	; 0x28
    17d4:	4015      	ands	r5, r2
    17d6:	9f07      	ldr	r7, [sp, #28]
    17d8:	683b      	ldr	r3, [r7, #0]
    17da:	405d      	eors	r5, r3
        (Te[0][GETBYTE(t2, 1)] & 0x0000ff00) ^
    17dc:	0a23      	lsrs	r3, r4, #8
    17de:	4013      	ands	r3, r2
    17e0:	009b      	lsls	r3, r3, #2
    17e2:	4698      	mov	r8, r3
    17e4:	4480      	add	r8, r0
    17e6:	4643      	mov	r3, r8
    17e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    17ea:	4698      	mov	r8, r3
    17ec:	23ff      	movs	r3, #255	; 0xff
    17ee:	021b      	lsls	r3, r3, #8
    17f0:	0019      	movs	r1, r3
    17f2:	4643      	mov	r3, r8
    17f4:	9107      	str	r1, [sp, #28]
    17f6:	400b      	ands	r3, r1
        (Te[1][GETBYTE(t3, 0)] & 0x000000ff) ^
    17f8:	405d      	eors	r5, r3
        (Te[3][GETBYTE(t1, 2)] & 0x00ff0000) ^
    17fa:	464b      	mov	r3, r9
    17fc:	9303      	str	r3, [sp, #12]
    17fe:	0c1b      	lsrs	r3, r3, #16
    1800:	4013      	ands	r3, r2
    1802:	4698      	mov	r8, r3
    1804:	23c0      	movs	r3, #192	; 0xc0
    1806:	009b      	lsls	r3, r3, #2
    1808:	4699      	mov	r9, r3
    180a:	44c8      	add	r8, r9
    180c:	4643      	mov	r3, r8
    180e:	009b      	lsls	r3, r3, #2
    1810:	4698      	mov	r8, r3
    1812:	4480      	add	r8, r0
    1814:	4643      	mov	r3, r8
    1816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1818:	4699      	mov	r9, r3
    181a:	23ff      	movs	r3, #255	; 0xff
    181c:	041b      	lsls	r3, r3, #16
    181e:	469b      	mov	fp, r3
    1820:	464b      	mov	r3, r9
    1822:	4659      	mov	r1, fp
    1824:	400b      	ands	r3, r1
    1826:	4699      	mov	r9, r3
        (Te[2][GETBYTE(t0, 3)] & 0xff000000) ^
    1828:	9b00      	ldr	r3, [sp, #0]
    182a:	0e1b      	lsrs	r3, r3, #24
    182c:	4698      	mov	r8, r3
    182e:	2380      	movs	r3, #128	; 0x80
    1830:	009b      	lsls	r3, r3, #2
    1832:	469a      	mov	sl, r3
    1834:	44d0      	add	r8, sl
    1836:	4643      	mov	r3, r8
    1838:	009b      	lsls	r3, r3, #2
    183a:	4698      	mov	r8, r3
    183c:	4480      	add	r8, r0
    183e:	4643      	mov	r3, r8
    1840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1842:	0e1b      	lsrs	r3, r3, #24
    1844:	061b      	lsls	r3, r3, #24
    1846:	4698      	mov	r8, r3
    1848:	464b      	mov	r3, r9
    184a:	4641      	mov	r1, r8
    184c:	430b      	orrs	r3, r1
        (Te[1][GETBYTE(t3, 0)] & 0x000000ff) ^
    184e:	406b      	eors	r3, r5
    1850:	930b      	str	r3, [sp, #44]	; 0x2c
        (Te[1][GETBYTE(t0, 0)] & 0x000000ff) ^
    1852:	0015      	movs	r5, r2
    1854:	9b00      	ldr	r3, [sp, #0]
    1856:	401d      	ands	r5, r3
    1858:	3501      	adds	r5, #1
    185a:	35ff      	adds	r5, #255	; 0xff
    185c:	00ad      	lsls	r5, r5, #2
    185e:	1945      	adds	r5, r0, r5
    1860:	6aad      	ldr	r5, [r5, #40]	; 0x28
    1862:	4015      	ands	r5, r2
    1864:	6879      	ldr	r1, [r7, #4]
    1866:	000b      	movs	r3, r1
    1868:	406b      	eors	r3, r5
        (Te[0][GETBYTE(t3, 1)] & 0x0000ff00) ^
    186a:	4661      	mov	r1, ip
    186c:	0a0d      	lsrs	r5, r1, #8
    186e:	4015      	ands	r5, r2
    1870:	00ad      	lsls	r5, r5, #2
    1872:	1945      	adds	r5, r0, r5
    1874:	6aad      	ldr	r5, [r5, #40]	; 0x28
    1876:	9907      	ldr	r1, [sp, #28]
    1878:	400d      	ands	r5, r1
        (Te[1][GETBYTE(t0, 0)] & 0x000000ff) ^
    187a:	405d      	eors	r5, r3
        (Te[3][GETBYTE(t2, 2)] & 0x00ff0000) ^
    187c:	0c21      	lsrs	r1, r4, #16
    187e:	000b      	movs	r3, r1
    1880:	4013      	ands	r3, r2
    1882:	4698      	mov	r8, r3
    1884:	21c0      	movs	r1, #192	; 0xc0
    1886:	0089      	lsls	r1, r1, #2
    1888:	4689      	mov	r9, r1
    188a:	44c8      	add	r8, r9
    188c:	4641      	mov	r1, r8
    188e:	0089      	lsls	r1, r1, #2
    1890:	4688      	mov	r8, r1
    1892:	4480      	add	r8, r0
    1894:	4641      	mov	r1, r8
    1896:	6a89      	ldr	r1, [r1, #40]	; 0x28
    1898:	000b      	movs	r3, r1
    189a:	4659      	mov	r1, fp
    189c:	400b      	ands	r3, r1
        (Te[2][GETBYTE(t1, 3)] & 0xff000000) ^
    189e:	9903      	ldr	r1, [sp, #12]
    18a0:	0e09      	lsrs	r1, r1, #24
    18a2:	4688      	mov	r8, r1
    18a4:	44d0      	add	r8, sl
    18a6:	4641      	mov	r1, r8
    18a8:	0089      	lsls	r1, r1, #2
    18aa:	4688      	mov	r8, r1
    18ac:	4480      	add	r8, r0
    18ae:	4641      	mov	r1, r8
    18b0:	6a89      	ldr	r1, [r1, #40]	; 0x28
    18b2:	0e09      	lsrs	r1, r1, #24
    18b4:	0609      	lsls	r1, r1, #24
    18b6:	430b      	orrs	r3, r1
        (Te[1][GETBYTE(t0, 0)] & 0x000000ff) ^
    18b8:	406b      	eors	r3, r5
    18ba:	930c      	str	r3, [sp, #48]	; 0x30
        (Te[1][GETBYTE(t1, 0)] & 0x000000ff) ^
    18bc:	0015      	movs	r5, r2
    18be:	9903      	ldr	r1, [sp, #12]
    18c0:	400d      	ands	r5, r1
    18c2:	3501      	adds	r5, #1
    18c4:	35ff      	adds	r5, #255	; 0xff
    18c6:	00ad      	lsls	r5, r5, #2
    18c8:	1945      	adds	r5, r0, r5
    18ca:	6aad      	ldr	r5, [r5, #40]	; 0x28
    18cc:	4015      	ands	r5, r2
    18ce:	68b9      	ldr	r1, [r7, #8]
    18d0:	910d      	str	r1, [sp, #52]	; 0x34
    18d2:	000b      	movs	r3, r1
    18d4:	406b      	eors	r3, r5
    18d6:	4698      	mov	r8, r3
        (Te[0][GETBYTE(t0, 1)] & 0x0000ff00) ^
    18d8:	9b00      	ldr	r3, [sp, #0]
    18da:	0a1d      	lsrs	r5, r3, #8
    18dc:	4015      	ands	r5, r2
    18de:	00ad      	lsls	r5, r5, #2
    18e0:	1945      	adds	r5, r0, r5
    18e2:	6aad      	ldr	r5, [r5, #40]	; 0x28
    18e4:	9907      	ldr	r1, [sp, #28]
    18e6:	400d      	ands	r5, r1
        (Te[1][GETBYTE(t1, 0)] & 0x000000ff) ^
    18e8:	4641      	mov	r1, r8
    18ea:	404d      	eors	r5, r1
        (Te[3][GETBYTE(t3, 2)] & 0x00ff0000) ^
    18ec:	4661      	mov	r1, ip
    18ee:	0c09      	lsrs	r1, r1, #16
    18f0:	000b      	movs	r3, r1
    18f2:	4013      	ands	r3, r2
    18f4:	4698      	mov	r8, r3
    18f6:	21c0      	movs	r1, #192	; 0xc0
    18f8:	0089      	lsls	r1, r1, #2
    18fa:	4689      	mov	r9, r1
    18fc:	44c8      	add	r8, r9
    18fe:	4641      	mov	r1, r8
    1900:	0089      	lsls	r1, r1, #2
    1902:	4688      	mov	r8, r1
    1904:	4480      	add	r8, r0
    1906:	4641      	mov	r1, r8
    1908:	6a89      	ldr	r1, [r1, #40]	; 0x28
    190a:	000b      	movs	r3, r1
    190c:	4659      	mov	r1, fp
    190e:	400b      	ands	r3, r1
        (Te[2][GETBYTE(t2, 3)] & 0xff000000) ^
    1910:	0e21      	lsrs	r1, r4, #24
    1912:	4688      	mov	r8, r1
    1914:	44d0      	add	r8, sl
    1916:	4641      	mov	r1, r8
    1918:	0089      	lsls	r1, r1, #2
    191a:	4688      	mov	r8, r1
    191c:	4480      	add	r8, r0
    191e:	4641      	mov	r1, r8
    1920:	6a89      	ldr	r1, [r1, #40]	; 0x28
    1922:	0e09      	lsrs	r1, r1, #24
    1924:	0609      	lsls	r1, r1, #24
    1926:	430b      	orrs	r3, r1
        (Te[1][GETBYTE(t1, 0)] & 0x000000ff) ^
    1928:	406b      	eors	r3, r5
    192a:	4699      	mov	r9, r3
        (Te[1][GETBYTE(t2, 0)] & 0x000000ff) ^
    192c:	4014      	ands	r4, r2
    192e:	3401      	adds	r4, #1
    1930:	34ff      	adds	r4, #255	; 0xff
    1932:	00a4      	lsls	r4, r4, #2
    1934:	1904      	adds	r4, r0, r4
    1936:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    1938:	4014      	ands	r4, r2
    193a:	68fd      	ldr	r5, [r7, #12]
    193c:	406c      	eors	r4, r5
        (Te[0][GETBYTE(t1, 1)] & 0x0000ff00) ^
    193e:	9903      	ldr	r1, [sp, #12]
    1940:	0a0b      	lsrs	r3, r1, #8
    1942:	4013      	ands	r3, r2
    1944:	009b      	lsls	r3, r3, #2
    1946:	18c3      	adds	r3, r0, r3
    1948:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    194a:	9907      	ldr	r1, [sp, #28]
    194c:	400d      	ands	r5, r1
        (Te[1][GETBYTE(t2, 0)] & 0x000000ff) ^
    194e:	4065      	eors	r5, r4
        (Te[3][GETBYTE(t0, 2)] & 0x00ff0000) ^
    1950:	9b00      	ldr	r3, [sp, #0]
    1952:	0c19      	lsrs	r1, r3, #16
    1954:	4011      	ands	r1, r2
    1956:	22c0      	movs	r2, #192	; 0xc0
    1958:	0092      	lsls	r2, r2, #2
    195a:	188b      	adds	r3, r1, r2
    195c:	009b      	lsls	r3, r3, #2
    195e:	18c3      	adds	r3, r0, r3
    1960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1962:	465a      	mov	r2, fp
    1964:	4013      	ands	r3, r2
        (Te[2][GETBYTE(t3, 3)] & 0xff000000) ^
    1966:	4662      	mov	r2, ip
    1968:	0e12      	lsrs	r2, r2, #24
    196a:	4452      	add	r2, sl
    196c:	0092      	lsls	r2, r2, #2
    196e:	1880      	adds	r0, r0, r2
    1970:	6a84      	ldr	r4, [r0, #40]	; 0x28
    1972:	0e24      	lsrs	r4, r4, #24
    1974:	0624      	lsls	r4, r4, #24
    1976:	431c      	orrs	r4, r3
        (Te[1][GETBYTE(t2, 0)] & 0x000000ff) ^
    1978:	406c      	eors	r4, r5
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
    197a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    197c:	0a1a      	lsrs	r2, r3, #8
    197e:	4924      	ldr	r1, [pc, #144]	; (1a10 <wc_AesCbcEncrypt+0x648>)
    1980:	400a      	ands	r2, r1
    1982:	021b      	lsls	r3, r3, #8
    1984:	4823      	ldr	r0, [pc, #140]	; (1a14 <wc_AesCbcEncrypt+0x64c>)
    1986:	4003      	ands	r3, r0
    1988:	4313      	orrs	r3, r2
        return (x << y) | (x >> (sizeof(y) * 8 - y));
    198a:	2210      	movs	r2, #16
    198c:	41d3      	rors	r3, r2
    s0 = ByteReverseWord32(s0);
    198e:	930e      	str	r3, [sp, #56]	; 0x38
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
    1990:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    1992:	0a2b      	lsrs	r3, r5, #8
    1994:	400b      	ands	r3, r1
    1996:	022d      	lsls	r5, r5, #8
    1998:	4005      	ands	r5, r0
    199a:	432b      	orrs	r3, r5
        return (x << y) | (x >> (sizeof(y) * 8 - y));
    199c:	41d3      	rors	r3, r2
    s1 = ByteReverseWord32(s1);
    199e:	930f      	str	r3, [sp, #60]	; 0x3c
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
    19a0:	464b      	mov	r3, r9
    19a2:	0a1b      	lsrs	r3, r3, #8
    19a4:	400b      	ands	r3, r1
    19a6:	464d      	mov	r5, r9
    19a8:	022d      	lsls	r5, r5, #8
    19aa:	4005      	ands	r5, r0
    19ac:	432b      	orrs	r3, r5
        return (x << y) | (x >> (sizeof(y) * 8 - y));
    19ae:	41d3      	rors	r3, r2
    s2 = ByteReverseWord32(s2);
    19b0:	9310      	str	r3, [sp, #64]	; 0x40
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
    19b2:	0a23      	lsrs	r3, r4, #8
    19b4:	4019      	ands	r1, r3
    19b6:	0224      	lsls	r4, r4, #8
    19b8:	4020      	ands	r0, r4
    19ba:	4301      	orrs	r1, r0
        return (x << y) | (x >> (sizeof(y) * 8 - y));
    19bc:	41d1      	rors	r1, r2
    s3 = ByteReverseWord32(s3);
    19be:	9111      	str	r1, [sp, #68]	; 0x44
    XMEMCPY(outBlock,                  &s0, sizeof(s0));
    19c0:	3a0c      	subs	r2, #12
    19c2:	a90e      	add	r1, sp, #56	; 0x38
    19c4:	9804      	ldr	r0, [sp, #16]
    19c6:	4c14      	ldr	r4, [pc, #80]	; (1a18 <wc_AesCbcEncrypt+0x650>)
    19c8:	47a0      	blx	r4
    XMEMCPY(outBlock + sizeof(s0),     &s1, sizeof(s1));
    19ca:	2204      	movs	r2, #4
    19cc:	a90f      	add	r1, sp, #60	; 0x3c
    19ce:	9808      	ldr	r0, [sp, #32]
    19d0:	47a0      	blx	r4
    XMEMCPY(outBlock + 2 * sizeof(s0), &s2, sizeof(s2));
    19d2:	2204      	movs	r2, #4
    19d4:	a910      	add	r1, sp, #64	; 0x40
    19d6:	9809      	ldr	r0, [sp, #36]	; 0x24
    19d8:	47a0      	blx	r4
    XMEMCPY(outBlock + 3 * sizeof(s0), &s3, sizeof(s3));
    19da:	2204      	movs	r2, #4
    19dc:	a911      	add	r1, sp, #68	; 0x44
    19de:	980a      	ldr	r0, [sp, #40]	; 0x28
    19e0:	47a0      	blx	r4
    19e2:	e51d      	b.n	1420 <wc_AesCbcEncrypt+0x58>
        }

        return 0;
    19e4:	2000      	movs	r0, #0
    }
    19e6:	b013      	add	sp, #76	; 0x4c
    19e8:	bc3c      	pop	{r2, r3, r4, r5}
    19ea:	4690      	mov	r8, r2
    19ec:	4699      	mov	r9, r3
    19ee:	46a2      	mov	sl, r4
    19f0:	46ab      	mov	fp, r5
    19f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return BAD_FUNC_ARG;
    19f4:	20ad      	movs	r0, #173	; 0xad
    19f6:	4240      	negs	r0, r0
    19f8:	e7f5      	b.n	19e6 <wc_AesCbcEncrypt+0x61e>
    19fa:	20ad      	movs	r0, #173	; 0xad
    19fc:	4240      	negs	r0, r0
    19fe:	e7f2      	b.n	19e6 <wc_AesCbcEncrypt+0x61e>
    1a00:	20ad      	movs	r0, #173	; 0xad
    1a02:	4240      	negs	r0, r0
    1a04:	e7ef      	b.n	19e6 <wc_AesCbcEncrypt+0x61e>
        return 0;
    1a06:	2000      	movs	r0, #0
    1a08:	e7ed      	b.n	19e6 <wc_AesCbcEncrypt+0x61e>
    1a0a:	46c0      	nop			; (mov r8, r8)
    1a0c:	00002124 	.word	0x00002124
    1a10:	00ff00ff 	.word	0x00ff00ff
    1a14:	ff00ff00 	.word	0xff00ff00
    1a18:	00001fd9 	.word	0x00001fd9

00001a1c <wc_AesCbcDecrypt>:

    #ifdef HAVE_AES_DECRYPT
    /* Software AES - CBC Decrypt */
    int wc_AesCbcDecrypt(Aes* aes, byte* out, const byte* in, word32 sz)
    {
    1a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a1e:	46de      	mov	lr, fp
    1a20:	4657      	mov	r7, sl
    1a22:	464e      	mov	r6, r9
    1a24:	4645      	mov	r5, r8
    1a26:	b5e0      	push	{r5, r6, r7, lr}
    1a28:	b08f      	sub	sp, #60	; 0x3c
    1a2a:	9001      	str	r0, [sp, #4]
    1a2c:	468b      	mov	fp, r1
    1a2e:	9204      	str	r2, [sp, #16]
        word32 blocks;

        if (aes == NULL || out == NULL || in == NULL
    1a30:	2800      	cmp	r0, #0
    1a32:	d100      	bne.n	1a36 <wc_AesCbcDecrypt+0x1a>
    1a34:	e28e      	b.n	1f54 <wc_AesCbcDecrypt+0x538>
    1a36:	4659      	mov	r1, fp
    1a38:	2900      	cmp	r1, #0
    1a3a:	d100      	bne.n	1a3e <wc_AesCbcDecrypt+0x22>
    1a3c:	e28d      	b.n	1f5a <wc_AesCbcDecrypt+0x53e>
    1a3e:	2a00      	cmp	r2, #0
    1a40:	d100      	bne.n	1a44 <wc_AesCbcDecrypt+0x28>
    1a42:	e28d      	b.n	1f60 <wc_AesCbcDecrypt+0x544>
                                       || sz % AES_BLOCK_SIZE != 0) {
    1a44:	220f      	movs	r2, #15
    1a46:	401a      	ands	r2, r3
    1a48:	9207      	str	r2, [sp, #28]
    1a4a:	d000      	beq.n	1a4e <wc_AesCbcDecrypt+0x32>
    1a4c:	e28b      	b.n	1f66 <wc_AesCbcDecrypt+0x54a>
            XMEMCPY(aes->reg, aes->tmp, AES_BLOCK_SIZE);
            return 0;
        }
    #endif

        blocks = sz / AES_BLOCK_SIZE;
    1a4e:	091b      	lsrs	r3, r3, #4
        while (blocks--) {
    1a50:	1e5a      	subs	r2, r3, #1
    1a52:	9206      	str	r2, [sp, #24]
    1a54:	2b00      	cmp	r3, #0
    1a56:	d100      	bne.n	1a5a <wc_AesCbcDecrypt+0x3e>
    1a58:	e288      	b.n	1f6c <wc_AesCbcDecrypt+0x550>
            Td[0][GETBYTE(t0, 3)] ^
    1a5a:	4cce      	ldr	r4, [pc, #824]	; (1d94 <wc_AesCbcDecrypt+0x378>)
        ((word32)Td4[GETBYTE(t1, 0)]) ^
    1a5c:	4bce      	ldr	r3, [pc, #824]	; (1d98 <wc_AesCbcDecrypt+0x37c>)
    1a5e:	3328      	adds	r3, #40	; 0x28
    1a60:	9309      	str	r3, [sp, #36]	; 0x24
    1a62:	9102      	str	r1, [sp, #8]
    1a64:	e24d      	b.n	1f02 <wc_AesCbcDecrypt+0x4e6>
    XMEMCPY(&s0, inBlock,                  sizeof(s0));
    1a66:	2204      	movs	r2, #4
    1a68:	9905      	ldr	r1, [sp, #20]
    1a6a:	a80a      	add	r0, sp, #40	; 0x28
    1a6c:	4bcb      	ldr	r3, [pc, #812]	; (1d9c <wc_AesCbcDecrypt+0x380>)
    1a6e:	4798      	blx	r3
    XMEMCPY(&s1, inBlock + sizeof(s0),     sizeof(s1));
    1a70:	9e01      	ldr	r6, [sp, #4]
    1a72:	0031      	movs	r1, r6
    1a74:	310d      	adds	r1, #13
    1a76:	31ff      	adds	r1, #255	; 0xff
    1a78:	2204      	movs	r2, #4
    1a7a:	a80b      	add	r0, sp, #44	; 0x2c
    1a7c:	4bc7      	ldr	r3, [pc, #796]	; (1d9c <wc_AesCbcDecrypt+0x380>)
    1a7e:	4798      	blx	r3
    XMEMCPY(&s2, inBlock + 2 * sizeof(s0), sizeof(s2));
    1a80:	0031      	movs	r1, r6
    1a82:	3111      	adds	r1, #17
    1a84:	31ff      	adds	r1, #255	; 0xff
    1a86:	2204      	movs	r2, #4
    1a88:	a80c      	add	r0, sp, #48	; 0x30
    1a8a:	4bc4      	ldr	r3, [pc, #784]	; (1d9c <wc_AesCbcDecrypt+0x380>)
    1a8c:	4798      	blx	r3
    XMEMCPY(&s3, inBlock + 3 * sizeof(s0), sizeof(s3));
    1a8e:	9601      	str	r6, [sp, #4]
    1a90:	0031      	movs	r1, r6
    1a92:	3115      	adds	r1, #21
    1a94:	31ff      	adds	r1, #255	; 0xff
    1a96:	2204      	movs	r2, #4
    1a98:	a80d      	add	r0, sp, #52	; 0x34
    1a9a:	4bc0      	ldr	r3, [pc, #768]	; (1d9c <wc_AesCbcDecrypt+0x380>)
    1a9c:	4798      	blx	r3
    s0 = ByteReverseWord32(s0);
    1a9e:	980a      	ldr	r0, [sp, #40]	; 0x28
    s1 = ByteReverseWord32(s1);
    1aa0:	990b      	ldr	r1, [sp, #44]	; 0x2c
    s2 = ByteReverseWord32(s2);
    1aa2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
    1aa4:	0a06      	lsrs	r6, r0, #8
    1aa6:	4bbe      	ldr	r3, [pc, #760]	; (1da0 <wc_AesCbcDecrypt+0x384>)
    1aa8:	401e      	ands	r6, r3
    1aaa:	0200      	lsls	r0, r0, #8
    1aac:	4fbd      	ldr	r7, [pc, #756]	; (1da4 <wc_AesCbcDecrypt+0x388>)
    1aae:	46b9      	mov	r9, r7
    1ab0:	4038      	ands	r0, r7
    1ab2:	4306      	orrs	r6, r0
        return (x << y) | (x >> (sizeof(y) * 8 - y));
    1ab4:	2710      	movs	r7, #16
    1ab6:	41fe      	rors	r6, r7
    s0 ^= rk[0];
    1ab8:	9801      	ldr	r0, [sp, #4]
    1aba:	6800      	ldr	r0, [r0, #0]
    1abc:	4046      	eors	r6, r0
    1abe:	9600      	str	r6, [sp, #0]
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
    1ac0:	0a08      	lsrs	r0, r1, #8
    1ac2:	4018      	ands	r0, r3
    1ac4:	0209      	lsls	r1, r1, #8
    1ac6:	464e      	mov	r6, r9
    1ac8:	4031      	ands	r1, r6
    1aca:	4308      	orrs	r0, r1
        return (x << y) | (x >> (sizeof(y) * 8 - y));
    1acc:	41f8      	rors	r0, r7
    s1 ^= rk[1];
    1ace:	9901      	ldr	r1, [sp, #4]
    1ad0:	684e      	ldr	r6, [r1, #4]
    1ad2:	4070      	eors	r0, r6
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
    1ad4:	0a11      	lsrs	r1, r2, #8
    1ad6:	4019      	ands	r1, r3
    1ad8:	0212      	lsls	r2, r2, #8
    1ada:	464e      	mov	r6, r9
    1adc:	4032      	ands	r2, r6
    1ade:	4311      	orrs	r1, r2
        return (x << y) | (x >> (sizeof(y) * 8 - y));
    1ae0:	41f9      	rors	r1, r7
    s2 ^= rk[2];
    1ae2:	9a01      	ldr	r2, [sp, #4]
    1ae4:	6896      	ldr	r6, [r2, #8]
    1ae6:	4071      	eors	r1, r6
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
    1ae8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    1aea:	0a32      	lsrs	r2, r6, #8
    1aec:	401a      	ands	r2, r3
    1aee:	0233      	lsls	r3, r6, #8
    1af0:	464e      	mov	r6, r9
    1af2:	4033      	ands	r3, r6
    1af4:	431a      	orrs	r2, r3
        return (x << y) | (x >> (sizeof(y) * 8 - y));
    1af6:	41fa      	rors	r2, r7
    s3 ^= rk[3];
    1af8:	9b01      	ldr	r3, [sp, #4]
    1afa:	68db      	ldr	r3, [r3, #12]
    1afc:	9303      	str	r3, [sp, #12]
    1afe:	4053      	eors	r3, r2
    1b00:	4698      	mov	r8, r3
    1b02:	2204      	movs	r2, #4
    1b04:	9e00      	ldr	r6, [sp, #0]
    {
    1b06:	2320      	movs	r3, #32
    1b08:	3b01      	subs	r3, #1
        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
    1b0a:	2b00      	cmp	r3, #0
    1b0c:	d1fc      	bne.n	1b08 <wc_AesCbcDecrypt+0xec>
    1b0e:	3a01      	subs	r2, #1
    for (i = 0; i < 4; i++) {
    1b10:	2a00      	cmp	r2, #0
    1b12:	d1f8      	bne.n	1b06 <wc_AesCbcDecrypt+0xea>
    1b14:	9600      	str	r6, [sp, #0]
    const word32* rk = aes->key;
    1b16:	9a01      	ldr	r2, [sp, #4]
    1b18:	4693      	mov	fp, r2
    1b1a:	016d      	lsls	r5, r5, #5
    1b1c:	445d      	add	r5, fp
    1b1e:	9508      	str	r5, [sp, #32]
            Td[0][GETBYTE(s0, 3)] ^
    1b20:	4b9c      	ldr	r3, [pc, #624]	; (1d94 <wc_AesCbcDecrypt+0x378>)
    1b22:	469a      	mov	sl, r3
            Td[3][GETBYTE(s1, 0)] ^
    1b24:	27ff      	movs	r7, #255	; 0xff
    1b26:	4643      	mov	r3, r8
    1b28:	9503      	str	r5, [sp, #12]
            Td[0][GETBYTE(s0, 3)] ^
    1b2a:	9e00      	ldr	r6, [sp, #0]
    1b2c:	0e32      	lsrs	r2, r6, #24
    1b2e:	0092      	lsls	r2, r2, #2
    1b30:	4452      	add	r2, sl
            Td[3][GETBYTE(s1, 0)] ^
    1b32:	003d      	movs	r5, r7
    1b34:	4005      	ands	r5, r0
    1b36:	26c0      	movs	r6, #192	; 0xc0
    1b38:	00b6      	lsls	r6, r6, #2
    1b3a:	46b4      	mov	ip, r6
    1b3c:	4465      	add	r5, ip
    1b3e:	00ad      	lsls	r5, r5, #2
    1b40:	4455      	add	r5, sl
        t0 =
    1b42:	6a92      	ldr	r2, [r2, #40]	; 0x28
    1b44:	6aad      	ldr	r5, [r5, #40]	; 0x28
    1b46:	406a      	eors	r2, r5
    1b48:	465d      	mov	r5, fp
    1b4a:	692d      	ldr	r5, [r5, #16]
    1b4c:	406a      	eors	r2, r5
            Td[1][GETBYTE(s3, 2)] ^
    1b4e:	0c1d      	lsrs	r5, r3, #16
    1b50:	403d      	ands	r5, r7
    1b52:	3501      	adds	r5, #1
    1b54:	35ff      	adds	r5, #255	; 0xff
    1b56:	00ad      	lsls	r5, r5, #2
    1b58:	4455      	add	r5, sl
        t0 =
    1b5a:	6aad      	ldr	r5, [r5, #40]	; 0x28
    1b5c:	406a      	eors	r2, r5
            Td[2][GETBYTE(s2, 1)] ^
    1b5e:	0a0d      	lsrs	r5, r1, #8
    1b60:	403d      	ands	r5, r7
    1b62:	3e01      	subs	r6, #1
    1b64:	3eff      	subs	r6, #255	; 0xff
    1b66:	46b4      	mov	ip, r6
    1b68:	4465      	add	r5, ip
    1b6a:	00ad      	lsls	r5, r5, #2
    1b6c:	4455      	add	r5, sl
        t0 =
    1b6e:	6aad      	ldr	r5, [r5, #40]	; 0x28
    1b70:	406a      	eors	r2, r5
            Td[0][GETBYTE(s1, 3)] ^
    1b72:	0e05      	lsrs	r5, r0, #24
    1b74:	00ad      	lsls	r5, r5, #2
    1b76:	4455      	add	r5, sl
    1b78:	46ac      	mov	ip, r5
            Td[3][GETBYTE(s2, 0)] ^
    1b7a:	003d      	movs	r5, r7
    1b7c:	400d      	ands	r5, r1
    1b7e:	3601      	adds	r6, #1
    1b80:	36ff      	adds	r6, #255	; 0xff
    1b82:	46b1      	mov	r9, r6
    1b84:	444d      	add	r5, r9
    1b86:	00ad      	lsls	r5, r5, #2
    1b88:	4455      	add	r5, sl
        t1 =
    1b8a:	4666      	mov	r6, ip
    1b8c:	6ab6      	ldr	r6, [r6, #40]	; 0x28
    1b8e:	6aad      	ldr	r5, [r5, #40]	; 0x28
    1b90:	4075      	eors	r5, r6
    1b92:	465e      	mov	r6, fp
    1b94:	6976      	ldr	r6, [r6, #20]
    1b96:	406e      	eors	r6, r5
    1b98:	46b4      	mov	ip, r6
            Td[1][GETBYTE(s0, 2)] ^
    1b9a:	9e00      	ldr	r6, [sp, #0]
    1b9c:	0c35      	lsrs	r5, r6, #16
    1b9e:	403d      	ands	r5, r7
    1ba0:	3501      	adds	r5, #1
    1ba2:	35ff      	adds	r5, #255	; 0xff
    1ba4:	00ad      	lsls	r5, r5, #2
    1ba6:	4455      	add	r5, sl
        t1 =
    1ba8:	6aad      	ldr	r5, [r5, #40]	; 0x28
    1baa:	4666      	mov	r6, ip
    1bac:	406e      	eors	r6, r5
    1bae:	46b4      	mov	ip, r6
            Td[2][GETBYTE(s3, 1)] ^
    1bb0:	0a1d      	lsrs	r5, r3, #8
    1bb2:	403d      	ands	r5, r7
    1bb4:	2680      	movs	r6, #128	; 0x80
    1bb6:	00b6      	lsls	r6, r6, #2
    1bb8:	46b1      	mov	r9, r6
    1bba:	444d      	add	r5, r9
    1bbc:	00ad      	lsls	r5, r5, #2
    1bbe:	4455      	add	r5, sl
        t1 =
    1bc0:	6aad      	ldr	r5, [r5, #40]	; 0x28
    1bc2:	4666      	mov	r6, ip
    1bc4:	406e      	eors	r6, r5
    1bc6:	46b4      	mov	ip, r6
            Td[0][GETBYTE(s2, 3)] ^
    1bc8:	0e0d      	lsrs	r5, r1, #24
    1bca:	00ad      	lsls	r5, r5, #2
    1bcc:	4455      	add	r5, sl
    1bce:	46a9      	mov	r9, r5
            Td[3][GETBYTE(s3, 0)] ^
    1bd0:	003d      	movs	r5, r7
    1bd2:	401d      	ands	r5, r3
    1bd4:	26c0      	movs	r6, #192	; 0xc0
    1bd6:	00b6      	lsls	r6, r6, #2
    1bd8:	46b0      	mov	r8, r6
    1bda:	4445      	add	r5, r8
    1bdc:	00ad      	lsls	r5, r5, #2
    1bde:	4455      	add	r5, sl
        t2 =
    1be0:	464e      	mov	r6, r9
    1be2:	6ab6      	ldr	r6, [r6, #40]	; 0x28
    1be4:	6aad      	ldr	r5, [r5, #40]	; 0x28
    1be6:	4075      	eors	r5, r6
    1be8:	465e      	mov	r6, fp
    1bea:	69b6      	ldr	r6, [r6, #24]
    1bec:	406e      	eors	r6, r5
            Td[1][GETBYTE(s1, 2)] ^
    1bee:	0c05      	lsrs	r5, r0, #16
    1bf0:	403d      	ands	r5, r7
    1bf2:	3501      	adds	r5, #1
    1bf4:	35ff      	adds	r5, #255	; 0xff
    1bf6:	00ad      	lsls	r5, r5, #2
    1bf8:	4455      	add	r5, sl
        t2 =
    1bfa:	6aad      	ldr	r5, [r5, #40]	; 0x28
    1bfc:	406e      	eors	r6, r5
    1bfe:	46b1      	mov	r9, r6
            Td[2][GETBYTE(s0, 1)] ^
    1c00:	9e00      	ldr	r6, [sp, #0]
    1c02:	0a35      	lsrs	r5, r6, #8
    1c04:	403d      	ands	r5, r7
    1c06:	2680      	movs	r6, #128	; 0x80
    1c08:	00b6      	lsls	r6, r6, #2
    1c0a:	46b0      	mov	r8, r6
    1c0c:	4445      	add	r5, r8
    1c0e:	00ad      	lsls	r5, r5, #2
    1c10:	4455      	add	r5, sl
        t2 =
    1c12:	6aad      	ldr	r5, [r5, #40]	; 0x28
    1c14:	464e      	mov	r6, r9
    1c16:	4075      	eors	r5, r6
            Td[0][GETBYTE(s3, 3)] ^
    1c18:	0e1b      	lsrs	r3, r3, #24
    1c1a:	009b      	lsls	r3, r3, #2
    1c1c:	4453      	add	r3, sl
    1c1e:	4699      	mov	r9, r3
            Td[3][GETBYTE(s0, 0)] ^
    1c20:	9e00      	ldr	r6, [sp, #0]
    1c22:	403e      	ands	r6, r7
    1c24:	23c0      	movs	r3, #192	; 0xc0
    1c26:	009b      	lsls	r3, r3, #2
    1c28:	18f3      	adds	r3, r6, r3
    1c2a:	009b      	lsls	r3, r3, #2
    1c2c:	4453      	add	r3, sl
        t3 =
    1c2e:	464e      	mov	r6, r9
    1c30:	6ab6      	ldr	r6, [r6, #40]	; 0x28
    1c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1c34:	405e      	eors	r6, r3
    1c36:	465b      	mov	r3, fp
    1c38:	69db      	ldr	r3, [r3, #28]
    1c3a:	405e      	eors	r6, r3
            Td[1][GETBYTE(s2, 2)] ^
    1c3c:	0c0b      	lsrs	r3, r1, #16
    1c3e:	403b      	ands	r3, r7
    1c40:	3301      	adds	r3, #1
    1c42:	33ff      	adds	r3, #255	; 0xff
    1c44:	009b      	lsls	r3, r3, #2
    1c46:	4453      	add	r3, sl
        t3 =
    1c48:	6a99      	ldr	r1, [r3, #40]	; 0x28
    1c4a:	4071      	eors	r1, r6
            Td[2][GETBYTE(s1, 1)] ^
    1c4c:	0a03      	lsrs	r3, r0, #8
    1c4e:	403b      	ands	r3, r7
    1c50:	4443      	add	r3, r8
    1c52:	009b      	lsls	r3, r3, #2
    1c54:	4453      	add	r3, sl
        t3 =
    1c56:	6a98      	ldr	r0, [r3, #40]	; 0x28
    1c58:	4048      	eors	r0, r1
        rk += 8;
    1c5a:	2320      	movs	r3, #32
    1c5c:	4698      	mov	r8, r3
    1c5e:	44c3      	add	fp, r8
        if (--r == 0) {
    1c60:	9b03      	ldr	r3, [sp, #12]
    1c62:	459b      	cmp	fp, r3
    1c64:	d100      	bne.n	1c68 <wc_AesCbcDecrypt+0x24c>
    1c66:	e09f      	b.n	1da8 <wc_AesCbcDecrypt+0x38c>
            Td[0][GETBYTE(t0, 3)] ^
    1c68:	0e11      	lsrs	r1, r2, #24
    1c6a:	0089      	lsls	r1, r1, #2
    1c6c:	1861      	adds	r1, r4, r1
            Td[3][GETBYTE(t1, 0)] ^
    1c6e:	4663      	mov	r3, ip
    1c70:	403b      	ands	r3, r7
    1c72:	26c0      	movs	r6, #192	; 0xc0
    1c74:	00b6      	lsls	r6, r6, #2
    1c76:	46b0      	mov	r8, r6
    1c78:	4443      	add	r3, r8
    1c7a:	009b      	lsls	r3, r3, #2
    1c7c:	18e3      	adds	r3, r4, r3
    1c7e:	6a8e      	ldr	r6, [r1, #40]	; 0x28
    1c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1c82:	405e      	eors	r6, r3
    1c84:	465b      	mov	r3, fp
    1c86:	681b      	ldr	r3, [r3, #0]
    1c88:	405e      	eors	r6, r3
            Td[1][GETBYTE(t3, 2)] ^
    1c8a:	0c03      	lsrs	r3, r0, #16
    1c8c:	403b      	ands	r3, r7
    1c8e:	3301      	adds	r3, #1
    1c90:	33ff      	adds	r3, #255	; 0xff
    1c92:	009b      	lsls	r3, r3, #2
    1c94:	18e3      	adds	r3, r4, r3
            Td[3][GETBYTE(t1, 0)] ^
    1c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1c98:	405e      	eors	r6, r3
            Td[2][GETBYTE(t2, 1)] ^
    1c9a:	0a2b      	lsrs	r3, r5, #8
    1c9c:	403b      	ands	r3, r7
    1c9e:	2180      	movs	r1, #128	; 0x80
    1ca0:	0089      	lsls	r1, r1, #2
    1ca2:	4688      	mov	r8, r1
    1ca4:	4443      	add	r3, r8
    1ca6:	009b      	lsls	r3, r3, #2
    1ca8:	18e3      	adds	r3, r4, r3
            Td[3][GETBYTE(t1, 0)] ^
    1caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1cac:	405e      	eors	r6, r3
    1cae:	9600      	str	r6, [sp, #0]
            Td[0][GETBYTE(t3, 3)] ^
    1cb0:	0e03      	lsrs	r3, r0, #24
    1cb2:	009b      	lsls	r3, r3, #2
    1cb4:	18e3      	adds	r3, r4, r3
            Td[3][GETBYTE(t0, 0)] ^
    1cb6:	0039      	movs	r1, r7
    1cb8:	4011      	ands	r1, r2
    1cba:	26c0      	movs	r6, #192	; 0xc0
    1cbc:	00b6      	lsls	r6, r6, #2
    1cbe:	46b0      	mov	r8, r6
    1cc0:	4441      	add	r1, r8
    1cc2:	0089      	lsls	r1, r1, #2
    1cc4:	1861      	adds	r1, r4, r1
    1cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1cc8:	6a89      	ldr	r1, [r1, #40]	; 0x28
    1cca:	404b      	eors	r3, r1
    1ccc:	4659      	mov	r1, fp
    1cce:	68c9      	ldr	r1, [r1, #12]
    1cd0:	404b      	eors	r3, r1
            Td[1][GETBYTE(t2, 2)] ^
    1cd2:	0c29      	lsrs	r1, r5, #16
    1cd4:	4039      	ands	r1, r7
    1cd6:	3101      	adds	r1, #1
    1cd8:	31ff      	adds	r1, #255	; 0xff
    1cda:	0089      	lsls	r1, r1, #2
    1cdc:	1861      	adds	r1, r4, r1
            Td[3][GETBYTE(t0, 0)] ^
    1cde:	6a89      	ldr	r1, [r1, #40]	; 0x28
    1ce0:	404b      	eors	r3, r1
            Td[2][GETBYTE(t1, 1)] ^
    1ce2:	4661      	mov	r1, ip
    1ce4:	0a09      	lsrs	r1, r1, #8
    1ce6:	4039      	ands	r1, r7
    1ce8:	3e01      	subs	r6, #1
    1cea:	3eff      	subs	r6, #255	; 0xff
    1cec:	46b0      	mov	r8, r6
    1cee:	4441      	add	r1, r8
    1cf0:	0089      	lsls	r1, r1, #2
    1cf2:	1861      	adds	r1, r4, r1
            Td[3][GETBYTE(t0, 0)] ^
    1cf4:	6a89      	ldr	r1, [r1, #40]	; 0x28
    1cf6:	404b      	eors	r3, r1
            Td[0][GETBYTE(t2, 3)] ^
    1cf8:	0e29      	lsrs	r1, r5, #24
    1cfa:	0089      	lsls	r1, r1, #2
    1cfc:	4689      	mov	r9, r1
    1cfe:	44a1      	add	r9, r4
            Td[3][GETBYTE(t3, 0)] ^
    1d00:	0039      	movs	r1, r7
    1d02:	4001      	ands	r1, r0
    1d04:	3601      	adds	r6, #1
    1d06:	36ff      	adds	r6, #255	; 0xff
    1d08:	46b0      	mov	r8, r6
    1d0a:	4441      	add	r1, r8
    1d0c:	0089      	lsls	r1, r1, #2
    1d0e:	1861      	adds	r1, r4, r1
    1d10:	464e      	mov	r6, r9
    1d12:	6ab6      	ldr	r6, [r6, #40]	; 0x28
    1d14:	6a89      	ldr	r1, [r1, #40]	; 0x28
    1d16:	4071      	eors	r1, r6
    1d18:	465e      	mov	r6, fp
    1d1a:	68b6      	ldr	r6, [r6, #8]
    1d1c:	404e      	eors	r6, r1
            Td[1][GETBYTE(t1, 2)] ^
    1d1e:	4661      	mov	r1, ip
    1d20:	0c09      	lsrs	r1, r1, #16
    1d22:	4039      	ands	r1, r7
    1d24:	3101      	adds	r1, #1
    1d26:	31ff      	adds	r1, #255	; 0xff
    1d28:	0089      	lsls	r1, r1, #2
    1d2a:	1861      	adds	r1, r4, r1
            Td[3][GETBYTE(t3, 0)] ^
    1d2c:	6a89      	ldr	r1, [r1, #40]	; 0x28
    1d2e:	404e      	eors	r6, r1
    1d30:	46b1      	mov	r9, r6
            Td[2][GETBYTE(t0, 1)] ^
    1d32:	0a11      	lsrs	r1, r2, #8
    1d34:	4039      	ands	r1, r7
    1d36:	2680      	movs	r6, #128	; 0x80
    1d38:	00b6      	lsls	r6, r6, #2
    1d3a:	46b0      	mov	r8, r6
    1d3c:	4441      	add	r1, r8
    1d3e:	0089      	lsls	r1, r1, #2
    1d40:	1861      	adds	r1, r4, r1
            Td[3][GETBYTE(t3, 0)] ^
    1d42:	6a89      	ldr	r1, [r1, #40]	; 0x28
    1d44:	464e      	mov	r6, r9
    1d46:	4071      	eors	r1, r6
            Td[0][GETBYTE(t1, 3)] ^
    1d48:	4666      	mov	r6, ip
    1d4a:	0e36      	lsrs	r6, r6, #24
    1d4c:	00b6      	lsls	r6, r6, #2
    1d4e:	46b4      	mov	ip, r6
    1d50:	44a4      	add	ip, r4
            Td[3][GETBYTE(t2, 0)] ^
    1d52:	403d      	ands	r5, r7
    1d54:	26c0      	movs	r6, #192	; 0xc0
    1d56:	00b6      	lsls	r6, r6, #2
    1d58:	46b0      	mov	r8, r6
    1d5a:	4445      	add	r5, r8
    1d5c:	00ad      	lsls	r5, r5, #2
    1d5e:	1965      	adds	r5, r4, r5
    1d60:	4666      	mov	r6, ip
    1d62:	6ab6      	ldr	r6, [r6, #40]	; 0x28
    1d64:	6aad      	ldr	r5, [r5, #40]	; 0x28
    1d66:	4075      	eors	r5, r6
    1d68:	465e      	mov	r6, fp
    1d6a:	6876      	ldr	r6, [r6, #4]
    1d6c:	4075      	eors	r5, r6
            Td[1][GETBYTE(t0, 2)] ^
    1d6e:	0c12      	lsrs	r2, r2, #16
    1d70:	403a      	ands	r2, r7
    1d72:	3201      	adds	r2, #1
    1d74:	32ff      	adds	r2, #255	; 0xff
    1d76:	0092      	lsls	r2, r2, #2
    1d78:	18a2      	adds	r2, r4, r2
            Td[3][GETBYTE(t2, 0)] ^
    1d7a:	6a92      	ldr	r2, [r2, #40]	; 0x28
    1d7c:	4055      	eors	r5, r2
            Td[2][GETBYTE(t3, 1)] ^
    1d7e:	0a02      	lsrs	r2, r0, #8
    1d80:	403a      	ands	r2, r7
    1d82:	2080      	movs	r0, #128	; 0x80
    1d84:	0080      	lsls	r0, r0, #2
    1d86:	4684      	mov	ip, r0
    1d88:	4462      	add	r2, ip
    1d8a:	0092      	lsls	r2, r2, #2
    1d8c:	18a2      	adds	r2, r4, r2
            Td[3][GETBYTE(t2, 0)] ^
    1d8e:	6a90      	ldr	r0, [r2, #40]	; 0x28
    1d90:	4068      	eors	r0, r5
    1d92:	e6ca      	b.n	1b2a <wc_AesCbcDecrypt+0x10e>
    1d94:	00003124 	.word	0x00003124
    1d98:	00004124 	.word	0x00004124
    1d9c:	00001fd9 	.word	0x00001fd9
    1da0:	00ff00ff 	.word	0x00ff00ff
    1da4:	ff00ff00 	.word	0xff00ff00
    1da8:	4692      	mov	sl, r2
    1daa:	0003      	movs	r3, r0
        ((word32)Td4[GETBYTE(t1, 0)]) ^
    1dac:	20ff      	movs	r0, #255	; 0xff
    1dae:	4661      	mov	r1, ip
    1db0:	4001      	ands	r1, r0
    1db2:	9f09      	ldr	r7, [sp, #36]	; 0x24
    1db4:	5c7e      	ldrb	r6, [r7, r1]
    1db6:	9a08      	ldr	r2, [sp, #32]
    1db8:	6811      	ldr	r1, [r2, #0]
    1dba:	404e      	eors	r6, r1
        ((word32)Td4[GETBYTE(t0, 3)] << 24) ^
    1dbc:	4651      	mov	r1, sl
    1dbe:	0e09      	lsrs	r1, r1, #24
    1dc0:	5c79      	ldrb	r1, [r7, r1]
    1dc2:	0609      	lsls	r1, r1, #24
        ((word32)Td4[GETBYTE(t1, 0)]) ^
    1dc4:	4071      	eors	r1, r6
        ((word32)Td4[GETBYTE(t3, 2)] << 16) ^
    1dc6:	0c1e      	lsrs	r6, r3, #16
    1dc8:	4006      	ands	r6, r0
    1dca:	5dbe      	ldrb	r6, [r7, r6]
    1dcc:	0436      	lsls	r6, r6, #16
        ((word32)Td4[GETBYTE(t1, 0)]) ^
    1dce:	4071      	eors	r1, r6
        ((word32)Td4[GETBYTE(t2, 1)] <<  8) ^
    1dd0:	0a2e      	lsrs	r6, r5, #8
    1dd2:	4006      	ands	r6, r0
    1dd4:	5dbe      	ldrb	r6, [r7, r6]
    1dd6:	0236      	lsls	r6, r6, #8
        ((word32)Td4[GETBYTE(t1, 0)]) ^
    1dd8:	4071      	eors	r1, r6
    1dda:	468b      	mov	fp, r1
        ((word32)Td4[GETBYTE(t2, 0)]) ^
    1ddc:	0006      	movs	r6, r0
    1dde:	402e      	ands	r6, r5
    1de0:	5dbe      	ldrb	r6, [r7, r6]
    1de2:	0011      	movs	r1, r2
    1de4:	6852      	ldr	r2, [r2, #4]
    1de6:	4072      	eors	r2, r6
    1de8:	4691      	mov	r9, r2
        ((word32)Td4[GETBYTE(t1, 3)] << 24) ^
    1dea:	4662      	mov	r2, ip
    1dec:	0e16      	lsrs	r6, r2, #24
    1dee:	5dbe      	ldrb	r6, [r7, r6]
    1df0:	0636      	lsls	r6, r6, #24
        ((word32)Td4[GETBYTE(t2, 0)]) ^
    1df2:	464a      	mov	r2, r9
    1df4:	4056      	eors	r6, r2
        ((word32)Td4[GETBYTE(t0, 2)] << 16) ^
    1df6:	4652      	mov	r2, sl
    1df8:	0c12      	lsrs	r2, r2, #16
    1dfa:	4002      	ands	r2, r0
    1dfc:	5cba      	ldrb	r2, [r7, r2]
    1dfe:	0412      	lsls	r2, r2, #16
        ((word32)Td4[GETBYTE(t2, 0)]) ^
    1e00:	4056      	eors	r6, r2
        ((word32)Td4[GETBYTE(t3, 1)] <<  8) ^
    1e02:	0a1a      	lsrs	r2, r3, #8
    1e04:	4002      	ands	r2, r0
    1e06:	5cba      	ldrb	r2, [r7, r2]
    1e08:	0212      	lsls	r2, r2, #8
        ((word32)Td4[GETBYTE(t2, 0)]) ^
    1e0a:	4072      	eors	r2, r6
    1e0c:	4691      	mov	r9, r2
        ((word32)Td4[GETBYTE(t3, 0)]) ^
    1e0e:	0006      	movs	r6, r0
    1e10:	401e      	ands	r6, r3
    1e12:	5dbe      	ldrb	r6, [r7, r6]
    1e14:	688a      	ldr	r2, [r1, #8]
    1e16:	9200      	str	r2, [sp, #0]
    1e18:	4072      	eors	r2, r6
        ((word32)Td4[GETBYTE(t2, 3)] << 24) ^
    1e1a:	0e2e      	lsrs	r6, r5, #24
    1e1c:	5dbe      	ldrb	r6, [r7, r6]
    1e1e:	0636      	lsls	r6, r6, #24
        ((word32)Td4[GETBYTE(t3, 0)]) ^
    1e20:	4056      	eors	r6, r2
        ((word32)Td4[GETBYTE(t1, 2)] << 16) ^
    1e22:	4662      	mov	r2, ip
    1e24:	0c12      	lsrs	r2, r2, #16
    1e26:	4002      	ands	r2, r0
    1e28:	5cba      	ldrb	r2, [r7, r2]
    1e2a:	0412      	lsls	r2, r2, #16
        ((word32)Td4[GETBYTE(t3, 0)]) ^
    1e2c:	4072      	eors	r2, r6
    1e2e:	4690      	mov	r8, r2
        ((word32)Td4[GETBYTE(t0, 1)] <<  8) ^
    1e30:	4652      	mov	r2, sl
    1e32:	0a16      	lsrs	r6, r2, #8
    1e34:	4006      	ands	r6, r0
    1e36:	5dbe      	ldrb	r6, [r7, r6]
    1e38:	0236      	lsls	r6, r6, #8
        ((word32)Td4[GETBYTE(t3, 0)]) ^
    1e3a:	4642      	mov	r2, r8
    1e3c:	4056      	eors	r6, r2
        ((word32)Td4[GETBYTE(t0, 0)]) ^
    1e3e:	4652      	mov	r2, sl
    1e40:	4002      	ands	r2, r0
    1e42:	5cba      	ldrb	r2, [r7, r2]
    1e44:	68c9      	ldr	r1, [r1, #12]
    1e46:	404a      	eors	r2, r1
        ((word32)Td4[GETBYTE(t3, 3)] << 24) ^
    1e48:	0e1b      	lsrs	r3, r3, #24
    1e4a:	5cfb      	ldrb	r3, [r7, r3]
    1e4c:	061b      	lsls	r3, r3, #24
        ((word32)Td4[GETBYTE(t0, 0)]) ^
    1e4e:	405a      	eors	r2, r3
        ((word32)Td4[GETBYTE(t2, 2)] << 16) ^
    1e50:	0c2d      	lsrs	r5, r5, #16
    1e52:	4005      	ands	r5, r0
    1e54:	5d7b      	ldrb	r3, [r7, r5]
    1e56:	041b      	lsls	r3, r3, #16
        ((word32)Td4[GETBYTE(t0, 0)]) ^
    1e58:	405a      	eors	r2, r3
        ((word32)Td4[GETBYTE(t1, 1)] <<  8) ^
    1e5a:	4663      	mov	r3, ip
    1e5c:	0a1b      	lsrs	r3, r3, #8
    1e5e:	4018      	ands	r0, r3
    1e60:	5c3b      	ldrb	r3, [r7, r0]
    1e62:	021b      	lsls	r3, r3, #8
        ((word32)Td4[GETBYTE(t0, 0)]) ^
    1e64:	405a      	eors	r2, r3
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
    1e66:	465b      	mov	r3, fp
    1e68:	0a18      	lsrs	r0, r3, #8
    1e6a:	4d41      	ldr	r5, [pc, #260]	; (1f70 <wc_AesCbcDecrypt+0x554>)
    1e6c:	4028      	ands	r0, r5
    1e6e:	021b      	lsls	r3, r3, #8
    1e70:	4940      	ldr	r1, [pc, #256]	; (1f74 <wc_AesCbcDecrypt+0x558>)
    1e72:	400b      	ands	r3, r1
    1e74:	4303      	orrs	r3, r0
        return (x << y) | (x >> (sizeof(y) * 8 - y));
    1e76:	2010      	movs	r0, #16
    1e78:	41c3      	rors	r3, r0
    s0 = ByteReverseWord32(s0);
    1e7a:	930a      	str	r3, [sp, #40]	; 0x28
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
    1e7c:	464b      	mov	r3, r9
    1e7e:	0a1b      	lsrs	r3, r3, #8
    1e80:	402b      	ands	r3, r5
    1e82:	464f      	mov	r7, r9
    1e84:	023f      	lsls	r7, r7, #8
    1e86:	400f      	ands	r7, r1
    1e88:	433b      	orrs	r3, r7
        return (x << y) | (x >> (sizeof(y) * 8 - y));
    1e8a:	41c3      	rors	r3, r0
    s1 = ByteReverseWord32(s1);
    1e8c:	930b      	str	r3, [sp, #44]	; 0x2c
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
    1e8e:	0a33      	lsrs	r3, r6, #8
    1e90:	402b      	ands	r3, r5
    1e92:	0236      	lsls	r6, r6, #8
    1e94:	400e      	ands	r6, r1
    1e96:	4333      	orrs	r3, r6
        return (x << y) | (x >> (sizeof(y) * 8 - y));
    1e98:	41c3      	rors	r3, r0
    s2 = ByteReverseWord32(s2);
    1e9a:	930c      	str	r3, [sp, #48]	; 0x30
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
    1e9c:	0a13      	lsrs	r3, r2, #8
    1e9e:	401d      	ands	r5, r3
    1ea0:	0212      	lsls	r2, r2, #8
    1ea2:	4011      	ands	r1, r2
    1ea4:	4329      	orrs	r1, r5
        return (x << y) | (x >> (sizeof(y) * 8 - y));
    1ea6:	41c1      	rors	r1, r0
    s3 = ByteReverseWord32(s3);
    1ea8:	910d      	str	r1, [sp, #52]	; 0x34
    XMEMCPY(outBlock,                  &s0, sizeof(s0));
    1eaa:	2204      	movs	r2, #4
    1eac:	a90a      	add	r1, sp, #40	; 0x28
    1eae:	9e02      	ldr	r6, [sp, #8]
    1eb0:	0030      	movs	r0, r6
    1eb2:	4d31      	ldr	r5, [pc, #196]	; (1f78 <wc_AesCbcDecrypt+0x55c>)
    1eb4:	47a8      	blx	r5
    XMEMCPY(outBlock + sizeof(s0),     &s1, sizeof(s1));
    1eb6:	1d30      	adds	r0, r6, #4
    1eb8:	2204      	movs	r2, #4
    1eba:	a90b      	add	r1, sp, #44	; 0x2c
    1ebc:	47a8      	blx	r5
    XMEMCPY(outBlock + 2 * sizeof(s0), &s2, sizeof(s2));
    1ebe:	0030      	movs	r0, r6
    1ec0:	3008      	adds	r0, #8
    1ec2:	2204      	movs	r2, #4
    1ec4:	a90c      	add	r1, sp, #48	; 0x30
    1ec6:	47a8      	blx	r5
    XMEMCPY(outBlock + 3 * sizeof(s0), &s3, sizeof(s3));
    1ec8:	0030      	movs	r0, r6
    1eca:	300c      	adds	r0, #12
    1ecc:	2204      	movs	r2, #4
    1ece:	a90d      	add	r1, sp, #52	; 0x34
    1ed0:	47a8      	blx	r5
    1ed2:	e027      	b.n	1f24 <wc_AesCbcDecrypt+0x508>
    if (((wolfssl_word)buf | (wolfssl_word)mask | count) % WOLFSSL_WORD_SIZE == 0)
    1ed4:	9b07      	ldr	r3, [sp, #28]
    1ed6:	9902      	ldr	r1, [sp, #8]
        for (i = 0; i < count; i++) b[i] ^= m[i];
    1ed8:	5cca      	ldrb	r2, [r1, r3]
    1eda:	5cc5      	ldrb	r5, [r0, r3]
    1edc:	406a      	eors	r2, r5
    1ede:	54ca      	strb	r2, [r1, r3]
    1ee0:	3301      	adds	r3, #1
    1ee2:	2b10      	cmp	r3, #16
    1ee4:	d1f8      	bne.n	1ed8 <wc_AesCbcDecrypt+0x4bc>
            XMEMCPY(aes->tmp, in, AES_BLOCK_SIZE);
            wc_AesDecrypt(aes, (byte*)aes->tmp, out);
            xorbuf(out, (byte*)aes->reg, AES_BLOCK_SIZE);
            /* store iv for next call */
            XMEMCPY(aes->reg, aes->tmp, AES_BLOCK_SIZE);
    1ee6:	2210      	movs	r2, #16
    1ee8:	9905      	ldr	r1, [sp, #20]
    1eea:	4b23      	ldr	r3, [pc, #140]	; (1f78 <wc_AesCbcDecrypt+0x55c>)
    1eec:	4798      	blx	r3

            out += AES_BLOCK_SIZE;
    1eee:	9b02      	ldr	r3, [sp, #8]
    1ef0:	3310      	adds	r3, #16
    1ef2:	9302      	str	r3, [sp, #8]
            in  += AES_BLOCK_SIZE;
    1ef4:	9b04      	ldr	r3, [sp, #16]
    1ef6:	3310      	adds	r3, #16
    1ef8:	9304      	str	r3, [sp, #16]
        while (blocks--) {
    1efa:	9b06      	ldr	r3, [sp, #24]
    1efc:	1e5a      	subs	r2, r3, #1
    1efe:	9206      	str	r2, [sp, #24]
    1f00:	d320      	bcc.n	1f44 <wc_AesCbcDecrypt+0x528>
            XMEMCPY(aes->tmp, in, AES_BLOCK_SIZE);
    1f02:	9d01      	ldr	r5, [sp, #4]
    1f04:	002b      	movs	r3, r5
    1f06:	3309      	adds	r3, #9
    1f08:	33ff      	adds	r3, #255	; 0xff
    1f0a:	0018      	movs	r0, r3
    1f0c:	9305      	str	r3, [sp, #20]
    1f0e:	2210      	movs	r2, #16
    1f10:	9904      	ldr	r1, [sp, #16]
    1f12:	4b19      	ldr	r3, [pc, #100]	; (1f78 <wc_AesCbcDecrypt+0x55c>)
    1f14:	4798      	blx	r3
    word32 r = aes->rounds >> 1;
    1f16:	23f0      	movs	r3, #240	; 0xf0
    1f18:	58ed      	ldr	r5, [r5, r3]
    1f1a:	086d      	lsrs	r5, r5, #1
    if (r > 7 || r == 0) {
    1f1c:	1e6b      	subs	r3, r5, #1
    1f1e:	2b06      	cmp	r3, #6
    1f20:	d800      	bhi.n	1f24 <wc_AesCbcDecrypt+0x508>
    1f22:	e5a0      	b.n	1a66 <wc_AesCbcDecrypt+0x4a>
            xorbuf(out, (byte*)aes->reg, AES_BLOCK_SIZE);
    1f24:	9801      	ldr	r0, [sp, #4]
    1f26:	30f8      	adds	r0, #248	; 0xf8
    if (((wolfssl_word)buf | (wolfssl_word)mask | count) % WOLFSSL_WORD_SIZE == 0)
    1f28:	9902      	ldr	r1, [sp, #8]
    1f2a:	000b      	movs	r3, r1
    1f2c:	4303      	orrs	r3, r0
    1f2e:	079b      	lsls	r3, r3, #30
    1f30:	d1d0      	bne.n	1ed4 <wc_AesCbcDecrypt+0x4b8>
    1f32:	2300      	movs	r3, #0
    for (i = 0; i < n; i++) r[i] ^= a[i];
    1f34:	58ca      	ldr	r2, [r1, r3]
    1f36:	58c5      	ldr	r5, [r0, r3]
    1f38:	406a      	eors	r2, r5
    1f3a:	50ca      	str	r2, [r1, r3]
    1f3c:	3304      	adds	r3, #4
    1f3e:	2b10      	cmp	r3, #16
    1f40:	d1f8      	bne.n	1f34 <wc_AesCbcDecrypt+0x518>
    1f42:	e7d0      	b.n	1ee6 <wc_AesCbcDecrypt+0x4ca>
        }

        return 0;
    1f44:	2000      	movs	r0, #0
    }
    1f46:	b00f      	add	sp, #60	; 0x3c
    1f48:	bc3c      	pop	{r2, r3, r4, r5}
    1f4a:	4690      	mov	r8, r2
    1f4c:	4699      	mov	r9, r3
    1f4e:	46a2      	mov	sl, r4
    1f50:	46ab      	mov	fp, r5
    1f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return BAD_FUNC_ARG;
    1f54:	20ad      	movs	r0, #173	; 0xad
    1f56:	4240      	negs	r0, r0
    1f58:	e7f5      	b.n	1f46 <wc_AesCbcDecrypt+0x52a>
    1f5a:	20ad      	movs	r0, #173	; 0xad
    1f5c:	4240      	negs	r0, r0
    1f5e:	e7f2      	b.n	1f46 <wc_AesCbcDecrypt+0x52a>
    1f60:	20ad      	movs	r0, #173	; 0xad
    1f62:	4240      	negs	r0, r0
    1f64:	e7ef      	b.n	1f46 <wc_AesCbcDecrypt+0x52a>
    1f66:	20ad      	movs	r0, #173	; 0xad
    1f68:	4240      	negs	r0, r0
    1f6a:	e7ec      	b.n	1f46 <wc_AesCbcDecrypt+0x52a>
        return 0;
    1f6c:	2000      	movs	r0, #0
    1f6e:	e7ea      	b.n	1f46 <wc_AesCbcDecrypt+0x52a>
    1f70:	00ff00ff 	.word	0x00ff00ff
    1f74:	ff00ff00 	.word	0xff00ff00
    1f78:	00001fd9 	.word	0x00001fd9

00001f7c <__libc_init_array>:
    1f7c:	b570      	push	{r4, r5, r6, lr}
    1f7e:	2600      	movs	r6, #0
    1f80:	4d0c      	ldr	r5, [pc, #48]	; (1fb4 <__libc_init_array+0x38>)
    1f82:	4c0d      	ldr	r4, [pc, #52]	; (1fb8 <__libc_init_array+0x3c>)
    1f84:	1b64      	subs	r4, r4, r5
    1f86:	10a4      	asrs	r4, r4, #2
    1f88:	42a6      	cmp	r6, r4
    1f8a:	d109      	bne.n	1fa0 <__libc_init_array+0x24>
    1f8c:	2600      	movs	r6, #0
    1f8e:	f002 f98d 	bl	42ac <_init>
    1f92:	4d0a      	ldr	r5, [pc, #40]	; (1fbc <__libc_init_array+0x40>)
    1f94:	4c0a      	ldr	r4, [pc, #40]	; (1fc0 <__libc_init_array+0x44>)
    1f96:	1b64      	subs	r4, r4, r5
    1f98:	10a4      	asrs	r4, r4, #2
    1f9a:	42a6      	cmp	r6, r4
    1f9c:	d105      	bne.n	1faa <__libc_init_array+0x2e>
    1f9e:	bd70      	pop	{r4, r5, r6, pc}
    1fa0:	00b3      	lsls	r3, r6, #2
    1fa2:	58eb      	ldr	r3, [r5, r3]
    1fa4:	4798      	blx	r3
    1fa6:	3601      	adds	r6, #1
    1fa8:	e7ee      	b.n	1f88 <__libc_init_array+0xc>
    1faa:	00b3      	lsls	r3, r6, #2
    1fac:	58eb      	ldr	r3, [r5, r3]
    1fae:	4798      	blx	r3
    1fb0:	3601      	adds	r6, #1
    1fb2:	e7f2      	b.n	1f9a <__libc_init_array+0x1e>
    1fb4:	000042b8 	.word	0x000042b8
    1fb8:	000042b8 	.word	0x000042b8
    1fbc:	000042b8 	.word	0x000042b8
    1fc0:	000042bc 	.word	0x000042bc

00001fc4 <free>:
    1fc4:	b510      	push	{r4, lr}
    1fc6:	4b03      	ldr	r3, [pc, #12]	; (1fd4 <free+0x10>)
    1fc8:	0001      	movs	r1, r0
    1fca:	6818      	ldr	r0, [r3, #0]
    1fcc:	f000 f816 	bl	1ffc <_free_r>
    1fd0:	bd10      	pop	{r4, pc}
    1fd2:	46c0      	nop			; (mov r8, r8)
    1fd4:	20000020 	.word	0x20000020

00001fd8 <memcpy>:
    1fd8:	2300      	movs	r3, #0
    1fda:	b510      	push	{r4, lr}
    1fdc:	429a      	cmp	r2, r3
    1fde:	d100      	bne.n	1fe2 <memcpy+0xa>
    1fe0:	bd10      	pop	{r4, pc}
    1fe2:	5ccc      	ldrb	r4, [r1, r3]
    1fe4:	54c4      	strb	r4, [r0, r3]
    1fe6:	3301      	adds	r3, #1
    1fe8:	e7f8      	b.n	1fdc <memcpy+0x4>

00001fea <memset>:
    1fea:	0003      	movs	r3, r0
    1fec:	1882      	adds	r2, r0, r2
    1fee:	4293      	cmp	r3, r2
    1ff0:	d100      	bne.n	1ff4 <memset+0xa>
    1ff2:	4770      	bx	lr
    1ff4:	7019      	strb	r1, [r3, #0]
    1ff6:	3301      	adds	r3, #1
    1ff8:	e7f9      	b.n	1fee <memset+0x4>
	...

00001ffc <_free_r>:
    1ffc:	b570      	push	{r4, r5, r6, lr}
    1ffe:	0005      	movs	r5, r0
    2000:	2900      	cmp	r1, #0
    2002:	d010      	beq.n	2026 <STACK_SIZE+0x26>
    2004:	1f0c      	subs	r4, r1, #4
    2006:	6823      	ldr	r3, [r4, #0]
    2008:	2b00      	cmp	r3, #0
    200a:	da00      	bge.n	200e <STACK_SIZE+0xe>
    200c:	18e4      	adds	r4, r4, r3
    200e:	0028      	movs	r0, r5
    2010:	f000 f83e 	bl	2090 <__malloc_lock>
    2014:	4a1d      	ldr	r2, [pc, #116]	; (208c <STACK_SIZE+0x8c>)
    2016:	6813      	ldr	r3, [r2, #0]
    2018:	2b00      	cmp	r3, #0
    201a:	d105      	bne.n	2028 <STACK_SIZE+0x28>
    201c:	6063      	str	r3, [r4, #4]
    201e:	6014      	str	r4, [r2, #0]
    2020:	0028      	movs	r0, r5
    2022:	f000 f836 	bl	2092 <__malloc_unlock>
    2026:	bd70      	pop	{r4, r5, r6, pc}
    2028:	42a3      	cmp	r3, r4
    202a:	d909      	bls.n	2040 <STACK_SIZE+0x40>
    202c:	6821      	ldr	r1, [r4, #0]
    202e:	1860      	adds	r0, r4, r1
    2030:	4283      	cmp	r3, r0
    2032:	d1f3      	bne.n	201c <STACK_SIZE+0x1c>
    2034:	6818      	ldr	r0, [r3, #0]
    2036:	685b      	ldr	r3, [r3, #4]
    2038:	1841      	adds	r1, r0, r1
    203a:	6021      	str	r1, [r4, #0]
    203c:	e7ee      	b.n	201c <STACK_SIZE+0x1c>
    203e:	0013      	movs	r3, r2
    2040:	685a      	ldr	r2, [r3, #4]
    2042:	2a00      	cmp	r2, #0
    2044:	d001      	beq.n	204a <STACK_SIZE+0x4a>
    2046:	42a2      	cmp	r2, r4
    2048:	d9f9      	bls.n	203e <STACK_SIZE+0x3e>
    204a:	6819      	ldr	r1, [r3, #0]
    204c:	1858      	adds	r0, r3, r1
    204e:	42a0      	cmp	r0, r4
    2050:	d10b      	bne.n	206a <STACK_SIZE+0x6a>
    2052:	6820      	ldr	r0, [r4, #0]
    2054:	1809      	adds	r1, r1, r0
    2056:	1858      	adds	r0, r3, r1
    2058:	6019      	str	r1, [r3, #0]
    205a:	4282      	cmp	r2, r0
    205c:	d1e0      	bne.n	2020 <STACK_SIZE+0x20>
    205e:	6810      	ldr	r0, [r2, #0]
    2060:	6852      	ldr	r2, [r2, #4]
    2062:	1841      	adds	r1, r0, r1
    2064:	6019      	str	r1, [r3, #0]
    2066:	605a      	str	r2, [r3, #4]
    2068:	e7da      	b.n	2020 <STACK_SIZE+0x20>
    206a:	42a0      	cmp	r0, r4
    206c:	d902      	bls.n	2074 <STACK_SIZE+0x74>
    206e:	230c      	movs	r3, #12
    2070:	602b      	str	r3, [r5, #0]
    2072:	e7d5      	b.n	2020 <STACK_SIZE+0x20>
    2074:	6821      	ldr	r1, [r4, #0]
    2076:	1860      	adds	r0, r4, r1
    2078:	4282      	cmp	r2, r0
    207a:	d103      	bne.n	2084 <STACK_SIZE+0x84>
    207c:	6810      	ldr	r0, [r2, #0]
    207e:	6852      	ldr	r2, [r2, #4]
    2080:	1841      	adds	r1, r0, r1
    2082:	6021      	str	r1, [r4, #0]
    2084:	6062      	str	r2, [r4, #4]
    2086:	605c      	str	r4, [r3, #4]
    2088:	e7ca      	b.n	2020 <STACK_SIZE+0x20>
    208a:	46c0      	nop			; (mov r8, r8)
    208c:	200000ac 	.word	0x200000ac

00002090 <__malloc_lock>:
    2090:	4770      	bx	lr

00002092 <__malloc_unlock>:
    2092:	4770      	bx	lr
    2094:	682f2e2e 	.word	0x682f2e2e
    2098:	732f6c61 	.word	0x732f6c61
    209c:	682f6372 	.word	0x682f6372
    20a0:	665f6c61 	.word	0x665f6c61
    20a4:	6873616c 	.word	0x6873616c
    20a8:	0000632e 	.word	0x0000632e
    20ac:	682f2e2e 	.word	0x682f2e2e
    20b0:	732f6c61 	.word	0x732f6c61
    20b4:	682f6372 	.word	0x682f6372
    20b8:	755f6c61 	.word	0x755f6c61
    20bc:	74726173 	.word	0x74726173
    20c0:	6e79735f 	.word	0x6e79735f
    20c4:	00632e63 	.word	0x00632e63
    20c8:	682f2e2e 	.word	0x682f2e2e
    20cc:	6e2f6c70 	.word	0x6e2f6c70
    20d0:	74636d76 	.word	0x74636d76
    20d4:	682f6c72 	.word	0x682f6c72
    20d8:	6e5f6c70 	.word	0x6e5f6c70
    20dc:	74636d76 	.word	0x74636d76
    20e0:	632e6c72 	.word	0x632e6c72
    20e4:	00000000 	.word	0x00000000
    20e8:	682f2e2e 	.word	0x682f2e2e
    20ec:	732f6c70 	.word	0x732f6c70
    20f0:	6f637265 	.word	0x6f637265
    20f4:	70682f6d 	.word	0x70682f6d
    20f8:	65735f6c 	.word	0x65735f6c
    20fc:	6d6f6372 	.word	0x6d6f6372
    2100:	0000632e 	.word	0x0000632e
    2104:	10eb3d60 	.word	0x10eb3d60
    2108:	be71ca15 	.word	0xbe71ca15
    210c:	f0ae732b 	.word	0xf0ae732b
    2110:	81777d85 	.word	0x81777d85
    2114:	072c351f 	.word	0x072c351f
    2118:	d708613b 	.word	0xd708613b
    211c:	a310982d 	.word	0xa310982d
    2120:	f4df1409 	.word	0xf4df1409

00002124 <rcon>:
    2124:	01000000 02000000 04000000 08000000     ................
    2134:	10000000 20000000 40000000 80000000     ....... ...@....
    2144:	1b000000 36000000                       .......6

0000214c <Te>:
    214c:	c66363a5 f87c7c84 ee777799 f67b7b8d     .cc..||..ww..{{.
    215c:	fff2f20d d66b6bbd de6f6fb1 91c5c554     .....kk..oo.T...
    216c:	60303050 02010103 ce6767a9 562b2b7d     P00`.....gg.}++V
    217c:	e7fefe19 b5d7d762 4dababe6 ec76769a     ....b......M.vv.
    218c:	8fcaca45 1f82829d 89c9c940 fa7d7d87     E.......@....}}.
    219c:	effafa15 b25959eb 8e4747c9 fbf0f00b     .....YY..GG.....
    21ac:	41adadec b3d4d467 5fa2a2fd 45afafea     ...Ag......_...E
    21bc:	239c9cbf 53a4a4f7 e4727296 9bc0c05b     ...#...S.rr.[...
    21cc:	75b7b7c2 e1fdfd1c 3d9393ae 4c26266a     ...u.......=j&&L
    21dc:	6c36365a 7e3f3f41 f5f7f702 83cccc4f     Z66lA??~....O...
    21ec:	6834345c 51a5a5f4 d1e5e534 f9f1f108     \44h...Q4.......
    21fc:	e2717193 abd8d873 62313153 2a15153f     .qq.s...S11b?..*
    220c:	0804040c 95c7c752 46232365 9dc3c35e     ....R...e##F^...
    221c:	30181828 379696a1 0a05050f 2f9a9ab5     (..0...7......./
    222c:	0e070709 24121236 1b80809b dfe2e23d     ....6..$....=...
    223c:	cdebeb26 4e272769 7fb2b2cd ea75759f     &...i''N.....uu.
    224c:	1209091b 1d83839e 582c2c74 341a1a2e     ........t,,X...4
    225c:	361b1b2d dc6e6eb2 b45a5aee 5ba0a0fb     -..6.nn..ZZ....[
    226c:	a45252f6 763b3b4d b7d6d661 7db3b3ce     .RR.M;;va......}
    227c:	5229297b dde3e33e 5e2f2f71 13848497     {))R>...q//^....
    228c:	a65353f5 b9d1d168 00000000 c1eded2c     .SS.h.......,...
    229c:	40202060 e3fcfc1f 79b1b1c8 b65b5bed     `  @.......y.[[.
    22ac:	d46a6abe 8dcbcb46 67bebed9 7239394b     .jj.F......gK99r
    22bc:	944a4ade 984c4cd4 b05858e8 85cfcf4a     .JJ..LL..XX.J...
    22cc:	bbd0d06b c5efef2a 4faaaae5 edfbfb16     k...*......O....
    22dc:	864343c5 9a4d4dd7 66333355 11858594     .CC..MM.U33f....
    22ec:	8a4545cf e9f9f910 04020206 fe7f7f81     .EE.............
    22fc:	a05050f0 783c3c44 259f9fba 4ba8a8e3     .PP.D<<x...%...K
    230c:	a25151f3 5da3a3fe 804040c0 058f8f8a     .QQ....].@@.....
    231c:	3f9292ad 219d9dbc 70383848 f1f5f504     ...?...!H88p....
    232c:	63bcbcdf 77b6b6c1 afdada75 42212163     ...c...wu...c!!B
    233c:	20101030 e5ffff1a fdf3f30e bfd2d26d     0.. ........m...
    234c:	81cdcd4c 180c0c14 26131335 c3ecec2f     L.......5..&/...
    235c:	be5f5fe1 359797a2 884444cc 2e171739     .__....5.DD.9...
    236c:	93c4c457 55a7a7f2 fc7e7e82 7a3d3d47     W......U.~~.G==z
    237c:	c86464ac ba5d5de7 3219192b e6737395     .dd..]].+..2.ss.
    238c:	c06060a0 19818198 9e4f4fd1 a3dcdc7f     .``......OO.....
    239c:	44222266 542a2a7e 3b9090ab 0b888883     f""D~**T...;....
    23ac:	8c4646ca c7eeee29 6bb8b8d3 2814143c     .FF.)......k<..(
    23bc:	a7dede79 bc5e5ee2 160b0b1d addbdb76     y....^^.....v...
    23cc:	dbe0e03b 64323256 743a3a4e 140a0a1e     ;...V22dN::t....
    23dc:	924949db 0c06060a 4824246c b85c5ce4     .II.....l$$H.\\.
    23ec:	9fc2c25d bdd3d36e 43acacef c46262a6     ]...n......C.bb.
    23fc:	399191a8 319595a4 d3e4e437 f279798b     ...9...17....yy.
    240c:	d5e7e732 8bc8c843 6e373759 da6d6db7     2...C...Y77n.mm.
    241c:	018d8d8c b1d5d564 9c4e4ed2 49a9a9e0     ....d....NN....I
    242c:	d86c6cb4 ac5656fa f3f4f407 cfeaea25     .ll..VV.....%...
    243c:	ca6565af f47a7a8e 47aeaee9 10080818     .ee..zz....G....
    244c:	6fbabad5 f0787888 4a25256f 5c2e2e72     ...o.xx.o%%Jr..\
    245c:	381c1c24 57a6a6f1 73b4b4c7 97c6c651     $..8...W...sQ...
    246c:	cbe8e823 a1dddd7c e874749c 3e1f1f21     #...|....tt.!..>
    247c:	964b4bdd 61bdbddc 0d8b8b86 0f8a8a85     .KK....a........
    248c:	e0707090 7c3e3e42 71b5b5c4 cc6666aa     .pp.B>>|...q.ff.
    249c:	904848d8 06030305 f7f6f601 1c0e0e12     .HH.............
    24ac:	c26161a3 6a35355f ae5757f9 69b9b9d0     .aa._55j.WW....i
    24bc:	17868691 99c1c158 3a1d1d27 279e9eb9     ....X...'..:...'
    24cc:	d9e1e138 ebf8f813 2b9898b3 22111133     8..........+3.."
    24dc:	d26969bb a9d9d970 078e8e89 339494a7     .ii.p..........3
    24ec:	2d9b9bb6 3c1e1e22 15878792 c9e9e920     ...-"..<.... ...
    24fc:	87cece49 aa5555ff 50282878 a5dfdf7a     I....UU.x((Pz...
    250c:	038c8c8f 59a1a1f8 09898980 1a0d0d17     .......Y........
    251c:	65bfbfda d7e6e631 844242c6 d06868b8     ...e1....BB..hh.
    252c:	824141c3 299999b0 5a2d2d77 1e0f0f11     .AA....)w--Z....
    253c:	7bb0b0cb a85454fc 6dbbbbd6 2c16163a     ...{.TT....m:..,
    254c:	a5c66363 84f87c7c 99ee7777 8df67b7b     cc..||..ww..{{..
    255c:	0dfff2f2 bdd66b6b b1de6f6f 5491c5c5     ....kk..oo.....T
    256c:	50603030 03020101 a9ce6767 7d562b2b     00`P....gg..++V}
    257c:	19e7fefe 62b5d7d7 e64dabab 9aec7676     .......b..M.vv..
    258c:	458fcaca 9d1f8282 4089c9c9 87fa7d7d     ...E.......@}}..
    259c:	15effafa ebb25959 c98e4747 0bfbf0f0     ....YY..GG......
    25ac:	ec41adad 67b3d4d4 fd5fa2a2 ea45afaf     ..A....g.._...E.
    25bc:	bf239c9c f753a4a4 96e47272 5b9bc0c0     ..#...S.rr.....[
    25cc:	c275b7b7 1ce1fdfd ae3d9393 6a4c2626     ..u.......=.&&Lj
    25dc:	5a6c3636 417e3f3f 02f5f7f7 4f83cccc     66lZ??~A.......O
    25ec:	5c683434 f451a5a5 34d1e5e5 08f9f1f1     44h\..Q....4....
    25fc:	93e27171 73abd8d8 53623131 3f2a1515     qq.....s11bS..*?
    260c:	0c080404 5295c7c7 65462323 5e9dc3c3     .......R##Fe...^
    261c:	28301818 a1379696 0f0a0505 b52f9a9a     ..0(..7......./.
    262c:	090e0707 36241212 9b1b8080 3ddfe2e2     ......$6.......=
    263c:	26cdebeb 694e2727 cd7fb2b2 9fea7575     ...&''Ni....uu..
    264c:	1b120909 9e1d8383 74582c2c 2e341a1a     ........,,Xt..4.
    265c:	2d361b1b b2dc6e6e eeb45a5a fb5ba0a0     ..6-nn..ZZ....[.
    266c:	f6a45252 4d763b3b 61b7d6d6 ce7db3b3     RR..;;vM...a..}.
    267c:	7b522929 3edde3e3 715e2f2f 97138484     ))R{...>//^q....
    268c:	f5a65353 68b9d1d1 00000000 2cc1eded     SS.....h.......,
    269c:	60402020 1fe3fcfc c879b1b1 edb65b5b       @`......y.[[..
    26ac:	bed46a6a 468dcbcb d967bebe 4b723939     jj.....F..g.99rK
    26bc:	de944a4a d4984c4c e8b05858 4a85cfcf     JJ..LL..XX.....J
    26cc:	6bbbd0d0 2ac5efef e54faaaa 16edfbfb     ...k...*..O.....
    26dc:	c5864343 d79a4d4d 55663333 94118585     CC..MM..33fU....
    26ec:	cf8a4545 10e9f9f9 06040202 81fe7f7f     EE..............
    26fc:	f0a05050 44783c3c ba259f9f e34ba8a8     PP..<<xD..%...K.
    270c:	f3a25151 fe5da3a3 c0804040 8a058f8f     QQ....].@@......
    271c:	ad3f9292 bc219d9d 48703838 04f1f5f5     ..?...!.88pH....
    272c:	df63bcbc c177b6b6 75afdada 63422121     ..c...w....u!!Bc
    273c:	30201010 1ae5ffff 0efdf3f3 6dbfd2d2     .. 0...........m
    274c:	4c81cdcd 14180c0c 35261313 2fc3ecec     ...L......&5.../
    275c:	e1be5f5f a2359797 cc884444 392e1717     __....5.DD.....9
    276c:	5793c4c4 f255a7a7 82fc7e7e 477a3d3d     ...W..U.~~..==zG
    277c:	acc86464 e7ba5d5d 2b321919 95e67373     dd..]]....2+ss..
    278c:	a0c06060 98198181 d19e4f4f 7fa3dcdc     ``......OO......
    279c:	66442222 7e542a2a ab3b9090 830b8888     ""Df**T~..;.....
    27ac:	ca8c4646 29c7eeee d36bb8b8 3c281414     FF.....)..k...(<
    27bc:	79a7dede e2bc5e5e 1d160b0b 76addbdb     ...y^^.........v
    27cc:	3bdbe0e0 56643232 4e743a3a 1e140a0a     ...;22dV::tN....
    27dc:	db924949 0a0c0606 6c482424 e4b85c5c     II......$$Hl\\..
    27ec:	5d9fc2c2 6ebdd3d3 ef43acac a6c46262     ...]...n..C.bb..
    27fc:	a8399191 a4319595 37d3e4e4 8bf27979     ..9...1....7yy..
    280c:	32d5e7e7 438bc8c8 596e3737 b7da6d6d     ...2...C77nYmm..
    281c:	8c018d8d 64b1d5d5 d29c4e4e e049a9a9     .......dNN....I.
    282c:	b4d86c6c faac5656 07f3f4f4 25cfeaea     ll..VV.........%
    283c:	afca6565 8ef47a7a e947aeae 18100808     ee..zz....G.....
    284c:	d56fbaba 88f07878 6f4a2525 725c2e2e     ..o.xx..%%Jo..\r
    285c:	24381c1c f157a6a6 c773b4b4 5197c6c6     ..8$..W...s....Q
    286c:	23cbe8e8 7ca1dddd 9ce87474 213e1f1f     ...#...|tt....>!
    287c:	dd964b4b dc61bdbd 860d8b8b 850f8a8a     KK....a.........
    288c:	90e07070 427c3e3e c471b5b5 aacc6666     pp..>>|B..q.ff..
    289c:	d8904848 05060303 01f7f6f6 121c0e0e     HH..............
    28ac:	a3c26161 5f6a3535 f9ae5757 d069b9b9     aa..55j_WW....i.
    28bc:	91178686 5899c1c1 273a1d1d b9279e9e     .......X..:'..'.
    28cc:	38d9e1e1 13ebf8f8 b32b9898 33221111     ...8......+..."3
    28dc:	bbd26969 70a9d9d9 89078e8e a7339494     ii.....p......3.
    28ec:	b62d9b9b 223c1e1e 92158787 20c9e9e9     ..-...<"....... 
    28fc:	4987cece ffaa5555 78502828 7aa5dfdf     ...IUU..((Px...z
    290c:	8f038c8c f859a1a1 80098989 171a0d0d     ......Y.........
    291c:	da65bfbf 31d7e6e6 c6844242 b8d06868     ..e....1BB..hh..
    292c:	c3824141 b0299999 775a2d2d 111e0f0f     AA....).--Zw....
    293c:	cb7bb0b0 fca85454 d66dbbbb 3a2c1616     ..{.TT....m...,:
    294c:	63a5c663 7c84f87c 7799ee77 7b8df67b     c..c|..|w..w{..{
    295c:	f20dfff2 6bbdd66b 6fb1de6f c55491c5     ....k..ko..o..T.
    296c:	30506030 01030201 67a9ce67 2b7d562b     0`P0....g..g+V}+
    297c:	fe19e7fe d762b5d7 abe64dab 769aec76     ......b..M..v..v
    298c:	ca458fca 829d1f82 c94089c9 7d87fa7d     ..E.......@.}..}
    299c:	fa15effa 59ebb259 47c98e47 f00bfbf0     ....Y..YG..G....
    29ac:	adec41ad d467b3d4 a2fd5fa2 afea45af     .A....g.._...E..
    29bc:	9cbf239c a4f753a4 7296e472 c05b9bc0     .#...S..r..r..[.
    29cc:	b7c275b7 fd1ce1fd 93ae3d93 266a4c26     .u.......=..&Lj&
    29dc:	365a6c36 3f417e3f f702f5f7 cc4f83cc     6lZ6?~A?......O.
    29ec:	345c6834 a5f451a5 e534d1e5 f108f9f1     4h\4.Q....4.....
    29fc:	7193e271 d873abd8 31536231 153f2a15     q..q..s.1bS1.*?.
    2a0c:	040c0804 c75295c7 23654623 c35e9dc3     ......R.#Fe#..^.
    2a1c:	18283018 96a13796 050f0a05 9ab52f9a     .0(..7......./..
    2a2c:	07090e07 12362412 809b1b80 e23ddfe2     .....$6.......=.
    2a3c:	eb26cdeb 27694e27 b2cd7fb2 759fea75     ..&.'Ni'....u..u
    2a4c:	091b1209 839e1d83 2c74582c 1a2e341a     ........,Xt,.4..
    2a5c:	1b2d361b 6eb2dc6e 5aeeb45a a0fb5ba0     .6-.n..nZ..Z.[..
    2a6c:	52f6a452 3b4d763b d661b7d6 b3ce7db3     R..R;vM;..a..}..
    2a7c:	297b5229 e33edde3 2f715e2f 84971384     )R{)..>./^q/....
    2a8c:	53f5a653 d168b9d1 00000000 ed2cc1ed     S..S..h.......,.
    2a9c:	20604020 fc1fe3fc b1c879b1 5bedb65b      @` .....y..[..[
    2aac:	6abed46a cb468dcb bed967be 394b7239     j..j..F..g..9rK9
    2abc:	4ade944a 4cd4984c 58e8b058 cf4a85cf     J..JL..LX..X..J.
    2acc:	d06bbbd0 ef2ac5ef aae54faa fb16edfb     ..k...*..O......
    2adc:	43c58643 4dd79a4d 33556633 85941185     C..CM..M3fU3....
    2aec:	45cf8a45 f910e9f9 02060402 7f81fe7f     E..E............
    2afc:	50f0a050 3c44783c 9fba259f a8e34ba8     P..P<xD<.%...K..
    2b0c:	51f3a251 a3fe5da3 40c08040 8f8a058f     Q..Q.]..@..@....
    2b1c:	92ad3f92 9dbc219d 38487038 f504f1f5     .?...!..8pH8....
    2b2c:	bcdf63bc b6c177b6 da75afda 21634221     .c...w....u.!Bc!
    2b3c:	10302010 ff1ae5ff f30efdf3 d26dbfd2     . 0...........m.
    2b4c:	cd4c81cd 0c14180c 13352613 ec2fc3ec     ..L......&5.../.
    2b5c:	5fe1be5f 97a23597 44cc8844 17392e17     _.._.5..D..D..9.
    2b6c:	c45793c4 a7f255a7 7e82fc7e 3d477a3d     ..W..U..~..~=zG=
    2b7c:	64acc864 5de7ba5d 192b3219 7395e673     d..d]..].2+.s..s
    2b8c:	60a0c060 81981981 4fd19e4f dc7fa3dc     `..`....O..O....
    2b9c:	22664422 2a7e542a 90ab3b90 88830b88     "Df"*T~*.;......
    2bac:	46ca8c46 ee29c7ee b8d36bb8 143c2814     F..F..)..k...(<.
    2bbc:	de79a7de 5ee2bc5e 0b1d160b db76addb     ..y.^..^......v.
    2bcc:	e03bdbe0 32566432 3a4e743a 0a1e140a     ..;.2dV2:tN:....
    2bdc:	49db9249 060a0c06 246c4824 5ce4b85c     I..I....$Hl$\..\
    2bec:	c25d9fc2 d36ebdd3 acef43ac 62a6c462     ..]...n..C..b..b
    2bfc:	91a83991 95a43195 e437d3e4 798bf279     .9...1....7.y..y
    2c0c:	e732d5e7 c8438bc8 37596e37 6db7da6d     ..2...C.7nY7m..m
    2c1c:	8d8c018d d564b1d5 4ed29c4e a9e049a9     ......d.N..N.I..
    2c2c:	6cb4d86c 56faac56 f407f3f4 ea25cfea     l..lV..V......%.
    2c3c:	65afca65 7a8ef47a aee947ae 08181008     e..ez..z.G......
    2c4c:	bad56fba 7888f078 256f4a25 2e725c2e     .o..x..x%Jo%.\r.
    2c5c:	1c24381c a6f157a6 b4c773b4 c65197c6     .8$..W...s....Q.
    2c6c:	e823cbe8 dd7ca1dd 749ce874 1f213e1f     ..#...|.t..t.>!.
    2c7c:	4bdd964b bddc61bd 8b860d8b 8a850f8a     K..K.a..........
    2c8c:	7090e070 3e427c3e b5c471b5 66aacc66     p..p>|B>.q..f..f
    2c9c:	48d89048 03050603 f601f7f6 0e121c0e     H..H............
    2cac:	61a3c261 355f6a35 57f9ae57 b9d069b9     a..a5j_5W..W.i..
    2cbc:	86911786 c15899c1 1d273a1d 9eb9279e     ......X..:'..'..
    2ccc:	e138d9e1 f813ebf8 98b32b98 11332211     ..8......+..."3.
    2cdc:	69bbd269 d970a9d9 8e89078e 94a73394     i..i..p......3..
    2cec:	9bb62d9b 1e223c1e 87921587 e920c9e9     .-...<"....... .
    2cfc:	ce4987ce 55ffaa55 28785028 df7aa5df     ..I.U..U(Px(..z.
    2d0c:	8c8f038c a1f859a1 89800989 0d171a0d     .....Y..........
    2d1c:	bfda65bf e631d7e6 42c68442 68b8d068     .e....1.B..Bh..h
    2d2c:	41c38241 99b02999 2d775a2d 0f111e0f     A..A.)..-Zw-....
    2d3c:	b0cb7bb0 54fca854 bbd66dbb 163a2c16     .{..T..T.m...,:.
    2d4c:	6363a5c6 7c7c84f8 777799ee 7b7b8df6     ..cc..||..ww..{{
    2d5c:	f2f20dff 6b6bbdd6 6f6fb1de c5c55491     ......kk..oo.T..
    2d6c:	30305060 01010302 6767a9ce 2b2b7d56     `P00......ggV}++
    2d7c:	fefe19e7 d7d762b5 ababe64d 76769aec     .....b..M.....vv
    2d8c:	caca458f 82829d1f c9c94089 7d7d87fa     .E.......@....}}
    2d9c:	fafa15ef 5959ebb2 4747c98e f0f00bfb     ......YY..GG....
    2dac:	adadec41 d4d467b3 a2a2fd5f afafea45     A....g.._...E...
    2dbc:	9c9cbf23 a4a4f753 727296e4 c0c05b9b     #...S.....rr.[..
    2dcc:	b7b7c275 fdfd1ce1 9393ae3d 26266a4c     u.......=...Lj&&
    2ddc:	36365a6c 3f3f417e f7f702f5 cccc4f83     lZ66~A??.....O..
    2dec:	34345c68 a5a5f451 e5e534d1 f1f108f9     h\44Q....4......
    2dfc:	717193e2 d8d873ab 31315362 15153f2a     ..qq.s..bS11*?..
    2e0c:	04040c08 c7c75295 23236546 c3c35e9d     .....R..Fe##.^..
    2e1c:	18182830 9696a137 05050f0a 9a9ab52f     0(..7......./...
    2e2c:	0707090e 12123624 80809b1b e2e23ddf     ....$6.......=..
    2e3c:	ebeb26cd 2727694e b2b2cd7f 75759fea     .&..Ni''......uu
    2e4c:	09091b12 83839e1d 2c2c7458 1a1a2e34     ........Xt,,4...
    2e5c:	1b1b2d36 6e6eb2dc 5a5aeeb4 a0a0fb5b     6-....nn..ZZ[...
    2e6c:	5252f6a4 3b3b4d76 d6d661b7 b3b3ce7d     ..RRvM;;.a..}...
    2e7c:	29297b52 e3e33edd 2f2f715e 84849713     R{)).>..^q//....
    2e8c:	5353f5a6 d1d168b9 00000000 eded2cc1     ..SS.h.......,..
    2e9c:	20206040 fcfc1fe3 b1b1c879 5b5bedb6     @`  ....y.....[[
    2eac:	6a6abed4 cbcb468d bebed967 39394b72     ..jj.F..g...rK99
    2ebc:	4a4ade94 4c4cd498 5858e8b0 cfcf4a85     ..JJ..LL..XX.J..
    2ecc:	d0d06bbb efef2ac5 aaaae54f fbfb16ed     .k...*..O.......
    2edc:	4343c586 4d4dd79a 33335566 85859411     ..CC..MMfU33....
    2eec:	4545cf8a f9f910e9 02020604 7f7f81fe     ..EE............
    2efc:	5050f0a0 3c3c4478 9f9fba25 a8a8e34b     ..PPxD<<%...K...
    2f0c:	5151f3a2 a3a3fe5d 4040c080 8f8f8a05     ..QQ].....@@....
    2f1c:	9292ad3f 9d9dbc21 38384870 f5f504f1     ?...!...pH88....
    2f2c:	bcbcdf63 b6b6c177 dada75af 21216342     c...w....u..Bc!!
    2f3c:	10103020 ffff1ae5 f3f30efd d2d26dbf      0...........m..
    2f4c:	cdcd4c81 0c0c1418 13133526 ecec2fc3     .L......&5.../..
    2f5c:	5f5fe1be 9797a235 4444cc88 1717392e     ..__5.....DD.9..
    2f6c:	c4c45793 a7a7f255 7e7e82fc 3d3d477a     .W..U.....~~zG==
    2f7c:	6464acc8 5d5de7ba 19192b32 737395e6     ..dd..]]2+....ss
    2f8c:	6060a0c0 81819819 4f4fd19e dcdc7fa3     ..``......OO....
    2f9c:	22226644 2a2a7e54 9090ab3b 8888830b     Df""T~**;.......
    2fac:	4646ca8c eeee29c7 b8b8d36b 14143c28     ..FF.)..k...(<..
    2fbc:	dede79a7 5e5ee2bc 0b0b1d16 dbdb76ad     .y....^^.....v..
    2fcc:	e0e03bdb 32325664 3a3a4e74 0a0a1e14     .;..dV22tN::....
    2fdc:	4949db92 06060a0c 24246c48 5c5ce4b8     ..II....Hl$$..\\
    2fec:	c2c25d9f d3d36ebd acacef43 6262a6c4     .]...n..C.....bb
    2ffc:	9191a839 9595a431 e4e437d3 79798bf2     9...1....7....yy
    300c:	e7e732d5 c8c8438b 3737596e 6d6db7da     .2...C..nY77..mm
    301c:	8d8d8c01 d5d564b1 4e4ed29c a9a9e049     .....d....NNI...
    302c:	6c6cb4d8 5656faac f4f407f3 eaea25cf     ..ll..VV.....%..
    303c:	6565afca 7a7a8ef4 aeaee947 08081810     ..ee..zzG.......
    304c:	babad56f 787888f0 25256f4a 2e2e725c     o.....xxJo%%\r..
    305c:	1c1c2438 a6a6f157 b4b4c773 c6c65197     8$..W...s....Q..
    306c:	e8e823cb dddd7ca1 74749ce8 1f1f213e     .#...|....tt>!..
    307c:	4b4bdd96 bdbddc61 8b8b860d 8a8a850f     ..KKa...........
    308c:	707090e0 3e3e427c b5b5c471 6666aacc     ..pp|B>>q.....ff
    309c:	4848d890 03030506 f6f601f7 0e0e121c     ..HH............
    30ac:	6161a3c2 35355f6a 5757f9ae b9b9d069     ..aaj_55..WWi...
    30bc:	86869117 c1c15899 1d1d273a 9e9eb927     .....X..:'..'...
    30cc:	e1e138d9 f8f813eb 9898b32b 11113322     .8......+..."3..
    30dc:	6969bbd2 d9d970a9 8e8e8907 9494a733     ..ii.p......3...
    30ec:	9b9bb62d 1e1e223c 87879215 e9e920c9     -...<"....... ..
    30fc:	cece4987 5555ffaa 28287850 dfdf7aa5     .I....UUPx((.z..
    310c:	8c8c8f03 a1a1f859 89898009 0d0d171a     ....Y...........
    311c:	bfbfda65 e6e631d7 4242c684 6868b8d0     e....1....BB..hh
    312c:	4141c382 9999b029 2d2d775a 0f0f111e     ..AA)...Zw--....
    313c:	b0b0cb7b 5454fca8 bbbbd66d 16163a2c     {.....TTm...,:..

0000314c <Td>:
    314c:	51f4a750 7e416553 1a17a4c3 3a275e96     P..QSeA~.....^':
    315c:	3bab6bcb 1f9d45f1 acfa58ab 4be30393     .k.;.E...X.....K
    316c:	2030fa55 ad766df6 88cc7691 f5024c25     U.0 .mv..v..%L..
    317c:	4fe5d7fc c52acbd7 26354480 b562a38f     ...O..*..D5&..b.
    318c:	deb15a49 25ba1b67 45ea0e98 5dfec0e1     IZ..g..%...E...]
    319c:	c32f7502 814cf012 8d4697a3 6bd3f9c6     .u/...L...F....k
    31ac:	038f5fe7 15929c95 bf6d7aeb 955259da     ._.......zm..YR.
    31bc:	d4be832d 587421d3 49e06929 8ec9c844     -....!tX)i.ID...
    31cc:	75c2896a f48e7978 99583e6b 27b971dd     j..uxy..k>X..q.'
    31dc:	bee14fb6 f088ad17 c920ac66 7dce3ab4     .O......f. ..:.}
    31ec:	63df4a18 e51a3182 97513360 62537f45     .J.c.1..`3Q.E.Sb
    31fc:	b16477e0 bb6bae84 fe81a01c f9082b94     .wd...k......+..
    320c:	70486858 8f45fd19 94de6c87 527bf8b7     XhHp..E..l....{R
    321c:	ab73d323 724b02e2 e31f8f57 6655ab2a     #.s...KrW...*.Uf
    322c:	b2eb2807 2fb5c203 86c57b9a d33708a5     .(...../.{....7.
    323c:	302887f2 23bfa5b2 02036aba ed16825c     ..(0...#.j..\...
    324c:	8acf1c2b a779b492 f307f2f0 4e69e2a1     +.....y.......iN
    325c:	65daf4cd 0605bed5 d134621f c4a6fe8a     ...e.....b4.....
    326c:	342e539d a2f355a0 058ae132 a4f6eb75     .S.4.U..2...u...
    327c:	0b83ec39 4060efaa 5e719f06 bd6e1051     9.....`@..q^Q.n.
    328c:	3e218af9 96dd063d dd3e05ae 4de6bd46     ..!>=.....>.F..M
    329c:	91548db5 71c45d05 0406d46f 605015ff     ..T..].qo.....P`
    32ac:	1998fb24 d6bde997 894043cc 67d99e77     $........C@.w..g
    32bc:	b0e842bd 07898b88 e7195b38 79c8eedb     .B......8[.....y
    32cc:	a17c0a47 7c420fe9 f8841ec9 00000000     G.|...B|........
    32dc:	09808683 322bed48 1e1170ac 6c5a724e     ....H.+2.p..NrZl
    32ec:	fd0efffb 0f853856 3daed51e 362d3927     ....V8.....='9-6
    32fc:	0a0fd964 685ca621 9b5b54d1 24362e3a     d...!.\h.T[.:.6$
    330c:	0c0a67b1 9357e70f b4ee96d2 1b9b919e     .g....W.........
    331c:	80c0c54f 61dc20a2 5a774b69 1c121a16     O.... .aiKwZ....
    332c:	e293ba0a c0a02ae5 3c22e043 121b171d     .....*..C."<....
    333c:	0e090d0b f28bc7ad 2db6a8b9 141ea9c8     ...........-....
    334c:	57f11985 af75074c ee99ddbb a37f60fd     ...WL.u......`..
    335c:	f701269f 5c72f5bc 44663bc5 5bfb7e34     .&....r\.;fD4~.[
    336c:	8b432976 cb23c6dc b6edfc68 b8e4f163     v)C...#.h...c...
    337c:	d731dcca 42638510 13972240 84c61120     ..1...cB@".. ...
    338c:	854a247d d2bb3df8 aef93211 c729a16d     }$J..=...2..m.).
    339c:	1d9e2f4b dcb230f3 0d8652ec 77c1e3d0     K/...0...R.....w
    33ac:	2bb3166c a970b999 119448fa 47e96422     l..+..p..H.."d.G
    33bc:	a8fc8cc4 a0f03f1a 567d2cd8 223390ef     .....?...,}V..3"
    33cc:	87494ec7 d938d1c1 8ccaa2fe 98d40b36     .NI...8.....6...
    33dc:	a6f581cf a57ade28 dab78e26 3fadbfa4     ....(.z.&......?
    33ec:	2c3a9de4 5078920d 6a5fcc9b 547e4662     ..:,..xP.._jbF~T
    33fc:	f68d13c2 90d8b8e8 2e39f75e 82c3aff5     ........^.9.....
    340c:	9f5d80be 69d0937c 6fd52da9 cf2512b3     ..].|..i.-.o..%.
    341c:	c8ac993b 10187da7 e89c636e db3bbb7b     ;....}..nc..{.;.
    342c:	cd267809 6e5918f4 ec9ab701 834f9aa8     .x&...Yn......O.
    343c:	e6956e65 aaffe67e 21bccf08 ef15e8e6     en..~......!....
    344c:	bae79bd9 4a6f36ce ea9f09d4 29b07cd6     .....6oJ.....|.)
    345c:	31a4b2af 2a3f2331 c6a59430 35a266c0     ...11#?*0....f.5
    346c:	744ebc37 fc82caa6 e090d0b0 33a7d815     7.Nt...........3
    347c:	f104984a 41ecdaf7 7fcd500e 1791f62f     J......A.P../...
    348c:	764dd68d 43efb04d ccaa4d54 e49604df     ..MvM..CTM......
    349c:	9ed1b5e3 4c6a881b c12c1fb8 4665517f     ......jL..,..QeF
    34ac:	9d5eea04 018c355d fa877473 fb0b412e     ..^.]5..st...A..
    34bc:	b3671d5a 92dbd252 e9105633 6dd64713     Z.g.R...3V...G.m
    34cc:	9ad7618c 37a10c7a 59f8148e eb133c89     .a..z..7...Y.<..
    34dc:	cea927ee b761c935 e11ce5ed 7a47b13c     .'..5.a.....<.Gz
    34ec:	9cd2df59 55f2733f 1814ce79 73c737bf     Y...?s.Uy....7.s
    34fc:	53f7cdea 5ffdaa5b df3d6f14 7844db86     ...S[.._.o=...Dx
    350c:	caaff381 b968c43e 3824342c c2a3405f     ....>.h.,4$8_@..
    351c:	161dc372 bce2250c 283c498b ff0d9541     r....%...I<(A...
    352c:	39a80171 080cb3de d8b4e49c 6456c190     q..9..........Vd
    353c:	7bcb8461 d532b670 486c5c74 d0b85742     a..{p.2.t\lHBW..
    354c:	5051f4a7 537e4165 c31a17a4 963a275e     ..QPeA~S....^':.
    355c:	cb3bab6b f11f9d45 abacfa58 934be303     k.;.E...X.....K.
    356c:	552030fa f6ad766d 9188cc76 25f5024c     .0 Umv..v...L..%
    357c:	fc4fe5d7 d7c52acb 80263544 8fb562a3     ..O..*..D5&..b..
    358c:	49deb15a 6725ba1b 9845ea0e e15dfec0     Z..I..%g..E...].
    359c:	02c32f75 12814cf0 a38d4697 c66bd3f9     u/...L...F....k.
    35ac:	e7038f5f 9515929c ebbf6d7a da955259     _.......zm..YR..
    35bc:	2dd4be83 d3587421 2949e069 448ec9c8     ...-!tX.i.I)...D
    35cc:	6a75c289 78f48e79 6b99583e dd27b971     ..ujy..x>X.kq.'.
    35dc:	b6bee14f 17f088ad 66c920ac b47dce3a     O........ .f:.}.
    35ec:	1863df4a 82e51a31 60975133 4562537f     J.c.1...3Q.`.SbE
    35fc:	e0b16477 84bb6bae 1cfe81a0 94f9082b     wd...k......+...
    360c:	58704868 198f45fd 8794de6c b7527bf8     hHpX.E..l....{R.
    361c:	23ab73d3 e2724b02 57e31f8f 2a6655ab     .s.#.Kr....W.Uf*
    362c:	07b2eb28 032fb5c2 9a86c57b a5d33708     (...../.{....7..
    363c:	f2302887 b223bfa5 ba02036a 5ced1682     .(0...#.j......\
    364c:	2b8acf1c 92a779b4 f0f307f2 a14e69e2     ...+.y.......iN.
    365c:	cd65daf4 d50605be 1fd13462 8ac4a6fe     ..e.....b4......
    366c:	9d342e53 a0a2f355 32058ae1 75a4f6eb     S.4.U......2...u
    367c:	390b83ec aa4060ef 065e719f 51bd6e10     ...9.`@..q^..n.Q
    368c:	f93e218a 3d96dd06 aedd3e05 464de6bd     .!>....=.>....MF
    369c:	b591548d 0571c45d 6f0406d4 ff605015     .T..].q....o.P`.
    36ac:	241998fb 97d6bde9 cc894043 7767d99e     ...$....C@....gw
    36bc:	bdb0e842 8807898b 38e7195b db79c8ee     B.......[..8..y.
    36cc:	47a17c0a e97c420f c9f8841e 00000000     .|.G.B|.........
    36dc:	83098086 48322bed ac1e1170 4e6c5a72     .....+2Hp...rZlN
    36ec:	fbfd0eff 560f8538 1e3daed5 27362d39     ....8..V..=.9-6'
    36fc:	640a0fd9 21685ca6 d19b5b54 3a24362e     ...d.\h!T[...6$:
    370c:	b10c0a67 0f9357e7 d2b4ee96 9e1b9b91     g....W..........
    371c:	4f80c0c5 a261dc20 695a774b 161c121a     ...O .a.KwZi....
    372c:	0ae293ba e5c0a02a 433c22e0 1d121b17     ....*...."<C....
    373c:	0b0e090d adf28bc7 b92db6a8 c8141ea9     ..........-.....
    374c:	8557f119 4caf7507 bbee99dd fda37f60     ..W..u.L....`...
    375c:	9ff70126 bc5c72f5 c544663b 345bfb7e     &....r\.;fD.~.[4
    376c:	768b4329 dccb23c6 68b6edfc 63b8e4f1     )C.v.#.....h...c
    377c:	cad731dc 10426385 40139722 2084c611     .1...cB."..@... 
    378c:	7d854a24 f8d2bb3d 11aef932 6dc729a1     $J.}=...2....).m
    379c:	4b1d9e2f f3dcb230 ec0d8652 d077c1e3     /..K0...R.....w.
    37ac:	6c2bb316 99a970b9 fa119448 2247e964     ..+l.p..H...d.G"
    37bc:	c4a8fc8c 1aa0f03f d8567d2c ef223390     ....?...,}V..3".
    37cc:	c787494e c1d938d1 fe8ccaa2 3698d40b     NI...8.........6
    37dc:	cfa6f581 28a57ade 26dab78e a43fadbf     .....z.(...&..?.
    37ec:	e42c3a9d 0d507892 9b6a5fcc 62547e46     .:,..xP.._j.F~Tb
    37fc:	c2f68d13 e890d8b8 5e2e39f7 f582c3af     .........9.^....
    380c:	be9f5d80 7c69d093 a96fd52d b3cf2512     .]....i|-.o..%..
    381c:	3bc8ac99 a710187d 6ee89c63 7bdb3bbb     ...;}...c..n.;.{
    382c:	09cd2678 f46e5918 01ec9ab7 a8834f9a     x&...Yn......O..
    383c:	65e6956e 7eaaffe6 0821bccf e6ef15e8     n..e...~..!.....
    384c:	d9bae79b ce4a6f36 d4ea9f09 d629b07c     ....6oJ.....|.).
    385c:	af31a4b2 312a3f23 30c6a594 c035a266     ..1.#?*1...0f.5.
    386c:	37744ebc a6fc82ca b0e090d0 1533a7d8     .Nt7..........3.
    387c:	4af10498 f741ecda 0e7fcd50 2f1791f6     ...J..A.P....../
    388c:	8d764dd6 4d43efb0 54ccaa4d dfe49604     .Mv...CMM..T....
    389c:	e39ed1b5 1b4c6a88 b8c12c1f 7f466551     .....jL..,..QeF.
    38ac:	049d5eea 5d018c35 73fa8774 2efb0b41     .^..5..]t..sA...
    38bc:	5ab3671d 5292dbd2 33e91056 136dd647     .g.Z...RV..3G.m.
    38cc:	8c9ad761 7a37a10c 8e59f814 89eb133c     a.....7z..Y.<...
    38dc:	eecea927 35b761c9 ede11ce5 3c7a47b1     '....a.5.....Gz<
    38ec:	599cd2df 3f55f273 791814ce bf73c737     ...Ys.U?...y7.s.
    38fc:	ea53f7cd 5b5ffdaa 14df3d6f 867844db     ..S..._[o=...Dx.
    390c:	81caaff3 3eb968c4 2c382434 5fc2a340     .....h.>4$8,@.._
    391c:	72161dc3 0cbce225 8b283c49 41ff0d95     ...r%...I<(....A
    392c:	7139a801 de080cb3 9cd8b4e4 906456c1     ..9q.........Vd.
    393c:	617bcb84 70d532b6 74486c5c 42d0b857     ..{a.2.p\lHtW..B
    394c:	a75051f4 65537e41 a4c31a17 5e963a27     .QP.A~Se....':.^
    395c:	6bcb3bab 45f11f9d 58abacfa 03934be3     .;.k...E...X.K..
    396c:	fa552030 6df6ad76 769188cc 4c25f502     0 U.v..m...v..%L
    397c:	d7fc4fe5 cbd7c52a 44802635 a38fb562     .O..*...5&.Db...
    398c:	5a49deb1 1b6725ba 0e9845ea c0e15dfe     ..IZ.%g..E...]..
    399c:	7502c32f f012814c 97a38d46 f9c66bd3     /..uL...F....k..
    39ac:	5fe7038f 9c951592 7aebbf6d 59da9552     ..._....m..zR..Y
    39bc:	832dd4be 21d35874 692949e0 c8448ec9     ..-.tX.!.I)i..D.
    39cc:	896a75c2 7978f48e 3e6b9958 71dd27b9     .uj...xyX.k>.'.q
    39dc:	4fb6bee1 ad17f088 ac66c920 3ab47dce     ...O.... .f..}.:
    39ec:	4a1863df 3182e51a 33609751 7f456253     .c.J...1Q.`3SbE.
    39fc:	77e0b164 ae84bb6b a01cfe81 2b94f908     d..wk..........+
    3a0c:	68587048 fd198f45 6c8794de f8b7527b     HpXhE......l{R..
    3a1c:	d323ab73 02e2724b 8f57e31f ab2a6655     s.#.Kr....W.Uf*.
    3a2c:	2807b2eb c2032fb5 7b9a86c5 08a5d337     ...(./.....{7...
    3a3c:	87f23028 a5b223bf 6aba0203 825ced16     (0...#.....j..\.
    3a4c:	1c2b8acf b492a779 f2f0f307 e2a14e69     ..+.y.......iN..
    3a5c:	f4cd65da bed50605 621fd134 fe8ac4a6     .e......4..b....
    3a6c:	539d342e 55a0a2f3 e132058a eb75a4f6     .4.S...U..2...u.
    3a7c:	ec390b83 efaa4060 9f065e71 1051bd6e     ..9.`@..q^..n.Q.
    3a8c:	8af93e21 063d96dd 05aedd3e bd464de6     !>....=.>....MF.
    3a9c:	8db59154 5d0571c4 d46f0406 15ff6050     T....q.]..o.P`..
    3aac:	fb241998 e997d6bd 43cc8940 9e7767d9     ..$.....@..C.gw.
    3abc:	42bdb0e8 8b880789 5b38e719 eedb79c8     ...B......8[.y..
    3acc:	0a47a17c 0fe97c42 1ec9f884 00000000     |.G.B|..........
    3adc:	86830980 ed48322b 70ac1e11 724e6c5a     ....+2H....pZlNr
    3aec:	fffbfd0e 38560f85 d51e3dae 3927362d     ......V8.=..-6'9
    3afc:	d9640a0f a621685c 54d19b5b 2e3a2436     ..d.\h!.[..T6$:.
    3b0c:	67b10c0a e70f9357 96d2b4ee 919e1b9b     ...gW...........
    3b1c:	c54f80c0 20a261dc 4b695a77 1a161c12     ..O..a. wZiK....
    3b2c:	ba0ae293 2ae5c0a0 e0433c22 171d121b     .......*"<C.....
    3b3c:	0d0b0e09 c7adf28b a8b92db6 a9c8141e     .........-......
    3b4c:	198557f1 074caf75 ddbbee99 60fda37f     .W..u.L........`
    3b5c:	269ff701 f5bc5c72 3bc54466 7e345bfb     ...&r\..fD.;.[4~
    3b6c:	29768b43 c6dccb23 fc68b6ed f163b8e4     C.v)#.....h...c.
    3b7c:	dccad731 85104263 22401397 112084c6     1...cB....@".. .
    3b8c:	247d854a 3df8d2bb 3211aef9 a16dc729     J.}$...=...2).m.
    3b9c:	2f4b1d9e 30f3dcb2 52ec0d86 e3d077c1     ..K/...0...R.w..
    3bac:	166c2bb3 b999a970 48fa1194 642247e9     .+l.p......H.G"d
    3bbc:	8cc4a8fc 3f1aa0f0 2cd8567d 90ef2233     .......?}V.,3"..
    3bcc:	4ec78749 d1c1d938 a2fe8cca 0b3698d4     I..N8.........6.
    3bdc:	81cfa6f5 de28a57a 8e26dab7 bfa43fad     ....z.(...&..?..
    3bec:	9de42c3a 920d5078 cc9b6a5f 4662547e     :,..xP.._j..~TbF
    3bfc:	13c2f68d b8e890d8 f75e2e39 aff582c3     ........9.^.....
    3c0c:	80be9f5d 937c69d0 2da96fd5 12b3cf25     ]....i|..o.-%...
    3c1c:	993bc8ac 7da71018 636ee89c bb7bdb3b     ..;....}..nc;.{.
    3c2c:	7809cd26 18f46e59 b701ec9a 9aa8834f     &..xYn......O...
    3c3c:	6e65e695 e67eaaff cf0821bc e8e6ef15     ..en..~..!......
    3c4c:	9bd9bae7 36ce4a6f 09d4ea9f 7cd629b0     ....oJ.6.....).|
    3c5c:	b2af31a4 23312a3f 9430c6a5 66c035a2     .1..?*1#..0..5.f
    3c6c:	bc37744e caa6fc82 d0b0e090 d81533a7     Nt7..........3..
    3c7c:	984af104 daf741ec 500e7fcd f62f1791     ..J..A.....P../.
    3c8c:	d68d764d b04d43ef 4d54ccaa 04dfe496     Mv...CM...TM....
    3c9c:	b5e39ed1 881b4c6a 1fb8c12c 517f4665     ....jL..,...eF.Q
    3cac:	ea049d5e 355d018c 7473fa87 412efb0b     ^.....]5..st...A
    3cbc:	1d5ab367 d25292db 5633e910 47136dd6     g.Z...R...3V.m.G
    3ccc:	618c9ad7 0c7a37a1 148e59f8 3c89eb13     ...a.7z..Y.....<
    3cdc:	27eecea9 c935b761 e5ede11c b13c7a47     ...'a.5.....Gz<.
    3cec:	df599cd2 733f55f2 ce791814 37bf73c7     ..Y..U?s..y..s.7
    3cfc:	cdea53f7 aa5b5ffd 6f14df3d db867844     .S..._[.=..oDx..
    3d0c:	f381caaf c43eb968 342c3824 405fc2a3     ....h.>.$8,4.._@
    3d1c:	c372161d 250cbce2 498b283c 9541ff0d     ..r....%<(.I..A.
    3d2c:	017139a8 b3de080c e49cd8b4 c1906456     .9q.........Vd..
    3d3c:	84617bcb b670d532 5c74486c 5742d0b8     .{a.2.p.lHt\..BW
    3d4c:	f4a75051 4165537e 17a4c31a 275e963a     QP..~SeA....:.^'
    3d5c:	ab6bcb3b 9d45f11f fa58abac e303934b     ;.k...E...X.K...
    3d6c:	30fa5520 766df6ad cc769188 024c25f5      U.0..mv..v..%L.
    3d7c:	e5d7fc4f 2acbd7c5 35448026 62a38fb5     O......*&.D5...b
    3d8c:	b15a49de ba1b6725 ea0e9845 fec0e15d     .IZ.%g..E...]...
    3d9c:	2f7502c3 4cf01281 4697a38d d3f9c66b     ..u/...L...Fk...
    3dac:	8f5fe703 929c9515 6d7aebbf 5259da95     .._.......zm..YR
    3dbc:	be832dd4 7421d358 e0692949 c9c8448e     .-..X.!tI)i..D..
    3dcc:	c2896a75 8e7978f4 583e6b99 b971dd27     uj...xy..k>X'.q.
    3ddc:	e14fb6be 88ad17f0 20ac66c9 ce3ab47d     ..O......f. }.:.
    3dec:	df4a1863 1a3182e5 51336097 537f4562     c.J...1..`3QbE.S
    3dfc:	6477e0b1 6bae84bb 81a01cfe 082b94f9     ..wd...k......+.
    3e0c:	48685870 45fd198f de6c8794 7bf8b752     pXhH...E..l.R..{
    3e1c:	73d323ab 4b02e272 1f8f57e3 55ab2a66     .#.sr..K.W..f*.U
    3e2c:	eb2807b2 b5c2032f c57b9a86 3708a5d3     ..(./.....{....7
    3e3c:	2887f230 bfa5b223 036aba02 16825ced     0..(#.....j..\..
    3e4c:	cf1c2b8a 79b492a7 07f2f0f3 69e2a14e     .+.....y....N..i
    3e5c:	daf4cd65 05bed506 34621fd1 a6fe8ac4     e.........b4....
    3e6c:	2e539d34 f355a0a2 8ae13205 f6eb75a4     4.S...U..2...u..
    3e7c:	83ec390b 60efaa40 719f065e 6e1051bd     .9..@..`^..q.Q.n
    3e8c:	218af93e dd063d96 3e05aedd e6bd464d     >..!.=.....>MF..
    3e9c:	548db591 c45d0571 06d46f04 5015ff60     ...Tq.]..o..`..P
    3eac:	98fb2419 bde997d6 4043cc89 d99e7767     .$........C@gw..
    3ebc:	e842bdb0 898b8807 195b38e7 c8eedb79     ..B......8[.y...
    3ecc:	7c0a47a1 420fe97c 841ec9f8 00000000     .G.||..B........
    3edc:	80868309 2bed4832 1170ac1e 5a724e6c     ....2H.+..p.lNrZ
    3eec:	0efffbfd 8538560f aed51e3d 2d392736     .....V8.=...6'9-
    3efc:	0fd9640a 5ca62168 5b54d19b 362e3a24     .d..h!.\..T[$:.6
    3f0c:	0a67b10c 57e70f93 ee96d2b4 9b919e1b     ..g....W........
    3f1c:	c0c54f80 dc20a261 774b695a 121a161c     .O..a. .ZiKw....
    3f2c:	93ba0ae2 a02ae5c0 22e0433c 1b171d12     ......*.<C."....
    3f3c:	090d0b0e 8bc7adf2 b6a8b92d 1ea9c814     ........-.......
    3f4c:	f1198557 75074caf 99ddbbee 7f60fda3     W....L.u......`.
    3f5c:	01269ff7 72f5bc5c 663bc544 fb7e345b     ..&.\..rD.;f[4~.
    3f6c:	4329768b 23c6dccb edfc68b6 e4f163b8     .v)C...#.h...c..
    3f7c:	31dccad7 63851042 97224013 c6112084     ...1B..c.@".. ..
    3f8c:	4a247d85 bb3df8d2 f93211ae 29a16dc7     .}$J..=...2..m.)
    3f9c:	9e2f4b1d b230f3dc 8652ec0d c1e3d077     .K/...0...R.w...
    3fac:	b3166c2b 70b999a9 9448fa11 e9642247     +l.....p..H.G"d.
    3fbc:	fc8cc4a8 f03f1aa0 7d2cd856 3390ef22     ......?.V.,}"..3
    3fcc:	494ec787 38d1c1d9 caa2fe8c d40b3698     ..NI...8.....6..
    3fdc:	f581cfa6 7ade28a5 b78e26da adbfa43f     .....(.z.&..?...
    3fec:	3a9de42c 78920d50 5fcc9b6a 7e466254     ,..:P..xj.._TbF~
    3ffc:	8d13c2f6 d8b8e890 39f75e2e c3aff582     .........^.9....
    400c:	5d80be9f d0937c69 d52da96f 2512b3cf     ...]i|..o.-....%
    401c:	ac993bc8 187da710 9c636ee8 3bbb7bdb     .;....}..nc..{.;
    402c:	267809cd 5918f46e 9ab701ec 4f9aa883     ..x&n..Y.......O
    403c:	956e65e6 ffe67eaa bccf0821 15e8e6ef     .en..~..!.......
    404c:	e79bd9ba 6f36ce4a 9f09d4ea b07cd629     ....J.6o....).|.
    405c:	a4b2af31 3f23312a a59430c6 a266c035     1...*1#?.0..5.f.
    406c:	4ebc3774 82caa6fc 90d0b0e0 a7d81533     t7.N........3...
    407c:	04984af1 ecdaf741 cd500e7f 91f62f17     .J..A.....P../..
    408c:	4dd68d76 efb04d43 aa4d54cc 9604dfe4     v..MCM...TM.....
    409c:	d1b5e39e 6a881b4c 2c1fb8c1 65517f46     ....L..j...,F.Qe
    40ac:	5eea049d 8c355d01 877473fa 0b412efb     ...^.]5..st...A.
    40bc:	671d5ab3 dbd25292 105633e9 d647136d     .Z.g.R...3V.m.G.
    40cc:	d7618c9a a10c7a37 f8148e59 133c89eb     ..a.7z..Y.....<.
    40dc:	a927eece 61c935b7 1ce5ede1 47b13c7a     ..'..5.a....z<.G
    40ec:	d2df599c f2733f55 14ce7918 c737bf73     .Y..U?s..y..s.7.
    40fc:	f7cdea53 fdaa5b5f 3d6f14df 44db8678     S..._[....o=x..D
    410c:	aff381ca 68c43eb9 24342c38 a3405fc2     .....>.h8,4$._@.
    411c:	1dc37216 e2250cbc 3c498b28 0d9541ff     .r....%.(.I<.A..
    412c:	a8017139 0cb3de08 b4e49cd8 56c19064     9q..........d..V
    413c:	cb84617b 32b670d5 6c5c7448 b85742d0     {a...p.2Ht\l.BW.

0000414c <Td4>:
    414c:	d56a0952 38a53630 9ea340bf fbd7f381     R.j.06.8.@......
    415c:	8239e37c 87ff2f9b 44438e34 cbe9dec4     |.9../..4.CD....
    416c:	32947b54 3d23c2a6 0b954cee 4ec3fa42     T{.2..#=.L..B..N
    417c:	66a12e08 b224d928 49a25b76 25d18b6d     ...f(.$.v[.Im..%
    418c:	64f6f872 16986886 cc5ca4d4 92b6655d     r..d.h....\.]e..
    419c:	5048706c dab9edfd 5746155e 849d8da7     lpHP....^.FW....
    41ac:	00abd890 0ad3bc8c 0558e4f7 0645b3b8     ..........X...E.
    41bc:	8f1e2cd0 020f3fca 03bdafc1 6b8a1301     .,...?.........k
    41cc:	4111913a eadc674f cecff297 73e6b4f0     :..AOg.........s
    41dc:	2274ac96 8535ade7 e837f9e2 6edf751c     ..t"..5...7..u.n
    41ec:	711af147 89c5291d 0e62b76f 1bbe18aa     G..q.)..o.b.....
    41fc:	4b3e56fc 2079d2c6 fec0db9a f45acd78     .V>K..y ....x.Z.
    420c:	33a8dd1f 31c70788 591012b1 5fec8027     ...3...1...Y'.._
    421c:	a97f5160 0d4ab519 9f7ae52d ef9cc993     `Q....J.-.z.....
    422c:	4d3be0a0 b0f52aae 3cbbebc8 61995383     ..;M.*.....<.S.a
    423c:	7e042b17 26d677ba 631469e1 7d0c2155     .+.~.w.&.i.cU!.}

0000424c <__sf_fake_stderr>:
	...

0000426c <__sf_fake_stdin>:
	...

0000428c <__sf_fake_stdout>:
	...

000042ac <_init>:
    42ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    42ae:	46c0      	nop			; (mov r8, r8)
    42b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    42b2:	bc08      	pop	{r3}
    42b4:	469e      	mov	lr, r3
    42b6:	4770      	bx	lr

000042b8 <__init_array_start>:
    42b8:	000000dd 	.word	0x000000dd

000042bc <_fini>:
    42bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    42be:	46c0      	nop			; (mov r8, r8)
    42c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    42c2:	bc08      	pop	{r3}
    42c4:	469e      	mov	lr, r3
    42c6:	4770      	bx	lr

000042c8 <__fini_array_start>:
    42c8:	000000b5 	.word	0x000000b5
