
AES-128_mbedTLS_library.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004310  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000088  20000000  00004310  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  00020088  2**0
                  CONTENTS
  3 .bss          00000280  20000088  00004398  00020088  2**2
                  ALLOC
  4 .stack        00002000  20000308  00004618  00020088  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
  7 .debug_info   00011e24  00000000  00000000  00020109  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002ca8  00000000  00000000  00031f2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00008283  00000000  00000000  00034bd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000570  00000000  00000000  0003ce58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000640  00000000  00000000  0003d3c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001c028  00000000  00000000  0003da08  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000d4f6  00000000  00000000  00059a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00091a6e  00000000  00000000  00066f26  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000f74  00000000  00000000  000f8994  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	08 23 00 20 2d 01 00 00 29 01 00 00 29 01 00 00     .#. -...)...)...
	...
      2c:	29 01 00 00 00 00 00 00 00 00 00 00 29 01 00 00     )...........)...
      3c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      4c:	29 01 00 00 91 05 00 00 29 01 00 00 29 01 00 00     ).......)...)...
      5c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      6c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      7c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      8c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      9c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      ac:	29 01 00 00 00 00 00 00                             ).......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000088 	.word	0x20000088
      d4:	00000000 	.word	0x00000000
      d8:	00004310 	.word	0x00004310

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000008c 	.word	0x2000008c
     108:	00004310 	.word	0x00004310
     10c:	00004310 	.word	0x00004310
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     114:	b510      	push	{r4, lr}
	system_init();
     116:	4b02      	ldr	r3, [pc, #8]	; (120 <atmel_start_init+0xc>)
     118:	4798      	blx	r3
	
	gpio_init();
     11a:	4b02      	ldr	r3, [pc, #8]	; (124 <atmel_start_init+0x10>)
     11c:	4798      	blx	r3
}
     11e:	bd10      	pop	{r4, pc}
     120:	0000020d 	.word	0x0000020d
     124:	00000259 	.word	0x00000259

00000128 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     128:	e7fe      	b.n	128 <Dummy_Handler>
	...

0000012c <Reset_Handler>:
{
     12c:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     12e:	4a1a      	ldr	r2, [pc, #104]	; (198 <Reset_Handler+0x6c>)
     130:	4b1a      	ldr	r3, [pc, #104]	; (19c <Reset_Handler+0x70>)
     132:	429a      	cmp	r2, r3
     134:	d011      	beq.n	15a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     136:	001a      	movs	r2, r3
     138:	4b19      	ldr	r3, [pc, #100]	; (1a0 <Reset_Handler+0x74>)
     13a:	429a      	cmp	r2, r3
     13c:	d20d      	bcs.n	15a <Reset_Handler+0x2e>
     13e:	4a19      	ldr	r2, [pc, #100]	; (1a4 <Reset_Handler+0x78>)
     140:	3303      	adds	r3, #3
     142:	1a9b      	subs	r3, r3, r2
     144:	089b      	lsrs	r3, r3, #2
     146:	3301      	adds	r3, #1
     148:	009b      	lsls	r3, r3, #2
     14a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     14c:	4813      	ldr	r0, [pc, #76]	; (19c <Reset_Handler+0x70>)
     14e:	4912      	ldr	r1, [pc, #72]	; (198 <Reset_Handler+0x6c>)
     150:	588c      	ldr	r4, [r1, r2]
     152:	5084      	str	r4, [r0, r2]
     154:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     156:	429a      	cmp	r2, r3
     158:	d1fa      	bne.n	150 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     15a:	4a13      	ldr	r2, [pc, #76]	; (1a8 <Reset_Handler+0x7c>)
     15c:	4b13      	ldr	r3, [pc, #76]	; (1ac <Reset_Handler+0x80>)
     15e:	429a      	cmp	r2, r3
     160:	d20a      	bcs.n	178 <Reset_Handler+0x4c>
     162:	43d3      	mvns	r3, r2
     164:	4911      	ldr	r1, [pc, #68]	; (1ac <Reset_Handler+0x80>)
     166:	185b      	adds	r3, r3, r1
     168:	2103      	movs	r1, #3
     16a:	438b      	bics	r3, r1
     16c:	3304      	adds	r3, #4
     16e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     170:	2100      	movs	r1, #0
     172:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     174:	4293      	cmp	r3, r2
     176:	d1fc      	bne.n	172 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     178:	4a0d      	ldr	r2, [pc, #52]	; (1b0 <Reset_Handler+0x84>)
     17a:	21ff      	movs	r1, #255	; 0xff
     17c:	4b0d      	ldr	r3, [pc, #52]	; (1b4 <Reset_Handler+0x88>)
     17e:	438b      	bics	r3, r1
     180:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
     182:	4a0d      	ldr	r2, [pc, #52]	; (1b8 <Reset_Handler+0x8c>)
     184:	6853      	ldr	r3, [r2, #4]
     186:	397f      	subs	r1, #127	; 0x7f
     188:	430b      	orrs	r3, r1
     18a:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     18c:	4b0b      	ldr	r3, [pc, #44]	; (1bc <Reset_Handler+0x90>)
     18e:	4798      	blx	r3
        main();
     190:	4b0b      	ldr	r3, [pc, #44]	; (1c0 <Reset_Handler+0x94>)
     192:	4798      	blx	r3
     194:	e7fe      	b.n	194 <Reset_Handler+0x68>
     196:	46c0      	nop			; (mov r8, r8)
     198:	00004310 	.word	0x00004310
     19c:	20000000 	.word	0x20000000
     1a0:	20000088 	.word	0x20000088
     1a4:	20000004 	.word	0x20000004
     1a8:	20000088 	.word	0x20000088
     1ac:	20000308 	.word	0x20000308
     1b0:	e000ed00 	.word	0xe000ed00
     1b4:	00000000 	.word	0x00000000
     1b8:	41004000 	.word	0x41004000
     1bc:	00001799 	.word	0x00001799
     1c0:	00000a95 	.word	0x00000a95

000001c4 <FLASH_0_CLOCK_init>:
}

static inline void hri_mclk_set_AHBMASK_NVMCTRL_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
     1c4:	4a03      	ldr	r2, [pc, #12]	; (1d4 <FLASH_0_CLOCK_init+0x10>)
     1c6:	6911      	ldr	r1, [r2, #16]
     1c8:	2380      	movs	r3, #128	; 0x80
     1ca:	005b      	lsls	r3, r3, #1
     1cc:	430b      	orrs	r3, r1
     1ce:	6113      	str	r3, [r2, #16]

void FLASH_0_CLOCK_init(void)
{

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}
     1d0:	4770      	bx	lr
     1d2:	46c0      	nop			; (mov r8, r8)
     1d4:	40000400 	.word	0x40000400

000001d8 <FLASH_0_init>:

void FLASH_0_init(void)
{
     1d8:	b510      	push	{r4, lr}
	FLASH_0_CLOCK_init();
     1da:	4b03      	ldr	r3, [pc, #12]	; (1e8 <FLASH_0_init+0x10>)
     1dc:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     1de:	4903      	ldr	r1, [pc, #12]	; (1ec <FLASH_0_init+0x14>)
     1e0:	4803      	ldr	r0, [pc, #12]	; (1f0 <FLASH_0_init+0x18>)
     1e2:	4b04      	ldr	r3, [pc, #16]	; (1f4 <FLASH_0_init+0x1c>)
     1e4:	4798      	blx	r3
}
     1e6:	bd10      	pop	{r4, pc}
     1e8:	000001c5 	.word	0x000001c5
     1ec:	41004000 	.word	0x41004000
     1f0:	200002e8 	.word	0x200002e8
     1f4:	0000035d 	.word	0x0000035d

000001f8 <delay_driver_init>:

void delay_driver_init(void)
{
     1f8:	b510      	push	{r4, lr}
	delay_init(SysTick);
     1fa:	4802      	ldr	r0, [pc, #8]	; (204 <delay_driver_init+0xc>)
     1fc:	4b02      	ldr	r3, [pc, #8]	; (208 <delay_driver_init+0x10>)
     1fe:	4798      	blx	r3
}
     200:	bd10      	pop	{r4, pc}
     202:	46c0      	nop			; (mov r8, r8)
     204:	e000e010 	.word	0xe000e010
     208:	00000311 	.word	0x00000311

0000020c <system_init>:

void system_init(void)
{
     20c:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     20e:	4b0d      	ldr	r3, [pc, #52]	; (244 <system_init+0x38>)
     210:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     212:	23c0      	movs	r3, #192	; 0xc0
     214:	05db      	lsls	r3, r3, #23
     216:	2280      	movs	r2, #128	; 0x80
     218:	00d2      	lsls	r2, r2, #3
     21a:	2194      	movs	r1, #148	; 0x94
     21c:	505a      	str	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     21e:	390c      	subs	r1, #12
     220:	505a      	str	r2, [r3, r1]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     222:	4b09      	ldr	r3, [pc, #36]	; (248 <system_init+0x3c>)
     224:	22a8      	movs	r2, #168	; 0xa8
     226:	4909      	ldr	r1, [pc, #36]	; (24c <system_init+0x40>)
     228:	5099      	str	r1, [r3, r2]
     22a:	21c0      	movs	r1, #192	; 0xc0
     22c:	0609      	lsls	r1, r1, #24
     22e:	5099      	str	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     230:	21ca      	movs	r1, #202	; 0xca
     232:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     234:	2001      	movs	r0, #1
     236:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     238:	545a      	strb	r2, [r3, r1]
	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);

	FLASH_0_init();
     23a:	4b05      	ldr	r3, [pc, #20]	; (250 <system_init+0x44>)
     23c:	4798      	blx	r3

	delay_driver_init();
     23e:	4b05      	ldr	r3, [pc, #20]	; (254 <system_init+0x48>)
     240:	4798      	blx	r3
}
     242:	bd10      	pop	{r4, pc}
     244:	000003d9 	.word	0x000003d9
     248:	40002800 	.word	0x40002800
     24c:	40000400 	.word	0x40000400
     250:	000001d9 	.word	0x000001d9
     254:	000001f9 	.word	0x000001f9

00000258 <gpio_init>:

#include "driver_init.h"
#include "gpio_init.h"

void gpio_init(void)
{
     258:	b5f0      	push	{r4, r5, r6, r7, lr}
     25a:	46c6      	mov	lr, r8
     25c:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     25e:	22c0      	movs	r2, #192	; 0xc0
     260:	05d2      	lsls	r2, r2, #23
     262:	2302      	movs	r3, #2
     264:	2194      	movs	r1, #148	; 0x94
     266:	5053      	str	r3, [r2, r1]
     268:	2180      	movs	r1, #128	; 0x80
     26a:	0249      	lsls	r1, r1, #9
     26c:	6151      	str	r1, [r2, #20]
     26e:	2780      	movs	r7, #128	; 0x80
     270:	037f      	lsls	r7, r7, #13
     272:	6157      	str	r7, [r2, #20]
     274:	2080      	movs	r0, #128	; 0x80
     276:	0380      	lsls	r0, r0, #14
     278:	4680      	mov	r8, r0
     27a:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     27c:	2688      	movs	r6, #136	; 0x88
     27e:	5193      	str	r3, [r2, r6]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     280:	4b1c      	ldr	r3, [pc, #112]	; (2f4 <gpio_init+0x9c>)
     282:	20a8      	movs	r0, #168	; 0xa8
     284:	4d1c      	ldr	r5, [pc, #112]	; (2f8 <gpio_init+0xa0>)
     286:	501d      	str	r5, [r3, r0]
     288:	25c0      	movs	r5, #192	; 0xc0
     28a:	062d      	lsls	r5, r5, #24
     28c:	501d      	str	r5, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     28e:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     290:	2180      	movs	r1, #128	; 0x80
     292:	05c9      	lsls	r1, r1, #23
     294:	6299      	str	r1, [r3, #40]	; 0x28
     296:	4c19      	ldr	r4, [pc, #100]	; (2fc <gpio_init+0xa4>)
     298:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     29a:	6097      	str	r7, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     29c:	6299      	str	r1, [r3, #40]	; 0x28
     29e:	4f18      	ldr	r7, [pc, #96]	; (300 <gpio_init+0xa8>)
     2a0:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     2a2:	4644      	mov	r4, r8
     2a4:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     2a6:	6299      	str	r1, [r3, #40]	; 0x28
     2a8:	4916      	ldr	r1, [pc, #88]	; (304 <gpio_init+0xac>)
     2aa:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2ac:	27c1      	movs	r7, #193	; 0xc1
     2ae:	5ddc      	ldrb	r4, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2b0:	2101      	movs	r1, #1
     2b2:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2b4:	55dc      	strb	r4, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2b6:	3f71      	subs	r7, #113	; 0x71
     2b8:	5ddc      	ldrb	r4, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2ba:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2bc:	55dc      	strb	r4, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2be:	3704      	adds	r7, #4
     2c0:	5ddc      	ldrb	r4, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2c2:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2c4:	55dc      	strb	r4, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2c6:	3701      	adds	r7, #1
     2c8:	5ddc      	ldrb	r4, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2ca:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2cc:	55dc      	strb	r4, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     2ce:	2480      	movs	r4, #128	; 0x80
     2d0:	00e4      	lsls	r4, r4, #3
     2d2:	3743      	adds	r7, #67	; 0x43
     2d4:	51d4      	str	r4, [r2, r7]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     2d6:	5194      	str	r4, [r2, r6]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     2d8:	4a0b      	ldr	r2, [pc, #44]	; (308 <gpio_init+0xb0>)
     2da:	501a      	str	r2, [r3, r0]
     2dc:	501d      	str	r5, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2de:	3022      	adds	r0, #34	; 0x22
     2e0:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2e2:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2e4:	541a      	strb	r2, [r3, r0]
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
#endif

	delay_ms(10);
     2e6:	38c0      	subs	r0, #192	; 0xc0
     2e8:	4b08      	ldr	r3, [pc, #32]	; (30c <gpio_init+0xb4>)
     2ea:	4798      	blx	r3
     2ec:	bc04      	pop	{r2}
     2ee:	4690      	mov	r8, r2
     2f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2f2:	46c0      	nop			; (mov r8, r8)
     2f4:	40002800 	.word	0x40002800
     2f8:	40000002 	.word	0x40000002
     2fc:	c0000001 	.word	0xc0000001
     300:	c0000010 	.word	0xc0000010
     304:	c0000020 	.word	0xc0000020
     308:	40000400 	.word	0x40000400
     30c:	00000325 	.word	0x00000325

00000310 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     310:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
     312:	4b02      	ldr	r3, [pc, #8]	; (31c <delay_init+0xc>)
     314:	6018      	str	r0, [r3, #0]
     316:	4b02      	ldr	r3, [pc, #8]	; (320 <delay_init+0x10>)
     318:	4798      	blx	r3
}
     31a:	bd10      	pop	{r4, pc}
     31c:	200000a4 	.word	0x200000a4
     320:	000007c1 	.word	0x000007c1

00000324 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     324:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     326:	4b04      	ldr	r3, [pc, #16]	; (338 <delay_ms+0x14>)
     328:	681c      	ldr	r4, [r3, #0]
     32a:	4b04      	ldr	r3, [pc, #16]	; (33c <delay_ms+0x18>)
     32c:	4798      	blx	r3
     32e:	0001      	movs	r1, r0
     330:	0020      	movs	r0, r4
     332:	4b03      	ldr	r3, [pc, #12]	; (340 <delay_ms+0x1c>)
     334:	4798      	blx	r3
}
     336:	bd10      	pop	{r4, pc}
     338:	200000a4 	.word	0x200000a4
     33c:	000003d1 	.word	0x000003d1
     340:	000007d5 	.word	0x000007d5

00000344 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
     344:	b510      	push	{r4, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
     346:	6943      	ldr	r3, [r0, #20]
     348:	2b00      	cmp	r3, #0
     34a:	d000      	beq.n	34e <flash_ready+0xa>
		descr->callbacks.cb_ready(descr);
     34c:	4798      	blx	r3
	}
}
     34e:	bd10      	pop	{r4, pc}

00000350 <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
     350:	b510      	push	{r4, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
     352:	6983      	ldr	r3, [r0, #24]
     354:	2b00      	cmp	r3, #0
     356:	d000      	beq.n	35a <flash_error+0xa>
		descr->callbacks.cb_error(descr);
     358:	4798      	blx	r3
	}
}
     35a:	bd10      	pop	{r4, pc}

0000035c <flash_init>:
{
     35c:	b570      	push	{r4, r5, r6, lr}
     35e:	0005      	movs	r5, r0
     360:	000c      	movs	r4, r1
	ASSERT(flash && hw);
     362:	2800      	cmp	r0, #0
     364:	d012      	beq.n	38c <flash_init+0x30>
     366:	0008      	movs	r0, r1
     368:	1e43      	subs	r3, r0, #1
     36a:	4198      	sbcs	r0, r3
     36c:	b2c0      	uxtb	r0, r0
     36e:	2238      	movs	r2, #56	; 0x38
     370:	4907      	ldr	r1, [pc, #28]	; (390 <flash_init+0x34>)
     372:	4b08      	ldr	r3, [pc, #32]	; (394 <flash_init+0x38>)
     374:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
     376:	0021      	movs	r1, r4
     378:	0028      	movs	r0, r5
     37a:	4b07      	ldr	r3, [pc, #28]	; (398 <flash_init+0x3c>)
     37c:	4798      	blx	r3
	if (rc) {
     37e:	2800      	cmp	r0, #0
     380:	d103      	bne.n	38a <flash_init+0x2e>
	flash->dev.flash_cb.ready_cb = flash_ready;
     382:	4b06      	ldr	r3, [pc, #24]	; (39c <flash_init+0x40>)
     384:	602b      	str	r3, [r5, #0]
	flash->dev.flash_cb.error_cb = flash_error;
     386:	4b06      	ldr	r3, [pc, #24]	; (3a0 <flash_init+0x44>)
     388:	606b      	str	r3, [r5, #4]
}
     38a:	bd70      	pop	{r4, r5, r6, pc}
     38c:	2000      	movs	r0, #0
     38e:	e7ee      	b.n	36e <flash_init+0x12>
     390:	000019a4 	.word	0x000019a4
     394:	000003a5 	.word	0x000003a5
     398:	000004e1 	.word	0x000004e1
     39c:	00000345 	.word	0x00000345
     3a0:	00000351 	.word	0x00000351

000003a4 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     3a4:	2800      	cmp	r0, #0
     3a6:	d100      	bne.n	3aa <assert+0x6>
		__asm("BKPT #0");
     3a8:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     3aa:	4770      	bx	lr

000003ac <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     3ac:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     3ae:	4a06      	ldr	r2, [pc, #24]	; (3c8 <_sbrk+0x1c>)
     3b0:	6812      	ldr	r2, [r2, #0]
     3b2:	2a00      	cmp	r2, #0
     3b4:	d004      	beq.n	3c0 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     3b6:	4a04      	ldr	r2, [pc, #16]	; (3c8 <_sbrk+0x1c>)
     3b8:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     3ba:	18c3      	adds	r3, r0, r3
     3bc:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     3be:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     3c0:	4902      	ldr	r1, [pc, #8]	; (3cc <_sbrk+0x20>)
     3c2:	4a01      	ldr	r2, [pc, #4]	; (3c8 <_sbrk+0x1c>)
     3c4:	6011      	str	r1, [r2, #0]
     3c6:	e7f6      	b.n	3b6 <_sbrk+0xa>
     3c8:	200000a8 	.word	0x200000a8
     3cc:	20002308 	.word	0x20002308

000003d0 <_get_cycles_for_ms>:
{
	switch (power) {
	case 8:
		return (ms * (freq / 100000)) * 100;
	case 7:
		return (ms * (freq / 10000)) * 10;
     3d0:	23fa      	movs	r3, #250	; 0xfa
     3d2:	011b      	lsls	r3, r3, #4
     3d4:	4358      	muls	r0, r3
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     3d6:	4770      	bx	lr

000003d8 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     3d8:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     3da:	4b09      	ldr	r3, [pc, #36]	; (400 <_init_chip+0x28>)
     3dc:	685a      	ldr	r2, [r3, #4]
     3de:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_set_performance_level(2);
     3e0:	2002      	movs	r0, #2
     3e2:	4b08      	ldr	r3, [pc, #32]	; (404 <_init_chip+0x2c>)
     3e4:	4798      	blx	r3

	_osc32kctrl_init_sources();
     3e6:	4b08      	ldr	r3, [pc, #32]	; (408 <_init_chip+0x30>)
     3e8:	4798      	blx	r3
	_oscctrl_init_sources();
     3ea:	4b08      	ldr	r3, [pc, #32]	; (40c <_init_chip+0x34>)
     3ec:	4798      	blx	r3
	_mclk_init();
     3ee:	4b08      	ldr	r3, [pc, #32]	; (410 <_init_chip+0x38>)
     3f0:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     3f2:	4b08      	ldr	r3, [pc, #32]	; (414 <_init_chip+0x3c>)
     3f4:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     3f6:	20ff      	movs	r0, #255	; 0xff
     3f8:	4b07      	ldr	r3, [pc, #28]	; (418 <_init_chip+0x40>)
     3fa:	4798      	blx	r3
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
     3fc:	bd10      	pop	{r4, pc}
     3fe:	46c0      	nop			; (mov r8, r8)
     400:	41004000 	.word	0x41004000
     404:	00000797 	.word	0x00000797
     408:	00000745 	.word	0x00000745
     40c:	0000075d 	.word	0x0000075d
     410:	00000441 	.word	0x00000441
     414:	00000795 	.word	0x00000795
     418:	0000041d 	.word	0x0000041d

0000041c <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     41c:	07c3      	lsls	r3, r0, #31
     41e:	d507      	bpl.n	430 <_gclk_init_generators_by_fref+0x14>
}

static inline void hri_gclk_write_GENCTRL_reg(const void *const hw, uint8_t index, hri_gclk_genctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENCTRL[index].reg = data;
     420:	4a04      	ldr	r2, [pc, #16]	; (434 <_gclk_init_generators_by_fref+0x18>)
     422:	4b05      	ldr	r3, [pc, #20]	; (438 <_gclk_init_generators_by_fref+0x1c>)
     424:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     426:	0019      	movs	r1, r3
     428:	4a04      	ldr	r2, [pc, #16]	; (43c <_gclk_init_generators_by_fref+0x20>)
     42a:	684b      	ldr	r3, [r1, #4]
     42c:	4213      	tst	r3, r2
     42e:	d1fc      	bne.n	42a <_gclk_init_generators_by_fref+0xe>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
}
     430:	4770      	bx	lr
     432:	46c0      	nop			; (mov r8, r8)
     434:	00010106 	.word	0x00010106
     438:	40001800 	.word	0x40001800
     43c:	000007fd 	.word	0x000007fd

00000440 <_mclk_init>:
	((Mclk *)hw)->BUPDIV.reg = data;
     440:	4b03      	ldr	r3, [pc, #12]	; (450 <_mclk_init+0x10>)
     442:	2208      	movs	r2, #8
     444:	719a      	strb	r2, [r3, #6]
	((Mclk *)hw)->LPDIV.reg = data;
     446:	3a04      	subs	r2, #4
     448:	715a      	strb	r2, [r3, #5]
	((Mclk *)hw)->CPUDIV.reg = data;
     44a:	3a03      	subs	r2, #3
     44c:	711a      	strb	r2, [r3, #4]
{
	void *hw = (void *)MCLK;
	hri_mclk_write_BUPDIV_reg(hw, MCLK_BUPDIV_BUPDIV(CONF_MCLK_BUPDIV));
	hri_mclk_write_LPDIV_reg(hw, MCLK_LPDIV_LPDIV(CONF_MCLK_LPDIV));
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
}
     44e:	4770      	bx	lr
     450:	40000400 	.word	0x40000400

00000454 <_flash_program>:
 *                           write is stored
 * \param[in] size           The size of data to write to a page
 */
static void _flash_program(void *const hw, const uint32_t dst_addr, const uint8_t *buffer, const uint16_t size,
                           uint32_t nvmctrl_cmd)
{
     454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     456:	0004      	movs	r4, r0
     458:	000d      	movs	r5, r1
     45a:	0017      	movs	r7, r2
     45c:	001e      	movs	r6, r3
	ASSERT(!(dst_addr % 2));
     45e:	2301      	movs	r3, #1
     460:	404b      	eors	r3, r1
     462:	2001      	movs	r0, #1
     464:	4018      	ands	r0, r3
     466:	22c5      	movs	r2, #197	; 0xc5
     468:	0052      	lsls	r2, r2, #1
     46a:	4919      	ldr	r1, [pc, #100]	; (4d0 <_flash_program+0x7c>)
     46c:	4b19      	ldr	r3, [pc, #100]	; (4d4 <_flash_program+0x80>)
     46e:	4798      	blx	r3

	uint32_t nvm_address = dst_addr / 2;
     470:	0868      	lsrs	r0, r5, #1
	uint16_t i, data;

	while (!hri_nvmctrl_get_interrupt_READY_bit(hw)) {
     472:	2201      	movs	r2, #1
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
     474:	7d23      	ldrb	r3, [r4, #20]
     476:	4213      	tst	r3, r2
     478:	d0fc      	beq.n	474 <_flash_program+0x20>
	((Nvmctrl *)hw)->CTRLA.reg = data;
     47a:	4b17      	ldr	r3, [pc, #92]	; (4d8 <_flash_program+0x84>)
     47c:	8023      	strh	r3, [r4, #0]
		/* Wait until this module isn't busy */
	}

	hri_nvmctrl_write_CTRLA_reg(hw, NVMCTRL_CTRLA_CMD_PBC | NVMCTRL_CTRLA_CMDEX_KEY);

	while (!hri_nvmctrl_get_interrupt_READY_bit(hw)) {
     47e:	2201      	movs	r2, #1
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
     480:	7d23      	ldrb	r3, [r4, #20]
     482:	4213      	tst	r3, r2
     484:	d0fc      	beq.n	480 <_flash_program+0x2c>
}

static inline void hri_nvmctrl_clear_STATUS_reg(const void *const hw, hri_nvmctrl_status_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->STATUS.reg = mask;
     486:	2320      	movs	r3, #32
     488:	33ff      	adds	r3, #255	; 0xff
     48a:	8323      	strh	r3, [r4, #24]
	}

	/* Clear flags */
	hri_nvmctrl_clear_STATUS_reg(hw, NVMCTRL_STATUS_MASK);

	for (i = 0; i < size; i += 2) {
     48c:	2e00      	cmp	r6, #0
     48e:	d00e      	beq.n	4ae <_flash_program+0x5a>
     490:	3b1f      	subs	r3, #31
     492:	3bff      	subs	r3, #255	; 0xff
     494:	0029      	movs	r1, r5
     496:	4399      	bics	r1, r3
     498:	2300      	movs	r3, #0
		data = buffer[i];
     49a:	5cfd      	ldrb	r5, [r7, r3]
     49c:	b2aa      	uxth	r2, r5
		if (i < NVMCTRL_PAGE_SIZE - 1) {
     49e:	2b3e      	cmp	r3, #62	; 0x3e
     4a0:	d910      	bls.n	4c4 <_flash_program+0x70>
			data |= (buffer[i + 1] << 8);
		}
		NVM_MEMORY[nvm_address++] = data;
     4a2:	800a      	strh	r2, [r1, #0]
	for (i = 0; i < size; i += 2) {
     4a4:	3302      	adds	r3, #2
     4a6:	b29b      	uxth	r3, r3
     4a8:	3102      	adds	r1, #2
     4aa:	429e      	cmp	r6, r3
     4ac:	d8f5      	bhi.n	49a <_flash_program+0x46>
	}

	while (!hri_nvmctrl_get_interrupt_READY_bit(hw)) {
     4ae:	2201      	movs	r2, #1
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
     4b0:	7d23      	ldrb	r3, [r4, #20]
     4b2:	4213      	tst	r3, r2
     4b4:	d0fc      	beq.n	4b0 <_flash_program+0x5c>
	((Nvmctrl *)hw)->ADDR.reg = data;
     4b6:	61e0      	str	r0, [r4, #28]
		/* Wait until this module isn't busy */
	}

	hri_nvmctrl_write_ADDR_reg(hw, dst_addr / 2);
	hri_nvmctrl_write_CTRLA_reg(hw, nvmctrl_cmd | NVMCTRL_CTRLA_CMDEX_KEY);
     4b8:	4b08      	ldr	r3, [pc, #32]	; (4dc <_flash_program+0x88>)
     4ba:	9a06      	ldr	r2, [sp, #24]
     4bc:	4313      	orrs	r3, r2
     4be:	b29b      	uxth	r3, r3
	((Nvmctrl *)hw)->CTRLA.reg = data;
     4c0:	8023      	strh	r3, [r4, #0]
}
     4c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			data |= (buffer[i + 1] << 8);
     4c4:	18fa      	adds	r2, r7, r3
     4c6:	7852      	ldrb	r2, [r2, #1]
     4c8:	0212      	lsls	r2, r2, #8
     4ca:	432a      	orrs	r2, r5
     4cc:	e7e9      	b.n	4a2 <_flash_program+0x4e>
     4ce:	46c0      	nop			; (mov r8, r8)
     4d0:	000019bc 	.word	0x000019bc
     4d4:	000003a5 	.word	0x000003a5
     4d8:	ffffa544 	.word	0xffffa544
     4dc:	ffffa500 	.word	0xffffa500

000004e0 <_flash_init>:
{
     4e0:	b570      	push	{r4, r5, r6, lr}
     4e2:	0005      	movs	r5, r0
     4e4:	000c      	movs	r4, r1
	ASSERT(device && (hw == NVMCTRL));
     4e6:	2800      	cmp	r0, #0
     4e8:	d01d      	beq.n	526 <_flash_init+0x46>
     4ea:	4b10      	ldr	r3, [pc, #64]	; (52c <_flash_init+0x4c>)
     4ec:	18c8      	adds	r0, r1, r3
     4ee:	4243      	negs	r3, r0
     4f0:	4158      	adcs	r0, r3
     4f2:	b2c0      	uxtb	r0, r0
     4f4:	2246      	movs	r2, #70	; 0x46
     4f6:	490e      	ldr	r1, [pc, #56]	; (530 <_flash_init+0x50>)
     4f8:	4b0e      	ldr	r3, [pc, #56]	; (534 <_flash_init+0x54>)
     4fa:	4798      	blx	r3
	device->hw = hw;
     4fc:	612c      	str	r4, [r5, #16]
	tmp = ((Nvmctrl *)hw)->CTRLB.reg;
     4fe:	6862      	ldr	r2, [r4, #4]
	tmp &= mask;
     500:	239e      	movs	r3, #158	; 0x9e
     502:	4013      	ands	r3, r2
	((Nvmctrl *)hw)->CTRLB.reg = data;
     504:	6063      	str	r3, [r4, #4]
	_nvm_dev = device;
     506:	4b0c      	ldr	r3, [pc, #48]	; (538 <_flash_init+0x58>)
     508:	601d      	str	r5, [r3, #0]
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     50a:	4b0c      	ldr	r3, [pc, #48]	; (53c <_flash_init+0x5c>)
     50c:	2210      	movs	r2, #16
     50e:	2180      	movs	r1, #128	; 0x80
     510:	505a      	str	r2, [r3, r1]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     512:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     516:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     51a:	3101      	adds	r1, #1
     51c:	31ff      	adds	r1, #255	; 0xff
     51e:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     520:	601a      	str	r2, [r3, #0]
}
     522:	2000      	movs	r0, #0
     524:	bd70      	pop	{r4, r5, r6, pc}
     526:	2000      	movs	r0, #0
     528:	e7e4      	b.n	4f4 <_flash_init+0x14>
     52a:	46c0      	nop			; (mov r8, r8)
     52c:	beffc000 	.word	0xbeffc000
     530:	000019bc 	.word	0x000019bc
     534:	000003a5 	.word	0x000003a5
     538:	200000ac 	.word	0x200000ac
     53c:	e000e100 	.word	0xe000e100

00000540 <_flash_read>:
{
     540:	b570      	push	{r4, r5, r6, lr}
	uint32_t nvm_address = src_addr / 2;
     542:	084c      	lsrs	r4, r1, #1
	while (!hri_nvmctrl_get_interrupt_READY_bit(device->hw)) {
     544:	6905      	ldr	r5, [r0, #16]
     546:	2601      	movs	r6, #1
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
     548:	7d28      	ldrb	r0, [r5, #20]
     54a:	4230      	tst	r0, r6
     54c:	d0fc      	beq.n	548 <_flash_read+0x8>
	((Nvmctrl *)hw)->STATUS.reg = mask;
     54e:	2020      	movs	r0, #32
     550:	30ff      	adds	r0, #255	; 0xff
     552:	8328      	strh	r0, [r5, #24]
		i = 0;
     554:	2000      	movs	r0, #0
	if (src_addr % 2) {
     556:	07cd      	lsls	r5, r1, #31
     558:	d505      	bpl.n	566 <_flash_read+0x26>
		data      = NVM_MEMORY[nvm_address++];
     55a:	3401      	adds	r4, #1
     55c:	3001      	adds	r0, #1
     55e:	4381      	bics	r1, r0
     560:	8809      	ldrh	r1, [r1, #0]
		buffer[0] = data >> 8;
     562:	0a09      	lsrs	r1, r1, #8
     564:	7011      	strb	r1, [r2, #0]
	while (i < length) {
     566:	4298      	cmp	r0, r3
     568:	d211      	bcs.n	58e <_flash_read+0x4e>
     56a:	1812      	adds	r2, r2, r0
     56c:	0064      	lsls	r4, r4, #1
     56e:	1a24      	subs	r4, r4, r0
		if (i < (length - 1)) {
     570:	1e5d      	subs	r5, r3, #1
     572:	e003      	b.n	57c <_flash_read+0x3c>
		i += 2;
     574:	3002      	adds	r0, #2
     576:	3202      	adds	r2, #2
	while (i < length) {
     578:	4283      	cmp	r3, r0
     57a:	d908      	bls.n	58e <_flash_read+0x4e>
     57c:	1821      	adds	r1, r4, r0
		data      = NVM_MEMORY[nvm_address++];
     57e:	8809      	ldrh	r1, [r1, #0]
     580:	b289      	uxth	r1, r1
		buffer[i] = (data & 0xFF);
     582:	7011      	strb	r1, [r2, #0]
		if (i < (length - 1)) {
     584:	4285      	cmp	r5, r0
     586:	d9f5      	bls.n	574 <_flash_read+0x34>
			buffer[i + 1] = (data >> 8);
     588:	0a09      	lsrs	r1, r1, #8
     58a:	7051      	strb	r1, [r2, #1]
     58c:	e7f2      	b.n	574 <_flash_read+0x34>
}
     58e:	bd70      	pop	{r4, r5, r6, pc}

00000590 <NVMCTRL_Handler>:

/**
 * \internal NVM interrupt handler
 */
void NVMCTRL_Handler(void)
{
     590:	b510      	push	{r4, lr}
	void *const hw = _nvm_dev->hw;
     592:	4b0a      	ldr	r3, [pc, #40]	; (5bc <NVMCTRL_Handler+0x2c>)
     594:	6818      	ldr	r0, [r3, #0]
     596:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
     598:	7d1a      	ldrb	r2, [r3, #20]

	if (hri_nvmctrl_get_interrupt_READY_bit(hw)) {
     59a:	07d2      	lsls	r2, r2, #31
     59c:	d504      	bpl.n	5a8 <NVMCTRL_Handler+0x18>
		if (NULL != _nvm_dev->flash_cb.ready_cb) {
     59e:	6803      	ldr	r3, [r0, #0]
     5a0:	2b00      	cmp	r3, #0
     5a2:	d000      	beq.n	5a6 <NVMCTRL_Handler+0x16>
			_nvm_dev->flash_cb.ready_cb(_nvm_dev);
     5a4:	4798      	blx	r3
		hri_nvmctrl_clear_interrupt_ERROR_bit(hw);
		if (NULL != _nvm_dev->flash_cb.error_cb) {
			_nvm_dev->flash_cb.error_cb(_nvm_dev);
		}
	}
}
     5a6:	bd10      	pop	{r4, pc}
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_ERROR) >> NVMCTRL_INTFLAG_ERROR_Pos;
     5a8:	7d1a      	ldrb	r2, [r3, #20]
	} else if (hri_nvmctrl_get_interrupt_ERROR_bit(hw)) {
     5aa:	0792      	lsls	r2, r2, #30
     5ac:	d5fb      	bpl.n	5a6 <NVMCTRL_Handler+0x16>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_ERROR;
     5ae:	2202      	movs	r2, #2
     5b0:	751a      	strb	r2, [r3, #20]
		if (NULL != _nvm_dev->flash_cb.error_cb) {
     5b2:	6843      	ldr	r3, [r0, #4]
     5b4:	2b00      	cmp	r3, #0
     5b6:	d0f6      	beq.n	5a6 <NVMCTRL_Handler+0x16>
			_nvm_dev->flash_cb.error_cb(_nvm_dev);
     5b8:	4798      	blx	r3
}
     5ba:	e7f4      	b.n	5a6 <NVMCTRL_Handler+0x16>
     5bc:	200000ac 	.word	0x200000ac

000005c0 <_rww_flash_read>:

/**
 * \brief Reads a number of bytes in the internal RWWEE Flash.
 */
int32_t _rww_flash_read(struct _flash_device *const device, const uint32_t src_addr, uint8_t *buffer, uint32_t length)
{
     5c0:	b570      	push	{r4, r5, r6, lr}
	    || (addr > (NVMCTRL_RWW_EEPROM_ADDR + NVMCTRL_PAGE_SIZE * NVMCTRL_RWWEE_PAGES))) {
     5c2:	4c0b      	ldr	r4, [pc, #44]	; (5f0 <_rww_flash_read+0x30>)
     5c4:	190d      	adds	r5, r1, r4
	/* Check if the address is valid */
	if (!_is_valid_rww_flash_address(src_addr) || !_is_valid_rww_flash_address(src_addr + length)) {
     5c6:	2480      	movs	r4, #128	; 0x80
     5c8:	01a4      	lsls	r4, r4, #6
     5ca:	42a5      	cmp	r5, r4
     5cc:	d80a      	bhi.n	5e4 <_rww_flash_read+0x24>
	    || (addr > (NVMCTRL_RWW_EEPROM_ADDR + NVMCTRL_PAGE_SIZE * NVMCTRL_RWWEE_PAGES))) {
     5ce:	4c08      	ldr	r4, [pc, #32]	; (5f0 <_rww_flash_read+0x30>)
     5d0:	191c      	adds	r4, r3, r4
     5d2:	1864      	adds	r4, r4, r1
	if (!_is_valid_rww_flash_address(src_addr) || !_is_valid_rww_flash_address(src_addr + length)) {
     5d4:	2580      	movs	r5, #128	; 0x80
     5d6:	01ad      	lsls	r5, r5, #6
     5d8:	42ac      	cmp	r4, r5
     5da:	d806      	bhi.n	5ea <_rww_flash_read+0x2a>
		return ERR_BAD_ADDRESS;
	}

	_flash_read(device, src_addr, buffer, length);
     5dc:	4c05      	ldr	r4, [pc, #20]	; (5f4 <_rww_flash_read+0x34>)
     5de:	47a0      	blx	r4

	return ERR_NONE;
     5e0:	2000      	movs	r0, #0
}
     5e2:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_BAD_ADDRESS;
     5e4:	200e      	movs	r0, #14
     5e6:	4240      	negs	r0, r0
     5e8:	e7fb      	b.n	5e2 <_rww_flash_read+0x22>
     5ea:	200e      	movs	r0, #14
     5ec:	4240      	negs	r0, r0
     5ee:	e7f8      	b.n	5e2 <_rww_flash_read+0x22>
     5f0:	ffc00000 	.word	0xffc00000
     5f4:	00000541 	.word	0x00000541

000005f8 <_rww_flash_write>:

/**
 * \brief Writes a number of bytes in the internal RWWEE Flash.
 */
int32_t _rww_flash_write(struct _flash_device *const device, const uint32_t dst_addr, uint8_t *buffer, uint32_t length)
{
     5f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     5fa:	46de      	mov	lr, fp
     5fc:	4657      	mov	r7, sl
     5fe:	464e      	mov	r6, r9
     600:	4645      	mov	r5, r8
     602:	b5e0      	push	{r5, r6, r7, lr}
     604:	b0c5      	sub	sp, #276	; 0x114
     606:	4683      	mov	fp, r0
     608:	0016      	movs	r6, r2
     60a:	001d      	movs	r5, r3
	    || (addr > (NVMCTRL_RWW_EEPROM_ADDR + NVMCTRL_PAGE_SIZE * NVMCTRL_RWWEE_PAGES))) {
     60c:	4b49      	ldr	r3, [pc, #292]	; (734 <_rww_flash_write+0x13c>)
     60e:	18ca      	adds	r2, r1, r3
	uint32_t row_start_addr, row_end_addr;
	uint32_t i, j, k;
	uint32_t wr_start_addr = dst_addr;

	/* Check if the address is valid */
	if (!_is_valid_rww_flash_address(dst_addr) || !_is_valid_rww_flash_address(dst_addr + length)) {
     610:	2380      	movs	r3, #128	; 0x80
     612:	019b      	lsls	r3, r3, #6
     614:	429a      	cmp	r2, r3
     616:	d900      	bls.n	61a <_rww_flash_write+0x22>
     618:	e086      	b.n	728 <_rww_flash_write+0x130>
	    || (addr > (NVMCTRL_RWW_EEPROM_ADDR + NVMCTRL_PAGE_SIZE * NVMCTRL_RWWEE_PAGES))) {
     61a:	4b46      	ldr	r3, [pc, #280]	; (734 <_rww_flash_write+0x13c>)
     61c:	18eb      	adds	r3, r5, r3
     61e:	185b      	adds	r3, r3, r1
	if (!_is_valid_rww_flash_address(dst_addr) || !_is_valid_rww_flash_address(dst_addr + length)) {
     620:	2280      	movs	r2, #128	; 0x80
     622:	0192      	lsls	r2, r2, #6
     624:	4293      	cmp	r3, r2
     626:	d900      	bls.n	62a <_rww_flash_write+0x32>
     628:	e081      	b.n	72e <_rww_flash_write+0x136>
     62a:	000c      	movs	r4, r1
     62c:	e02f      	b.n	68e <_rww_flash_write+0x96>
     62e:	46ba      	mov	sl, r7
     630:	4667      	mov	r7, ip
			buffer++;
			length--;
		}

		/* erase row before write */
		_flash_erase_row(device->hw, row_start_addr, NVMCTRL_CTRLA_CMD_RWWEEER);
     632:	465b      	mov	r3, fp
     634:	691a      	ldr	r2, [r3, #16]
	while (!hri_nvmctrl_get_interrupt_READY_bit(hw)) {
     636:	2101      	movs	r1, #1
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
     638:	7d13      	ldrb	r3, [r2, #20]
     63a:	420b      	tst	r3, r1
     63c:	d0fc      	beq.n	638 <_rww_flash_write+0x40>
	((Nvmctrl *)hw)->STATUS.reg = mask;
     63e:	2320      	movs	r3, #32
     640:	33ff      	adds	r3, #255	; 0xff
     642:	8313      	strh	r3, [r2, #24]
	hri_nvmctrl_write_ADDR_reg(hw, dst_addr / 2);
     644:	464b      	mov	r3, r9
     646:	085b      	lsrs	r3, r3, #1
	((Nvmctrl *)hw)->ADDR.reg = data;
     648:	61d3      	str	r3, [r2, #28]
	((Nvmctrl *)hw)->CTRLA.reg = data;
     64a:	4b3b      	ldr	r3, [pc, #236]	; (738 <_rww_flash_write+0x140>)
     64c:	8013      	strh	r3, [r2, #0]

		/* write buffer to flash */
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
			_flash_program(device->hw,
     64e:	464b      	mov	r3, r9
     650:	46a0      	mov	r8, r4
     652:	9703      	str	r7, [sp, #12]
     654:	002a      	movs	r2, r5
     656:	464d      	mov	r5, r9
     658:	46b1      	mov	r9, r6
     65a:	465e      	mov	r6, fp
     65c:	4693      	mov	fp, r2
     65e:	001f      	movs	r7, r3
     660:	1b7a      	subs	r2, r7, r5
     662:	ab04      	add	r3, sp, #16
     664:	469c      	mov	ip, r3
     666:	4462      	add	r2, ip
     668:	231c      	movs	r3, #28
     66a:	9300      	str	r3, [sp, #0]
     66c:	3324      	adds	r3, #36	; 0x24
     66e:	0039      	movs	r1, r7
     670:	6930      	ldr	r0, [r6, #16]
     672:	4c32      	ldr	r4, [pc, #200]	; (73c <_rww_flash_write+0x144>)
     674:	47a0      	blx	r4
     676:	3740      	adds	r7, #64	; 0x40
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
     678:	9b03      	ldr	r3, [sp, #12]
     67a:	42bb      	cmp	r3, r7
     67c:	d1f0      	bne.n	660 <_rww_flash_write+0x68>
     67e:	4644      	mov	r4, r8
     680:	465d      	mov	r5, fp
     682:	46b3      	mov	fp, r6
     684:	464e      	mov	r6, r9
			               tmp_buffer[i],
			               NVMCTRL_PAGE_SIZE,
			               NVMCTRL_CTRLA_CMD_RWWEEWP);
		}

	} while (row_end_addr < (wr_start_addr + length - 1));
     686:	192b      	adds	r3, r5, r4
     688:	3b01      	subs	r3, #1
     68a:	459a      	cmp	sl, r3
     68c:	d244      	bcs.n	718 <_rww_flash_write+0x120>
		row_start_addr = wr_start_addr & ~((NVMCTRL_PAGE_SIZE * NVMCTRL_ROW_PAGES) - 1);
     68e:	23ff      	movs	r3, #255	; 0xff
     690:	0022      	movs	r2, r4
     692:	439a      	bics	r2, r3
     694:	4691      	mov	r9, r2
		row_end_addr   = row_start_addr + NVMCTRL_ROW_PAGES * NVMCTRL_PAGE_SIZE - 1;
     696:	444b      	add	r3, r9
     698:	469a      	mov	sl, r3
     69a:	2380      	movs	r3, #128	; 0x80
     69c:	005b      	lsls	r3, r3, #1
     69e:	444b      	add	r3, r9
     6a0:	4698      	mov	r8, r3
     6a2:	0017      	movs	r7, r2
     6a4:	4642      	mov	r2, r8
     6a6:	9203      	str	r2, [sp, #12]
     6a8:	46a0      	mov	r8, r4
     6aa:	464c      	mov	r4, r9
     6ac:	46b1      	mov	r9, r6
     6ae:	465e      	mov	r6, fp
     6b0:	46ab      	mov	fp, r5
			_rww_flash_read(device, row_start_addr + i * NVMCTRL_PAGE_SIZE, tmp_buffer[i], NVMCTRL_PAGE_SIZE);
     6b2:	1b3a      	subs	r2, r7, r4
     6b4:	ab04      	add	r3, sp, #16
     6b6:	469c      	mov	ip, r3
     6b8:	4462      	add	r2, ip
     6ba:	2340      	movs	r3, #64	; 0x40
     6bc:	0039      	movs	r1, r7
     6be:	0030      	movs	r0, r6
     6c0:	4d1f      	ldr	r5, [pc, #124]	; (740 <_rww_flash_write+0x148>)
     6c2:	47a8      	blx	r5
     6c4:	3740      	adds	r7, #64	; 0x40
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
     6c6:	9b03      	ldr	r3, [sp, #12]
     6c8:	429f      	cmp	r7, r3
     6ca:	d1f2      	bne.n	6b2 <_rww_flash_write+0xba>
     6cc:	465d      	mov	r5, fp
     6ce:	46b3      	mov	fp, r6
     6d0:	464e      	mov	r6, r9
     6d2:	46a1      	mov	r9, r4
     6d4:	4644      	mov	r4, r8
		j = (wr_start_addr - row_start_addr) / NVMCTRL_PAGE_SIZE;
     6d6:	464b      	mov	r3, r9
     6d8:	1ae3      	subs	r3, r4, r3
     6da:	0999      	lsrs	r1, r3, #6
     6dc:	223f      	movs	r2, #63	; 0x3f
     6de:	4013      	ands	r3, r2
		while ((wr_start_addr <= row_end_addr) && (length > 0)) {
     6e0:	4554      	cmp	r4, sl
     6e2:	d8a6      	bhi.n	632 <_rww_flash_write+0x3a>
     6e4:	2d00      	cmp	r5, #0
     6e6:	d0a4      	beq.n	632 <_rww_flash_write+0x3a>
			k                = (k + 1) % NVMCTRL_PAGE_SIZE;
     6e8:	46bc      	mov	ip, r7
     6ea:	4657      	mov	r7, sl
			tmp_buffer[j][k] = *buffer;
     6ec:	018a      	lsls	r2, r1, #6
     6ee:	a804      	add	r0, sp, #16
     6f0:	4680      	mov	r8, r0
     6f2:	4442      	add	r2, r8
     6f4:	7830      	ldrb	r0, [r6, #0]
     6f6:	54d0      	strb	r0, [r2, r3]
			k                = (k + 1) % NVMCTRL_PAGE_SIZE;
     6f8:	3301      	adds	r3, #1
     6fa:	223f      	movs	r2, #63	; 0x3f
     6fc:	4013      	ands	r3, r2
				j++;
     6fe:	425a      	negs	r2, r3
     700:	415a      	adcs	r2, r3
     702:	1889      	adds	r1, r1, r2
			wr_start_addr++;
     704:	3401      	adds	r4, #1
			buffer++;
     706:	3601      	adds	r6, #1
			length--;
     708:	3d01      	subs	r5, #1
		while ((wr_start_addr <= row_end_addr) && (length > 0)) {
     70a:	42a7      	cmp	r7, r4
     70c:	d38f      	bcc.n	62e <_rww_flash_write+0x36>
     70e:	2d00      	cmp	r5, #0
     710:	d1ec      	bne.n	6ec <_rww_flash_write+0xf4>
     712:	46ba      	mov	sl, r7
     714:	4667      	mov	r7, ip
     716:	e78c      	b.n	632 <_rww_flash_write+0x3a>

	return ERR_NONE;
     718:	2000      	movs	r0, #0
}
     71a:	b045      	add	sp, #276	; 0x114
     71c:	bc3c      	pop	{r2, r3, r4, r5}
     71e:	4690      	mov	r8, r2
     720:	4699      	mov	r9, r3
     722:	46a2      	mov	sl, r4
     724:	46ab      	mov	fp, r5
     726:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ERR_BAD_ADDRESS;
     728:	200e      	movs	r0, #14
     72a:	4240      	negs	r0, r0
     72c:	e7f5      	b.n	71a <_rww_flash_write+0x122>
     72e:	200e      	movs	r0, #14
     730:	4240      	negs	r0, r0
     732:	e7f2      	b.n	71a <_rww_flash_write+0x122>
     734:	ffc00000 	.word	0xffc00000
     738:	ffffa51a 	.word	0xffffa51a
     73c:	00000455 	.word	0x00000455
     740:	000005c1 	.word	0x000005c1

00000744 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
     744:	4b04      	ldr	r3, [pc, #16]	; (758 <_osc32kctrl_init_sources+0x14>)
     746:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSC32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSC32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
     748:	21f8      	movs	r1, #248	; 0xf8
     74a:	0149      	lsls	r1, r1, #5
     74c:	400a      	ands	r2, r1
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
     74e:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     750:	2201      	movs	r2, #1
     752:	611a      	str	r2, [r3, #16]
		;
#endif
#endif
	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
     754:	4770      	bx	lr
     756:	46c0      	nop			; (mov r8, r8)
     758:	40001000 	.word	0x40001000

0000075c <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_OSC16MCTRL_reg(const void *const hw, hri_oscctrl_osc16mctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC16MCTRL.reg = data;
     75c:	2282      	movs	r2, #130	; 0x82
     75e:	4b0c      	ldr	r3, [pc, #48]	; (790 <_oscctrl_init_sources+0x34>)
     760:	751a      	strb	r2, [r3, #20]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
     762:	0018      	movs	r0, r3
     764:	2138      	movs	r1, #56	; 0x38
     766:	3a80      	subs	r2, #128	; 0x80
     768:	5c43      	ldrb	r3, [r0, r1]
     76a:	4213      	tst	r3, r2
     76c:	d1fc      	bne.n	768 <_oscctrl_init_sources+0xc>
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC16MRDY) >> OSCCTRL_STATUS_OSC16MRDY_Pos;
     76e:	4908      	ldr	r1, [pc, #32]	; (790 <_oscctrl_init_sources+0x34>)
#endif
#endif

#if CONF_OSC16M_CONFIG == 1
#if CONF_OSC16M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC16MRDY_bit(hw))
     770:	2210      	movs	r2, #16
     772:	68cb      	ldr	r3, [r1, #12]
     774:	421a      	tst	r2, r3
     776:	d0fc      	beq.n	772 <_oscctrl_init_sources+0x16>
	((Oscctrl *)hw)->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND;
     778:	4a05      	ldr	r2, [pc, #20]	; (790 <_oscctrl_init_sources+0x34>)
     77a:	7d13      	ldrb	r3, [r2, #20]
     77c:	2180      	movs	r1, #128	; 0x80
     77e:	430b      	orrs	r3, r1
     780:	7513      	strb	r3, [r2, #20]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
     782:	0010      	movs	r0, r2
     784:	3948      	subs	r1, #72	; 0x48
     786:	220e      	movs	r2, #14
     788:	5c43      	ldrb	r3, [r0, r1]
     78a:	4213      	tst	r3, r2
     78c:	d1fc      	bne.n	788 <_oscctrl_init_sources+0x2c>
#if CONF_OSC16M_ONDEMAND == 1
	hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
     78e:	4770      	bx	lr
     790:	40000c00 	.word	0x40000c00

00000794 <_oscctrl_init_referenced_generators>:
#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
		;
#endif
	(void)hw, (void)tmp;
}
     794:	4770      	bx	lr

00000796 <_set_performance_level>:
}

static inline hri_pm_plcfg_reg_t hri_pm_get_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Pm *)hw)->PLCFG.reg;
     796:	2380      	movs	r3, #128	; 0x80
     798:	05db      	lsls	r3, r3, #23
     79a:	789b      	ldrb	r3, [r3, #2]
/**
 * \brief Set performance level
 */
void _set_performance_level(const uint8_t level)
{
	if (hri_pm_get_PLCFG_PLSEL_bf(PM, PM_PLCFG_PLSEL_Msk) != level) {
     79c:	2203      	movs	r2, #3
     79e:	4013      	ands	r3, r2
     7a0:	4298      	cmp	r0, r3
     7a2:	d00c      	beq.n	7be <_set_performance_level+0x28>
	((Pm *)hw)->INTFLAG.reg = mask;
     7a4:	2280      	movs	r2, #128	; 0x80
     7a6:	05d2      	lsls	r2, r2, #23
     7a8:	23ff      	movs	r3, #255	; 0xff
     7aa:	7193      	strb	r3, [r2, #6]

static inline void hri_pm_write_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t data)
{
	uint8_t tmp;
	PM_CRITICAL_SECTION_ENTER();
	tmp = ((Pm *)hw)->PLCFG.reg;
     7ac:	7893      	ldrb	r3, [r2, #2]
	tmp &= ~PM_PLCFG_PLSEL_Msk;
     7ae:	2103      	movs	r1, #3
     7b0:	438b      	bics	r3, r1
	tmp |= PM_PLCFG_PLSEL(data);
     7b2:	4008      	ands	r0, r1
     7b4:	4318      	orrs	r0, r3
	((Pm *)hw)->PLCFG.reg = tmp;
     7b6:	7090      	strb	r0, [r2, #2]
	return ((Pm *)hw)->INTFLAG.reg;
     7b8:	7993      	ldrb	r3, [r2, #6]
		hri_pm_clear_INTFLAG_reg(PM, 0xFF);
		hri_pm_write_PLCFG_PLSEL_bf(PM, level);
		while (!hri_pm_read_INTFLAG_reg(PM))
     7ba:	2b00      	cmp	r3, #0
     7bc:	d0fc      	beq.n	7b8 <_set_performance_level+0x22>
			;
	}
}
     7be:	4770      	bx	lr

000007c0 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
     7c0:	4b02      	ldr	r3, [pc, #8]	; (7cc <_delay_init+0xc>)
     7c2:	4a03      	ldr	r2, [pc, #12]	; (7d0 <_delay_init+0x10>)
     7c4:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
     7c6:	2205      	movs	r2, #5
     7c8:	601a      	str	r2, [r3, #0]
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
	_system_time_init(hw);
}
     7ca:	4770      	bx	lr
     7cc:	e000e010 	.word	0xe000e010
     7d0:	00ffffff 	.word	0x00ffffff

000007d4 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
     7d4:	b570      	push	{r4, r5, r6, lr}
	(void)hw;
	uint8_t  n   = cycles >> 24;
     7d6:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
     7d8:	1e5e      	subs	r6, r3, #1
     7da:	b2f6      	uxtb	r6, r6
     7dc:	2b00      	cmp	r3, #0
     7de:	d013      	beq.n	808 <_delay_cycles+0x34>
     7e0:	0034      	movs	r4, r6
		SysTick->LOAD = 0xFFFFFF;
     7e2:	4a0e      	ldr	r2, [pc, #56]	; (81c <_delay_cycles+0x48>)
     7e4:	4d0e      	ldr	r5, [pc, #56]	; (820 <_delay_cycles+0x4c>)
		SysTick->VAL  = 0xFFFFFF;
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
     7e6:	2080      	movs	r0, #128	; 0x80
     7e8:	0240      	lsls	r0, r0, #9
		SysTick->LOAD = 0xFFFFFF;
     7ea:	6055      	str	r5, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
     7ec:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
     7ee:	6813      	ldr	r3, [r2, #0]
     7f0:	4203      	tst	r3, r0
     7f2:	d0fc      	beq.n	7ee <_delay_cycles+0x1a>
	while (n--) {
     7f4:	3c01      	subs	r4, #1
     7f6:	b2e4      	uxtb	r4, r4
     7f8:	2cff      	cmp	r4, #255	; 0xff
     7fa:	d1f6      	bne.n	7ea <_delay_cycles+0x16>
     7fc:	0633      	lsls	r3, r6, #24
     7fe:	1af6      	subs	r6, r6, r3
     800:	4b08      	ldr	r3, [pc, #32]	; (824 <_delay_cycles+0x50>)
     802:	469c      	mov	ip, r3
     804:	4461      	add	r1, ip
     806:	1871      	adds	r1, r6, r1
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
     808:	4b04      	ldr	r3, [pc, #16]	; (81c <_delay_cycles+0x48>)
     80a:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
     80c:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
     80e:	0019      	movs	r1, r3
     810:	2280      	movs	r2, #128	; 0x80
     812:	0252      	lsls	r2, r2, #9
     814:	680b      	ldr	r3, [r1, #0]
     816:	4213      	tst	r3, r2
     818:	d0fc      	beq.n	814 <_delay_cycles+0x40>
		;
}
     81a:	bd70      	pop	{r4, r5, r6, pc}
     81c:	e000e010 	.word	0xe000e010
     820:	00ffffff 	.word	0x00ffffff
     824:	ff000001 	.word	0xff000001

00000828 <aes_measurement>:
static uint8_t iv[16] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };
static uint8_t iv2[16] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f }; /*(This is same but needed for decryption. Note: AES Module was not doing decryption without iv2  )*/


void aes_measurement(void)
{
     828:	b5f0      	push	{r4, r5, r6, r7, lr}
     82a:	46de      	mov	lr, fp
     82c:	4657      	mov	r7, sl
     82e:	464e      	mov	r6, r9
     830:	4645      	mov	r5, r8
     832:	b5e0      	push	{r5, r6, r7, lr}
     834:	b085      	sub	sp, #20
		0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff
	};*/
	static mbedtls_aes_context aes;
	static mbedtls_aes_context aes2;	
	
	mbedtls_aes_setkey_enc( &aes, key_128, 128 );
     836:	4c89      	ldr	r4, [pc, #548]	; (a5c <aes_measurement+0x234>)
     838:	2280      	movs	r2, #128	; 0x80
     83a:	0021      	movs	r1, r4
     83c:	4888      	ldr	r0, [pc, #544]	; (a60 <aes_measurement+0x238>)
     83e:	4b89      	ldr	r3, [pc, #548]	; (a64 <aes_measurement+0x23c>)
     840:	4798      	blx	r3
	mbedtls_aes_setkey_dec( &aes2, key_128, 128 );
     842:	2280      	movs	r2, #128	; 0x80
     844:	0021      	movs	r1, r4
     846:	4888      	ldr	r0, [pc, #544]	; (a68 <aes_measurement+0x240>)
     848:	3018      	adds	r0, #24
     84a:	4b88      	ldr	r3, [pc, #544]	; (a6c <aes_measurement+0x244>)
     84c:	4798      	blx	r3
	
	// Allocate buffer memory
	uint8_t *input = malloc(sizeof(uint8_t) * MAX_NUM_BYTES);
     84e:	4888      	ldr	r0, [pc, #544]	; (a70 <aes_measurement+0x248>)
     850:	4b88      	ldr	r3, [pc, #544]	; (a74 <aes_measurement+0x24c>)
     852:	4798      	blx	r3
     854:	0004      	movs	r4, r0
	// Allocate buffer memory
	uint8_t *output = malloc(sizeof(uint8_t) * MAX_NUM_BYTES);
	//uint8_t output[MAX_NUM_BYTES];


    delay_ms(10);
     856:	200a      	movs	r0, #10
     858:	4b87      	ldr	r3, [pc, #540]	; (a78 <aes_measurement+0x250>)
     85a:	4798      	blx	r3
     85c:	2720      	movs	r7, #32
     85e:	2510      	movs	r5, #16
	

		// Start decryption
		START_MEASURE(DGI_GPIO2);
		/*decrypt*/
		mbedtls_aes_crypt_cbc( &aes2, MBEDTLS_AES_DECRYPT, num_bytes, iv2, input, input);
     860:	4b86      	ldr	r3, [pc, #536]	; (a7c <aes_measurement+0x254>)
     862:	3310      	adds	r3, #16
     864:	9302      	str	r3, [sp, #8]
     866:	4b80      	ldr	r3, [pc, #512]	; (a68 <aes_measurement+0x240>)
     868:	3318      	adds	r3, #24
     86a:	9303      	str	r3, [sp, #12]
     86c:	46b8      	mov	r8, r7
     86e:	e089      	b.n	984 <aes_measurement+0x15c>
		START_MEASURE(DGI_GPIO2);
     870:	2002      	movs	r0, #2
     872:	4b81      	ldr	r3, [pc, #516]	; (a78 <aes_measurement+0x250>)
     874:	4699      	mov	r9, r3
     876:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     878:	27c0      	movs	r7, #192	; 0xc0
     87a:	05ff      	lsls	r7, r7, #23
     87c:	2380      	movs	r3, #128	; 0x80
     87e:	035b      	lsls	r3, r3, #13
     880:	469a      	mov	sl, r3
     882:	61bb      	str	r3, [r7, #24]
		mbedtls_aes_crypt_cbc( &aes, MBEDTLS_AES_ENCRYPT, num_bytes, iv, input, input);
     884:	9401      	str	r4, [sp, #4]
     886:	9400      	str	r4, [sp, #0]
     888:	4b7c      	ldr	r3, [pc, #496]	; (a7c <aes_measurement+0x254>)
     88a:	2200      	movs	r2, #0
     88c:	2101      	movs	r1, #1
     88e:	4874      	ldr	r0, [pc, #464]	; (a60 <aes_measurement+0x238>)
     890:	4e7b      	ldr	r6, [pc, #492]	; (a80 <aes_measurement+0x258>)
     892:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     894:	4653      	mov	r3, sl
     896:	617b      	str	r3, [r7, #20]
		STOP_MEASURE(DGI_GPIO2);
     898:	2002      	movs	r0, #2
     89a:	47c8      	blx	r9
		START_MEASURE(DGI_GPIO3);
     89c:	2002      	movs	r0, #2
     89e:	47c8      	blx	r9
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     8a0:	2380      	movs	r3, #128	; 0x80
     8a2:	039b      	lsls	r3, r3, #14
     8a4:	61bb      	str	r3, [r7, #24]
		if (_rww_flash_write(&FLASH_0.dev, NVMCTRL_RWW_EEPROM_ADDR, input, num_bytes ) != ERR_NONE) {
     8a6:	2300      	movs	r3, #0
     8a8:	0022      	movs	r2, r4
     8aa:	2180      	movs	r1, #128	; 0x80
     8ac:	03c9      	lsls	r1, r1, #15
     8ae:	4875      	ldr	r0, [pc, #468]	; (a84 <aes_measurement+0x25c>)
     8b0:	4f75      	ldr	r7, [pc, #468]	; (a88 <aes_measurement+0x260>)
     8b2:	47b8      	blx	r7
     8b4:	2800      	cmp	r0, #0
     8b6:	d000      	beq.n	8ba <aes_measurement+0x92>
     8b8:	e0ce      	b.n	a58 <aes_measurement+0x230>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     8ba:	23c0      	movs	r3, #192	; 0xc0
     8bc:	05db      	lsls	r3, r3, #23
     8be:	4699      	mov	r9, r3
     8c0:	2380      	movs	r3, #128	; 0x80
     8c2:	039b      	lsls	r3, r3, #14
     8c4:	469a      	mov	sl, r3
     8c6:	464b      	mov	r3, r9
     8c8:	4652      	mov	r2, sl
     8ca:	615a      	str	r2, [r3, #20]
		STOP_MEASURE(DGI_GPIO3);
     8cc:	2002      	movs	r0, #2
     8ce:	4f6a      	ldr	r7, [pc, #424]	; (a78 <aes_measurement+0x250>)
     8d0:	47b8      	blx	r7
		SLEEP
     8d2:	2002      	movs	r0, #2
     8d4:	47b8      	blx	r7
		START_MEASURE(DGI_GPIO3);
     8d6:	2002      	movs	r0, #2
     8d8:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     8da:	464b      	mov	r3, r9
     8dc:	4652      	mov	r2, sl
     8de:	619a      	str	r2, [r3, #24]
		if (_rww_flash_read(&FLASH_0.dev, NVMCTRL_RWW_EEPROM_ADDR, input, num_bytes) != ERR_NONE) {
     8e0:	2300      	movs	r3, #0
     8e2:	0022      	movs	r2, r4
     8e4:	2180      	movs	r1, #128	; 0x80
     8e6:	03c9      	lsls	r1, r1, #15
     8e8:	4866      	ldr	r0, [pc, #408]	; (a84 <aes_measurement+0x25c>)
     8ea:	4f68      	ldr	r7, [pc, #416]	; (a8c <aes_measurement+0x264>)
     8ec:	47b8      	blx	r7
     8ee:	2800      	cmp	r0, #0
     8f0:	d121      	bne.n	936 <aes_measurement+0x10e>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     8f2:	23c0      	movs	r3, #192	; 0xc0
     8f4:	05db      	lsls	r3, r3, #23
     8f6:	4699      	mov	r9, r3
     8f8:	2380      	movs	r3, #128	; 0x80
     8fa:	039b      	lsls	r3, r3, #14
     8fc:	464a      	mov	r2, r9
     8fe:	6153      	str	r3, [r2, #20]
		STOP_MEASURE(DGI_GPIO3);
     900:	2002      	movs	r0, #2
     902:	4f5d      	ldr	r7, [pc, #372]	; (a78 <aes_measurement+0x250>)
     904:	47b8      	blx	r7
		START_MEASURE(DGI_GPIO2);
     906:	2002      	movs	r0, #2
     908:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     90a:	2380      	movs	r3, #128	; 0x80
     90c:	035b      	lsls	r3, r3, #13
     90e:	469a      	mov	sl, r3
     910:	464b      	mov	r3, r9
     912:	4652      	mov	r2, sl
     914:	619a      	str	r2, [r3, #24]
		mbedtls_aes_crypt_cbc( &aes2, MBEDTLS_AES_DECRYPT, num_bytes, iv2, input, input);
     916:	9401      	str	r4, [sp, #4]
     918:	9400      	str	r4, [sp, #0]
     91a:	4b58      	ldr	r3, [pc, #352]	; (a7c <aes_measurement+0x254>)
     91c:	3310      	adds	r3, #16
     91e:	2200      	movs	r2, #0
     920:	2100      	movs	r1, #0
     922:	4851      	ldr	r0, [pc, #324]	; (a68 <aes_measurement+0x240>)
     924:	3018      	adds	r0, #24
     926:	4e56      	ldr	r6, [pc, #344]	; (a80 <aes_measurement+0x258>)
     928:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     92a:	464b      	mov	r3, r9
     92c:	4652      	mov	r2, sl
     92e:	615a      	str	r2, [r3, #20]
		STOP_MEASURE(DGI_GPIO2);
     930:	2002      	movs	r0, #2
     932:	47b8      	blx	r7
     934:	e022      	b.n	97c <aes_measurement+0x154>
     936:	e073      	b.n	a20 <aes_measurement+0x1f8>
     938:	23c0      	movs	r3, #192	; 0xc0
     93a:	05db      	lsls	r3, r3, #23
     93c:	4699      	mov	r9, r3
     93e:	2380      	movs	r3, #128	; 0x80
     940:	039b      	lsls	r3, r3, #14
     942:	464a      	mov	r2, r9
     944:	6153      	str	r3, [r2, #20]
		STOP_MEASURE(DGI_GPIO3);
     946:	2002      	movs	r0, #2
     948:	4f4b      	ldr	r7, [pc, #300]	; (a78 <aes_measurement+0x250>)
     94a:	47b8      	blx	r7
		START_MEASURE(DGI_GPIO2);
     94c:	2002      	movs	r0, #2
     94e:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     950:	2380      	movs	r3, #128	; 0x80
     952:	035b      	lsls	r3, r3, #13
     954:	469a      	mov	sl, r3
     956:	464b      	mov	r3, r9
     958:	4652      	mov	r2, sl
     95a:	619a      	str	r2, [r3, #24]
		mbedtls_aes_crypt_cbc( &aes2, MBEDTLS_AES_DECRYPT, num_bytes, iv2, input, input);
     95c:	9401      	str	r4, [sp, #4]
     95e:	9400      	str	r4, [sp, #0]
     960:	9b02      	ldr	r3, [sp, #8]
     962:	002a      	movs	r2, r5
     964:	2100      	movs	r1, #0
     966:	9803      	ldr	r0, [sp, #12]
     968:	4e45      	ldr	r6, [pc, #276]	; (a80 <aes_measurement+0x258>)
     96a:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     96c:	464b      	mov	r3, r9
     96e:	4652      	mov	r2, sl
     970:	615a      	str	r2, [r3, #20]
		STOP_MEASURE(DGI_GPIO2);
     972:	2002      	movs	r0, #2
     974:	47b8      	blx	r7
	for (size_t num_bytes = MIN_NUM_BYTES; num_bytes <= MAX_NUM_BYTES; num_bytes += STEP_SIZE) {
     976:	4b3e      	ldr	r3, [pc, #248]	; (a70 <aes_measurement+0x248>)
     978:	4598      	cmp	r8, r3
     97a:	d852      	bhi.n	a22 <aes_measurement+0x1fa>
     97c:	3510      	adds	r5, #16
     97e:	2310      	movs	r3, #16
     980:	469c      	mov	ip, r3
     982:	44e0      	add	r8, ip
		for (size_t byte = 0; byte < num_bytes; byte++) {
     984:	2300      	movs	r3, #0
     986:	2d00      	cmp	r5, #0
     988:	d100      	bne.n	98c <aes_measurement+0x164>
     98a:	e771      	b.n	870 <aes_measurement+0x48>
			input[byte] = byte; // 0x00 to write 0's OR 0xFF to write 1's.
     98c:	54e3      	strb	r3, [r4, r3]
		for (size_t byte = 0; byte < num_bytes; byte++) {
     98e:	3301      	adds	r3, #1
     990:	429d      	cmp	r5, r3
     992:	d1fb      	bne.n	98c <aes_measurement+0x164>
		START_MEASURE(DGI_GPIO2);
     994:	2002      	movs	r0, #2
     996:	4b38      	ldr	r3, [pc, #224]	; (a78 <aes_measurement+0x250>)
     998:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     99a:	27c0      	movs	r7, #192	; 0xc0
     99c:	05ff      	lsls	r7, r7, #23
     99e:	2380      	movs	r3, #128	; 0x80
     9a0:	035b      	lsls	r3, r3, #13
     9a2:	4699      	mov	r9, r3
     9a4:	61bb      	str	r3, [r7, #24]
		mbedtls_aes_crypt_cbc( &aes, MBEDTLS_AES_ENCRYPT, num_bytes, iv, input, input);
     9a6:	9401      	str	r4, [sp, #4]
     9a8:	9400      	str	r4, [sp, #0]
     9aa:	4b34      	ldr	r3, [pc, #208]	; (a7c <aes_measurement+0x254>)
     9ac:	002a      	movs	r2, r5
     9ae:	2101      	movs	r1, #1
     9b0:	482b      	ldr	r0, [pc, #172]	; (a60 <aes_measurement+0x238>)
     9b2:	4e33      	ldr	r6, [pc, #204]	; (a80 <aes_measurement+0x258>)
     9b4:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9b6:	464b      	mov	r3, r9
     9b8:	617b      	str	r3, [r7, #20]
		STOP_MEASURE(DGI_GPIO2);
     9ba:	2002      	movs	r0, #2
     9bc:	4b2e      	ldr	r3, [pc, #184]	; (a78 <aes_measurement+0x250>)
     9be:	4798      	blx	r3
		START_MEASURE(DGI_GPIO3);
     9c0:	2002      	movs	r0, #2
     9c2:	4b2d      	ldr	r3, [pc, #180]	; (a78 <aes_measurement+0x250>)
     9c4:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     9c6:	2380      	movs	r3, #128	; 0x80
     9c8:	039b      	lsls	r3, r3, #14
     9ca:	61bb      	str	r3, [r7, #24]
		if (_rww_flash_write(&FLASH_0.dev, NVMCTRL_RWW_EEPROM_ADDR, input, num_bytes ) != ERR_NONE) {
     9cc:	002b      	movs	r3, r5
     9ce:	0022      	movs	r2, r4
     9d0:	2180      	movs	r1, #128	; 0x80
     9d2:	03c9      	lsls	r1, r1, #15
     9d4:	482b      	ldr	r0, [pc, #172]	; (a84 <aes_measurement+0x25c>)
     9d6:	4f2c      	ldr	r7, [pc, #176]	; (a88 <aes_measurement+0x260>)
     9d8:	47b8      	blx	r7
     9da:	2800      	cmp	r0, #0
     9dc:	d13c      	bne.n	a58 <aes_measurement+0x230>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9de:	2280      	movs	r2, #128	; 0x80
     9e0:	0392      	lsls	r2, r2, #14
     9e2:	23c0      	movs	r3, #192	; 0xc0
     9e4:	05db      	lsls	r3, r3, #23
     9e6:	615a      	str	r2, [r3, #20]
		STOP_MEASURE(DGI_GPIO3);
     9e8:	2002      	movs	r0, #2
     9ea:	4f23      	ldr	r7, [pc, #140]	; (a78 <aes_measurement+0x250>)
     9ec:	47b8      	blx	r7
		SLEEP
     9ee:	2002      	movs	r0, #2
     9f0:	47b8      	blx	r7
     9f2:	2300      	movs	r3, #0
			input[byte] = 0xfe;
     9f4:	22fe      	movs	r2, #254	; 0xfe
     9f6:	54e2      	strb	r2, [r4, r3]
		for (size_t byte = 0; byte < num_bytes; byte++) {
     9f8:	3301      	adds	r3, #1
     9fa:	429d      	cmp	r5, r3
     9fc:	d8fb      	bhi.n	9f6 <aes_measurement+0x1ce>
		START_MEASURE(DGI_GPIO3);
     9fe:	2002      	movs	r0, #2
     a00:	4b1d      	ldr	r3, [pc, #116]	; (a78 <aes_measurement+0x250>)
     a02:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     a04:	2280      	movs	r2, #128	; 0x80
     a06:	0392      	lsls	r2, r2, #14
     a08:	23c0      	movs	r3, #192	; 0xc0
     a0a:	05db      	lsls	r3, r3, #23
     a0c:	619a      	str	r2, [r3, #24]
		if (_rww_flash_read(&FLASH_0.dev, NVMCTRL_RWW_EEPROM_ADDR, input, num_bytes) != ERR_NONE) {
     a0e:	002b      	movs	r3, r5
     a10:	0022      	movs	r2, r4
     a12:	2180      	movs	r1, #128	; 0x80
     a14:	03c9      	lsls	r1, r1, #15
     a16:	481b      	ldr	r0, [pc, #108]	; (a84 <aes_measurement+0x25c>)
     a18:	4f1c      	ldr	r7, [pc, #112]	; (a8c <aes_measurement+0x264>)
     a1a:	47b8      	blx	r7
     a1c:	2800      	cmp	r0, #0
     a1e:	d08b      	beq.n	938 <aes_measurement+0x110>
     a20:	e7fe      	b.n	a20 <aes_measurement+0x1f8>
		}*/
		
		
	}
		// Free the memory
		free(input); free(output);
     a22:	0020      	movs	r0, r4
     a24:	4b1a      	ldr	r3, [pc, #104]	; (a90 <aes_measurement+0x268>)
     a26:	4798      	blx	r3

		END_MEASUREMENT;
     a28:	200a      	movs	r0, #10
     a2a:	4b13      	ldr	r3, [pc, #76]	; (a78 <aes_measurement+0x250>)
     a2c:	4798      	blx	r3
     a2e:	23c0      	movs	r3, #192	; 0xc0
     a30:	05db      	lsls	r3, r3, #23
     a32:	2102      	movs	r1, #2
     a34:	2298      	movs	r2, #152	; 0x98
     a36:	5099      	str	r1, [r3, r2]
     a38:	2280      	movs	r2, #128	; 0x80
     a3a:	0252      	lsls	r2, r2, #9
     a3c:	619a      	str	r2, [r3, #24]
     a3e:	2280      	movs	r2, #128	; 0x80
     a40:	0352      	lsls	r2, r2, #13
     a42:	619a      	str	r2, [r3, #24]
     a44:	2280      	movs	r2, #128	; 0x80
     a46:	0392      	lsls	r2, r2, #14
     a48:	619a      	str	r2, [r3, #24]
}
     a4a:	b005      	add	sp, #20
     a4c:	bc3c      	pop	{r2, r3, r4, r5}
     a4e:	4690      	mov	r8, r2
     a50:	4699      	mov	r9, r3
     a52:	46a2      	mov	sl, r4
     a54:	46ab      	mov	fp, r5
     a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a58:	e7fe      	b.n	a58 <aes_measurement+0x230>
     a5a:	46c0      	nop			; (mov r8, r8)
     a5c:	000019dc 	.word	0x000019dc
     a60:	200000b0 	.word	0x200000b0
     a64:	00000ad5 	.word	0x00000ad5
     a68:	200001b0 	.word	0x200001b0
     a6c:	00000c85 	.word	0x00000c85
     a70:	00001770 	.word	0x00001770
     a74:	000017e1 	.word	0x000017e1
     a78:	00000325 	.word	0x00000325
     a7c:	20000000 	.word	0x20000000
     a80:	000016c1 	.word	0x000016c1
     a84:	200002e8 	.word	0x200002e8
     a88:	000005f9 	.word	0x000005f9
     a8c:	000005c1 	.word	0x000005c1
     a90:	000017f5 	.word	0x000017f5

00000a94 <main>:

int main(void)
{
     a94:	b510      	push	{r4, lr}
	atmel_start_init();
     a96:	4b03      	ldr	r3, [pc, #12]	; (aa4 <main+0x10>)
     a98:	4798      	blx	r3
	
	// Start measurements
	aes_measurement();
     a9a:	4b03      	ldr	r3, [pc, #12]	; (aa8 <main+0x14>)
     a9c:	4798      	blx	r3
	/*while (true) {
		delay_ms(500);
		gpio_toggle_pin_level(LED0);
	}*/
	
     a9e:	2000      	movs	r0, #0
     aa0:	bd10      	pop	{r4, pc}
     aa2:	46c0      	nop			; (mov r8, r8)
     aa4:	00000115 	.word	0x00000115
     aa8:	00000829 	.word	0x00000829

00000aac <mbedtls_aes_init>:
#define AES_FT3(idx) FT3[idx]

#endif /* MBEDTLS_AES_FEWER_TABLES */

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
     aac:	b510      	push	{r4, lr}
    AES_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
     aae:	228c      	movs	r2, #140	; 0x8c
     ab0:	0052      	lsls	r2, r2, #1
     ab2:	2100      	movs	r1, #0
     ab4:	4b01      	ldr	r3, [pc, #4]	; (abc <mbedtls_aes_init+0x10>)
     ab6:	4798      	blx	r3
}
     ab8:	bd10      	pop	{r4, pc}
     aba:	46c0      	nop			; (mov r8, r8)
     abc:	0000181b 	.word	0x0000181b

00000ac0 <mbedtls_aes_free>:

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
     ac0:	b510      	push	{r4, lr}
    if( ctx == NULL )
     ac2:	2800      	cmp	r0, #0
     ac4:	d003      	beq.n	ace <mbedtls_aes_free+0xe>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_aes_context ) );
     ac6:	218c      	movs	r1, #140	; 0x8c
     ac8:	0049      	lsls	r1, r1, #1
     aca:	4b01      	ldr	r3, [pc, #4]	; (ad0 <mbedtls_aes_free+0x10>)
     acc:	4798      	blx	r3
}
     ace:	bd10      	pop	{r4, pc}
     ad0:	00001785 	.word	0x00001785

00000ad4 <mbedtls_aes_setkey_enc>:
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
     ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
     ad6:	46c6      	mov	lr, r8
     ad8:	b500      	push	{lr}
    uint32_t *RK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    switch( keybits )
     ada:	2ac0      	cmp	r2, #192	; 0xc0
     adc:	d02a      	beq.n	b34 <mbedtls_aes_setkey_enc+0x60>
     ade:	2380      	movs	r3, #128	; 0x80
     ae0:	005b      	lsls	r3, r3, #1
     ae2:	429a      	cmp	r2, r3
     ae4:	d029      	beq.n	b3a <mbedtls_aes_setkey_enc+0x66>
     ae6:	2a80      	cmp	r2, #128	; 0x80
     ae8:	d004      	beq.n	af4 <mbedtls_aes_setkey_enc+0x20>
    {
        case 128: ctx->nr = 10; break;
        case 192: ctx->nr = 12; break;
        case 256: ctx->nr = 14; break;
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
     aea:	2020      	movs	r0, #32
     aec:	4240      	negs	r0, r0
            }
            break;
    }

    return( 0 );
}
     aee:	bc04      	pop	{r2}
     af0:	4690      	mov	r8, r2
     af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case 128: ctx->nr = 10; break;
     af4:	3bf6      	subs	r3, #246	; 0xf6
     af6:	6003      	str	r3, [r0, #0]
    ctx->rk = RK = ctx->buf;
     af8:	0004      	movs	r4, r0
     afa:	3408      	adds	r4, #8
     afc:	6044      	str	r4, [r0, #4]
    for( i = 0; i < ( keybits >> 5 ); i++ )
     afe:	0952      	lsrs	r2, r2, #5
     b00:	0027      	movs	r7, r4
     b02:	2600      	movs	r6, #0
        GET_UINT32_LE( RK[i], key, i << 2 );
     b04:	784b      	ldrb	r3, [r1, #1]
     b06:	021b      	lsls	r3, r3, #8
     b08:	788d      	ldrb	r5, [r1, #2]
     b0a:	042d      	lsls	r5, r5, #16
     b0c:	432b      	orrs	r3, r5
     b0e:	780d      	ldrb	r5, [r1, #0]
     b10:	432b      	orrs	r3, r5
     b12:	78cd      	ldrb	r5, [r1, #3]
     b14:	062d      	lsls	r5, r5, #24
     b16:	432b      	orrs	r3, r5
     b18:	c708      	stmia	r7!, {r3}
    for( i = 0; i < ( keybits >> 5 ); i++ )
     b1a:	3601      	adds	r6, #1
     b1c:	3104      	adds	r1, #4
     b1e:	4296      	cmp	r6, r2
     b20:	d3f0      	bcc.n	b04 <mbedtls_aes_setkey_enc+0x30>
    switch( ctx->nr )
     b22:	6803      	ldr	r3, [r0, #0]
     b24:	2b0c      	cmp	r3, #12
     b26:	d034      	beq.n	b92 <mbedtls_aes_setkey_enc+0xbe>
     b28:	2b0e      	cmp	r3, #14
     b2a:	d061      	beq.n	bf0 <mbedtls_aes_setkey_enc+0x11c>
     b2c:	2b0a      	cmp	r3, #10
     b2e:	d007      	beq.n	b40 <mbedtls_aes_setkey_enc+0x6c>
    return( 0 );
     b30:	2000      	movs	r0, #0
     b32:	e7dc      	b.n	aee <mbedtls_aes_setkey_enc+0x1a>
        case 192: ctx->nr = 12; break;
     b34:	230c      	movs	r3, #12
     b36:	6003      	str	r3, [r0, #0]
     b38:	e7de      	b.n	af8 <mbedtls_aes_setkey_enc+0x24>
        case 256: ctx->nr = 14; break;
     b3a:	230e      	movs	r3, #14
     b3c:	6003      	str	r3, [r0, #0]
     b3e:	e7db      	b.n	af8 <mbedtls_aes_setkey_enc+0x24>
     b40:	4d4f      	ldr	r5, [pc, #316]	; (c80 <mbedtls_aes_setkey_enc+0x1ac>)
     b42:	30a8      	adds	r0, #168	; 0xa8
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
     b44:	21ff      	movs	r1, #255	; 0xff
     b46:	002a      	movs	r2, r5
     b48:	3228      	adds	r2, #40	; 0x28
     b4a:	68e6      	ldr	r6, [r4, #12]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
     b4c:	cd08      	ldmia	r5!, {r3}
     b4e:	6827      	ldr	r7, [r4, #0]
     b50:	407b      	eors	r3, r7
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
     b52:	0a37      	lsrs	r7, r6, #8
     b54:	400f      	ands	r7, r1
     b56:	5dd7      	ldrb	r7, [r2, r7]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
     b58:	407b      	eors	r3, r7
     b5a:	0e37      	lsrs	r7, r6, #24
     b5c:	5dd7      	ldrb	r7, [r2, r7]
     b5e:	043f      	lsls	r7, r7, #16
     b60:	407b      	eors	r3, r7
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
     b62:	000f      	movs	r7, r1
     b64:	4037      	ands	r7, r6
     b66:	5dd7      	ldrb	r7, [r2, r7]
     b68:	063f      	lsls	r7, r7, #24
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
     b6a:	407b      	eors	r3, r7
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
     b6c:	0c37      	lsrs	r7, r6, #16
     b6e:	400f      	ands	r7, r1
     b70:	5dd7      	ldrb	r7, [r2, r7]
     b72:	023f      	lsls	r7, r7, #8
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
     b74:	407b      	eors	r3, r7
                RK[4]  = RK[0] ^ RCON[i] ^
     b76:	6123      	str	r3, [r4, #16]
                RK[5]  = RK[1] ^ RK[4];
     b78:	6867      	ldr	r7, [r4, #4]
     b7a:	407b      	eors	r3, r7
     b7c:	6163      	str	r3, [r4, #20]
                RK[6]  = RK[2] ^ RK[5];
     b7e:	68a7      	ldr	r7, [r4, #8]
     b80:	407b      	eors	r3, r7
     b82:	61a3      	str	r3, [r4, #24]
                RK[7]  = RK[3] ^ RK[6];
     b84:	4073      	eors	r3, r6
     b86:	61e3      	str	r3, [r4, #28]
            for( i = 0; i < 10; i++, RK += 4 )
     b88:	3410      	adds	r4, #16
     b8a:	4284      	cmp	r4, r0
     b8c:	d1dd      	bne.n	b4a <mbedtls_aes_setkey_enc+0x76>
    return( 0 );
     b8e:	2000      	movs	r0, #0
     b90:	e7ad      	b.n	aee <mbedtls_aes_setkey_enc+0x1a>
     b92:	4e3b      	ldr	r6, [pc, #236]	; (c80 <mbedtls_aes_setkey_enc+0x1ac>)
     b94:	30c8      	adds	r0, #200	; 0xc8
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
     b96:	25ff      	movs	r5, #255	; 0xff
     b98:	0031      	movs	r1, r6
     b9a:	3128      	adds	r1, #40	; 0x28
     b9c:	6962      	ldr	r2, [r4, #20]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
     b9e:	ce08      	ldmia	r6!, {r3}
     ba0:	6827      	ldr	r7, [r4, #0]
     ba2:	407b      	eors	r3, r7
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
     ba4:	0a17      	lsrs	r7, r2, #8
     ba6:	402f      	ands	r7, r5
     ba8:	5dcf      	ldrb	r7, [r1, r7]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
     baa:	407b      	eors	r3, r7
     bac:	0e17      	lsrs	r7, r2, #24
     bae:	5dcf      	ldrb	r7, [r1, r7]
     bb0:	043f      	lsls	r7, r7, #16
     bb2:	407b      	eors	r3, r7
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
     bb4:	002f      	movs	r7, r5
     bb6:	4017      	ands	r7, r2
     bb8:	5dcf      	ldrb	r7, [r1, r7]
     bba:	063f      	lsls	r7, r7, #24
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
     bbc:	407b      	eors	r3, r7
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
     bbe:	0c17      	lsrs	r7, r2, #16
     bc0:	402f      	ands	r7, r5
     bc2:	5dcf      	ldrb	r7, [r1, r7]
     bc4:	023f      	lsls	r7, r7, #8
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
     bc6:	407b      	eors	r3, r7
                RK[6]  = RK[0] ^ RCON[i] ^
     bc8:	61a3      	str	r3, [r4, #24]
                RK[7]  = RK[1] ^ RK[6];
     bca:	6867      	ldr	r7, [r4, #4]
     bcc:	407b      	eors	r3, r7
     bce:	61e3      	str	r3, [r4, #28]
                RK[8]  = RK[2] ^ RK[7];
     bd0:	68a7      	ldr	r7, [r4, #8]
     bd2:	407b      	eors	r3, r7
     bd4:	6223      	str	r3, [r4, #32]
                RK[9]  = RK[3] ^ RK[8];
     bd6:	68e7      	ldr	r7, [r4, #12]
     bd8:	407b      	eors	r3, r7
     bda:	6263      	str	r3, [r4, #36]	; 0x24
                RK[10] = RK[4] ^ RK[9];
     bdc:	6927      	ldr	r7, [r4, #16]
     bde:	407b      	eors	r3, r7
     be0:	62a3      	str	r3, [r4, #40]	; 0x28
                RK[11] = RK[5] ^ RK[10];
     be2:	4053      	eors	r3, r2
     be4:	62e3      	str	r3, [r4, #44]	; 0x2c
            for( i = 0; i < 8; i++, RK += 6 )
     be6:	3418      	adds	r4, #24
     be8:	4284      	cmp	r4, r0
     bea:	d1d7      	bne.n	b9c <mbedtls_aes_setkey_enc+0xc8>
    return( 0 );
     bec:	2000      	movs	r0, #0
     bee:	e77e      	b.n	aee <mbedtls_aes_setkey_enc+0x1a>
     bf0:	4e23      	ldr	r6, [pc, #140]	; (c80 <mbedtls_aes_setkey_enc+0x1ac>)
     bf2:	23e8      	movs	r3, #232	; 0xe8
     bf4:	4698      	mov	r8, r3
     bf6:	4480      	add	r8, r0
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
     bf8:	25ff      	movs	r5, #255	; 0xff
     bfa:	0032      	movs	r2, r6
     bfc:	3228      	adds	r2, #40	; 0x28
     bfe:	69e1      	ldr	r1, [r4, #28]
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
     c00:	ce08      	ldmia	r6!, {r3}
     c02:	6820      	ldr	r0, [r4, #0]
     c04:	4043      	eors	r3, r0
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
     c06:	0a0f      	lsrs	r7, r1, #8
     c08:	402f      	ands	r7, r5
     c0a:	5dd7      	ldrb	r7, [r2, r7]
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
     c0c:	407b      	eors	r3, r7
     c0e:	0e0f      	lsrs	r7, r1, #24
     c10:	5dd7      	ldrb	r7, [r2, r7]
     c12:	043f      	lsls	r7, r7, #16
     c14:	407b      	eors	r3, r7
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
     c16:	002f      	movs	r7, r5
     c18:	400f      	ands	r7, r1
     c1a:	5dd7      	ldrb	r7, [r2, r7]
     c1c:	063f      	lsls	r7, r7, #24
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
     c1e:	407b      	eors	r3, r7
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
     c20:	0c0f      	lsrs	r7, r1, #16
     c22:	402f      	ands	r7, r5
     c24:	5dd7      	ldrb	r7, [r2, r7]
     c26:	023f      	lsls	r7, r7, #8
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
     c28:	407b      	eors	r3, r7
                RK[8]  = RK[0] ^ RCON[i] ^
     c2a:	6223      	str	r3, [r4, #32]
                RK[9]  = RK[1] ^ RK[8];
     c2c:	6860      	ldr	r0, [r4, #4]
     c2e:	4043      	eors	r3, r0
     c30:	6263      	str	r3, [r4, #36]	; 0x24
                RK[10] = RK[2] ^ RK[9];
     c32:	68a0      	ldr	r0, [r4, #8]
     c34:	4043      	eors	r3, r0
     c36:	62a3      	str	r3, [r4, #40]	; 0x28
                RK[11] = RK[3] ^ RK[10];
     c38:	68e0      	ldr	r0, [r4, #12]
     c3a:	4043      	eors	r3, r0
     c3c:	62e3      	str	r3, [r4, #44]	; 0x2c
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
     c3e:	002f      	movs	r7, r5
     c40:	401f      	ands	r7, r3
     c42:	5dd7      	ldrb	r7, [r2, r7]
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
     c44:	6920      	ldr	r0, [r4, #16]
     c46:	4047      	eors	r7, r0
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
     c48:	0e18      	lsrs	r0, r3, #24
     c4a:	5c10      	ldrb	r0, [r2, r0]
     c4c:	0600      	lsls	r0, r0, #24
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
     c4e:	4047      	eors	r7, r0
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
     c50:	0a18      	lsrs	r0, r3, #8
     c52:	4028      	ands	r0, r5
     c54:	5c10      	ldrb	r0, [r2, r0]
     c56:	0200      	lsls	r0, r0, #8
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
     c58:	4047      	eors	r7, r0
     c5a:	0c1b      	lsrs	r3, r3, #16
     c5c:	402b      	ands	r3, r5
     c5e:	5cd3      	ldrb	r3, [r2, r3]
     c60:	041b      	lsls	r3, r3, #16
     c62:	407b      	eors	r3, r7
                RK[12] = RK[4] ^
     c64:	6323      	str	r3, [r4, #48]	; 0x30
                RK[13] = RK[5] ^ RK[12];
     c66:	6960      	ldr	r0, [r4, #20]
     c68:	4043      	eors	r3, r0
     c6a:	6363      	str	r3, [r4, #52]	; 0x34
                RK[14] = RK[6] ^ RK[13];
     c6c:	69a0      	ldr	r0, [r4, #24]
     c6e:	4043      	eors	r3, r0
     c70:	63a3      	str	r3, [r4, #56]	; 0x38
                RK[15] = RK[7] ^ RK[14];
     c72:	4059      	eors	r1, r3
     c74:	63e1      	str	r1, [r4, #60]	; 0x3c
            for( i = 0; i < 7; i++, RK += 8 )
     c76:	3420      	adds	r4, #32
     c78:	45a0      	cmp	r8, r4
     c7a:	d1c0      	bne.n	bfe <mbedtls_aes_setkey_enc+0x12a>
    return( 0 );
     c7c:	2000      	movs	r0, #0
     c7e:	e736      	b.n	aee <mbedtls_aes_setkey_enc+0x1a>
     c80:	000019ec 	.word	0x000019ec

00000c84 <mbedtls_aes_setkey_dec>:
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)
int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
     c84:	b5f0      	push	{r4, r5, r6, r7, lr}
     c86:	46de      	mov	lr, fp
     c88:	4657      	mov	r7, sl
     c8a:	464e      	mov	r6, r9
     c8c:	4645      	mov	r5, r8
     c8e:	b5e0      	push	{r5, r6, r7, lr}
     c90:	b0cd      	sub	sp, #308	; 0x134
     c92:	0004      	movs	r4, r0
     c94:	000d      	movs	r5, r1
     c96:	0016      	movs	r6, r2
    uint32_t *SK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    mbedtls_aes_init( &cty );
     c98:	a806      	add	r0, sp, #24
     c9a:	4b44      	ldr	r3, [pc, #272]	; (dac <mbedtls_aes_setkey_dec+0x128>)
     c9c:	4798      	blx	r3

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
     c9e:	0023      	movs	r3, r4
     ca0:	3308      	adds	r3, #8
     ca2:	6063      	str	r3, [r4, #4]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
     ca4:	0032      	movs	r2, r6
     ca6:	0029      	movs	r1, r5
     ca8:	a806      	add	r0, sp, #24
     caa:	4b41      	ldr	r3, [pc, #260]	; (db0 <mbedtls_aes_setkey_dec+0x12c>)
     cac:	4798      	blx	r3
     cae:	9003      	str	r0, [sp, #12]
     cb0:	2800      	cmp	r0, #0
     cb2:	d170      	bne.n	d96 <mbedtls_aes_setkey_dec+0x112>
        goto exit;

    ctx->nr = cty.nr;
     cb4:	9b06      	ldr	r3, [sp, #24]
     cb6:	001a      	movs	r2, r3
     cb8:	9304      	str	r3, [sp, #16]
     cba:	6023      	str	r3, [r4, #0]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
     cbc:	011b      	lsls	r3, r3, #4
     cbe:	0019      	movs	r1, r3
     cc0:	9305      	str	r3, [sp, #20]
     cc2:	9b07      	ldr	r3, [sp, #28]
     cc4:	468c      	mov	ip, r1
     cc6:	4463      	add	r3, ip

    *RK++ = *SK++;
     cc8:	6819      	ldr	r1, [r3, #0]
     cca:	60a1      	str	r1, [r4, #8]
    *RK++ = *SK++;
     ccc:	6859      	ldr	r1, [r3, #4]
     cce:	60e1      	str	r1, [r4, #12]
    *RK++ = *SK++;
     cd0:	6899      	ldr	r1, [r3, #8]
     cd2:	6121      	str	r1, [r4, #16]
    *RK++ = *SK++;
     cd4:	2118      	movs	r1, #24
     cd6:	468c      	mov	ip, r1
     cd8:	44a4      	add	ip, r4
     cda:	4661      	mov	r1, ip
     cdc:	9101      	str	r1, [sp, #4]
     cde:	68d8      	ldr	r0, [r3, #12]
     ce0:	6160      	str	r0, [r4, #20]

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
     ce2:	3a01      	subs	r2, #1
     ce4:	4693      	mov	fp, r2
     ce6:	3b10      	subs	r3, #16
     ce8:	9302      	str	r3, [sp, #8]
     cea:	001e      	movs	r6, r3
     cec:	4667      	mov	r7, ip
     cee:	2a00      	cmp	r2, #0
     cf0:	dd44      	ble.n	d7c <mbedtls_aes_setkey_dec+0xf8>
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
     cf2:	4b30      	ldr	r3, [pc, #192]	; (db4 <mbedtls_aes_setkey_dec+0x130>)
     cf4:	469a      	mov	sl, r3
     cf6:	25ff      	movs	r5, #255	; 0xff
     cf8:	4c2f      	ldr	r4, [pc, #188]	; (db8 <mbedtls_aes_setkey_dec+0x134>)
     cfa:	3428      	adds	r4, #40	; 0x28
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
     cfc:	4b2f      	ldr	r3, [pc, #188]	; (dbc <mbedtls_aes_setkey_dec+0x138>)
     cfe:	4699      	mov	r9, r3
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
     d00:	4b2f      	ldr	r3, [pc, #188]	; (dc0 <mbedtls_aes_setkey_dec+0x13c>)
     d02:	4698      	mov	r8, r3
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
     d04:	4b2f      	ldr	r3, [pc, #188]	; (dc4 <mbedtls_aes_setkey_dec+0x140>)
     d06:	9300      	str	r3, [sp, #0]
     d08:	e008      	b.n	d1c <mbedtls_aes_setkey_dec+0x98>
     d0a:	3710      	adds	r7, #16
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
     d0c:	2301      	movs	r3, #1
     d0e:	425b      	negs	r3, r3
     d10:	469c      	mov	ip, r3
     d12:	44e3      	add	fp, ip
     d14:	3e10      	subs	r6, #16
     d16:	465b      	mov	r3, fp
     d18:	2b00      	cmp	r3, #0
     d1a:	d022      	beq.n	d62 <mbedtls_aes_setkey_dec+0xde>
{
     d1c:	2100      	movs	r1, #0
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
     d1e:	5873      	ldr	r3, [r6, r1]
     d20:	002a      	movs	r2, r5
     d22:	401a      	ands	r2, r3
     d24:	5ca2      	ldrb	r2, [r4, r2]
     d26:	0092      	lsls	r2, r2, #2
     d28:	4452      	add	r2, sl
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
     d2a:	0e18      	lsrs	r0, r3, #24
     d2c:	5c20      	ldrb	r0, [r4, r0]
     d2e:	0080      	lsls	r0, r0, #2
     d30:	4448      	add	r0, r9
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
     d32:	6a92      	ldr	r2, [r2, #40]	; 0x28
     d34:	6a80      	ldr	r0, [r0, #40]	; 0x28
     d36:	4042      	eors	r2, r0
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
     d38:	0a18      	lsrs	r0, r3, #8
     d3a:	4028      	ands	r0, r5
     d3c:	5c20      	ldrb	r0, [r4, r0]
     d3e:	0080      	lsls	r0, r0, #2
     d40:	4440      	add	r0, r8
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
     d42:	6a80      	ldr	r0, [r0, #40]	; 0x28
     d44:	4042      	eors	r2, r0
     d46:	0c1b      	lsrs	r3, r3, #16
     d48:	402b      	ands	r3, r5
     d4a:	5ce3      	ldrb	r3, [r4, r3]
     d4c:	009b      	lsls	r3, r3, #2
     d4e:	9800      	ldr	r0, [sp, #0]
     d50:	4684      	mov	ip, r0
     d52:	4463      	add	r3, ip
     d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     d56:	405a      	eors	r2, r3
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
     d58:	507a      	str	r2, [r7, r1]
     d5a:	3104      	adds	r1, #4
        for( j = 0; j < 4; j++, SK++ )
     d5c:	2910      	cmp	r1, #16
     d5e:	d1de      	bne.n	d1e <mbedtls_aes_setkey_dec+0x9a>
     d60:	e7d3      	b.n	d0a <mbedtls_aes_setkey_dec+0x86>
     d62:	9b05      	ldr	r3, [sp, #20]
     d64:	3b10      	subs	r3, #16
     d66:	9a01      	ldr	r2, [sp, #4]
     d68:	4694      	mov	ip, r2
     d6a:	449c      	add	ip, r3
     d6c:	4663      	mov	r3, ip
     d6e:	9301      	str	r3, [sp, #4]
     d70:	9b04      	ldr	r3, [sp, #16]
     d72:	011b      	lsls	r3, r3, #4
     d74:	9a02      	ldr	r2, [sp, #8]
     d76:	1ad3      	subs	r3, r2, r3
     d78:	3310      	adds	r3, #16
     d7a:	9302      	str	r3, [sp, #8]
        }
    }

    *RK++ = *SK++;
     d7c:	9b02      	ldr	r3, [sp, #8]
     d7e:	681a      	ldr	r2, [r3, #0]
     d80:	9200      	str	r2, [sp, #0]
     d82:	9a01      	ldr	r2, [sp, #4]
     d84:	9900      	ldr	r1, [sp, #0]
     d86:	6011      	str	r1, [r2, #0]
    *RK++ = *SK++;
     d88:	6859      	ldr	r1, [r3, #4]
     d8a:	6051      	str	r1, [r2, #4]
    *RK++ = *SK++;
     d8c:	6899      	ldr	r1, [r3, #8]
     d8e:	6091      	str	r1, [r2, #8]
    *RK++ = *SK++;
     d90:	68db      	ldr	r3, [r3, #12]
     d92:	9300      	str	r3, [sp, #0]
     d94:	60d3      	str	r3, [r2, #12]

exit:
    mbedtls_aes_free( &cty );
     d96:	a806      	add	r0, sp, #24
     d98:	4b0b      	ldr	r3, [pc, #44]	; (dc8 <mbedtls_aes_setkey_dec+0x144>)
     d9a:	4798      	blx	r3

    return( ret );
}
     d9c:	9803      	ldr	r0, [sp, #12]
     d9e:	b04d      	add	sp, #308	; 0x134
     da0:	bc3c      	pop	{r2, r3, r4, r5}
     da2:	4690      	mov	r8, r2
     da4:	4699      	mov	r9, r3
     da6:	46a2      	mov	sl, r4
     da8:	46ab      	mov	fp, r5
     daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
     dac:	00000aad 	.word	0x00000aad
     db0:	00000ad5 	.word	0x00000ad5
     db4:	00001aec 	.word	0x00001aec
     db8:	000019ec 	.word	0x000019ec
     dbc:	00001eec 	.word	0x00001eec
     dc0:	000022ec 	.word	0x000022ec
     dc4:	000026ec 	.word	0x000026ec
     dc8:	00000ac1 	.word	0x00000ac1

00000dcc <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
     dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
     dce:	46de      	mov	lr, fp
     dd0:	4657      	mov	r7, sl
     dd2:	464e      	mov	r6, r9
     dd4:	4645      	mov	r5, r8
     dd6:	b5e0      	push	{r5, r6, r7, lr}
     dd8:	b089      	sub	sp, #36	; 0x24
     dda:	9206      	str	r2, [sp, #24]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
     ddc:	6845      	ldr	r5, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
     dde:	784b      	ldrb	r3, [r1, #1]
     de0:	021b      	lsls	r3, r3, #8
     de2:	788a      	ldrb	r2, [r1, #2]
     de4:	0412      	lsls	r2, r2, #16
     de6:	4313      	orrs	r3, r2
     de8:	780a      	ldrb	r2, [r1, #0]
     dea:	4313      	orrs	r3, r2
     dec:	78ca      	ldrb	r2, [r1, #3]
     dee:	0612      	lsls	r2, r2, #24
     df0:	4313      	orrs	r3, r2
     df2:	682a      	ldr	r2, [r5, #0]
     df4:	405a      	eors	r2, r3
     df6:	9201      	str	r2, [sp, #4]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
     df8:	794b      	ldrb	r3, [r1, #5]
     dfa:	021b      	lsls	r3, r3, #8
     dfc:	798a      	ldrb	r2, [r1, #6]
     dfe:	0412      	lsls	r2, r2, #16
     e00:	4313      	orrs	r3, r2
     e02:	790a      	ldrb	r2, [r1, #4]
     e04:	4313      	orrs	r3, r2
     e06:	79ca      	ldrb	r2, [r1, #7]
     e08:	0612      	lsls	r2, r2, #24
     e0a:	4313      	orrs	r3, r2
     e0c:	686a      	ldr	r2, [r5, #4]
     e0e:	4053      	eors	r3, r2
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
     e10:	7a4c      	ldrb	r4, [r1, #9]
     e12:	0224      	lsls	r4, r4, #8
     e14:	7a8a      	ldrb	r2, [r1, #10]
     e16:	0412      	lsls	r2, r2, #16
     e18:	4314      	orrs	r4, r2
     e1a:	7a0a      	ldrb	r2, [r1, #8]
     e1c:	4314      	orrs	r4, r2
     e1e:	7aca      	ldrb	r2, [r1, #11]
     e20:	0612      	lsls	r2, r2, #24
     e22:	4314      	orrs	r4, r2
     e24:	68aa      	ldr	r2, [r5, #8]
     e26:	4054      	eors	r4, r2
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
     e28:	7b4a      	ldrb	r2, [r1, #13]
     e2a:	0212      	lsls	r2, r2, #8
     e2c:	7b8e      	ldrb	r6, [r1, #14]
     e2e:	0436      	lsls	r6, r6, #16
     e30:	4332      	orrs	r2, r6
     e32:	7b0e      	ldrb	r6, [r1, #12]
     e34:	4332      	orrs	r2, r6
     e36:	7bc9      	ldrb	r1, [r1, #15]
     e38:	0609      	lsls	r1, r1, #24
     e3a:	430a      	orrs	r2, r1
     e3c:	2110      	movs	r1, #16
     e3e:	468c      	mov	ip, r1
     e40:	44ac      	add	ip, r5
     e42:	4661      	mov	r1, ip
     e44:	4667      	mov	r7, ip
     e46:	9105      	str	r1, [sp, #20]
     e48:	68e9      	ldr	r1, [r5, #12]
     e4a:	404a      	eors	r2, r1

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
     e4c:	6801      	ldr	r1, [r0, #0]
     e4e:	1049      	asrs	r1, r1, #1
     e50:	9107      	str	r1, [sp, #28]
     e52:	3901      	subs	r1, #1
     e54:	1e08      	subs	r0, r1, #0
     e56:	9104      	str	r1, [sp, #16]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
     e58:	6929      	ldr	r1, [r5, #16]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
     e5a:	dc00      	bgt.n	e5e <mbedtls_internal_aes_encrypt+0x92>
     e5c:	e0f0      	b.n	1040 <mbedtls_internal_aes_encrypt+0x274>
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
     e5e:	49ee      	ldr	r1, [pc, #952]	; (1218 <mbedtls_internal_aes_encrypt+0x44c>)
     e60:	468a      	mov	sl, r1
     e62:	26ff      	movs	r6, #255	; 0xff
     e64:	49ed      	ldr	r1, [pc, #948]	; (121c <mbedtls_internal_aes_encrypt+0x450>)
     e66:	4689      	mov	r9, r1
     e68:	49ed      	ldr	r1, [pc, #948]	; (1220 <mbedtls_internal_aes_encrypt+0x454>)
     e6a:	4688      	mov	r8, r1
     e6c:	49ed      	ldr	r1, [pc, #948]	; (1224 <mbedtls_internal_aes_encrypt+0x458>)
     e6e:	468c      	mov	ip, r1
     e70:	9d01      	ldr	r5, [sp, #4]
     e72:	0028      	movs	r0, r5
     e74:	4030      	ands	r0, r6
     e76:	0080      	lsls	r0, r0, #2
     e78:	4450      	add	r0, sl
     e7a:	0e11      	lsrs	r1, r2, #24
     e7c:	0089      	lsls	r1, r1, #2
     e7e:	4449      	add	r1, r9
     e80:	6a80      	ldr	r0, [r0, #40]	; 0x28
     e82:	6a89      	ldr	r1, [r1, #40]	; 0x28
     e84:	4048      	eors	r0, r1
     e86:	6839      	ldr	r1, [r7, #0]
     e88:	4048      	eors	r0, r1
     e8a:	0a19      	lsrs	r1, r3, #8
     e8c:	4031      	ands	r1, r6
     e8e:	0089      	lsls	r1, r1, #2
     e90:	4441      	add	r1, r8
     e92:	6a89      	ldr	r1, [r1, #40]	; 0x28
     e94:	4048      	eors	r0, r1
     e96:	0c21      	lsrs	r1, r4, #16
     e98:	4031      	ands	r1, r6
     e9a:	0089      	lsls	r1, r1, #2
     e9c:	4461      	add	r1, ip
     e9e:	6a89      	ldr	r1, [r1, #40]	; 0x28
     ea0:	4048      	eors	r0, r1
     ea2:	9002      	str	r0, [sp, #8]
     ea4:	0031      	movs	r1, r6
     ea6:	4019      	ands	r1, r3
     ea8:	0089      	lsls	r1, r1, #2
     eaa:	4451      	add	r1, sl
     eac:	0e2d      	lsrs	r5, r5, #24
     eae:	00ad      	lsls	r5, r5, #2
     eb0:	444d      	add	r5, r9
     eb2:	6a89      	ldr	r1, [r1, #40]	; 0x28
     eb4:	6aad      	ldr	r5, [r5, #40]	; 0x28
     eb6:	4069      	eors	r1, r5
     eb8:	6878      	ldr	r0, [r7, #4]
     eba:	4041      	eors	r1, r0
     ebc:	0a25      	lsrs	r5, r4, #8
     ebe:	4035      	ands	r5, r6
     ec0:	00ad      	lsls	r5, r5, #2
     ec2:	4445      	add	r5, r8
     ec4:	6aad      	ldr	r5, [r5, #40]	; 0x28
     ec6:	4069      	eors	r1, r5
     ec8:	0c15      	lsrs	r5, r2, #16
     eca:	4035      	ands	r5, r6
     ecc:	00ad      	lsls	r5, r5, #2
     ece:	4465      	add	r5, ip
     ed0:	6aad      	ldr	r5, [r5, #40]	; 0x28
     ed2:	4069      	eors	r1, r5
     ed4:	9103      	str	r1, [sp, #12]
     ed6:	0031      	movs	r1, r6
     ed8:	4021      	ands	r1, r4
     eda:	008d      	lsls	r5, r1, #2
     edc:	46ab      	mov	fp, r5
     ede:	44d3      	add	fp, sl
     ee0:	0e1d      	lsrs	r5, r3, #24
     ee2:	00ad      	lsls	r5, r5, #2
     ee4:	444d      	add	r5, r9
     ee6:	4658      	mov	r0, fp
     ee8:	6a80      	ldr	r0, [r0, #40]	; 0x28
     eea:	6aad      	ldr	r5, [r5, #40]	; 0x28
     eec:	4045      	eors	r5, r0
     eee:	68b8      	ldr	r0, [r7, #8]
     ef0:	4045      	eors	r5, r0
     ef2:	0a10      	lsrs	r0, r2, #8
     ef4:	0001      	movs	r1, r0
     ef6:	4031      	ands	r1, r6
     ef8:	0088      	lsls	r0, r1, #2
     efa:	4683      	mov	fp, r0
     efc:	44c3      	add	fp, r8
     efe:	4658      	mov	r0, fp
     f00:	6a80      	ldr	r0, [r0, #40]	; 0x28
     f02:	4045      	eors	r5, r0
     f04:	9901      	ldr	r1, [sp, #4]
     f06:	0c08      	lsrs	r0, r1, #16
     f08:	4030      	ands	r0, r6
     f0a:	0080      	lsls	r0, r0, #2
     f0c:	4683      	mov	fp, r0
     f0e:	44e3      	add	fp, ip
     f10:	4658      	mov	r0, fp
     f12:	6a80      	ldr	r0, [r0, #40]	; 0x28
     f14:	4045      	eors	r5, r0
     f16:	4032      	ands	r2, r6
     f18:	0092      	lsls	r2, r2, #2
     f1a:	4452      	add	r2, sl
     f1c:	0e24      	lsrs	r4, r4, #24
     f1e:	00a4      	lsls	r4, r4, #2
     f20:	444c      	add	r4, r9
     f22:	6a92      	ldr	r2, [r2, #40]	; 0x28
     f24:	6aa4      	ldr	r4, [r4, #40]	; 0x28
     f26:	4062      	eors	r2, r4
     f28:	68f8      	ldr	r0, [r7, #12]
     f2a:	4042      	eors	r2, r0
     f2c:	0a0c      	lsrs	r4, r1, #8
     f2e:	4034      	ands	r4, r6
     f30:	00a4      	lsls	r4, r4, #2
     f32:	4444      	add	r4, r8
     f34:	6aa4      	ldr	r4, [r4, #40]	; 0x28
     f36:	4062      	eors	r2, r4
     f38:	0c1b      	lsrs	r3, r3, #16
     f3a:	4033      	ands	r3, r6
     f3c:	009b      	lsls	r3, r3, #2
     f3e:	4463      	add	r3, ip
     f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     f42:	405a      	eors	r2, r3
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
     f44:	0033      	movs	r3, r6
     f46:	9c02      	ldr	r4, [sp, #8]
     f48:	4023      	ands	r3, r4
     f4a:	009b      	lsls	r3, r3, #2
     f4c:	4453      	add	r3, sl
     f4e:	0e14      	lsrs	r4, r2, #24
     f50:	00a4      	lsls	r4, r4, #2
     f52:	444c      	add	r4, r9
     f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     f56:	6aa4      	ldr	r4, [r4, #40]	; 0x28
     f58:	4063      	eors	r3, r4
     f5a:	6939      	ldr	r1, [r7, #16]
     f5c:	404b      	eors	r3, r1
     f5e:	9803      	ldr	r0, [sp, #12]
     f60:	0a04      	lsrs	r4, r0, #8
     f62:	4034      	ands	r4, r6
     f64:	00a4      	lsls	r4, r4, #2
     f66:	4444      	add	r4, r8
     f68:	6aa4      	ldr	r4, [r4, #40]	; 0x28
     f6a:	4063      	eors	r3, r4
     f6c:	0c2c      	lsrs	r4, r5, #16
     f6e:	4034      	ands	r4, r6
     f70:	00a4      	lsls	r4, r4, #2
     f72:	4464      	add	r4, ip
     f74:	6aa4      	ldr	r4, [r4, #40]	; 0x28
     f76:	4063      	eors	r3, r4
     f78:	9301      	str	r3, [sp, #4]
     f7a:	0033      	movs	r3, r6
     f7c:	4003      	ands	r3, r0
     f7e:	009b      	lsls	r3, r3, #2
     f80:	4453      	add	r3, sl
     f82:	9902      	ldr	r1, [sp, #8]
     f84:	0e0c      	lsrs	r4, r1, #24
     f86:	00a4      	lsls	r4, r4, #2
     f88:	444c      	add	r4, r9
     f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     f8c:	6aa4      	ldr	r4, [r4, #40]	; 0x28
     f8e:	4063      	eors	r3, r4
     f90:	6979      	ldr	r1, [r7, #20]
     f92:	404b      	eors	r3, r1
     f94:	0a2c      	lsrs	r4, r5, #8
     f96:	4034      	ands	r4, r6
     f98:	00a4      	lsls	r4, r4, #2
     f9a:	4444      	add	r4, r8
     f9c:	6aa4      	ldr	r4, [r4, #40]	; 0x28
     f9e:	4063      	eors	r3, r4
     fa0:	0c14      	lsrs	r4, r2, #16
     fa2:	4034      	ands	r4, r6
     fa4:	00a4      	lsls	r4, r4, #2
     fa6:	4464      	add	r4, ip
     fa8:	6aa4      	ldr	r4, [r4, #40]	; 0x28
     faa:	4063      	eors	r3, r4
     fac:	0034      	movs	r4, r6
     fae:	402c      	ands	r4, r5
     fb0:	00a4      	lsls	r4, r4, #2
     fb2:	4454      	add	r4, sl
     fb4:	46a3      	mov	fp, r4
     fb6:	0e04      	lsrs	r4, r0, #24
     fb8:	00a4      	lsls	r4, r4, #2
     fba:	444c      	add	r4, r9
     fbc:	4659      	mov	r1, fp
     fbe:	6a89      	ldr	r1, [r1, #40]	; 0x28
     fc0:	6aa4      	ldr	r4, [r4, #40]	; 0x28
     fc2:	404c      	eors	r4, r1
     fc4:	69b9      	ldr	r1, [r7, #24]
     fc6:	404c      	eors	r4, r1
     fc8:	0a11      	lsrs	r1, r2, #8
     fca:	4031      	ands	r1, r6
     fcc:	0089      	lsls	r1, r1, #2
     fce:	468b      	mov	fp, r1
     fd0:	44c3      	add	fp, r8
     fd2:	4659      	mov	r1, fp
     fd4:	6a89      	ldr	r1, [r1, #40]	; 0x28
     fd6:	404c      	eors	r4, r1
     fd8:	9802      	ldr	r0, [sp, #8]
     fda:	0c01      	lsrs	r1, r0, #16
     fdc:	4031      	ands	r1, r6
     fde:	0089      	lsls	r1, r1, #2
     fe0:	468b      	mov	fp, r1
     fe2:	44e3      	add	fp, ip
     fe4:	4659      	mov	r1, fp
     fe6:	6a89      	ldr	r1, [r1, #40]	; 0x28
     fe8:	404c      	eors	r4, r1
     fea:	4032      	ands	r2, r6
     fec:	0092      	lsls	r2, r2, #2
     fee:	4452      	add	r2, sl
     ff0:	0e2d      	lsrs	r5, r5, #24
     ff2:	00ad      	lsls	r5, r5, #2
     ff4:	444d      	add	r5, r9
     ff6:	6a92      	ldr	r2, [r2, #40]	; 0x28
     ff8:	6aad      	ldr	r5, [r5, #40]	; 0x28
     ffa:	406a      	eors	r2, r5
     ffc:	69f9      	ldr	r1, [r7, #28]
     ffe:	404a      	eors	r2, r1
    1000:	0a00      	lsrs	r0, r0, #8
    1002:	4030      	ands	r0, r6
    1004:	0080      	lsls	r0, r0, #2
    1006:	4440      	add	r0, r8
    1008:	6a85      	ldr	r5, [r0, #40]	; 0x28
    100a:	406a      	eors	r2, r5
    100c:	9903      	ldr	r1, [sp, #12]
    100e:	0c09      	lsrs	r1, r1, #16
    1010:	4031      	ands	r1, r6
    1012:	0089      	lsls	r1, r1, #2
    1014:	4461      	add	r1, ip
    1016:	6a89      	ldr	r1, [r1, #40]	; 0x28
    1018:	404a      	eors	r2, r1
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    101a:	9904      	ldr	r1, [sp, #16]
    101c:	3901      	subs	r1, #1
    101e:	0008      	movs	r0, r1
    1020:	9104      	str	r1, [sp, #16]
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    1022:	6a39      	ldr	r1, [r7, #32]
    1024:	3720      	adds	r7, #32
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    1026:	2800      	cmp	r0, #0
    1028:	d000      	beq.n	102c <mbedtls_internal_aes_encrypt+0x260>
    102a:	e721      	b.n	e70 <mbedtls_internal_aes_encrypt+0xa4>
    102c:	9807      	ldr	r0, [sp, #28]
    102e:	4d7e      	ldr	r5, [pc, #504]	; (1228 <mbedtls_internal_aes_encrypt+0x45c>)
    1030:	46ac      	mov	ip, r5
    1032:	4460      	add	r0, ip
    1034:	0140      	lsls	r0, r0, #5
    1036:	9d05      	ldr	r5, [sp, #20]
    1038:	46ac      	mov	ip, r5
    103a:	4484      	add	ip, r0
    103c:	4660      	mov	r0, ip
    103e:	9005      	str	r0, [sp, #20]
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
    1040:	4875      	ldr	r0, [pc, #468]	; (1218 <mbedtls_internal_aes_encrypt+0x44c>)
    1042:	4680      	mov	r8, r0
    1044:	20ff      	movs	r0, #255	; 0xff
    1046:	9e01      	ldr	r6, [sp, #4]
    1048:	4006      	ands	r6, r0
    104a:	00b6      	lsls	r6, r6, #2
    104c:	4446      	add	r6, r8
    104e:	4d73      	ldr	r5, [pc, #460]	; (121c <mbedtls_internal_aes_encrypt+0x450>)
    1050:	46ac      	mov	ip, r5
    1052:	0e15      	lsrs	r5, r2, #24
    1054:	00ad      	lsls	r5, r5, #2
    1056:	4465      	add	r5, ip
    1058:	6ab6      	ldr	r6, [r6, #40]	; 0x28
    105a:	6aad      	ldr	r5, [r5, #40]	; 0x28
    105c:	4075      	eors	r5, r6
    105e:	4069      	eors	r1, r5
    1060:	4d6f      	ldr	r5, [pc, #444]	; (1220 <mbedtls_internal_aes_encrypt+0x454>)
    1062:	46a9      	mov	r9, r5
    1064:	0a1d      	lsrs	r5, r3, #8
    1066:	4005      	ands	r5, r0
    1068:	00ad      	lsls	r5, r5, #2
    106a:	444d      	add	r5, r9
    106c:	6aad      	ldr	r5, [r5, #40]	; 0x28
    106e:	4069      	eors	r1, r5
    1070:	4f6c      	ldr	r7, [pc, #432]	; (1224 <mbedtls_internal_aes_encrypt+0x458>)
    1072:	0c25      	lsrs	r5, r4, #16
    1074:	4005      	ands	r5, r0
    1076:	00ad      	lsls	r5, r5, #2
    1078:	197d      	adds	r5, r7, r5
    107a:	6aad      	ldr	r5, [r5, #40]	; 0x28
    107c:	4069      	eors	r1, r5
    107e:	468a      	mov	sl, r1
    1080:	0005      	movs	r5, r0
    1082:	401d      	ands	r5, r3
    1084:	00ad      	lsls	r5, r5, #2
    1086:	4445      	add	r5, r8
    1088:	9e01      	ldr	r6, [sp, #4]
    108a:	0e31      	lsrs	r1, r6, #24
    108c:	0089      	lsls	r1, r1, #2
    108e:	4461      	add	r1, ip
    1090:	6aad      	ldr	r5, [r5, #40]	; 0x28
    1092:	6a89      	ldr	r1, [r1, #40]	; 0x28
    1094:	404d      	eors	r5, r1
    1096:	9905      	ldr	r1, [sp, #20]
    1098:	6849      	ldr	r1, [r1, #4]
    109a:	404d      	eors	r5, r1
    109c:	0a21      	lsrs	r1, r4, #8
    109e:	4001      	ands	r1, r0
    10a0:	0089      	lsls	r1, r1, #2
    10a2:	4449      	add	r1, r9
    10a4:	6a89      	ldr	r1, [r1, #40]	; 0x28
    10a6:	404d      	eors	r5, r1
    10a8:	0c11      	lsrs	r1, r2, #16
    10aa:	4001      	ands	r1, r0
    10ac:	0089      	lsls	r1, r1, #2
    10ae:	1879      	adds	r1, r7, r1
    10b0:	6a89      	ldr	r1, [r1, #40]	; 0x28
    10b2:	404d      	eors	r5, r1
    10b4:	46ab      	mov	fp, r5
    10b6:	0006      	movs	r6, r0
    10b8:	4026      	ands	r6, r4
    10ba:	00b6      	lsls	r6, r6, #2
    10bc:	4446      	add	r6, r8
    10be:	0e19      	lsrs	r1, r3, #24
    10c0:	0089      	lsls	r1, r1, #2
    10c2:	4461      	add	r1, ip
    10c4:	6ab6      	ldr	r6, [r6, #40]	; 0x28
    10c6:	6a89      	ldr	r1, [r1, #40]	; 0x28
    10c8:	404e      	eors	r6, r1
    10ca:	9d05      	ldr	r5, [sp, #20]
    10cc:	68a9      	ldr	r1, [r5, #8]
    10ce:	404e      	eors	r6, r1
    10d0:	0a11      	lsrs	r1, r2, #8
    10d2:	4001      	ands	r1, r0
    10d4:	0089      	lsls	r1, r1, #2
    10d6:	4449      	add	r1, r9
    10d8:	6a89      	ldr	r1, [r1, #40]	; 0x28
    10da:	404e      	eors	r6, r1
    10dc:	9901      	ldr	r1, [sp, #4]
    10de:	0c09      	lsrs	r1, r1, #16
    10e0:	4001      	ands	r1, r0
    10e2:	0089      	lsls	r1, r1, #2
    10e4:	1879      	adds	r1, r7, r1
    10e6:	6a89      	ldr	r1, [r1, #40]	; 0x28
    10e8:	4071      	eors	r1, r6
    10ea:	4002      	ands	r2, r0
    10ec:	0092      	lsls	r2, r2, #2
    10ee:	4442      	add	r2, r8
    10f0:	0e24      	lsrs	r4, r4, #24
    10f2:	00a4      	lsls	r4, r4, #2
    10f4:	4464      	add	r4, ip
    10f6:	6a92      	ldr	r2, [r2, #40]	; 0x28
    10f8:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    10fa:	4054      	eors	r4, r2
    10fc:	68ea      	ldr	r2, [r5, #12]
    10fe:	9202      	str	r2, [sp, #8]
    1100:	4054      	eors	r4, r2
    1102:	9e01      	ldr	r6, [sp, #4]
    1104:	0a32      	lsrs	r2, r6, #8
    1106:	4002      	ands	r2, r0
    1108:	0092      	lsls	r2, r2, #2
    110a:	444a      	add	r2, r9
    110c:	6a96      	ldr	r6, [r2, #40]	; 0x28
    110e:	4074      	eors	r4, r6
    1110:	0c1b      	lsrs	r3, r3, #16
    1112:	4003      	ands	r3, r0
    1114:	009b      	lsls	r3, r3, #2
    1116:	18ff      	adds	r7, r7, r3
    1118:	6abe      	ldr	r6, [r7, #40]	; 0x28
    111a:	4066      	eors	r6, r4
    111c:	46b0      	mov	r8, r6

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
    111e:	4652      	mov	r2, sl
    1120:	4002      	ands	r2, r0
    1122:	4b42      	ldr	r3, [pc, #264]	; (122c <mbedtls_internal_aes_encrypt+0x460>)
    1124:	3328      	adds	r3, #40	; 0x28
    1126:	5c9c      	ldrb	r4, [r3, r2]
    X0 = *RK++ ^ \
    1128:	692a      	ldr	r2, [r5, #16]
    112a:	4054      	eors	r4, r2
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
    112c:	0e32      	lsrs	r2, r6, #24
    112e:	5c9a      	ldrb	r2, [r3, r2]
    1130:	0612      	lsls	r2, r2, #24
    X0 = *RK++ ^ \
    1132:	4054      	eors	r4, r2
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
    1134:	465a      	mov	r2, fp
    1136:	0a12      	lsrs	r2, r2, #8
    1138:	4002      	ands	r2, r0
    113a:	5c9a      	ldrb	r2, [r3, r2]
    113c:	0212      	lsls	r2, r2, #8
    X0 = *RK++ ^ \
    113e:	4054      	eors	r4, r2
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
    1140:	0c0a      	lsrs	r2, r1, #16
    1142:	4002      	ands	r2, r0
    1144:	5c9a      	ldrb	r2, [r3, r2]
    1146:	0412      	lsls	r2, r2, #16
    X0 = *RK++ ^ \
    1148:	4054      	eors	r4, r2

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
    114a:	0002      	movs	r2, r0
    114c:	465e      	mov	r6, fp
    114e:	4032      	ands	r2, r6
    1150:	5c9f      	ldrb	r7, [r3, r2]
    X1 = *RK++ ^ \
    1152:	696a      	ldr	r2, [r5, #20]
    1154:	4057      	eors	r7, r2
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
    1156:	4652      	mov	r2, sl
    1158:	0e12      	lsrs	r2, r2, #24
    115a:	5c9a      	ldrb	r2, [r3, r2]
    115c:	0612      	lsls	r2, r2, #24
    X1 = *RK++ ^ \
    115e:	4057      	eors	r7, r2
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
    1160:	0a0a      	lsrs	r2, r1, #8
    1162:	4002      	ands	r2, r0
    1164:	5c9a      	ldrb	r2, [r3, r2]
    1166:	0212      	lsls	r2, r2, #8
    X1 = *RK++ ^ \
    1168:	4057      	eors	r7, r2
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
    116a:	4642      	mov	r2, r8
    116c:	0c12      	lsrs	r2, r2, #16
    116e:	4002      	ands	r2, r0
    1170:	5c9a      	ldrb	r2, [r3, r2]
    1172:	0412      	lsls	r2, r2, #16
    X1 = *RK++ ^ \
    1174:	4057      	eors	r7, r2

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
    1176:	0002      	movs	r2, r0
    1178:	400a      	ands	r2, r1
    117a:	5c9a      	ldrb	r2, [r3, r2]
    X2 = *RK++ ^ \
    117c:	69ae      	ldr	r6, [r5, #24]
    117e:	9601      	str	r6, [sp, #4]
    1180:	4056      	eors	r6, r2
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
    1182:	465a      	mov	r2, fp
    1184:	0e12      	lsrs	r2, r2, #24
    1186:	5c9a      	ldrb	r2, [r3, r2]
    1188:	0612      	lsls	r2, r2, #24
    X2 = *RK++ ^ \
    118a:	4072      	eors	r2, r6
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
    118c:	4646      	mov	r6, r8
    118e:	0a36      	lsrs	r6, r6, #8
    1190:	4006      	ands	r6, r0
    1192:	5d9e      	ldrb	r6, [r3, r6]
    1194:	0236      	lsls	r6, r6, #8
    X2 = *RK++ ^ \
    1196:	4072      	eors	r2, r6
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
    1198:	4656      	mov	r6, sl
    119a:	0c36      	lsrs	r6, r6, #16
    119c:	4006      	ands	r6, r0
    119e:	5d9e      	ldrb	r6, [r3, r6]
    11a0:	0436      	lsls	r6, r6, #16
    X2 = *RK++ ^ \
    11a2:	4072      	eors	r2, r6

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
    11a4:	4646      	mov	r6, r8
    11a6:	4006      	ands	r6, r0
    11a8:	5d9e      	ldrb	r6, [r3, r6]
    X3 = *RK++ ^ \
    11aa:	69ed      	ldr	r5, [r5, #28]
    11ac:	406e      	eors	r6, r5
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
    11ae:	0e09      	lsrs	r1, r1, #24
    11b0:	5c59      	ldrb	r1, [r3, r1]
    11b2:	0609      	lsls	r1, r1, #24
    X3 = *RK++ ^ \
    11b4:	404e      	eors	r6, r1
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
    11b6:	4651      	mov	r1, sl
    11b8:	0a09      	lsrs	r1, r1, #8
    11ba:	4001      	ands	r1, r0
    11bc:	5c59      	ldrb	r1, [r3, r1]
    11be:	0209      	lsls	r1, r1, #8
    X3 = *RK++ ^ \
    11c0:	4071      	eors	r1, r6
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
    11c2:	465d      	mov	r5, fp
    11c4:	0c2d      	lsrs	r5, r5, #16
    11c6:	4028      	ands	r0, r5
    11c8:	5c1b      	ldrb	r3, [r3, r0]
    11ca:	041b      	lsls	r3, r3, #16
    X3 = *RK++ ^ \
    11cc:	404b      	eors	r3, r1

    PUT_UINT32_LE( X0, output,  0 );
    11ce:	9806      	ldr	r0, [sp, #24]
    11d0:	7004      	strb	r4, [r0, #0]
    11d2:	0a21      	lsrs	r1, r4, #8
    11d4:	7041      	strb	r1, [r0, #1]
    11d6:	0c21      	lsrs	r1, r4, #16
    11d8:	7081      	strb	r1, [r0, #2]
    11da:	0e24      	lsrs	r4, r4, #24
    11dc:	70c4      	strb	r4, [r0, #3]
    PUT_UINT32_LE( X1, output,  4 );
    11de:	7107      	strb	r7, [r0, #4]
    11e0:	0a39      	lsrs	r1, r7, #8
    11e2:	7141      	strb	r1, [r0, #5]
    11e4:	0c39      	lsrs	r1, r7, #16
    11e6:	7181      	strb	r1, [r0, #6]
    11e8:	0e3f      	lsrs	r7, r7, #24
    11ea:	71c7      	strb	r7, [r0, #7]
    PUT_UINT32_LE( X2, output,  8 );
    11ec:	7202      	strb	r2, [r0, #8]
    11ee:	0a11      	lsrs	r1, r2, #8
    11f0:	7241      	strb	r1, [r0, #9]
    11f2:	0c11      	lsrs	r1, r2, #16
    11f4:	7281      	strb	r1, [r0, #10]
    11f6:	0e12      	lsrs	r2, r2, #24
    11f8:	72c2      	strb	r2, [r0, #11]
    PUT_UINT32_LE( X3, output, 12 );
    11fa:	7303      	strb	r3, [r0, #12]
    11fc:	0a1a      	lsrs	r2, r3, #8
    11fe:	7342      	strb	r2, [r0, #13]
    1200:	0c1a      	lsrs	r2, r3, #16
    1202:	7382      	strb	r2, [r0, #14]
    1204:	0e1b      	lsrs	r3, r3, #24
    1206:	73c3      	strb	r3, [r0, #15]

    return( 0 );
}
    1208:	2000      	movs	r0, #0
    120a:	b009      	add	sp, #36	; 0x24
    120c:	bc3c      	pop	{r2, r3, r4, r5}
    120e:	4690      	mov	r8, r2
    1210:	4699      	mov	r9, r3
    1212:	46a2      	mov	sl, r4
    1214:	46ab      	mov	fp, r5
    1216:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1218:	00002aec 	.word	0x00002aec
    121c:	00002eec 	.word	0x00002eec
    1220:	000032ec 	.word	0x000032ec
    1224:	000036ec 	.word	0x000036ec
    1228:	07ffffff 	.word	0x07ffffff
    122c:	000019ec 	.word	0x000019ec

00001230 <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
    1230:	b5f0      	push	{r4, r5, r6, r7, lr}
    1232:	46de      	mov	lr, fp
    1234:	4657      	mov	r7, sl
    1236:	464e      	mov	r6, r9
    1238:	4645      	mov	r5, r8
    123a:	b5e0      	push	{r5, r6, r7, lr}
    123c:	b089      	sub	sp, #36	; 0x24
    123e:	9206      	str	r2, [sp, #24]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
    1240:	6845      	ldr	r5, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    1242:	784b      	ldrb	r3, [r1, #1]
    1244:	021b      	lsls	r3, r3, #8
    1246:	788a      	ldrb	r2, [r1, #2]
    1248:	0412      	lsls	r2, r2, #16
    124a:	4313      	orrs	r3, r2
    124c:	780a      	ldrb	r2, [r1, #0]
    124e:	4313      	orrs	r3, r2
    1250:	78ca      	ldrb	r2, [r1, #3]
    1252:	0612      	lsls	r2, r2, #24
    1254:	4313      	orrs	r3, r2
    1256:	682a      	ldr	r2, [r5, #0]
    1258:	405a      	eors	r2, r3
    125a:	9202      	str	r2, [sp, #8]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    125c:	794b      	ldrb	r3, [r1, #5]
    125e:	021b      	lsls	r3, r3, #8
    1260:	798a      	ldrb	r2, [r1, #6]
    1262:	0412      	lsls	r2, r2, #16
    1264:	4313      	orrs	r3, r2
    1266:	790a      	ldrb	r2, [r1, #4]
    1268:	4313      	orrs	r3, r2
    126a:	79ca      	ldrb	r2, [r1, #7]
    126c:	0612      	lsls	r2, r2, #24
    126e:	4313      	orrs	r3, r2
    1270:	686a      	ldr	r2, [r5, #4]
    1272:	4053      	eors	r3, r2
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    1274:	7a4a      	ldrb	r2, [r1, #9]
    1276:	0212      	lsls	r2, r2, #8
    1278:	7a8c      	ldrb	r4, [r1, #10]
    127a:	0424      	lsls	r4, r4, #16
    127c:	4322      	orrs	r2, r4
    127e:	7a0c      	ldrb	r4, [r1, #8]
    1280:	4322      	orrs	r2, r4
    1282:	7acc      	ldrb	r4, [r1, #11]
    1284:	0624      	lsls	r4, r4, #24
    1286:	4322      	orrs	r2, r4
    1288:	68ac      	ldr	r4, [r5, #8]
    128a:	4062      	eors	r2, r4
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
    128c:	7b4c      	ldrb	r4, [r1, #13]
    128e:	0224      	lsls	r4, r4, #8
    1290:	7b8e      	ldrb	r6, [r1, #14]
    1292:	0436      	lsls	r6, r6, #16
    1294:	4334      	orrs	r4, r6
    1296:	7b0e      	ldrb	r6, [r1, #12]
    1298:	4334      	orrs	r4, r6
    129a:	7bc9      	ldrb	r1, [r1, #15]
    129c:	0609      	lsls	r1, r1, #24
    129e:	4321      	orrs	r1, r4
    12a0:	2410      	movs	r4, #16
    12a2:	46a4      	mov	ip, r4
    12a4:	44ac      	add	ip, r5
    12a6:	4664      	mov	r4, ip
    12a8:	4667      	mov	r7, ip
    12aa:	9405      	str	r4, [sp, #20]
    12ac:	68ec      	ldr	r4, [r5, #12]
    12ae:	4061      	eors	r1, r4

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    12b0:	6800      	ldr	r0, [r0, #0]
    12b2:	1040      	asrs	r0, r0, #1
    12b4:	9007      	str	r0, [sp, #28]
    12b6:	3801      	subs	r0, #1
    12b8:	1e04      	subs	r4, r0, #0
    12ba:	9003      	str	r0, [sp, #12]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
    12bc:	6928      	ldr	r0, [r5, #16]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    12be:	dc00      	bgt.n	12c2 <mbedtls_internal_aes_decrypt+0x92>
    12c0:	e0f4      	b.n	14ac <mbedtls_internal_aes_decrypt+0x27c>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
    12c2:	48f0      	ldr	r0, [pc, #960]	; (1684 <mbedtls_internal_aes_decrypt+0x454>)
    12c4:	4682      	mov	sl, r0
    12c6:	26ff      	movs	r6, #255	; 0xff
    12c8:	48ef      	ldr	r0, [pc, #956]	; (1688 <mbedtls_internal_aes_decrypt+0x458>)
    12ca:	4681      	mov	r9, r0
    12cc:	48ef      	ldr	r0, [pc, #956]	; (168c <mbedtls_internal_aes_decrypt+0x45c>)
    12ce:	4680      	mov	r8, r0
    12d0:	48ef      	ldr	r0, [pc, #956]	; (1690 <mbedtls_internal_aes_decrypt+0x460>)
    12d2:	4684      	mov	ip, r0
    12d4:	9301      	str	r3, [sp, #4]
    12d6:	9c02      	ldr	r4, [sp, #8]
    12d8:	4034      	ands	r4, r6
    12da:	00a4      	lsls	r4, r4, #2
    12dc:	4454      	add	r4, sl
    12de:	9b01      	ldr	r3, [sp, #4]
    12e0:	0e18      	lsrs	r0, r3, #24
    12e2:	0080      	lsls	r0, r0, #2
    12e4:	4448      	add	r0, r9
    12e6:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    12e8:	6a80      	ldr	r0, [r0, #40]	; 0x28
    12ea:	4045      	eors	r5, r0
    12ec:	683b      	ldr	r3, [r7, #0]
    12ee:	405d      	eors	r5, r3
    12f0:	0a08      	lsrs	r0, r1, #8
    12f2:	4030      	ands	r0, r6
    12f4:	0080      	lsls	r0, r0, #2
    12f6:	4440      	add	r0, r8
    12f8:	6a80      	ldr	r0, [r0, #40]	; 0x28
    12fa:	4045      	eors	r5, r0
    12fc:	0c10      	lsrs	r0, r2, #16
    12fe:	4030      	ands	r0, r6
    1300:	0080      	lsls	r0, r0, #2
    1302:	4460      	add	r0, ip
    1304:	6a80      	ldr	r0, [r0, #40]	; 0x28
    1306:	4045      	eors	r5, r0
    1308:	0030      	movs	r0, r6
    130a:	9b01      	ldr	r3, [sp, #4]
    130c:	4018      	ands	r0, r3
    130e:	0080      	lsls	r0, r0, #2
    1310:	4450      	add	r0, sl
    1312:	0e14      	lsrs	r4, r2, #24
    1314:	00a4      	lsls	r4, r4, #2
    1316:	444c      	add	r4, r9
    1318:	6a80      	ldr	r0, [r0, #40]	; 0x28
    131a:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    131c:	4060      	eors	r0, r4
    131e:	687b      	ldr	r3, [r7, #4]
    1320:	4058      	eors	r0, r3
    1322:	9c02      	ldr	r4, [sp, #8]
    1324:	0a24      	lsrs	r4, r4, #8
    1326:	4034      	ands	r4, r6
    1328:	00a4      	lsls	r4, r4, #2
    132a:	4444      	add	r4, r8
    132c:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    132e:	4060      	eors	r0, r4
    1330:	0c0c      	lsrs	r4, r1, #16
    1332:	4034      	ands	r4, r6
    1334:	00a4      	lsls	r4, r4, #2
    1336:	4464      	add	r4, ip
    1338:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    133a:	4060      	eors	r0, r4
    133c:	9004      	str	r0, [sp, #16]
    133e:	0034      	movs	r4, r6
    1340:	4014      	ands	r4, r2
    1342:	00a4      	lsls	r4, r4, #2
    1344:	46a3      	mov	fp, r4
    1346:	44d3      	add	fp, sl
    1348:	0e0c      	lsrs	r4, r1, #24
    134a:	00a4      	lsls	r4, r4, #2
    134c:	444c      	add	r4, r9
    134e:	465b      	mov	r3, fp
    1350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1352:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    1354:	405c      	eors	r4, r3
    1356:	68bb      	ldr	r3, [r7, #8]
    1358:	405c      	eors	r4, r3
    135a:	9b01      	ldr	r3, [sp, #4]
    135c:	0a1b      	lsrs	r3, r3, #8
    135e:	0018      	movs	r0, r3
    1360:	4030      	ands	r0, r6
    1362:	0083      	lsls	r3, r0, #2
    1364:	469b      	mov	fp, r3
    1366:	44c3      	add	fp, r8
    1368:	465b      	mov	r3, fp
    136a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    136c:	405c      	eors	r4, r3
    136e:	9802      	ldr	r0, [sp, #8]
    1370:	0c03      	lsrs	r3, r0, #16
    1372:	4033      	ands	r3, r6
    1374:	009b      	lsls	r3, r3, #2
    1376:	469b      	mov	fp, r3
    1378:	44e3      	add	fp, ip
    137a:	465b      	mov	r3, fp
    137c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    137e:	405c      	eors	r4, r3
    1380:	4031      	ands	r1, r6
    1382:	0089      	lsls	r1, r1, #2
    1384:	4451      	add	r1, sl
    1386:	0e03      	lsrs	r3, r0, #24
    1388:	009b      	lsls	r3, r3, #2
    138a:	469b      	mov	fp, r3
    138c:	44cb      	add	fp, r9
    138e:	6a89      	ldr	r1, [r1, #40]	; 0x28
    1390:	465b      	mov	r3, fp
    1392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1394:	4059      	eors	r1, r3
    1396:	68fb      	ldr	r3, [r7, #12]
    1398:	4059      	eors	r1, r3
    139a:	0a12      	lsrs	r2, r2, #8
    139c:	4032      	ands	r2, r6
    139e:	0092      	lsls	r2, r2, #2
    13a0:	4442      	add	r2, r8
    13a2:	6a92      	ldr	r2, [r2, #40]	; 0x28
    13a4:	4051      	eors	r1, r2
    13a6:	9b01      	ldr	r3, [sp, #4]
    13a8:	0c1b      	lsrs	r3, r3, #16
    13aa:	4033      	ands	r3, r6
    13ac:	009b      	lsls	r3, r3, #2
    13ae:	4463      	add	r3, ip
    13b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    13b2:	4059      	eors	r1, r3
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    13b4:	0033      	movs	r3, r6
    13b6:	402b      	ands	r3, r5
    13b8:	009b      	lsls	r3, r3, #2
    13ba:	4453      	add	r3, sl
    13bc:	9804      	ldr	r0, [sp, #16]
    13be:	0e02      	lsrs	r2, r0, #24
    13c0:	0092      	lsls	r2, r2, #2
    13c2:	444a      	add	r2, r9
    13c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    13c6:	6a92      	ldr	r2, [r2, #40]	; 0x28
    13c8:	4053      	eors	r3, r2
    13ca:	693a      	ldr	r2, [r7, #16]
    13cc:	4053      	eors	r3, r2
    13ce:	0a0a      	lsrs	r2, r1, #8
    13d0:	4032      	ands	r2, r6
    13d2:	0092      	lsls	r2, r2, #2
    13d4:	4442      	add	r2, r8
    13d6:	6a92      	ldr	r2, [r2, #40]	; 0x28
    13d8:	4053      	eors	r3, r2
    13da:	0c22      	lsrs	r2, r4, #16
    13dc:	4032      	ands	r2, r6
    13de:	0092      	lsls	r2, r2, #2
    13e0:	4462      	add	r2, ip
    13e2:	6a92      	ldr	r2, [r2, #40]	; 0x28
    13e4:	4053      	eors	r3, r2
    13e6:	9302      	str	r3, [sp, #8]
    13e8:	0033      	movs	r3, r6
    13ea:	4003      	ands	r3, r0
    13ec:	009b      	lsls	r3, r3, #2
    13ee:	4453      	add	r3, sl
    13f0:	0e22      	lsrs	r2, r4, #24
    13f2:	0092      	lsls	r2, r2, #2
    13f4:	444a      	add	r2, r9
    13f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    13f8:	6a92      	ldr	r2, [r2, #40]	; 0x28
    13fa:	4053      	eors	r3, r2
    13fc:	697a      	ldr	r2, [r7, #20]
    13fe:	4053      	eors	r3, r2
    1400:	0a2a      	lsrs	r2, r5, #8
    1402:	4032      	ands	r2, r6
    1404:	0092      	lsls	r2, r2, #2
    1406:	4442      	add	r2, r8
    1408:	6a92      	ldr	r2, [r2, #40]	; 0x28
    140a:	4053      	eors	r3, r2
    140c:	0c0a      	lsrs	r2, r1, #16
    140e:	4032      	ands	r2, r6
    1410:	0092      	lsls	r2, r2, #2
    1412:	4462      	add	r2, ip
    1414:	6a92      	ldr	r2, [r2, #40]	; 0x28
    1416:	4053      	eors	r3, r2
    1418:	9301      	str	r3, [sp, #4]
    141a:	0032      	movs	r2, r6
    141c:	4022      	ands	r2, r4
    141e:	0092      	lsls	r2, r2, #2
    1420:	4452      	add	r2, sl
    1422:	4693      	mov	fp, r2
    1424:	0e0a      	lsrs	r2, r1, #24
    1426:	0092      	lsls	r2, r2, #2
    1428:	444a      	add	r2, r9
    142a:	465b      	mov	r3, fp
    142c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    142e:	6a92      	ldr	r2, [r2, #40]	; 0x28
    1430:	405a      	eors	r2, r3
    1432:	69bb      	ldr	r3, [r7, #24]
    1434:	405a      	eors	r2, r3
    1436:	0a03      	lsrs	r3, r0, #8
    1438:	4033      	ands	r3, r6
    143a:	009b      	lsls	r3, r3, #2
    143c:	469b      	mov	fp, r3
    143e:	44c3      	add	fp, r8
    1440:	465b      	mov	r3, fp
    1442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1444:	405a      	eors	r2, r3
    1446:	0c2b      	lsrs	r3, r5, #16
    1448:	4033      	ands	r3, r6
    144a:	009b      	lsls	r3, r3, #2
    144c:	469b      	mov	fp, r3
    144e:	44e3      	add	fp, ip
    1450:	465b      	mov	r3, fp
    1452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1454:	405a      	eors	r2, r3
    1456:	4031      	ands	r1, r6
    1458:	0089      	lsls	r1, r1, #2
    145a:	4451      	add	r1, sl
    145c:	0e2d      	lsrs	r5, r5, #24
    145e:	00ad      	lsls	r5, r5, #2
    1460:	444d      	add	r5, r9
    1462:	6a89      	ldr	r1, [r1, #40]	; 0x28
    1464:	6aad      	ldr	r5, [r5, #40]	; 0x28
    1466:	4069      	eors	r1, r5
    1468:	69fb      	ldr	r3, [r7, #28]
    146a:	4059      	eors	r1, r3
    146c:	0a24      	lsrs	r4, r4, #8
    146e:	4034      	ands	r4, r6
    1470:	00a4      	lsls	r4, r4, #2
    1472:	4444      	add	r4, r8
    1474:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    1476:	4069      	eors	r1, r5
    1478:	0c00      	lsrs	r0, r0, #16
    147a:	4030      	ands	r0, r6
    147c:	0080      	lsls	r0, r0, #2
    147e:	4460      	add	r0, ip
    1480:	6a80      	ldr	r0, [r0, #40]	; 0x28
    1482:	4041      	eors	r1, r0
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    1484:	9803      	ldr	r0, [sp, #12]
    1486:	3801      	subs	r0, #1
    1488:	0004      	movs	r4, r0
    148a:	9003      	str	r0, [sp, #12]
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    148c:	6a38      	ldr	r0, [r7, #32]
    148e:	3720      	adds	r7, #32
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    1490:	2c00      	cmp	r4, #0
    1492:	d000      	beq.n	1496 <mbedtls_internal_aes_decrypt+0x266>
    1494:	e71f      	b.n	12d6 <mbedtls_internal_aes_decrypt+0xa6>
    1496:	9b01      	ldr	r3, [sp, #4]
    1498:	9c07      	ldr	r4, [sp, #28]
    149a:	4d7e      	ldr	r5, [pc, #504]	; (1694 <mbedtls_internal_aes_decrypt+0x464>)
    149c:	46ac      	mov	ip, r5
    149e:	4464      	add	r4, ip
    14a0:	0164      	lsls	r4, r4, #5
    14a2:	9d05      	ldr	r5, [sp, #20]
    14a4:	46ac      	mov	ip, r5
    14a6:	44a4      	add	ip, r4
    14a8:	4664      	mov	r4, ip
    14aa:	9405      	str	r4, [sp, #20]
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
    14ac:	4c75      	ldr	r4, [pc, #468]	; (1684 <mbedtls_internal_aes_decrypt+0x454>)
    14ae:	46a0      	mov	r8, r4
    14b0:	24ff      	movs	r4, #255	; 0xff
    14b2:	9e02      	ldr	r6, [sp, #8]
    14b4:	4026      	ands	r6, r4
    14b6:	00b6      	lsls	r6, r6, #2
    14b8:	4446      	add	r6, r8
    14ba:	4d73      	ldr	r5, [pc, #460]	; (1688 <mbedtls_internal_aes_decrypt+0x458>)
    14bc:	46ac      	mov	ip, r5
    14be:	0e1d      	lsrs	r5, r3, #24
    14c0:	00ad      	lsls	r5, r5, #2
    14c2:	4465      	add	r5, ip
    14c4:	6ab6      	ldr	r6, [r6, #40]	; 0x28
    14c6:	6aad      	ldr	r5, [r5, #40]	; 0x28
    14c8:	4075      	eors	r5, r6
    14ca:	4068      	eors	r0, r5
    14cc:	4d6f      	ldr	r5, [pc, #444]	; (168c <mbedtls_internal_aes_decrypt+0x45c>)
    14ce:	46a9      	mov	r9, r5
    14d0:	0a0d      	lsrs	r5, r1, #8
    14d2:	4025      	ands	r5, r4
    14d4:	00ad      	lsls	r5, r5, #2
    14d6:	444d      	add	r5, r9
    14d8:	6aad      	ldr	r5, [r5, #40]	; 0x28
    14da:	4068      	eors	r0, r5
    14dc:	4f6c      	ldr	r7, [pc, #432]	; (1690 <mbedtls_internal_aes_decrypt+0x460>)
    14de:	0c15      	lsrs	r5, r2, #16
    14e0:	4025      	ands	r5, r4
    14e2:	00ad      	lsls	r5, r5, #2
    14e4:	197d      	adds	r5, r7, r5
    14e6:	6aad      	ldr	r5, [r5, #40]	; 0x28
    14e8:	4068      	eors	r0, r5
    14ea:	4682      	mov	sl, r0
    14ec:	0025      	movs	r5, r4
    14ee:	401d      	ands	r5, r3
    14f0:	00ad      	lsls	r5, r5, #2
    14f2:	4445      	add	r5, r8
    14f4:	0e10      	lsrs	r0, r2, #24
    14f6:	0080      	lsls	r0, r0, #2
    14f8:	4460      	add	r0, ip
    14fa:	6aad      	ldr	r5, [r5, #40]	; 0x28
    14fc:	6a80      	ldr	r0, [r0, #40]	; 0x28
    14fe:	4045      	eors	r5, r0
    1500:	9805      	ldr	r0, [sp, #20]
    1502:	6840      	ldr	r0, [r0, #4]
    1504:	4045      	eors	r5, r0
    1506:	9e02      	ldr	r6, [sp, #8]
    1508:	0a30      	lsrs	r0, r6, #8
    150a:	4020      	ands	r0, r4
    150c:	0080      	lsls	r0, r0, #2
    150e:	4448      	add	r0, r9
    1510:	6a80      	ldr	r0, [r0, #40]	; 0x28
    1512:	4045      	eors	r5, r0
    1514:	0c08      	lsrs	r0, r1, #16
    1516:	4020      	ands	r0, r4
    1518:	0080      	lsls	r0, r0, #2
    151a:	1838      	adds	r0, r7, r0
    151c:	6a80      	ldr	r0, [r0, #40]	; 0x28
    151e:	4045      	eors	r5, r0
    1520:	46ab      	mov	fp, r5
    1522:	0026      	movs	r6, r4
    1524:	4016      	ands	r6, r2
    1526:	00b6      	lsls	r6, r6, #2
    1528:	4446      	add	r6, r8
    152a:	0e08      	lsrs	r0, r1, #24
    152c:	0080      	lsls	r0, r0, #2
    152e:	4460      	add	r0, ip
    1530:	6ab6      	ldr	r6, [r6, #40]	; 0x28
    1532:	6a80      	ldr	r0, [r0, #40]	; 0x28
    1534:	4046      	eors	r6, r0
    1536:	9d05      	ldr	r5, [sp, #20]
    1538:	68a8      	ldr	r0, [r5, #8]
    153a:	4046      	eors	r6, r0
    153c:	0a18      	lsrs	r0, r3, #8
    153e:	4020      	ands	r0, r4
    1540:	0080      	lsls	r0, r0, #2
    1542:	4448      	add	r0, r9
    1544:	6a80      	ldr	r0, [r0, #40]	; 0x28
    1546:	4046      	eors	r6, r0
    1548:	9802      	ldr	r0, [sp, #8]
    154a:	0c00      	lsrs	r0, r0, #16
    154c:	4020      	ands	r0, r4
    154e:	0080      	lsls	r0, r0, #2
    1550:	1838      	adds	r0, r7, r0
    1552:	6a80      	ldr	r0, [r0, #40]	; 0x28
    1554:	4070      	eors	r0, r6
    1556:	4021      	ands	r1, r4
    1558:	0089      	lsls	r1, r1, #2
    155a:	4441      	add	r1, r8
    155c:	9e02      	ldr	r6, [sp, #8]
    155e:	0e36      	lsrs	r6, r6, #24
    1560:	00b6      	lsls	r6, r6, #2
    1562:	4466      	add	r6, ip
    1564:	6a89      	ldr	r1, [r1, #40]	; 0x28
    1566:	6ab6      	ldr	r6, [r6, #40]	; 0x28
    1568:	4071      	eors	r1, r6
    156a:	68ee      	ldr	r6, [r5, #12]
    156c:	4071      	eors	r1, r6
    156e:	0a12      	lsrs	r2, r2, #8
    1570:	4022      	ands	r2, r4
    1572:	0092      	lsls	r2, r2, #2
    1574:	444a      	add	r2, r9
    1576:	6a96      	ldr	r6, [r2, #40]	; 0x28
    1578:	4071      	eors	r1, r6
    157a:	0c1b      	lsrs	r3, r3, #16
    157c:	4023      	ands	r3, r4
    157e:	009b      	lsls	r3, r3, #2
    1580:	18ff      	adds	r7, r7, r3
    1582:	6abe      	ldr	r6, [r7, #40]	; 0x28
    1584:	404e      	eors	r6, r1
    1586:	46b0      	mov	r8, r6

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
    1588:	4652      	mov	r2, sl
    158a:	4022      	ands	r2, r4
    158c:	4b42      	ldr	r3, [pc, #264]	; (1698 <mbedtls_internal_aes_decrypt+0x468>)
    158e:	3328      	adds	r3, #40	; 0x28
    1590:	5c99      	ldrb	r1, [r3, r2]
    X0 = *RK++ ^ \
    1592:	692a      	ldr	r2, [r5, #16]
    1594:	4051      	eors	r1, r2
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
    1596:	465a      	mov	r2, fp
    1598:	0e12      	lsrs	r2, r2, #24
    159a:	5c9a      	ldrb	r2, [r3, r2]
    159c:	0612      	lsls	r2, r2, #24
    X0 = *RK++ ^ \
    159e:	4051      	eors	r1, r2
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
    15a0:	0a32      	lsrs	r2, r6, #8
    15a2:	4022      	ands	r2, r4
    15a4:	5c9a      	ldrb	r2, [r3, r2]
    15a6:	0212      	lsls	r2, r2, #8
    X0 = *RK++ ^ \
    15a8:	4051      	eors	r1, r2
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
    15aa:	0c02      	lsrs	r2, r0, #16
    15ac:	4022      	ands	r2, r4
    15ae:	5c9a      	ldrb	r2, [r3, r2]
    15b0:	0412      	lsls	r2, r2, #16
    X0 = *RK++ ^ \
    15b2:	4051      	eors	r1, r2

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
    15b4:	0022      	movs	r2, r4
    15b6:	465e      	mov	r6, fp
    15b8:	4032      	ands	r2, r6
    15ba:	5c9f      	ldrb	r7, [r3, r2]
    X1 = *RK++ ^ \
    15bc:	696a      	ldr	r2, [r5, #20]
    15be:	4057      	eors	r7, r2
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
    15c0:	0e02      	lsrs	r2, r0, #24
    15c2:	5c9a      	ldrb	r2, [r3, r2]
    15c4:	0612      	lsls	r2, r2, #24
    X1 = *RK++ ^ \
    15c6:	4057      	eors	r7, r2
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
    15c8:	4652      	mov	r2, sl
    15ca:	0a12      	lsrs	r2, r2, #8
    15cc:	4022      	ands	r2, r4
    15ce:	5c9a      	ldrb	r2, [r3, r2]
    15d0:	0212      	lsls	r2, r2, #8
    X1 = *RK++ ^ \
    15d2:	4057      	eors	r7, r2
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
    15d4:	4642      	mov	r2, r8
    15d6:	0c12      	lsrs	r2, r2, #16
    15d8:	4022      	ands	r2, r4
    15da:	5c9a      	ldrb	r2, [r3, r2]
    15dc:	0412      	lsls	r2, r2, #16
    X1 = *RK++ ^ \
    15de:	4057      	eors	r7, r2

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
    15e0:	0022      	movs	r2, r4
    15e2:	4002      	ands	r2, r0
    15e4:	5c9a      	ldrb	r2, [r3, r2]
    X2 = *RK++ ^ \
    15e6:	69ae      	ldr	r6, [r5, #24]
    15e8:	9601      	str	r6, [sp, #4]
    15ea:	4056      	eors	r6, r2
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
    15ec:	4642      	mov	r2, r8
    15ee:	0e12      	lsrs	r2, r2, #24
    15f0:	5c9a      	ldrb	r2, [r3, r2]
    15f2:	0612      	lsls	r2, r2, #24
    X2 = *RK++ ^ \
    15f4:	4072      	eors	r2, r6
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
    15f6:	465e      	mov	r6, fp
    15f8:	0a36      	lsrs	r6, r6, #8
    15fa:	4026      	ands	r6, r4
    15fc:	5d9e      	ldrb	r6, [r3, r6]
    15fe:	0236      	lsls	r6, r6, #8
    X2 = *RK++ ^ \
    1600:	4072      	eors	r2, r6
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
    1602:	4656      	mov	r6, sl
    1604:	0c36      	lsrs	r6, r6, #16
    1606:	4026      	ands	r6, r4
    1608:	5d9e      	ldrb	r6, [r3, r6]
    160a:	0436      	lsls	r6, r6, #16
    X2 = *RK++ ^ \
    160c:	4072      	eors	r2, r6

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
    160e:	4646      	mov	r6, r8
    1610:	4026      	ands	r6, r4
    1612:	5d9e      	ldrb	r6, [r3, r6]
    X3 = *RK++ ^ \
    1614:	69ed      	ldr	r5, [r5, #28]
    1616:	406e      	eors	r6, r5
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
    1618:	4655      	mov	r5, sl
    161a:	0e2d      	lsrs	r5, r5, #24
    161c:	5d5d      	ldrb	r5, [r3, r5]
    161e:	062d      	lsls	r5, r5, #24
    X3 = *RK++ ^ \
    1620:	406e      	eors	r6, r5
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
    1622:	0a00      	lsrs	r0, r0, #8
    1624:	4020      	ands	r0, r4
    1626:	5c18      	ldrb	r0, [r3, r0]
    1628:	0200      	lsls	r0, r0, #8
    X3 = *RK++ ^ \
    162a:	4070      	eors	r0, r6
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
    162c:	465d      	mov	r5, fp
    162e:	0c2d      	lsrs	r5, r5, #16
    1630:	402c      	ands	r4, r5
    1632:	5d1b      	ldrb	r3, [r3, r4]
    1634:	041b      	lsls	r3, r3, #16
    X3 = *RK++ ^ \
    1636:	4043      	eors	r3, r0

    PUT_UINT32_LE( X0, output,  0 );
    1638:	9c06      	ldr	r4, [sp, #24]
    163a:	7021      	strb	r1, [r4, #0]
    163c:	0a08      	lsrs	r0, r1, #8
    163e:	7060      	strb	r0, [r4, #1]
    1640:	0c08      	lsrs	r0, r1, #16
    1642:	70a0      	strb	r0, [r4, #2]
    1644:	0e09      	lsrs	r1, r1, #24
    1646:	70e1      	strb	r1, [r4, #3]
    PUT_UINT32_LE( X1, output,  4 );
    1648:	7127      	strb	r7, [r4, #4]
    164a:	0a39      	lsrs	r1, r7, #8
    164c:	7161      	strb	r1, [r4, #5]
    164e:	0c39      	lsrs	r1, r7, #16
    1650:	71a1      	strb	r1, [r4, #6]
    1652:	0e3f      	lsrs	r7, r7, #24
    1654:	71e7      	strb	r7, [r4, #7]
    PUT_UINT32_LE( X2, output,  8 );
    1656:	7222      	strb	r2, [r4, #8]
    1658:	0a11      	lsrs	r1, r2, #8
    165a:	7261      	strb	r1, [r4, #9]
    165c:	0c11      	lsrs	r1, r2, #16
    165e:	72a1      	strb	r1, [r4, #10]
    1660:	0e12      	lsrs	r2, r2, #24
    1662:	72e2      	strb	r2, [r4, #11]
    PUT_UINT32_LE( X3, output, 12 );
    1664:	7323      	strb	r3, [r4, #12]
    1666:	0a1a      	lsrs	r2, r3, #8
    1668:	7362      	strb	r2, [r4, #13]
    166a:	0c1a      	lsrs	r2, r3, #16
    166c:	73a2      	strb	r2, [r4, #14]
    166e:	0e1b      	lsrs	r3, r3, #24
    1670:	73e3      	strb	r3, [r4, #15]

    return( 0 );
}
    1672:	2000      	movs	r0, #0
    1674:	b009      	add	sp, #36	; 0x24
    1676:	bc3c      	pop	{r2, r3, r4, r5}
    1678:	4690      	mov	r8, r2
    167a:	4699      	mov	r9, r3
    167c:	46a2      	mov	sl, r4
    167e:	46ab      	mov	fp, r5
    1680:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1682:	46c0      	nop			; (mov r8, r8)
    1684:	00001aec 	.word	0x00001aec
    1688:	00001eec 	.word	0x00001eec
    168c:	000022ec 	.word	0x000022ec
    1690:	000026ec 	.word	0x000026ec
    1694:	07ffffff 	.word	0x07ffffff
    1698:	00003aec 	.word	0x00003aec

0000169c <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                           int mode,
                           const unsigned char input[16],
                           unsigned char output[16] )
{
    169c:	b510      	push	{r4, lr}
    169e:	0014      	movs	r4, r2
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
    16a0:	2901      	cmp	r1, #1
    16a2:	d004      	beq.n	16ae <mbedtls_aes_crypt_ecb+0x12>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
    16a4:	001a      	movs	r2, r3
    16a6:	0021      	movs	r1, r4
    16a8:	4b03      	ldr	r3, [pc, #12]	; (16b8 <mbedtls_aes_crypt_ecb+0x1c>)
    16aa:	4798      	blx	r3
}
    16ac:	bd10      	pop	{r4, pc}
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
    16ae:	001a      	movs	r2, r3
    16b0:	0021      	movs	r1, r4
    16b2:	4b02      	ldr	r3, [pc, #8]	; (16bc <mbedtls_aes_crypt_ecb+0x20>)
    16b4:	4798      	blx	r3
    16b6:	e7f9      	b.n	16ac <mbedtls_aes_crypt_ecb+0x10>
    16b8:	00001231 	.word	0x00001231
    16bc:	00000dcd 	.word	0x00000dcd

000016c0 <mbedtls_aes_crypt_cbc>:
                    int mode,
                    size_t length,
                    unsigned char iv[16],
                    const unsigned char *input,
                    unsigned char *output )
{
    16c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    16c2:	46de      	mov	lr, fp
    16c4:	4657      	mov	r7, sl
    16c6:	464e      	mov	r6, r9
    16c8:	4645      	mov	r5, r8
    16ca:	b5e0      	push	{r5, r6, r7, lr}
    16cc:	b087      	sub	sp, #28
    16ce:	9001      	str	r0, [sp, #4]
    16d0:	9100      	str	r1, [sp, #0]
    16d2:	0016      	movs	r6, r2
    16d4:	001d      	movs	r5, r3
    16d6:	9f10      	ldr	r7, [sp, #64]	; 0x40
    16d8:	9c11      	ldr	r4, [sp, #68]	; 0x44
                      mode == MBEDTLS_AES_DECRYPT );
    AES_VALIDATE_RET( iv != NULL );
    AES_VALIDATE_RET( input != NULL );
    AES_VALIDATE_RET( output != NULL );

    if( length % 16 )
    16da:	0713      	lsls	r3, r2, #28
    16dc:	d149      	bne.n	1772 <mbedtls_aes_crypt_cbc+0xb2>
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_DECRYPT )
    16de:	2900      	cmp	r1, #0
    16e0:	d01e      	beq.n	1720 <mbedtls_aes_crypt_cbc+0x60>
            output += 16;
            length -= 16;
        }
    }

    return( 0 );
    16e2:	2000      	movs	r0, #0
        while( length > 0 )
    16e4:	2a00      	cmp	r2, #0
    16e6:	d03d      	beq.n	1764 <mbedtls_aes_crypt_cbc+0xa4>
            mbedtls_aes_crypt_ecb( ctx, mode, output, output );
    16e8:	4b24      	ldr	r3, [pc, #144]	; (177c <mbedtls_aes_crypt_cbc+0xbc>)
    16ea:	4699      	mov	r9, r3
            memcpy( iv, output, 16 );
    16ec:	4b24      	ldr	r3, [pc, #144]	; (1780 <mbedtls_aes_crypt_cbc+0xc0>)
    16ee:	4698      	mov	r8, r3
            for( i = 0; i < 16; i++ )
    16f0:	2300      	movs	r3, #0
                output[i] = (unsigned char)( input[i] ^ iv[i] );
    16f2:	5cfa      	ldrb	r2, [r7, r3]
    16f4:	5ce9      	ldrb	r1, [r5, r3]
    16f6:	404a      	eors	r2, r1
    16f8:	54e2      	strb	r2, [r4, r3]
            for( i = 0; i < 16; i++ )
    16fa:	3301      	adds	r3, #1
    16fc:	2b10      	cmp	r3, #16
    16fe:	d1f8      	bne.n	16f2 <mbedtls_aes_crypt_cbc+0x32>
            mbedtls_aes_crypt_ecb( ctx, mode, output, output );
    1700:	0023      	movs	r3, r4
    1702:	0022      	movs	r2, r4
    1704:	9900      	ldr	r1, [sp, #0]
    1706:	9801      	ldr	r0, [sp, #4]
    1708:	47c8      	blx	r9
            memcpy( iv, output, 16 );
    170a:	2210      	movs	r2, #16
    170c:	0021      	movs	r1, r4
    170e:	0028      	movs	r0, r5
    1710:	47c0      	blx	r8
            input  += 16;
    1712:	3710      	adds	r7, #16
            output += 16;
    1714:	3410      	adds	r4, #16
            length -= 16;
    1716:	3e10      	subs	r6, #16
        while( length > 0 )
    1718:	2e00      	cmp	r6, #0
    171a:	d1e9      	bne.n	16f0 <mbedtls_aes_crypt_cbc+0x30>
    return( 0 );
    171c:	2000      	movs	r0, #0
    171e:	e021      	b.n	1764 <mbedtls_aes_crypt_cbc+0xa4>
        while( length > 0 )
    1720:	2a00      	cmp	r2, #0
    1722:	d029      	beq.n	1778 <mbedtls_aes_crypt_cbc+0xb8>
            memcpy( temp, input, 16 );
    1724:	4b16      	ldr	r3, [pc, #88]	; (1780 <mbedtls_aes_crypt_cbc+0xc0>)
    1726:	469b      	mov	fp, r3
            mbedtls_aes_crypt_ecb( ctx, mode, input, output );
    1728:	4b14      	ldr	r3, [pc, #80]	; (177c <mbedtls_aes_crypt_cbc+0xbc>)
    172a:	469a      	mov	sl, r3
            memcpy( temp, input, 16 );
    172c:	2210      	movs	r2, #16
    172e:	0039      	movs	r1, r7
    1730:	a802      	add	r0, sp, #8
    1732:	47d8      	blx	fp
            mbedtls_aes_crypt_ecb( ctx, mode, input, output );
    1734:	0023      	movs	r3, r4
    1736:	003a      	movs	r2, r7
    1738:	2100      	movs	r1, #0
    173a:	9801      	ldr	r0, [sp, #4]
    173c:	47d0      	blx	sl
            for( i = 0; i < 16; i++ )
    173e:	9b00      	ldr	r3, [sp, #0]
                output[i] = (unsigned char)( output[i] ^ iv[i] );
    1740:	5ce2      	ldrb	r2, [r4, r3]
    1742:	5ce9      	ldrb	r1, [r5, r3]
    1744:	404a      	eors	r2, r1
    1746:	54e2      	strb	r2, [r4, r3]
            for( i = 0; i < 16; i++ )
    1748:	3301      	adds	r3, #1
    174a:	2b10      	cmp	r3, #16
    174c:	d1f8      	bne.n	1740 <mbedtls_aes_crypt_cbc+0x80>
            memcpy( iv, temp, 16 );
    174e:	2210      	movs	r2, #16
    1750:	a902      	add	r1, sp, #8
    1752:	0028      	movs	r0, r5
    1754:	4b0a      	ldr	r3, [pc, #40]	; (1780 <mbedtls_aes_crypt_cbc+0xc0>)
    1756:	4798      	blx	r3
            input  += 16;
    1758:	3710      	adds	r7, #16
            output += 16;
    175a:	3410      	adds	r4, #16
            length -= 16;
    175c:	3e10      	subs	r6, #16
        while( length > 0 )
    175e:	2e00      	cmp	r6, #0
    1760:	d1e4      	bne.n	172c <mbedtls_aes_crypt_cbc+0x6c>
    return( 0 );
    1762:	9800      	ldr	r0, [sp, #0]
}
    1764:	b007      	add	sp, #28
    1766:	bc3c      	pop	{r2, r3, r4, r5}
    1768:	4690      	mov	r8, r2
    176a:	4699      	mov	r9, r3
    176c:	46a2      	mov	sl, r4
    176e:	46ab      	mov	fp, r5
    1770:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return( MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH );
    1772:	2022      	movs	r0, #34	; 0x22
    1774:	4240      	negs	r0, r0
    1776:	e7f5      	b.n	1764 <mbedtls_aes_crypt_cbc+0xa4>
    return( 0 );
    1778:	9800      	ldr	r0, [sp, #0]
    177a:	e7f3      	b.n	1764 <mbedtls_aes_crypt_cbc+0xa4>
    177c:	0000169d 	.word	0x0000169d
    1780:	00001809 	.word	0x00001809

00001784 <mbedtls_platform_zeroize>:
 * platform and needs.
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
    1784:	b510      	push	{r4, lr}
    1786:	000a      	movs	r2, r1
    memset_func( buf, 0, len );
    1788:	4b02      	ldr	r3, [pc, #8]	; (1794 <mbedtls_platform_zeroize+0x10>)
    178a:	681b      	ldr	r3, [r3, #0]
    178c:	2100      	movs	r1, #0
    178e:	4798      	blx	r3
}
    1790:	bd10      	pop	{r4, pc}
    1792:	46c0      	nop			; (mov r8, r8)
    1794:	20000020 	.word	0x20000020

00001798 <__libc_init_array>:
    1798:	b570      	push	{r4, r5, r6, lr}
    179a:	2600      	movs	r6, #0
    179c:	4d0c      	ldr	r5, [pc, #48]	; (17d0 <__libc_init_array+0x38>)
    179e:	4c0d      	ldr	r4, [pc, #52]	; (17d4 <__libc_init_array+0x3c>)
    17a0:	1b64      	subs	r4, r4, r5
    17a2:	10a4      	asrs	r4, r4, #2
    17a4:	42a6      	cmp	r6, r4
    17a6:	d109      	bne.n	17bc <__libc_init_array+0x24>
    17a8:	2600      	movs	r6, #0
    17aa:	f002 fda1 	bl	42f0 <_init>
    17ae:	4d0a      	ldr	r5, [pc, #40]	; (17d8 <__libc_init_array+0x40>)
    17b0:	4c0a      	ldr	r4, [pc, #40]	; (17dc <__libc_init_array+0x44>)
    17b2:	1b64      	subs	r4, r4, r5
    17b4:	10a4      	asrs	r4, r4, #2
    17b6:	42a6      	cmp	r6, r4
    17b8:	d105      	bne.n	17c6 <__libc_init_array+0x2e>
    17ba:	bd70      	pop	{r4, r5, r6, pc}
    17bc:	00b3      	lsls	r3, r6, #2
    17be:	58eb      	ldr	r3, [r5, r3]
    17c0:	4798      	blx	r3
    17c2:	3601      	adds	r6, #1
    17c4:	e7ee      	b.n	17a4 <__libc_init_array+0xc>
    17c6:	00b3      	lsls	r3, r6, #2
    17c8:	58eb      	ldr	r3, [r5, r3]
    17ca:	4798      	blx	r3
    17cc:	3601      	adds	r6, #1
    17ce:	e7f2      	b.n	17b6 <__libc_init_array+0x1e>
    17d0:	000042fc 	.word	0x000042fc
    17d4:	000042fc 	.word	0x000042fc
    17d8:	000042fc 	.word	0x000042fc
    17dc:	00004300 	.word	0x00004300

000017e0 <malloc>:
    17e0:	b510      	push	{r4, lr}
    17e2:	4b03      	ldr	r3, [pc, #12]	; (17f0 <malloc+0x10>)
    17e4:	0001      	movs	r1, r0
    17e6:	6818      	ldr	r0, [r3, #0]
    17e8:	f000 f86a 	bl	18c0 <_malloc_r>
    17ec:	bd10      	pop	{r4, pc}
    17ee:	46c0      	nop			; (mov r8, r8)
    17f0:	20000024 	.word	0x20000024

000017f4 <free>:
    17f4:	b510      	push	{r4, lr}
    17f6:	4b03      	ldr	r3, [pc, #12]	; (1804 <free+0x10>)
    17f8:	0001      	movs	r1, r0
    17fa:	6818      	ldr	r0, [r3, #0]
    17fc:	f000 f816 	bl	182c <_free_r>
    1800:	bd10      	pop	{r4, pc}
    1802:	46c0      	nop			; (mov r8, r8)
    1804:	20000024 	.word	0x20000024

00001808 <memcpy>:
    1808:	2300      	movs	r3, #0
    180a:	b510      	push	{r4, lr}
    180c:	429a      	cmp	r2, r3
    180e:	d100      	bne.n	1812 <memcpy+0xa>
    1810:	bd10      	pop	{r4, pc}
    1812:	5ccc      	ldrb	r4, [r1, r3]
    1814:	54c4      	strb	r4, [r0, r3]
    1816:	3301      	adds	r3, #1
    1818:	e7f8      	b.n	180c <memcpy+0x4>

0000181a <memset>:
    181a:	0003      	movs	r3, r0
    181c:	1882      	adds	r2, r0, r2
    181e:	4293      	cmp	r3, r2
    1820:	d100      	bne.n	1824 <memset+0xa>
    1822:	4770      	bx	lr
    1824:	7019      	strb	r1, [r3, #0]
    1826:	3301      	adds	r3, #1
    1828:	e7f9      	b.n	181e <memset+0x4>
	...

0000182c <_free_r>:
    182c:	b570      	push	{r4, r5, r6, lr}
    182e:	0005      	movs	r5, r0
    1830:	2900      	cmp	r1, #0
    1832:	d010      	beq.n	1856 <_free_r+0x2a>
    1834:	1f0c      	subs	r4, r1, #4
    1836:	6823      	ldr	r3, [r4, #0]
    1838:	2b00      	cmp	r3, #0
    183a:	da00      	bge.n	183e <_free_r+0x12>
    183c:	18e4      	adds	r4, r4, r3
    183e:	0028      	movs	r0, r5
    1840:	f000 f8ae 	bl	19a0 <__malloc_lock>
    1844:	4a1d      	ldr	r2, [pc, #116]	; (18bc <_free_r+0x90>)
    1846:	6813      	ldr	r3, [r2, #0]
    1848:	2b00      	cmp	r3, #0
    184a:	d105      	bne.n	1858 <_free_r+0x2c>
    184c:	6063      	str	r3, [r4, #4]
    184e:	6014      	str	r4, [r2, #0]
    1850:	0028      	movs	r0, r5
    1852:	f000 f8a6 	bl	19a2 <__malloc_unlock>
    1856:	bd70      	pop	{r4, r5, r6, pc}
    1858:	42a3      	cmp	r3, r4
    185a:	d909      	bls.n	1870 <_free_r+0x44>
    185c:	6821      	ldr	r1, [r4, #0]
    185e:	1860      	adds	r0, r4, r1
    1860:	4283      	cmp	r3, r0
    1862:	d1f3      	bne.n	184c <_free_r+0x20>
    1864:	6818      	ldr	r0, [r3, #0]
    1866:	685b      	ldr	r3, [r3, #4]
    1868:	1841      	adds	r1, r0, r1
    186a:	6021      	str	r1, [r4, #0]
    186c:	e7ee      	b.n	184c <_free_r+0x20>
    186e:	0013      	movs	r3, r2
    1870:	685a      	ldr	r2, [r3, #4]
    1872:	2a00      	cmp	r2, #0
    1874:	d001      	beq.n	187a <_free_r+0x4e>
    1876:	42a2      	cmp	r2, r4
    1878:	d9f9      	bls.n	186e <_free_r+0x42>
    187a:	6819      	ldr	r1, [r3, #0]
    187c:	1858      	adds	r0, r3, r1
    187e:	42a0      	cmp	r0, r4
    1880:	d10b      	bne.n	189a <_free_r+0x6e>
    1882:	6820      	ldr	r0, [r4, #0]
    1884:	1809      	adds	r1, r1, r0
    1886:	1858      	adds	r0, r3, r1
    1888:	6019      	str	r1, [r3, #0]
    188a:	4282      	cmp	r2, r0
    188c:	d1e0      	bne.n	1850 <_free_r+0x24>
    188e:	6810      	ldr	r0, [r2, #0]
    1890:	6852      	ldr	r2, [r2, #4]
    1892:	1841      	adds	r1, r0, r1
    1894:	6019      	str	r1, [r3, #0]
    1896:	605a      	str	r2, [r3, #4]
    1898:	e7da      	b.n	1850 <_free_r+0x24>
    189a:	42a0      	cmp	r0, r4
    189c:	d902      	bls.n	18a4 <_free_r+0x78>
    189e:	230c      	movs	r3, #12
    18a0:	602b      	str	r3, [r5, #0]
    18a2:	e7d5      	b.n	1850 <_free_r+0x24>
    18a4:	6821      	ldr	r1, [r4, #0]
    18a6:	1860      	adds	r0, r4, r1
    18a8:	4282      	cmp	r2, r0
    18aa:	d103      	bne.n	18b4 <_free_r+0x88>
    18ac:	6810      	ldr	r0, [r2, #0]
    18ae:	6852      	ldr	r2, [r2, #4]
    18b0:	1841      	adds	r1, r0, r1
    18b2:	6021      	str	r1, [r4, #0]
    18b4:	6062      	str	r2, [r4, #4]
    18b6:	605c      	str	r4, [r3, #4]
    18b8:	e7ca      	b.n	1850 <_free_r+0x24>
    18ba:	46c0      	nop			; (mov r8, r8)
    18bc:	200002e0 	.word	0x200002e0

000018c0 <_malloc_r>:
    18c0:	2303      	movs	r3, #3
    18c2:	b570      	push	{r4, r5, r6, lr}
    18c4:	1ccd      	adds	r5, r1, #3
    18c6:	439d      	bics	r5, r3
    18c8:	3508      	adds	r5, #8
    18ca:	0006      	movs	r6, r0
    18cc:	2d0c      	cmp	r5, #12
    18ce:	d21e      	bcs.n	190e <_malloc_r+0x4e>
    18d0:	250c      	movs	r5, #12
    18d2:	42a9      	cmp	r1, r5
    18d4:	d81d      	bhi.n	1912 <_malloc_r+0x52>
    18d6:	0030      	movs	r0, r6
    18d8:	f000 f862 	bl	19a0 <__malloc_lock>
    18dc:	4a25      	ldr	r2, [pc, #148]	; (1974 <_malloc_r+0xb4>)
    18de:	6814      	ldr	r4, [r2, #0]
    18e0:	0021      	movs	r1, r4
    18e2:	2900      	cmp	r1, #0
    18e4:	d119      	bne.n	191a <_malloc_r+0x5a>
    18e6:	4c24      	ldr	r4, [pc, #144]	; (1978 <_malloc_r+0xb8>)
    18e8:	6823      	ldr	r3, [r4, #0]
    18ea:	2b00      	cmp	r3, #0
    18ec:	d103      	bne.n	18f6 <_malloc_r+0x36>
    18ee:	0030      	movs	r0, r6
    18f0:	f000 f844 	bl	197c <_sbrk_r>
    18f4:	6020      	str	r0, [r4, #0]
    18f6:	0029      	movs	r1, r5
    18f8:	0030      	movs	r0, r6
    18fa:	f000 f83f 	bl	197c <_sbrk_r>
    18fe:	1c43      	adds	r3, r0, #1
    1900:	d12c      	bne.n	195c <_malloc_r+0x9c>
    1902:	230c      	movs	r3, #12
    1904:	0030      	movs	r0, r6
    1906:	6033      	str	r3, [r6, #0]
    1908:	f000 f84b 	bl	19a2 <__malloc_unlock>
    190c:	e003      	b.n	1916 <_malloc_r+0x56>
    190e:	2d00      	cmp	r5, #0
    1910:	dadf      	bge.n	18d2 <_malloc_r+0x12>
    1912:	230c      	movs	r3, #12
    1914:	6033      	str	r3, [r6, #0]
    1916:	2000      	movs	r0, #0
    1918:	bd70      	pop	{r4, r5, r6, pc}
    191a:	680b      	ldr	r3, [r1, #0]
    191c:	1b5b      	subs	r3, r3, r5
    191e:	d41a      	bmi.n	1956 <_malloc_r+0x96>
    1920:	2b0b      	cmp	r3, #11
    1922:	d903      	bls.n	192c <_malloc_r+0x6c>
    1924:	600b      	str	r3, [r1, #0]
    1926:	18cc      	adds	r4, r1, r3
    1928:	6025      	str	r5, [r4, #0]
    192a:	e003      	b.n	1934 <_malloc_r+0x74>
    192c:	428c      	cmp	r4, r1
    192e:	d10e      	bne.n	194e <_malloc_r+0x8e>
    1930:	6863      	ldr	r3, [r4, #4]
    1932:	6013      	str	r3, [r2, #0]
    1934:	0030      	movs	r0, r6
    1936:	f000 f834 	bl	19a2 <__malloc_unlock>
    193a:	0020      	movs	r0, r4
    193c:	2207      	movs	r2, #7
    193e:	300b      	adds	r0, #11
    1940:	1d23      	adds	r3, r4, #4
    1942:	4390      	bics	r0, r2
    1944:	1ac3      	subs	r3, r0, r3
    1946:	d0e7      	beq.n	1918 <_malloc_r+0x58>
    1948:	425a      	negs	r2, r3
    194a:	50e2      	str	r2, [r4, r3]
    194c:	e7e4      	b.n	1918 <_malloc_r+0x58>
    194e:	684b      	ldr	r3, [r1, #4]
    1950:	6063      	str	r3, [r4, #4]
    1952:	000c      	movs	r4, r1
    1954:	e7ee      	b.n	1934 <_malloc_r+0x74>
    1956:	000c      	movs	r4, r1
    1958:	6849      	ldr	r1, [r1, #4]
    195a:	e7c2      	b.n	18e2 <_malloc_r+0x22>
    195c:	2303      	movs	r3, #3
    195e:	1cc4      	adds	r4, r0, #3
    1960:	439c      	bics	r4, r3
    1962:	42a0      	cmp	r0, r4
    1964:	d0e0      	beq.n	1928 <_malloc_r+0x68>
    1966:	1a21      	subs	r1, r4, r0
    1968:	0030      	movs	r0, r6
    196a:	f000 f807 	bl	197c <_sbrk_r>
    196e:	1c43      	adds	r3, r0, #1
    1970:	d1da      	bne.n	1928 <_malloc_r+0x68>
    1972:	e7c6      	b.n	1902 <_malloc_r+0x42>
    1974:	200002e0 	.word	0x200002e0
    1978:	200002e4 	.word	0x200002e4

0000197c <_sbrk_r>:
    197c:	2300      	movs	r3, #0
    197e:	b570      	push	{r4, r5, r6, lr}
    1980:	4c06      	ldr	r4, [pc, #24]	; (199c <_sbrk_r+0x20>)
    1982:	0005      	movs	r5, r0
    1984:	0008      	movs	r0, r1
    1986:	6023      	str	r3, [r4, #0]
    1988:	f7fe fd10 	bl	3ac <_sbrk>
    198c:	1c43      	adds	r3, r0, #1
    198e:	d103      	bne.n	1998 <_sbrk_r+0x1c>
    1990:	6823      	ldr	r3, [r4, #0]
    1992:	2b00      	cmp	r3, #0
    1994:	d000      	beq.n	1998 <_sbrk_r+0x1c>
    1996:	602b      	str	r3, [r5, #0]
    1998:	bd70      	pop	{r4, r5, r6, pc}
    199a:	46c0      	nop			; (mov r8, r8)
    199c:	20000304 	.word	0x20000304

000019a0 <__malloc_lock>:
    19a0:	4770      	bx	lr

000019a2 <__malloc_unlock>:
    19a2:	4770      	bx	lr
    19a4:	682f2e2e 	.word	0x682f2e2e
    19a8:	732f6c61 	.word	0x732f6c61
    19ac:	682f6372 	.word	0x682f6372
    19b0:	665f6c61 	.word	0x665f6c61
    19b4:	6873616c 	.word	0x6873616c
    19b8:	0000632e 	.word	0x0000632e
    19bc:	682f2e2e 	.word	0x682f2e2e
    19c0:	6e2f6c70 	.word	0x6e2f6c70
    19c4:	74636d76 	.word	0x74636d76
    19c8:	682f6c72 	.word	0x682f6c72
    19cc:	6e5f6c70 	.word	0x6e5f6c70
    19d0:	74636d76 	.word	0x74636d76
    19d4:	632e6c72 	.word	0x632e6c72
    19d8:	00000000 	.word	0x00000000

000019dc <key_128>:
    19dc:	10eb3d60 be71ca15 f0ae732b 81777d85     `=....q.+s...}w.

000019ec <RCON>:
    19ec:	00000001 00000002 00000004 00000008     ................
    19fc:	00000010 00000020 00000040 00000080     .... ...@.......
    1a0c:	0000001b 00000036                       ....6...

00001a14 <FSb>:
    1a14:	7b777c63 c56f6bf2 2b670130 76abd7fe     c|w{.ko.0.g+...v
    1a24:	7dc982ca f04759fa afa2d4ad c072a49c     ...}.YG.......r.
    1a34:	2693fdb7 ccf73f36 f1e5a534 1531d871     ...&6?..4...q.1.
    1a44:	c323c704 9a059618 e2801207 75b227eb     ..#..........'.u
    1a54:	1a2c8309 a05a6e1b b3d63b52 842fe329     ..,..nZ.R;..)./.
    1a64:	ed00d153 5bb1fc20 39becb6a cf584c4a     S... ..[j..9JLX.
    1a74:	fbaaefd0 85334d43 7f02f945 a89f3c50     ....CM3.E...P<..
    1a84:	8f40a351 f5389d92 21dab6bc d2f3ff10     Q.@...8....!....
    1a94:	ec130ccd 1744975f 3d7ea7c4 73195d64     ...._.D...~=d].s
    1aa4:	dc4f8160 88902a22 14b8ee46 db0b5ede     `.O."*..F....^..
    1ab4:	0a3a32e0 5c240649 62acd3c2 79e49591     .2:.I.$\...b...y
    1ac4:	6d37c8e7 a94ed58d eaf4566c 08ae7a65     ..7m..N.lV..ez..
    1ad4:	2e2578ba c6b4a61c 1f74dde8 8a8bbd4b     .x%.......t.K...
    1ae4:	66b53e70 0ef60348 b9573561 9e1dc186     p>.fH...a5W.....
    1af4:	1198f8e1 948ed969 e9871e9b df2855ce     ....i........U(.
    1b04:	0d89a18c 6842e6bf 0f2d9941 16bb54b0     ......BhA.-..T..

00001b14 <RT0>:
    1b14:	50a7f451 5365417e c3a4171a 965e273a     Q..P~AeS....:'^.
    1b24:	cb6bab3b f1459d1f ab58faac 9303e34b     ;.k...E...X.K...
    1b34:	55fa3020 f66d76ad 9176cc88 254c02f5      0.U.vm...v...L%
    1b44:	fcd7e54f d7cb2ac5 80443526 8fa362b5     O....*..&5D..b..
    1b54:	495ab1de 671bba25 980eea45 e1c0fe5d     ..ZI%..gE...]...
    1b64:	02752fc3 12f04c81 a397468d c6f9d36b     ./u..L...F..k...
    1b74:	e75f8f03 959c9215 eb7a6dbf da595295     .._......mz..RY.
    1b84:	2d83bed4 d3217458 2969e049 44c8c98e     ...-Xt!.I.i)...D
    1b94:	6a89c275 78798ef4 6b3e5899 dd71b927     u..j..yx.X>k'.q.
    1ba4:	b64fe1be 17ad88f0 66ac20c9 b43ace7d     ..O...... .f}.:.
    1bb4:	184adf63 82311ae5 60335197 457f5362     c.J...1..Q3`bS.E
    1bc4:	e07764b1 84ae6bbb 1ca081fe 942b08f9     .dw..k........+.
    1bd4:	58684870 19fd458f 876cde94 b7f87b52     pHhX.E....l.R{..
    1be4:	23d373ab e2024b72 578f1fe3 2aab5566     .s.#rK.....WfU.*
    1bf4:	0728ebb2 03c2b52f 9a7bc586 a50837d3     ..(./.....{..7..
    1c04:	f2872830 b2a5bf23 ba6a0302 5c8216ed     0(..#.....j....\
    1c14:	2b1ccf8a 92b479a7 f0f207f3 a1e2694e     ...+.y......Ni..
    1c24:	cdf4da65 d5be0506 1f6234d1 8afea6c4     e........4b.....
    1c34:	9d532e34 a055f3a2 32e18a05 75ebf6a4     4.S...U....2...u
    1c44:	39ec830b aaef6040 069f715e 51106ebd     ...9@`..^q...n.Q
    1c54:	f98a213e 3d06dd96 ae053edd 46bde64d     >!.....=.>..M..F
    1c64:	b58d5491 055dc471 6fd40604 ff155060     .T..q.]....o`P..
    1c74:	24fb9819 97e9bdd6 cc434089 779ed967     ...$.....@C.g..w
    1c84:	bd42e8b0 888b8907 385b19e7 dbeec879     ..B.......[8y...
    1c94:	470a7ca1 e90f427c c91e84f8 00000000     .|.G|B..........
    1ca4:	83868009 48ed2b32 ac70111e 4e725a6c     ....2+.H..p.lZrN
    1cb4:	fbff0efd 5638850f 1ed5ae3d 27392d36     ......8V=...6-9'
    1cc4:	64d90f0a 21a65c68 d1545b9b 3a2e3624     ...dh\.!.[T.$6.:
    1cd4:	b1670a0c 0fe75793 d296eeb4 9e919b1b     ..g..W..........
    1ce4:	4fc5c080 a220dc61 694b775a 161a121c     ...Oa. .ZwKi....
    1cf4:	0aba93e2 e52aa0c0 43e0223c 1d171b12     ......*.<".C....
    1d04:	0b0d090e adc78bf2 b9a8b62d c8a91e14     ........-.......
    1d14:	8519f157 4c0775af bbdd99ee fd607fa3     W....u.L......`.
    1d24:	9f2601f7 bcf5725c c53b6644 347efb5b     ..&.\r..Df;.[.~4
    1d34:	7629438b dcc623cb 68fcedb6 63f1e4b8     .C)v.#.....h...c
    1d44:	cadc31d7 10856342 40229713 2011c684     .1..Bc...."@... 
    1d54:	7d244a85 f83dbbd2 1132f9ae 6da129c7     .J$}..=...2..).m
    1d64:	4b2f9e1d f330b2dc ec52860d d0e3c177     ../K..0...R.w...
    1d74:	6c16b32b 99b970a9 fa489411 2264e947     +..l.p....H.G.d"
    1d84:	c48cfca8 1a3ff0a0 d82c7d56 ef903322     ......?.V},."3..
    1d94:	c74e4987 c1d138d9 fea2ca8c 360bd498     .IN..8.........6
    1da4:	cf81f5a6 28de7aa5 268eb7da a4bfad3f     .....z.(...&?...
    1db4:	e49d3a2c 0d927850 9bcc5f6a 62467e54     ,:..Px..j_..T~Fb
    1dc4:	c2138df6 e8b8d890 5ef7392e f5afc382     .........9.^....
    1dd4:	be805d9f 7c93d069 a92dd56f b31225cf     .]..i..|o.-..%..
    1de4:	3b99acc8 a77d1810 6e639ce8 7bbb3bdb     ...;..}...cn.;.{
    1df4:	097826cd f418596e 01b79aec a89a4f83     .&x.nY.......O..
    1e04:	656e95e6 7ee6ffaa 08cfbc21 e6e815ef     ..ne...~!.......
    1e14:	d99be7ba ce366f4a d4099fea d67cb029     ....Jo6.....).|.
    1e24:	afb2a431 31233f2a 3094a5c6 c066a235     1...*?#1...05.f.
    1e34:	37bc4e74 a6ca82fc b0d090e0 15d8a733     tN.7........3...
    1e44:	4a9804f1 f7daec41 0e50cd7f 2ff69117     ...JA.....P..../
    1e54:	8dd64d76 4db0ef43 544daacc df0496e4     vM..C..M..MT....
    1e64:	e3b5d19e 1b886a4c b81f2cc1 7f516546     ....Lj...,..FeQ.
    1e74:	04ea5e9d 5d358c01 737487fa 2e410bfb     .^....5]..ts..A.
    1e84:	5a1d67b3 52d2db92 335610e9 1347d66d     .g.Z...R..V3m.G.
    1e94:	8c61d79a 7a0ca137 8e14f859 893c13eb     ..a.7..zY.....<.
    1ea4:	ee27a9ce 35c961b7 ede51ce1 3cb1477a     ..'..a.5....zG.<
    1eb4:	59dfd29c 3f73f255 79ce1418 bf37c773     ...YU.s?...ys.7.
    1ec4:	eacdf753 5baafd5f 146f3ddf 86db4478     S..._..[.=o.xD..
    1ed4:	81f3afca 3ec468b9 2c342438 5f40a3c2     .....h.>8$4,..@_
    1ee4:	72c31d16 0c25e2bc 8b493c28 41950dff     ...r..%.(<I....A
    1ef4:	7101a839 deb30c08 9ce4b4d8 90c15664     9..q........dV..
    1f04:	6184cb7b 70b632d5 745c6c48 4257b8d0     {..a.2.pHl\t..WB

00001f14 <RT3>:
    1f14:	5150a7f4 7e536541 1ac3a417 3a965e27     ..PQAeS~....'^.:
    1f24:	3bcb6bab 1ff1459d acab58fa 4b9303e3     .k.;.E...X.....K
    1f34:	2055fa30 adf66d76 889176cc f5254c02     0.U vm...v...L%.
    1f44:	4ffcd7e5 c5d7cb2a 26804435 b58fa362     ...O*...5D.&b...
    1f54:	de495ab1 25671bba 45980eea 5de1c0fe     .ZI...g%...E...]
    1f64:	c302752f 8112f04c 8da39746 6bc6f9d3     /u..L...F......k
    1f74:	03e75f8f 15959c92 bfeb7a6d 95da5952     ._......mz..RY..
    1f84:	d42d83be 58d32174 492969e0 8e44c8c9     ..-.t!.X.i)I..D.
    1f94:	756a89c2 f478798e 996b3e58 27dd71b9     ..ju.yx.X>k..q.'
    1fa4:	beb64fe1 f017ad88 c966ac20 7db43ace     .O...... .f..:.}
    1fb4:	63184adf e582311a 97603351 62457f53     .J.c.1..Q3`.S.Eb
    1fc4:	b1e07764 bb84ae6b fe1ca081 f9942b08     dw..k........+..
    1fd4:	70586848 8f19fd45 94876cde 52b7f87b     HhXpE....l..{..R
    1fe4:	ab23d373 72e2024b e3578f1f 662aab55     s.#.K..r..W.U.*f
    1ff4:	b20728eb 2f03c2b5 869a7bc5 d3a50837     .(...../.{..7...
    2004:	30f28728 23b2a5bf 02ba6a03 ed5c8216     (..0...#.j....\.
    2014:	8a2b1ccf a792b479 f3f0f207 4ea1e269     ..+.y.......i..N
    2024:	65cdf4da 06d5be05 d11f6234 c48afea6     ...e....4b......
    2034:	349d532e a2a055f3 0532e18a a475ebf6     .S.4.U....2...u.
    2044:	0b39ec83 40aaef60 5e069f71 bd51106e     ..9.`..@q..^n.Q.
    2054:	3ef98a21 963d06dd ddae053e 4d46bde6     !..>..=.>.....FM
    2064:	91b58d54 71055dc4 046fd406 60ff1550     T....].q..o.P..`
    2074:	1924fb98 d697e9bd 89cc4340 67779ed9     ..$.....@C....wg
    2084:	b0bd42e8 07888b89 e7385b19 79dbeec8     .B.......[8....y
    2094:	a1470a7c 7ce90f42 f8c91e84 00000000     |.G.B..|........
    20a4:	09838680 3248ed2b 1eac7011 6c4e725a     ....+.H2.p..ZrNl
    20b4:	fdfbff0e 0f563885 3d1ed5ae 3627392d     .....8V....=-9'6
    20c4:	0a64d90f 6821a65c 9bd1545b 243a2e36     ..d.\.!h[T..6.:$
    20d4:	0cb1670a 930fe757 b4d296ee 1b9e919b     .g..W...........
    20e4:	804fc5c0 61a220dc 5a694b77 1c161a12     ..O.. .awKiZ....
    20f4:	e20aba93 c0e52aa0 3c43e022 121d171b     .....*..".C<....
    2104:	0e0b0d09 f2adc78b 2db9a8b6 14c8a91e     ...........-....
    2114:	578519f1 af4c0775 eebbdd99 a3fd607f     ...Wu.L......`..
    2124:	f79f2601 5cbcf572 44c53b66 5b347efb     .&..r..\f;.D.~4[
    2134:	8b762943 cbdcc623 b668fced b863f1e4     C)v.#.....h...c.
    2144:	d7cadc31 42108563 13402297 842011c6     1...c..B."@... .
    2154:	857d244a d2f83dbb ae1132f9 c76da129     J$}..=...2..).m.
    2164:	1d4b2f9e dcf330b2 0dec5286 77d0e3c1     ./K..0...R.....w
    2174:	2b6c16b3 a999b970 11fa4894 472264e9     ..l+p....H...d"G
    2184:	a8c48cfc a01a3ff0 56d82c7d 22ef9033     .....?..},.V3.."
    2194:	87c74e49 d9c1d138 8cfea2ca 98360bd4     IN..8.........6.
    21a4:	a6cf81f5 a528de7a da268eb7 3fa4bfad     ....z.(...&....?
    21b4:	2ce49d3a 500d9278 6a9bcc5f 5462467e     :..,x..P_..j~FbT
    21c4:	f6c2138d 90e8b8d8 2e5ef739 82f5afc3     ........9.^.....
    21d4:	9fbe805d 697c93d0 6fa92dd5 cfb31225     ].....|i.-.o%...
    21e4:	c83b99ac 10a77d18 e86e639c db7bbb3b     ..;..}...cn.;.{.
    21f4:	cd097826 6ef41859 ec01b79a 83a89a4f     &x..Y..n....O...
    2204:	e6656e95 aa7ee6ff 2108cfbc efe6e815     .ne...~....!....
    2214:	bad99be7 4ace366f ead4099f 29d67cb0     ....o6.J.....|.)
    2224:	31afb2a4 2a31233f c63094a5 35c066a2     ...1?#1*..0..f.5
    2234:	7437bc4e fca6ca82 e0b0d090 3315d8a7     N.7t...........3
    2244:	f14a9804 41f7daec 7f0e50cd 172ff691     ..J....A.P..../.
    2254:	768dd64d 434db0ef cc544daa e4df0496     M..v..MC.MT.....
    2264:	9ee3b5d1 4c1b886a c1b81f2c 467f5165     ....j..L,...eQ.F
    2274:	9d04ea5e 015d358c fa737487 fb2e410b     ^....5]..ts..A..
    2284:	b35a1d67 9252d2db e9335610 6d1347d6     g.Z...R..V3..G.m
    2294:	9a8c61d7 377a0ca1 598e14f8 eb893c13     .a....z7...Y.<..
    22a4:	ceee27a9 b735c961 e1ede51c 7a3cb147     .'..a.5.....G.<z
    22b4:	9c59dfd2 553f73f2 1879ce14 73bf37c7     ..Y..s?U..y..7.s
    22c4:	53eacdf7 5f5baafd df146f3d 7886db44     ...S..[_=o..D..x
    22d4:	ca81f3af b93ec468 382c3424 c25f40a3     ....h.>.$4,8.@_.
    22e4:	1672c31d bc0c25e2 288b493c ff41950d     ..r..%..<I.(..A.
    22f4:	397101a8 08deb30c d89ce4b4 6490c156     ..q9........V..d
    2304:	7b6184cb d570b632 48745c6c d04257b8     ..a{2.p.l\tH.WB.

00002314 <RT1>:
    2314:	a7f45150 65417e53 a4171ac3 5e273a96     PQ..S~Ae.....:'^
    2324:	6bab3bcb 459d1ff1 58faacab 03e34b93     .;.k...E...X.K..
    2334:	fa302055 6d76adf6 76cc8891 4c02f525     U 0...vm...v%..L
    2344:	d7e54ffc cb2ac5d7 44352680 a362b58f     .O....*..&5D..b.
    2354:	5ab1de49 1bba2567 0eea4598 c0fe5de1     I..Zg%...E...]..
    2364:	752fc302 f04c8112 97468da3 f9d36bc6     ../u..L...F..k..
    2374:	5f8f03e7 9c921595 7a6dbfeb 595295da     ..._......mz..RY
    2384:	83bed42d 217458d3 69e04929 c8c98e44     -....Xt!)I.iD...
    2394:	89c2756a 798ef478 3e58996b 71b927dd     ju..x..yk.X>.'.q
    23a4:	4fe1beb6 ad88f017 ac20c966 3ace7db4     ...O....f. ..}.:
    23b4:	4adf6318 311ae582 33519760 7f536245     .c.J...1`.Q3EbS.
    23c4:	7764b1e0 ae6bbb84 a081fe1c 2b08f994     ..dw..k........+
    23d4:	68487058 fd458f19 6cde9487 f87b52b7     XpHh..E....l.R{.
    23e4:	d373ab23 024b72e2 8f1fe357 ab55662a     #.s..rK.W...*fU.
    23f4:	28ebb207 c2b52f03 7bc5869a 0837d3a5     ...(./.....{..7.
    2404:	872830f2 a5bf23b2 6a0302ba 8216ed5c     .0(..#.....j\...
    2414:	1ccf8a2b b479a792 f207f3f0 e2694ea1     +.....y......Ni.
    2424:	f4da65cd be0506d5 6234d11f fea6c48a     .e........4b....
    2434:	532e349d 55f3a2a0 e18a0532 ebf6a475     .4.S...U2...u...
    2444:	ec830b39 ef6040aa 9f715e06 106ebd51     9....@`..^q.Q.n.
    2454:	8a213ef9 06dd963d 053eddae bde64d46     .>!.=.....>.FM..
    2464:	8d5491b5 5dc47105 d406046f 155060ff     ..T..q.]o....`P.
    2474:	fb981924 e9bdd697 434089cc 9ed96777     $.........@Cwg..
    2484:	42e8b0bd 8b890788 5b19e738 eec879db     ...B....8..[.y..
    2494:	0a7ca147 0f427ce9 1e84f8c9 00000000     G.|..|B.........
    24a4:	86800983 ed2b3248 70111eac 725a6c4e     ....H2+....pNlZr
    24b4:	ff0efdfb 38850f56 d5ae3d1e 392d3627     ....V..8.=..'6-9
    24c4:	d90f0a64 a65c6821 545b9bd1 2e36243a     d...!h\...[T:$6.
    24d4:	670a0cb1 e757930f 96eeb4d2 919b1b9e     ...g..W.........
    24e4:	c5c0804f 20dc61a2 4b775a69 1a121c16     O....a. iZwK....
    24f4:	ba93e20a 2aa0c0e5 e0223c43 171b121d     .......*C<".....
    2504:	0d090e0b c78bf2ad a8b62db9 a91e14c8     .........-......
    2514:	19f15785 0775af4c dd99eebb 607fa3fd     .W..L.u........`
    2524:	2601f79f f5725cbc 3b6644c5 7efb5b34     ...&.\r..Df;4[.~
    2534:	29438b76 c623cbdc fcedb668 f1e4b863     v.C)..#.h...c...
    2544:	dc31d7ca 85634210 22971340 11c68420     ..1..Bc.@.." ...
    2554:	244a857d 3dbbd2f8 32f9ae11 a129c76d     }.J$...=...2m.).
    2564:	2f9e1d4b 30b2dcf3 52860dec e3c177d0     K../...0...R.w..
    2574:	16b32b6c b970a999 489411fa 64e94722     l+....p....H"G.d
    2584:	8cfca8c4 3ff0a01a 2c7d56d8 903322ef     .......?.V},."3.
    2594:	4e4987c7 d138d9c1 a2ca8cfe 0bd49836     ..IN..8.....6...
    25a4:	81f5a6cf de7aa528 8eb7da26 bfad3fa4     ....(.z.&....?..
    25b4:	9d3a2ce4 9278500d cc5f6a9b 467e5462     .,:..Px..j_.bT~F
    25c4:	138df6c2 b8d890e8 f7392e5e afc382f5     ........^.9.....
    25d4:	805d9fbe 93d0697c 2dd56fa9 1225cfb3     ..].|i...o.-..%.
    25e4:	99acc83b 7d1810a7 639ce86e bb3bdb7b     ;......}n..c{.;.
    25f4:	7826cd09 18596ef4 b79aec01 9a4f83a8     ..&x.nY.......O.
    2604:	6e95e665 e6ffaa7e cfbc2108 e815efe6     e..n~....!......
    2614:	9be7bad9 366f4ace 099fead4 7cb029d6     .....Jo6.....).|
    2624:	b2a431af 233f2a31 94a5c630 66a235c0     .1..1*?#0....5.f
    2634:	bc4e7437 ca82fca6 d090e0b0 d8a73315     7tN..........3..
    2644:	9804f14a daec41f7 50cd7f0e f691172f     J....A.....P/...
    2654:	d64d768d b0ef434d 4daacc54 0496e4df     .vM.MC..T..M....
    2664:	b5d19ee3 886a4c1b 1f2cc1b8 5165467f     .....Lj...,..FeQ
    2674:	ea5e9d04 358c015d 7487fa73 410bfb2e     ..^.]..5s..t...A
    2684:	1d67b35a d2db9252 5610e933 47d66d13     Z.g.R...3..V.m.G
    2694:	61d79a8c 0ca1377a 14f8598e 3c13eb89     ...az7...Y.....<
    26a4:	27a9ceee c961b735 e51ce1ed b1477a3c     ...'5.a.....<zG.
    26b4:	dfd29c59 73f2553f ce141879 37c773bf     Y...?U.sy....s.7
    26c4:	cdf753ea aafd5f5b 6f3ddf14 db447886     .S..[_....=o.xD.
    26d4:	f3afca81 c468b93e 3424382c 40a3c25f     ....>.h.,8$4_..@
    26e4:	c31d1672 25e2bc0c 493c288b 950dff41     r......%.(<IA...
    26f4:	01a83971 b30c08de e4b4d89c c1566490     q9...........dV.
    2704:	84cb7b61 b632d570 5c6c4874 57b8d042     a{..p.2.tHl\B..W

00002714 <RT2>:
    2714:	f45150a7 417e5365 171ac3a4 273a965e     .PQ.eS~A....^.:'
    2724:	ab3bcb6b 9d1ff145 faacab58 e34b9303     k.;.E...X.....K.
    2734:	302055fa 76adf66d cc889176 02f5254c     .U 0m..vv...L%..
    2744:	e54ffcd7 2ac5d7cb 35268044 62b58fa3     ..O....*D.&5...b
    2754:	b1de495a ba25671b ea45980e fe5de1c0     ZI...g%...E...].
    2764:	2fc30275 4c8112f0 468da397 d36bc6f9     u../...L...F..k.
    2774:	8f03e75f 9215959c 6dbfeb7a 5295da59     _.......z..mY..R
    2784:	bed42d83 7458d321 e0492969 c98e44c8     .-..!.Xti)I..D..
    2794:	c2756a89 8ef47879 58996b3e b927dd71     .ju.yx..>k.Xq.'.
    27a4:	e1beb64f 88f017ad 20c966ac ce7db43a     O........f. :.}.
    27b4:	df63184a 1ae58231 51976033 5362457f     J.c.1...3`.Q.EbS
    27c4:	64b1e077 6bbb84ae 81fe1ca0 08f9942b     w..d...k....+...
    27d4:	48705868 458f19fd de94876c 7b52b7f8     hXpH...El.....R{
    27e4:	73ab23d3 4b72e202 1fe3578f 55662aab     .#.s..rK.W...*fU
    27f4:	ebb20728 b52f03c2 c5869a7b 37d3a508     (...../.{......7
    2804:	2830f287 bf23b2a5 0302ba6a 16ed5c82     ..0(..#.j....\..
    2814:	cf8a2b1c 79a792b4 07f3f0f2 694ea1e2     .+.....y......Ni
    2824:	da65cdf4 0506d5be 34d11f62 a6c48afe     ..e.....b..4....
    2834:	2e349d53 f3a2a055 8a0532e1 f6a475eb     S.4.U....2...u..
    2844:	830b39ec 6040aaef 715e069f 6ebd5110     .9....@`..^q.Q.n
    2854:	213ef98a dd963d06 3eddae05 e64d46bd     ..>!.=.....>.FM.
    2864:	5491b58d c471055d 06046fd4 5060ff15     ...T].q..o....`P
    2874:	981924fb bdd697e9 4089cc43 d967779e     .$......C..@.wg.
    2884:	e8b0bd42 8907888b 19e7385b c879dbee     B.......[8....y.
    2894:	7ca1470a 427ce90f 84f8c91e 00000000     .G.|..|B........
    28a4:	80098386 2b3248ed 111eac70 5a6c4e72     .....H2+p...rNlZ
    28b4:	0efdfbff 850f5638 ae3d1ed5 2d362739     ....8V....=.9'6-
    28c4:	0f0a64d9 5c6821a6 5b9bd154 36243a2e     .d...!h\T..[.:$6
    28d4:	0a0cb167 57930fe7 eeb4d296 9b1b9e91     g......W........
    28e4:	c0804fc5 dc61a220 775a694b 121c161a     .O.. .a.KiZw....
    28f4:	93e20aba a0c0e52a 223c43e0 1b121d17     ....*....C<"....
    2904:	090e0b0d 8bf2adc7 b62db9a8 1e14c8a9     ..........-.....
    2914:	f1578519 75af4c07 99eebbdd 7fa3fd60     ..W..L.u....`...
    2924:	01f79f26 725cbcf5 6644c53b fb5b347e     &.....\r;.Df~4[.
    2934:	438b7629 23cbdcc6 edb668fc e4b863f1     )v.C...#.h...c..
    2944:	31d7cadc 63421085 97134022 c6842011     ...1..Bc"@... ..
    2954:	4a857d24 bbd2f83d f9ae1132 29c76da1     $}.J=...2....m.)
    2964:	9e1d4b2f b2dcf330 860dec52 c177d0e3     /K..0...R.....w.
    2974:	b32b6c16 70a999b9 9411fa48 e9472264     .l+....pH...d"G.
    2984:	fca8c48c f0a01a3f 7d56d82c 3322ef90     ....?...,.V}.."3
    2994:	4987c74e 38d9c1d1 ca8cfea2 d498360b     N..I...8.....6..
    29a4:	f5a6cf81 7aa528de b7da268e ad3fa4bf     .....(.z.&....?.
    29b4:	3a2ce49d 78500d92 5f6a9bcc 7e546246     ..,:..Px..j_FbT~
    29c4:	8df6c213 d890e8b8 392e5ef7 c382f5af     .........^.9....
    29d4:	5d9fbe80 d0697c93 d56fa92d 25cfb312     ...].|i.-.o....%
    29e4:	acc83b99 1810a77d 9ce86e63 3bdb7bbb     .;..}...cn...{.;
    29f4:	26cd0978 596ef418 9aec01b7 4f83a89a     x..&..nY.......O
    2a04:	95e6656e ffaa7ee6 bc2108cf 15efe6e8     ne...~....!.....
    2a14:	e7bad99b 6f4ace36 9fead409 b029d67c     ....6.Jo....|.).
    2a24:	a431afb2 3f2a3123 a5c63094 a235c066     ..1.#1*?.0..f.5.
    2a34:	4e7437bc 82fca6ca 90e0b0d0 a73315d8     .7tN..........3.
    2a44:	04f14a98 ec41f7da cd7f0e50 91172ff6     .J....A.P..../..
    2a54:	4d768dd6 ef434db0 aacc544d 96e4df04     ..vM.MC.MT......
    2a64:	d19ee3b5 6a4c1b88 2cc1b81f 65467f51     ......Lj...,Q.Fe
    2a74:	5e9d04ea 8c015d35 87fa7374 0bfb2e41     ...^5]..ts..A...
    2a84:	67b35a1d db9252d2 10e93356 d66d1347     .Z.g.R..V3..G.m.
    2a94:	d79a8c61 a1377a0c f8598e14 13eb893c     a....z7...Y.<...
    2aa4:	a9ceee27 61b735c9 1ce1ede5 477a3cb1     '....5.a.....<zG
    2ab4:	d29c59df f2553f73 141879ce c773bf37     .Y..s?U..y..7.s.
    2ac4:	f753eacd fd5f5baa 3ddf146f 447886db     ..S..[_.o..=..xD
    2ad4:	afca81f3 68b93ec4 24382c34 a3c25f40     .....>.h4,8$@_..
    2ae4:	1d1672c3 e2bc0c25 3c288b49 0dff4195     .r..%...I.(<.A..
    2af4:	a8397101 0c08deb3 b4d89ce4 566490c1     .q9...........dV
    2b04:	cb7b6184 32d570b6 6c48745c b8d04257     .a{..p.2\tHlWB..

00002b14 <FT0>:
    2b14:	a56363c6 847c7cf8 997777ee 8d7b7bf6     .cc..||..ww..{{.
    2b24:	0df2f2ff bd6b6bd6 b16f6fde 54c5c591     .....kk..oo....T
    2b34:	50303060 03010102 a96767ce 7d2b2b56     `00P.....gg.V++}
    2b44:	19fefee7 62d7d7b5 e6abab4d 9a7676ec     .......bM....vv.
    2b54:	45caca8f 9d82821f 40c9c989 877d7dfa     ...E.......@.}}.
    2b64:	15fafaef eb5959b2 c947478e 0bf0f0fb     .....YY..GG.....
    2b74:	ecadad41 67d4d4b3 fda2a25f eaafaf45     A......g_...E...
    2b84:	bf9c9c23 f7a4a453 967272e4 5bc0c09b     #...S....rr....[
    2b94:	c2b7b775 1cfdfde1 ae93933d 6a26264c     u.......=...L&&j
    2ba4:	5a36366c 413f3f7e 02f7f7f5 4fcccc83     l66Z~??A.......O
    2bb4:	5c343468 f4a5a551 34e5e5d1 08f1f1f9     h44\Q......4....
    2bc4:	937171e2 73d8d8ab 53313162 3f15152a     .qq....sb11S*..?
    2bd4:	0c040408 52c7c795 65232346 5ec3c39d     .......RF##e...^
    2be4:	28181830 a1969637 0f05050a b59a9a2f     0..(7......./...
    2bf4:	0907070e 36121224 9b80801b 3de2e2df     ....$..6.......=
    2c04:	26ebebcd 6927274e cdb2b27f 9f7575ea     ...&N''i.....uu.
    2c14:	1b090912 9e83831d 742c2c58 2e1a1a34     ........X,,t4...
    2c24:	2d1b1b36 b26e6edc ee5a5ab4 fba0a05b     6..-.nn..ZZ.[...
    2c34:	f65252a4 4d3b3b76 61d6d6b7 ceb3b37d     .RR.v;;M...a}...
    2c44:	7b292952 3ee3e3dd 712f2f5e 97848413     R)){...>^//q....
    2c54:	f55353a6 68d1d1b9 00000000 2cededc1     .SS....h.......,
    2c64:	60202040 1ffcfce3 c8b1b179 ed5b5bb6     @  `....y....[[.
    2c74:	be6a6ad4 46cbcb8d d9bebe67 4b393972     .jj....Fg...r99K
    2c84:	de4a4a94 d44c4c98 e85858b0 4acfcf85     .JJ..LL..XX....J
    2c94:	6bd0d0bb 2aefefc5 e5aaaa4f 16fbfbed     ...k...*O.......
    2ca4:	c5434386 d74d4d9a 55333366 94858511     .CC..MM.f33U....
    2cb4:	cf45458a 10f9f9e9 06020204 817f7ffe     .EE.............
    2cc4:	f05050a0 443c3c78 ba9f9f25 e3a8a84b     .PP.x<<D%...K...
    2cd4:	f35151a2 fea3a35d c0404080 8a8f8f05     .QQ.]....@@.....
    2ce4:	ad92923f bc9d9d21 48383870 04f5f5f1     ?...!...p88H....
    2cf4:	dfbcbc63 c1b6b677 75dadaaf 63212142     c...w......uB!!c
    2d04:	30101020 1affffe5 0ef3f3fd 6dd2d2bf      ..0...........m
    2d14:	4ccdcd81 140c0c18 35131326 2fececc3     ...L....&..5.../
    2d24:	e15f5fbe a2979735 cc444488 3917172e     .__.5....DD....9
    2d34:	57c4c493 f2a7a755 827e7efc 473d3d7a     ...WU....~~.z==G
    2d44:	ac6464c8 e75d5dba 2b191932 957373e6     .dd..]].2..+.ss.
    2d54:	a06060c0 98818119 d14f4f9e 7fdcdca3     .``......OO.....
    2d64:	66222244 7e2a2a54 ab90903b 8388880b     D""fT**~;.......
    2d74:	ca46468c 29eeeec7 d3b8b86b 3c141428     .FF....)k...(..<
    2d84:	79dedea7 e25e5ebc 1d0b0b16 76dbdbad     ...y.^^........v
    2d94:	3be0e0db 56323264 4e3a3a74 1e0a0a14     ...;d22Vt::N....
    2da4:	db494992 0a06060c 6c242448 e45c5cb8     .II.....H$$l.\\.
    2db4:	5dc2c29f 6ed3d3bd efacac43 a66262c4     ...]...nC....bb.
    2dc4:	a8919139 a4959531 37e4e4d3 8b7979f2     9...1......7.yy.
    2dd4:	32e7e7d5 43c8c88b 5937376e b76d6dda     ...2...Cn77Y.mm.
    2de4:	8c8d8d01 64d5d5b1 d24e4e9c e0a9a949     .......d.NN.I...
    2df4:	b46c6cd8 fa5656ac 07f4f4f3 25eaeacf     .ll..VV........%
    2e04:	af6565ca 8e7a7af4 e9aeae47 18080810     .ee..zz.G.......
    2e14:	d5baba6f 887878f0 6f25254a 722e2e5c     o....xx.J%%o\..r
    2e24:	241c1c38 f1a6a657 c7b4b473 51c6c697     8..$W...s......Q
    2e34:	23e8e8cb 7cdddda1 9c7474e8 211f1f3e     ...#...|.tt.>..!
    2e44:	dd4b4b96 dcbdbd61 868b8b0d 858a8a0f     .KK.a...........
    2e54:	907070e0 423e3e7c c4b5b571 aa6666cc     .pp.|>>Bq....ff.
    2e64:	d8484890 05030306 01f6f6f7 120e0e1c     .HH.............
    2e74:	a36161c2 5f35356a f95757ae d0b9b969     .aa.j55_.WW.i...
    2e84:	91868617 58c1c199 271d1d3a b99e9e27     .......X:..''...
    2e94:	38e1e1d9 13f8f8eb b398982b 33111122     ...8....+..."..3
    2ea4:	bb6969d2 70d9d9a9 898e8e07 a7949433     .ii....p....3...
    2eb4:	b69b9b2d 221e1e3c 92878715 20e9e9c9     -...<.."....... 
    2ec4:	49cece87 ff5555aa 78282850 7adfdfa5     ...I.UU.P((x...z
    2ed4:	8f8c8c03 f8a1a159 80898909 170d0d1a     ....Y...........
    2ee4:	dabfbf65 31e6e6d7 c6424284 b86868d0     e......1.BB..hh.
    2ef4:	c3414182 b0999929 772d2d5a 110f0f1e     .AA.)...Z--w....
    2f04:	cbb0b07b fc5454a8 d6bbbb6d 3a16162c     {....TT.m...,..:

00002f14 <FT3>:
    2f14:	c6a56363 f8847c7c ee997777 f68d7b7b     cc..||..ww..{{..
    2f24:	ff0df2f2 d6bd6b6b deb16f6f 9154c5c5     ....kk..oo....T.
    2f34:	60503030 02030101 cea96767 567d2b2b     00P`....gg..++}V
    2f44:	e719fefe b562d7d7 4de6abab ec9a7676     ......b....Mvv..
    2f54:	8f45caca 1f9d8282 8940c9c9 fa877d7d     ..E.......@.}}..
    2f64:	ef15fafa b2eb5959 8ec94747 fb0bf0f0     ....YY..GG......
    2f74:	41ecadad b367d4d4 5ffda2a2 45eaafaf     ...A..g...._...E
    2f84:	23bf9c9c 53f7a4a4 e4967272 9b5bc0c0     ...#...Srr....[.
    2f94:	75c2b7b7 e11cfdfd 3dae9393 4c6a2626     ...u.......=&&jL
    2fa4:	6c5a3636 7e413f3f f502f7f7 834fcccc     66Zl??A~......O.
    2fb4:	685c3434 51f4a5a5 d134e5e5 f908f1f1     44\h...Q..4.....
    2fc4:	e2937171 ab73d8d8 62533131 2a3f1515     qq....s.11Sb..?*
    2fd4:	080c0404 9552c7c7 46652323 9d5ec3c3     ......R.##eF..^.
    2fe4:	30281818 37a19696 0a0f0505 2fb59a9a     ..(0...7......./
    2ff4:	0e090707 24361212 1b9b8080 df3de2e2     ......6$......=.
    3004:	cd26ebeb 4e692727 7fcdb2b2 ea9f7575     ..&.''iN....uu..
    3014:	121b0909 1d9e8383 58742c2c 342e1a1a     ........,,tX...4
    3024:	362d1b1b dcb26e6e b4ee5a5a 5bfba0a0     ..-6nn..ZZ.....[
    3034:	a4f65252 764d3b3b b761d6d6 7dceb3b3     RR..;;Mv..a....}
    3044:	527b2929 dd3ee3e3 5e712f2f 13978484     )){R..>.//q^....
    3054:	a6f55353 b968d1d1 00000000 c12ceded     SS....h.......,.
    3064:	40602020 e31ffcfc 79c8b1b1 b6ed5b5b       `@.......y[[..
    3074:	d4be6a6a 8d46cbcb 67d9bebe 724b3939     jj....F....g99Kr
    3084:	94de4a4a 98d44c4c b0e85858 854acfcf     JJ..LL..XX....J.
    3094:	bb6bd0d0 c52aefef 4fe5aaaa ed16fbfb     ..k...*....O....
    30a4:	86c54343 9ad74d4d 66553333 11948585     CC..MM..33Uf....
    30b4:	8acf4545 e910f9f9 04060202 fe817f7f     EE..............
    30c4:	a0f05050 78443c3c 25ba9f9f 4be3a8a8     PP..<<Dx...%...K
    30d4:	a2f35151 5dfea3a3 80c04040 058a8f8f     QQ.....]@@......
    30e4:	3fad9292 21bc9d9d 70483838 f104f5f5     ...?...!88Hp....
    30f4:	63dfbcbc 77c1b6b6 af75dada 42632121     ...c...w..u.!!cB
    3104:	20301010 e51affff fd0ef3f3 bf6dd2d2     ..0 ..........m.
    3114:	814ccdcd 18140c0c 26351313 c32fecec     ..L.......5&../.
    3124:	bee15f5f 35a29797 88cc4444 2e391717     __.....5DD....9.
    3134:	9357c4c4 55f2a7a7 fc827e7e 7a473d3d     ..W....U~~..==Gz
    3144:	c8ac6464 bae75d5d 322b1919 e6957373     dd..]]....+2ss..
    3154:	c0a06060 19988181 9ed14f4f a37fdcdc     ``......OO......
    3164:	44662222 547e2a2a 3bab9090 0b838888     ""fD**~T...;....
    3174:	8cca4646 c729eeee 6bd3b8b8 283c1414     FF....)....k..<(
    3184:	a779dede bce25e5e 161d0b0b ad76dbdb     ..y.^^........v.
    3194:	db3be0e0 64563232 744e3a3a 141e0a0a     ..;.22Vd::Nt....
    31a4:	92db4949 0c0a0606 486c2424 b8e45c5c     II......$$lH\\..
    31b4:	9f5dc2c2 bd6ed3d3 43efacac c4a66262     ..]...n....Cbb..
    31c4:	39a89191 31a49595 d337e4e4 f28b7979     ...9...1..7.yy..
    31d4:	d532e7e7 8b43c8c8 6e593737 dab76d6d     ..2...C.77Ynmm..
    31e4:	018c8d8d b164d5d5 9cd24e4e 49e0a9a9     ......d.NN.....I
    31f4:	d8b46c6c acfa5656 f307f4f4 cf25eaea     ll..VV........%.
    3204:	caaf6565 f48e7a7a 47e9aeae 10180808     ee..zz.....G....
    3214:	6fd5baba f0887878 4a6f2525 5c722e2e     ...oxx..%%oJ..r\
    3224:	38241c1c 57f1a6a6 73c7b4b4 9751c6c6     ..$8...W...s..Q.
    3234:	cb23e8e8 a17cdddd e89c7474 3e211f1f     ..#...|.tt....!>
    3244:	96dd4b4b 61dcbdbd 0d868b8b 0f858a8a     KK.....a........
    3254:	e0907070 7c423e3e 71c4b5b5 ccaa6666     pp..>>B|...qff..
    3264:	90d84848 06050303 f701f6f6 1c120e0e     HH..............
    3274:	c2a36161 6a5f3535 aef95757 69d0b9b9     aa..55_jWW.....i
    3284:	17918686 9958c1c1 3a271d1d 27b99e9e     ......X...':...'
    3294:	d938e1e1 eb13f8f8 2bb39898 22331111     ..8........+..3"
    32a4:	d2bb6969 a970d9d9 07898e8e 33a79494     ii....p........3
    32b4:	2db69b9b 3c221e1e 15928787 c920e9e9     ...-.."<...... .
    32c4:	8749cece aaff5555 50782828 a57adfdf     ..I.UU..((xP..z.
    32d4:	038f8c8c 59f8a1a1 09808989 1a170d0d     .......Y........
    32e4:	65dabfbf d731e6e6 84c64242 d0b86868     ...e..1.BB..hh..
    32f4:	82c34141 29b09999 5a772d2d 1e110f0f     AA.....)--wZ....
    3304:	7bcbb0b0 a8fc5454 6dd6bbbb 2c3a1616     ...{TT.....m..:,

00003314 <FT1>:
    3314:	6363c6a5 7c7cf884 7777ee99 7b7bf68d     ..cc..||..ww..{{
    3324:	f2f2ff0d 6b6bd6bd 6f6fdeb1 c5c59154     ......kk..ooT...
    3334:	30306050 01010203 6767cea9 2b2b567d     P`00......gg}V++
    3344:	fefee719 d7d7b562 abab4de6 7676ec9a     ....b....M....vv
    3354:	caca8f45 82821f9d c9c98940 7d7dfa87     E.......@.....}}
    3364:	fafaef15 5959b2eb 47478ec9 f0f0fb0b     ......YY..GG....
    3374:	adad41ec d4d4b367 a2a25ffd afaf45ea     .A..g...._...E..
    3384:	9c9c23bf a4a453f7 7272e496 c0c09b5b     .#...S....rr[...
    3394:	b7b775c2 fdfde11c 93933dae 26264c6a     .u.......=..jL&&
    33a4:	36366c5a 3f3f7e41 f7f7f502 cccc834f     Zl66A~??....O...
    33b4:	3434685c a5a551f4 e5e5d134 f1f1f908     \h44.Q..4.......
    33c4:	7171e293 d8d8ab73 31316253 15152a3f     ..qqs...Sb11?*..
    33d4:	0404080c c7c79552 23234665 c3c39d5e     ....R...eF##^...
    33e4:	18183028 969637a1 05050a0f 9a9a2fb5     (0...7......./..
    33f4:	07070e09 12122436 80801b9b e2e2df3d     ....6$......=...
    3404:	ebebcd26 27274e69 b2b27fcd 7575ea9f     &...iN''......uu
    3414:	0909121b 83831d9e 2c2c5874 1a1a342e     ........tX,,.4..
    3424:	1b1b362d 6e6edcb2 5a5ab4ee a0a05bfb     -6....nn..ZZ.[..
    3434:	5252a4f6 3b3b764d d6d6b761 b3b37dce     ..RRMv;;a....}..
    3444:	2929527b e3e3dd3e 2f2f5e71 84841397     {R))>...q^//....
    3454:	5353a6f5 d1d1b968 00000000 ededc12c     ..SSh.......,...
    3464:	20204060 fcfce31f b1b179c8 5b5bb6ed     `@  .....y....[[
    3474:	6a6ad4be cbcb8d46 bebe67d9 3939724b     ..jjF....g..Kr99
    3484:	4a4a94de 4c4c98d4 5858b0e8 cfcf854a     ..JJ..LL..XXJ...
    3494:	d0d0bb6b efefc52a aaaa4fe5 fbfbed16     k...*....O......
    34a4:	434386c5 4d4d9ad7 33336655 85851194     ..CC..MMUf33....
    34b4:	45458acf f9f9e910 02020406 7f7ffe81     ..EE............
    34c4:	5050a0f0 3c3c7844 9f9f25ba a8a84be3     ..PPDx<<.%...K..
    34d4:	5151a2f3 a3a35dfe 404080c0 8f8f058a     ..QQ.]....@@....
    34e4:	92923fad 9d9d21bc 38387048 f5f5f104     .?...!..Hp88....
    34f4:	bcbc63df b6b677c1 dadaaf75 21214263     .c...w..u...cB!!
    3504:	10102030 ffffe51a f3f3fd0e d2d2bf6d     0 ..........m...
    3514:	cdcd814c 0c0c1814 13132635 ececc32f     L.......5&../...
    3524:	5f5fbee1 979735a2 444488cc 17172e39     ..__.5....DD9...
    3534:	c4c49357 a7a755f2 7e7efc82 3d3d7a47     W....U....~~Gz==
    3544:	6464c8ac 5d5dbae7 1919322b 7373e695     ..dd..]]+2....ss
    3554:	6060c0a0 81811998 4f4f9ed1 dcdca37f     ..``......OO....
    3564:	22224466 2a2a547e 90903bab 88880b83     fD""~T**.;......
    3574:	46468cca eeeec729 b8b86bd3 1414283c     ..FF)....k..<(..
    3584:	dedea779 5e5ebce2 0b0b161d dbdbad76     y.....^^....v...
    3594:	e0e0db3b 32326456 3a3a744e 0a0a141e     ;...Vd22Nt::....
    35a4:	494992db 06060c0a 2424486c 5c5cb8e4     ..II....lH$$..\\
    35b4:	c2c29f5d d3d3bd6e acac43ef 6262c4a6     ]...n....C....bb
    35c4:	919139a8 959531a4 e4e4d337 7979f28b     .9...1..7.....yy
    35d4:	e7e7d532 c8c88b43 37376e59 6d6ddab7     2...C...Yn77..mm
    35e4:	8d8d018c d5d5b164 4e4e9cd2 a9a949e0     ....d.....NN.I..
    35f4:	6c6cd8b4 5656acfa f4f4f307 eaeacf25     ..ll..VV....%...
    3604:	6565caaf 7a7af48e aeae47e9 08081018     ..ee..zz.G......
    3614:	baba6fd5 7878f088 25254a6f 2e2e5c72     .o....xxoJ%%r\..
    3624:	1c1c3824 a6a657f1 b4b473c7 c6c69751     $8...W...s..Q...
    3634:	e8e8cb23 dddda17c 7474e89c 1f1f3e21     #...|.....tt!>..
    3644:	4b4b96dd bdbd61dc 8b8b0d86 8a8a0f85     ..KK.a..........
    3654:	7070e090 3e3e7c42 b5b571c4 6666ccaa     ..ppB|>>.q....ff
    3664:	484890d8 03030605 f6f6f701 0e0e1c12     ..HH............
    3674:	6161c2a3 35356a5f 5757aef9 b9b969d0     ..aa_j55..WW.i..
    3684:	86861791 c1c19958 1d1d3a27 9e9e27b9     ....X...':...'..
    3694:	e1e1d938 f8f8eb13 98982bb3 11112233     8........+..3"..
    36a4:	6969d2bb d9d9a970 8e8e0789 949433a7     ..iip........3..
    36b4:	9b9b2db6 1e1e3c22 87871592 e9e9c920     .-.."<...... ...
    36c4:	cece8749 5555aaff 28285078 dfdfa57a     I.....UUxP((z...
    36d4:	8c8c038f a1a159f8 89890980 0d0d1a17     .....Y..........
    36e4:	bfbf65da e6e6d731 424284c6 6868d0b8     .e..1.....BB..hh
    36f4:	414182c3 999929b0 2d2d5a77 0f0f1e11     ..AA.)..wZ--....
    3704:	b0b07bcb 5454a8fc bbbb6dd6 16162c3a     .{....TT.m..:,..

00003714 <FT2>:
    3714:	63c6a563 7cf8847c 77ee9977 7bf68d7b     c..c|..|w..w{..{
    3724:	f2ff0df2 6bd6bd6b 6fdeb16f c59154c5     ....k..ko..o.T..
    3734:	30605030 01020301 67cea967 2b567d2b     0P`0....g..g+}V+
    3744:	fee719fe d7b562d7 ab4de6ab 76ec9a76     .....b....M.v..v
    3754:	ca8f45ca 821f9d82 c98940c9 7dfa877d     .E.......@..}..}
    3764:	faef15fa 59b2eb59 478ec947 f0fb0bf0     ....Y..YG..G....
    3774:	ad41ecad d4b367d4 a25ffda2 af45eaaf     ..A..g...._...E.
    3784:	9c23bf9c a453f7a4 72e49672 c09b5bc0     ..#...S.r..r.[..
    3794:	b775c2b7 fde11cfd 933dae93 264c6a26     ..u.......=.&jL&
    37a4:	366c5a36 3f7e413f f7f502f7 cc834fcc     6Zl6?A~?.....O..
    37b4:	34685c34 a551f4a5 e5d134e5 f1f908f1     4\h4..Q..4......
    37c4:	71e29371 d8ab73d8 31625331 152a3f15     q..q.s..1Sb1.?*.
    37d4:	04080c04 c79552c7 23466523 c39d5ec3     .....R..#eF#.^..
    37e4:	18302818 9637a196 050a0f05 9a2fb59a     .(0...7......./.
    37f4:	070e0907 12243612 801b9b80 e2df3de2     .....6$......=..
    3804:	ebcd26eb 274e6927 b27fcdb2 75ea9f75     .&..'iN'....u..u
    3814:	09121b09 831d9e83 2c58742c 1a342e1a     ........,tX,..4.
    3824:	1b362d1b 6edcb26e 5ab4ee5a a05bfba0     .-6.n..nZ..Z..[.
    3834:	52a4f652 3b764d3b d6b761d6 b37dceb3     R..R;Mv;.a....}.
    3844:	29527b29 e3dd3ee3 2f5e712f 84139784     ){R).>../q^/....
    3854:	53a6f553 d1b968d1 00000000 edc12ced     S..S.h.......,..
    3864:	20406020 fce31ffc b179c8b1 5bb6ed5b      `@ ......y.[..[
    3874:	6ad4be6a cb8d46cb be67d9be 39724b39     j..j.F....g.9Kr9
    3884:	4a94de4a 4c98d44c 58b0e858 cf854acf     J..JL..LX..X.J..
    3894:	d0bb6bd0 efc52aef aa4fe5aa fbed16fb     .k...*....O.....
    38a4:	4386c543 4d9ad74d 33665533 85119485     C..CM..M3Uf3....
    38b4:	458acf45 f9e910f9 02040602 7ffe817f     E..E............
    38c4:	50a0f050 3c78443c 9f25ba9f a84be3a8     P..P<Dx<..%...K.
    38d4:	51a2f351 a35dfea3 4080c040 8f058a8f     Q..Q..].@..@....
    38e4:	923fad92 9d21bc9d 38704838 f5f104f5     ..?...!.8Hp8....
    38f4:	bc63dfbc b677c1b6 daaf75da 21426321     ..c...w..u..!cB!
    3904:	10203010 ffe51aff f3fd0ef3 d2bf6dd2     .0 ..........m..
    3914:	cd814ccd 0c18140c 13263513 ecc32fec     .L.......5&../..
    3924:	5fbee15f 9735a297 4488cc44 172e3917     _.._..5.D..D.9..
    3934:	c49357c4 a755f2a7 7efc827e 3d7a473d     .W....U.~..~=Gz=
    3944:	64c8ac64 5dbae75d 19322b19 73e69573     d..d]..].+2.s..s
    3954:	60c0a060 81199881 4f9ed14f dca37fdc     `..`....O..O....
    3964:	22446622 2a547e2a 903bab90 880b8388     "fD"*~T*..;.....
    3974:	468cca46 eec729ee b86bd3b8 14283c14     F..F.)....k..<(.
    3984:	dea779de 5ebce25e 0b161d0b dbad76db     .y..^..^.....v..
    3994:	e0db3be0 32645632 3a744e3a 0a141e0a     .;..2Vd2:Nt:....
    39a4:	4992db49 060c0a06 24486c24 5cb8e45c     I..I....$lH$\..\
    39b4:	c29f5dc2 d3bd6ed3 ac43efac 62c4a662     .]...n....C.b..b
    39c4:	9139a891 9531a495 e4d337e4 79f28b79     ..9...1..7..y..y
    39d4:	e7d532e7 c88b43c8 376e5937 6ddab76d     .2...C..7Yn7m..m
    39e4:	8d018c8d d5b164d5 4e9cd24e a949e0a9     .....d..N..N..I.
    39f4:	6cd8b46c 56acfa56 f4f307f4 eacf25ea     l..lV..V.....%..
    3a04:	65caaf65 7af48e7a ae47e9ae 08101808     e..ez..z..G.....
    3a14:	ba6fd5ba 78f08878 254a6f25 2e5c722e     ..o.x..x%oJ%.r\.
    3a24:	1c38241c a657f1a6 b473c7b4 c69751c6     .$8...W...s..Q..
    3a34:	e8cb23e8 dda17cdd 74e89c74 1f3e211f     .#...|..t..t.!>.
    3a44:	4b96dd4b bd61dcbd 8b0d868b 8a0f858a     K..K..a.........
    3a54:	70e09070 3e7c423e b571c4b5 66ccaa66     p..p>B|>..q.f..f
    3a64:	4890d848 03060503 f6f701f6 0e1c120e     H..H............
    3a74:	61c2a361 356a5f35 57aef957 b969d0b9     a..a5_j5W..W..i.
    3a84:	86179186 c19958c1 1d3a271d 9e27b99e     .....X...':...'.
    3a94:	e1d938e1 f8eb13f8 982bb398 11223311     .8........+..3".
    3aa4:	69d2bb69 d9a970d9 8e07898e 9433a794     i..i.p........3.
    3ab4:	9b2db69b 1e3c221e 87159287 e9c920e9     ..-.."<...... ..
    3ac4:	ce8749ce 55aaff55 28507828 dfa57adf     .I..U..U(xP(.z..
    3ad4:	8c038f8c a159f8a1 89098089 0d1a170d     ......Y.........
    3ae4:	bf65dabf e6d731e6 4284c642 68d0b868     ..e..1..B..Bh..h
    3af4:	4182c341 9929b099 2d5a772d 0f1e110f     A..A..).-wZ-....
    3b04:	b07bcbb0 54a8fc54 bb6dd6bb 162c3a16     ..{.T..T..m..:,.

00003b14 <RSb>:
    3b14:	d56a0952 38a53630 9ea340bf fbd7f381     R.j.06.8.@......
    3b24:	8239e37c 87ff2f9b 44438e34 cbe9dec4     |.9../..4.CD....
    3b34:	32947b54 3d23c2a6 0b954cee 4ec3fa42     T{.2..#=.L..B..N
    3b44:	66a12e08 b224d928 49a25b76 25d18b6d     ...f(.$.v[.Im..%
    3b54:	64f6f872 16986886 cc5ca4d4 92b6655d     r..d.h....\.]e..
    3b64:	5048706c dab9edfd 5746155e 849d8da7     lpHP....^.FW....
    3b74:	00abd890 0ad3bc8c 0558e4f7 0645b3b8     ..........X...E.
    3b84:	8f1e2cd0 020f3fca 03bdafc1 6b8a1301     .,...?.........k
    3b94:	4111913a eadc674f cecff297 73e6b4f0     :..AOg.........s
    3ba4:	2274ac96 8535ade7 e837f9e2 6edf751c     ..t"..5...7..u.n
    3bb4:	711af147 89c5291d 0e62b76f 1bbe18aa     G..q.)..o.b.....
    3bc4:	4b3e56fc 2079d2c6 fec0db9a f45acd78     .V>K..y ....x.Z.
    3bd4:	33a8dd1f 31c70788 591012b1 5fec8027     ...3...1...Y'.._
    3be4:	a97f5160 0d4ab519 9f7ae52d ef9cc993     `Q....J.-.z.....
    3bf4:	4d3be0a0 b0f52aae 3cbbebc8 61995383     ..;M.*.....<.S.a
    3c04:	7e042b17 26d677ba 631469e1 7d0c2155     .+.~.w.&.i.cU!.}

00003c14 <aes_test_cfb128_pt>:
    3c14:	e2bec16b 969f402e 117e3de9 2a179373     k....@...=~.s..*
    3c24:	578a2dae 9cac031e ac6fb79e 518eaf45     .-.W......o.E..Q
    3c34:	461cc830 11e45ca3 19c1fbe5 ef520a1a     0..F.\........R.
    3c44:	45249ff6 179b4fdf 7b412bad 10376ce6     ..$E.O...+A{.l7.

00003c54 <aes_test_ofb_pt>:
    3c54:	e2bec16b 969f402e 117e3de9 2a179373     k....@...=~.s..*
    3c64:	578a2dae 9cac031e ac6fb79e 518eaf45     .-.W......o.E..Q
    3c74:	461cc830 11e45ca3 19c1fbe5 ef520a1a     0..F.\........R.
    3c84:	45249ff6 179b4fdf 7b412bad 10376ce6     ..$E.O...+A{.l7.

00003c94 <aes_test_ecb_dec>:
    3c94:	c26a4144 583cf5d1 7e910333 e0ebe96b     DAj...<X3..~k...
    3ca4:	9e1ee348 f2186725 9c312992 a45bf119     H...%g...)1...[.
    3cb4:	fdcf8c05 2d38cbbb 58566f1f de4a8a5d     ......8-.oVX].J.

00003cc4 <aes_test_ecb_enc>:
    3cc4:	2c054cc3 738ddac0 5ffe1a45 7f29be03     .L.,...sE.._..).
    3cd4:	2a75f6f3 1183d7e8 5641f038 14b13106     ..u*....8.AV.1..
    3ce4:	ccee798b 5deea093 eab430ff a46d6321     .y.....].0..!cm.

00003cf4 <aes_test_cbc_dec>:
    3cf4:	e037cafa 7353c8b0 736e70df 86afc9f7     ..7...Ss.pns....
    3d04:	dd78f65d 754eba17 c66817b6 7b7cefad     ].x...Nu..h...|{
    3d14:	81e10448 7529e68f 8ce8a319 13043157     H.....)u....W1..

00003d24 <aes_test_cbc_enc>:
    3d24:	5efc058a 84f45a09 28d3088a 3d8e68d3     ...^.Z.....(.h.=
    3d34:	d566d97b bbc1d83a faadd285 04b17be8     {.f.:........{..
    3d44:	65533cfe b5452f3e b288cd6f f08f89cc     .<Se>/E.o.......

00003d54 <aes_test_cfb128_iv>:
    3d54:	03020100 07060504 0b0a0908 0f0e0d0c     ................

00003d64 <aes_test_cfb128_key>:
    3d64:	16157e2b a6d2ae28 8815f7ab 3c4fcf09     +~..(.........O<
	...
    3d84:	f7b0738e 52640eda 2bf310c8 e5799080     .s....dR...+..y.
    3d94:	d2eaf862 7b6b2c52 00000000 00000000     b...R,k{........
    3da4:	10eb3d60 be71ca15 f0ae732b 81777d85     `=....q.+s...}w.
    3db4:	072c351f d708613b a310982d f4df1409     .5,.;a..-.......

00003dc4 <aes_test_cfb128_ct>:
    3dc4:	2ed93f3b 20ad2db7 f8493433 4afb3ce8     ;?...-. 34I..<.J
    3dd4:	3745a6c8 3fa9b3a0 adcde3cd 8be51c9f     ..E7...?........
    3de4:	671f7526 40b1cba3 f18c80b1 dff4a487     &u.g...@........
    3df4:	35054bc0 0e1c5d7c 6fc6c4ea e6f2f79f     .K.5|].....o....
    3e04:	6f0dc8cd ab8cf1dd 0959c234 74419ac9     ...o....4.Y...At
    3e14:	7f7fce67 21361781 702b1a96 7a3d1d17     g.....6!..+p..=z
    3e24:	1d8a1e2e b1889bd5 ed0fe6c8 c9c4fa1e     ................
    3e34:	9c9f5fc0 a04f83a9 ba8fae42 ff094b58     ._....O.B...XK..
    3e44:	bf847edc 4b1679da 8684cd7e 60385d98     .~...y.K~....]8`
    3e54:	14edff39 c8b1283b 633c1132 7b40e531     9...;(..2.<c1.@{
    3e64:	241310df 924be515 a8d03ea1 f9e27a26     ...$..K..>..&z..
    3e74:	7485a375 f8ceb91a 3d623120 71e4b155     u..t.... 1b=U..q

00003e84 <aes_test_ofb_iv>:
    3e84:	03020100 07060504 0b0a0908 0f0e0d0c     ................

00003e94 <aes_test_ofb_key>:
    3e94:	16157e2b a6d2ae28 8815f7ab 3c4fcf09     +~..(.........O<
	...
    3eb4:	f7b0738e 52640eda 2bf310c8 e5799080     .s....dR...+..y.
    3ec4:	d2eaf862 7b6b2c52 00000000 00000000     b...R,k{........
    3ed4:	10eb3d60 be71ca15 f0ae732b 81777d85     `=....q.+s...}w.
    3ee4:	072c351f d708613b a310982d f4df1409     .5,.;a..-.......

00003ef4 <aes_test_ofb_ct>:
    3ef4:	2ed93f3b 20ad2db7 f8493433 4afb3ce8     ;?...-. 34I..<.J
    3f04:	8d508977 038f9116 da523cf5 25d84ec5     w.P......<R..N.%
    3f14:	1e054097 f6ec5f9c a8f74443 cced6022     .@..._..CD.."`..
    3f24:	28654c30 78c759f6 d910a566 5eaed6c1     0Le(.Y.xf......^
    3f34:	6f0dc8cd ab8cf1dd 0959c234 74419ac9     ...o....4.Y...At
    3f44:	8d8bc2fc 7c83634c 0017e809 010410c1     ....Lc.|........
    3f54:	ea9a9a8d 6f59f6c0 4d6d9c55 f2a559af     ......YoU.mM.Y..
    3f64:	08209f6d 3e6cca57 4b52ac9c 2ac9acd9     m. .W.l>..RK...*
    3f74:	bf847edc 4b1679da 8684cd7e 60385d98     .~...y.K~....]8`
    3f84:	67dceb4f 3a0bd240 d86a8fc8 8db04f2a     O..g@..:..j.*O..
    3f94:	a047ab71 ed6ee886 5b1c9df3 08c497ba     q.G...n....[....
    3fa4:	1d142601 e87bf367 8b5a8f53 84e440e7     .&..g.{.S.Z..@..

00003fb4 <aes_test_ctr_nonce_counter>:
    3fb4:	30000000 00000000 00000000 01000000     ...0............
    3fc4:	dbb66c00 593b54c0 0bd948da 01000000     .l...T;Y.H......
    3fd4:	7b01e000 3f7f7727 f086174a 01000000     ...{'w.?J.......

00003fe4 <aes_test_ctr_key>:
    3fe4:	f85268ae cc671012 76a5f74b 9ef37755     .hR...g.K..vUw..
    3ff4:	7806247e d7e0fa17 1fced643 63915332     ~$.x....C...2S.c
    4004:	03be9176 a820505e 85616eac dca0f929     v...^P ..na.)...

00004014 <aes_test_ctr_len>:
    4014:	00000010 00000020 00000024              .... ...$...

00004020 <aes_test_ctr_ct>:
    4020:	4f5d09e4 79b3a7b7 a375612d b8111326     ..]O...y-au.&...
	...
    4050:	06a10451 d9728a16 ee410d79 88d3da8e     Q.....r.y.A.....
    4060:	fc1e2eeb c857da46 df30e6fc 28be4191     ....F.W...0..A.(
	...
    4080:	a848cfc1 d9fd2f9f e95246cf d772dbef     ..H../...FR...r.
    4090:	2ba44045 36786dde ea5c9ad5 5310f3ae     E@.+.mx6..\....S
    40a0:	2f07b225 00000000 00000000 00000000     %../............

000040b0 <aes_test_ctr_pt>:
    40b0:	676e6953 6220656c 6b636f6c 67736d20     Single block msg
	...
    40e0:	03020100 07060504 0b0a0908 0f0e0d0c     ................
    40f0:	13121110 17161514 1b1a1918 1f1e1d1c     ................
	...
    4110:	03020100 07060504 0b0a0908 0f0e0d0c     ................
    4120:	13121110 17161514 1b1a1918 1f1e1d1c     ................
    4130:	23222120 00000000 00000000 00000000      !"#............

00004140 <aes_test_xts_key>:
	...
    4160:	11111111 11111111 11111111 11111111     ................
    4170:	22222222 22222222 22222222 22222222     """"""""""""""""
    4180:	fcfdfeff f8f9fafb f4f5f6f7 f0f1f2f3     ................
    4190:	22222222 22222222 22222222 22222222     """"""""""""""""

000041a0 <aes_test_xts_data_unit>:
	...
    41b0:	33333333 00000033 00000000 00000000     33333...........
    41c0:	33333333 00000033 00000000 00000000     33333...........

000041d0 <aes_test_xts_ct32>:
    41d0:	9ef67c91 ecb268bd a3e99f9b 92a6ddea     .|...h..........
    41e0:	f5d243cd 85ed9895 65c2028c 2e92bf2f     .C.........e/...
    41f0:	5e1854c4 6e93166a 38403339 8b83efac     .T.^j..n93@8....
    4200:	ff6f18fb c4ad8074 ec829328 f094d3d6     ..o.t...(.......
    4210:	6b3385af 1afc7a59 b22e0b90 d249c91e     ..3kYz........I.
    4220:	044cdf92 53210b7e 97a58621 897a221a     ..L.~.!S!...."z.

00004230 <aes_test_xts_pt32>:
	...
    4250:	44444444 44444444 44444444 44444444     DDDDDDDDDDDDDDDD
    4260:	44444444 44444444 44444444 44444444     DDDDDDDDDDDDDDDD
    4270:	44444444 44444444 44444444 44444444     DDDDDDDDDDDDDDDD
    4280:	44444444 44444444 44444444 44444444     DDDDDDDDDDDDDDDD

00004290 <__sf_fake_stderr>:
	...

000042b0 <__sf_fake_stdin>:
	...

000042d0 <__sf_fake_stdout>:
	...

000042f0 <_init>:
    42f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    42f2:	46c0      	nop			; (mov r8, r8)
    42f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    42f6:	bc08      	pop	{r3}
    42f8:	469e      	mov	lr, r3
    42fa:	4770      	bx	lr

000042fc <__init_array_start>:
    42fc:	000000dd 	.word	0x000000dd

00004300 <_fini>:
    4300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4302:	46c0      	nop			; (mov r8, r8)
    4304:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4306:	bc08      	pop	{r3}
    4308:	469e      	mov	lr, r3
    430a:	4770      	bx	lr

0000430c <__fini_array_start>:
    430c:	000000b5 	.word	0x000000b5
