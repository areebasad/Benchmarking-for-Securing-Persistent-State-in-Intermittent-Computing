
AES-256_mbedTLS_library.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004940  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000088  20000000  00004940  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  00020088  2**0
                  CONTENTS
  3 .bss          00000280  20000088  000049c8  00020088  2**2
                  ALLOC
  4 .stack        00002000  20000308  00004c48  00020088  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
  7 .debug_info   00012df9  00000000  00000000  00020109  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002ee8  00000000  00000000  00032f02  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00009bdf  00000000  00000000  00035dea  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000548  00000000  00000000  0003f9c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000f98  00000000  00000000  0003ff11  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001bc9e  00000000  00000000  00040ea9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000e27d  00000000  00000000  0005cb47  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00090c5a  00000000  00000000  0006adc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000f4c  00000000  00000000  000fba20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	08 23 00 20 2d 01 00 00 29 01 00 00 29 01 00 00     .#. -...)...)...
	...
      2c:	29 01 00 00 00 00 00 00 00 00 00 00 29 01 00 00     )...........)...
      3c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      4c:	29 01 00 00 69 04 00 00 29 01 00 00 29 01 00 00     )...i...)...)...
      5c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      6c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      7c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      8c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      9c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      ac:	29 01 00 00 00 00 00 00                             ).......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000088 	.word	0x20000088
      d4:	00000000 	.word	0x00000000
      d8:	00004940 	.word	0x00004940

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000008c 	.word	0x2000008c
     108:	00004940 	.word	0x00004940
     10c:	00004940 	.word	0x00004940
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     114:	b510      	push	{r4, lr}
	system_init();
     116:	4b02      	ldr	r3, [pc, #8]	; (120 <atmel_start_init+0xc>)
     118:	4798      	blx	r3
	
	gpio_init();
     11a:	4b02      	ldr	r3, [pc, #8]	; (124 <atmel_start_init+0x10>)
     11c:	4798      	blx	r3
}
     11e:	bd10      	pop	{r4, pc}
     120:	000001b1 	.word	0x000001b1
     124:	00000219 	.word	0x00000219

00000128 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     128:	e7fe      	b.n	128 <Dummy_Handler>
     12a:	46c0      	nop			; (mov r8, r8)

0000012c <Reset_Handler>:
        if (pSrc != pDest) {
     12c:	4914      	ldr	r1, [pc, #80]	; (180 <Reset_Handler+0x54>)
     12e:	4815      	ldr	r0, [pc, #84]	; (184 <Reset_Handler+0x58>)
{
     130:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     132:	4281      	cmp	r1, r0
     134:	d009      	beq.n	14a <Reset_Handler+0x1e>
                for (; pDest < &_erelocate;) {
     136:	4b14      	ldr	r3, [pc, #80]	; (188 <Reset_Handler+0x5c>)
     138:	4298      	cmp	r0, r3
     13a:	d206      	bcs.n	14a <Reset_Handler+0x1e>
                        *pDest++ = *pSrc++;
     13c:	43c2      	mvns	r2, r0
     13e:	18d2      	adds	r2, r2, r3
     140:	0892      	lsrs	r2, r2, #2
     142:	3201      	adds	r2, #1
     144:	0092      	lsls	r2, r2, #2
     146:	4b11      	ldr	r3, [pc, #68]	; (18c <Reset_Handler+0x60>)
     148:	4798      	blx	r3
        for (pDest = &_szero; pDest < &_ezero;) {
     14a:	4811      	ldr	r0, [pc, #68]	; (190 <Reset_Handler+0x64>)
     14c:	4b11      	ldr	r3, [pc, #68]	; (194 <Reset_Handler+0x68>)
     14e:	4298      	cmp	r0, r3
     150:	d207      	bcs.n	162 <Reset_Handler+0x36>
                *pDest++ = 0;
     152:	43c2      	mvns	r2, r0
     154:	18d2      	adds	r2, r2, r3
     156:	0892      	lsrs	r2, r2, #2
     158:	3201      	adds	r2, #1
     15a:	0092      	lsls	r2, r2, #2
     15c:	2100      	movs	r1, #0
     15e:	4b0e      	ldr	r3, [pc, #56]	; (198 <Reset_Handler+0x6c>)
     160:	4798      	blx	r3
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     162:	21ff      	movs	r1, #255	; 0xff
     164:	4b0d      	ldr	r3, [pc, #52]	; (19c <Reset_Handler+0x70>)
     166:	4a0e      	ldr	r2, [pc, #56]	; (1a0 <Reset_Handler+0x74>)
     168:	438b      	bics	r3, r1
     16a:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
     16c:	4a0d      	ldr	r2, [pc, #52]	; (1a4 <Reset_Handler+0x78>)
     16e:	397f      	subs	r1, #127	; 0x7f
     170:	6853      	ldr	r3, [r2, #4]
     172:	430b      	orrs	r3, r1
     174:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     176:	4b0c      	ldr	r3, [pc, #48]	; (1a8 <Reset_Handler+0x7c>)
     178:	4798      	blx	r3
        main();
     17a:	4b0c      	ldr	r3, [pc, #48]	; (1ac <Reset_Handler+0x80>)
     17c:	4798      	blx	r3
     17e:	e7fe      	b.n	17e <Reset_Handler+0x52>
     180:	00004940 	.word	0x00004940
     184:	20000000 	.word	0x20000000
     188:	20000088 	.word	0x20000088
     18c:	00001e39 	.word	0x00001e39
     190:	20000088 	.word	0x20000088
     194:	20000308 	.word	0x20000308
     198:	00001e4b 	.word	0x00001e4b
     19c:	00000000 	.word	0x00000000
     1a0:	e000ed00 	.word	0xe000ed00
     1a4:	41004000 	.word	0x41004000
     1a8:	00001dc9 	.word	0x00001dc9
     1ac:	0000090d 	.word	0x0000090d

000001b0 <system_init>:
{
	delay_init(SysTick);
}

void system_init(void)
{
     1b0:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     1b2:	4b11      	ldr	r3, [pc, #68]	; (1f8 <system_init+0x48>)
     1b4:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     1b6:	23c0      	movs	r3, #192	; 0xc0
     1b8:	2280      	movs	r2, #128	; 0x80
     1ba:	2194      	movs	r1, #148	; 0x94

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     1bc:	20c0      	movs	r0, #192	; 0xc0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     1be:	05db      	lsls	r3, r3, #23
     1c0:	00d2      	lsls	r2, r2, #3
     1c2:	505a      	str	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     1c4:	390c      	subs	r1, #12
     1c6:	505a      	str	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     1c8:	4a0c      	ldr	r2, [pc, #48]	; (1fc <system_init+0x4c>)
     1ca:	4b0d      	ldr	r3, [pc, #52]	; (200 <system_init+0x50>)
     1cc:	3120      	adds	r1, #32
     1ce:	0600      	lsls	r0, r0, #24
     1d0:	505a      	str	r2, [r3, r1]
     1d2:	5058      	str	r0, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     1d4:	20ca      	movs	r0, #202	; 0xca
	tmp &= ~PORT_PINCFG_PMUXEN;
     1d6:	2401      	movs	r4, #1
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     1d8:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     1da:	43a1      	bics	r1, r4
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     1dc:	5419      	strb	r1, [r3, r0]
}

static inline void hri_mclk_set_AHBMASK_NVMCTRL_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
     1de:	2380      	movs	r3, #128	; 0x80
     1e0:	6911      	ldr	r1, [r2, #16]
     1e2:	005b      	lsls	r3, r3, #1
     1e4:	430b      	orrs	r3, r1
     1e6:	6113      	str	r3, [r2, #16]
	flash_init(&FLASH_0, NVMCTRL);
     1e8:	4906      	ldr	r1, [pc, #24]	; (204 <system_init+0x54>)
     1ea:	4b07      	ldr	r3, [pc, #28]	; (208 <system_init+0x58>)
     1ec:	4807      	ldr	r0, [pc, #28]	; (20c <system_init+0x5c>)
     1ee:	4798      	blx	r3
	delay_init(SysTick);
     1f0:	4807      	ldr	r0, [pc, #28]	; (210 <system_init+0x60>)
     1f2:	4b08      	ldr	r3, [pc, #32]	; (214 <system_init+0x64>)
     1f4:	4798      	blx	r3
	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);

	FLASH_0_init();

	delay_driver_init();
}
     1f6:	bd10      	pop	{r4, pc}
     1f8:	00000391 	.word	0x00000391
     1fc:	40000400 	.word	0x40000400
     200:	40002800 	.word	0x40002800
     204:	41004000 	.word	0x41004000
     208:	0000031d 	.word	0x0000031d
     20c:	200002e8 	.word	0x200002e8
     210:	e000e010 	.word	0xe000e010
     214:	000002d1 	.word	0x000002d1

00000218 <gpio_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     218:	22c0      	movs	r2, #192	; 0xc0

#include "driver_init.h"
#include "gpio_init.h"

void gpio_init(void)
{
     21a:	b5f0      	push	{r4, r5, r6, r7, lr}
     21c:	2302      	movs	r3, #2
     21e:	46c6      	mov	lr, r8
     220:	2194      	movs	r1, #148	; 0x94
     222:	05d2      	lsls	r2, r2, #23
     224:	b500      	push	{lr}
     226:	2780      	movs	r7, #128	; 0x80
     228:	5053      	str	r3, [r2, r1]
     22a:	2080      	movs	r0, #128	; 0x80
     22c:	2180      	movs	r1, #128	; 0x80
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     22e:	2688      	movs	r6, #136	; 0x88
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     230:	0249      	lsls	r1, r1, #9
     232:	037f      	lsls	r7, r7, #13
     234:	0380      	lsls	r0, r0, #14
     236:	6151      	str	r1, [r2, #20]
     238:	4680      	mov	r8, r0
     23a:	6157      	str	r7, [r2, #20]
     23c:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     23e:	20a8      	movs	r0, #168	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     240:	5193      	str	r3, [r2, r6]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     242:	4d1c      	ldr	r5, [pc, #112]	; (2b4 <gpio_init+0x9c>)
     244:	4b1c      	ldr	r3, [pc, #112]	; (2b8 <gpio_init+0xa0>)
     246:	4c1d      	ldr	r4, [pc, #116]	; (2bc <gpio_init+0xa4>)
     248:	501d      	str	r5, [r3, r0]
     24a:	25c0      	movs	r5, #192	; 0xc0
     24c:	062d      	lsls	r5, r5, #24
     24e:	501d      	str	r5, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     250:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     252:	2180      	movs	r1, #128	; 0x80
     254:	05c9      	lsls	r1, r1, #23
     256:	6299      	str	r1, [r3, #40]	; 0x28
     258:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     25a:	4644      	mov	r4, r8
     25c:	6097      	str	r7, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     25e:	4f18      	ldr	r7, [pc, #96]	; (2c0 <gpio_init+0xa8>)
     260:	6299      	str	r1, [r3, #40]	; 0x28
     262:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     264:	6094      	str	r4, [r2, #8]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     266:	27c1      	movs	r7, #193	; 0xc1
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     268:	6299      	str	r1, [r3, #40]	; 0x28
     26a:	4916      	ldr	r1, [pc, #88]	; (2c4 <gpio_init+0xac>)
     26c:	6299      	str	r1, [r3, #40]	; 0x28
	tmp &= ~PORT_PINCFG_PMUXEN;
     26e:	2101      	movs	r1, #1
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     270:	5ddc      	ldrb	r4, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     272:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     274:	55dc      	strb	r4, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     276:	3f71      	subs	r7, #113	; 0x71
     278:	5ddc      	ldrb	r4, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     27a:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     27c:	55dc      	strb	r4, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     27e:	3704      	adds	r7, #4
     280:	5ddc      	ldrb	r4, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     282:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     284:	55dc      	strb	r4, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     286:	3701      	adds	r7, #1
     288:	5ddc      	ldrb	r4, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     28a:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     28c:	55dc      	strb	r4, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     28e:	2480      	movs	r4, #128	; 0x80
     290:	3743      	adds	r7, #67	; 0x43
     292:	00e4      	lsls	r4, r4, #3
     294:	51d4      	str	r4, [r2, r7]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     296:	5194      	str	r4, [r2, r6]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     298:	4a0b      	ldr	r2, [pc, #44]	; (2c8 <gpio_init+0xb0>)
     29a:	501a      	str	r2, [r3, r0]
     29c:	501d      	str	r5, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     29e:	3022      	adds	r0, #34	; 0x22
     2a0:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2a2:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2a4:	541a      	strb	r2, [r3, r0]
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
#endif

	delay_ms(10);
     2a6:	38c0      	subs	r0, #192	; 0xc0
     2a8:	4b08      	ldr	r3, [pc, #32]	; (2cc <gpio_init+0xb4>)
     2aa:	4798      	blx	r3
     2ac:	bc04      	pop	{r2}
     2ae:	4690      	mov	r8, r2
     2b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2b2:	46c0      	nop			; (mov r8, r8)
     2b4:	40000002 	.word	0x40000002
     2b8:	40002800 	.word	0x40002800
     2bc:	c0000001 	.word	0xc0000001
     2c0:	c0000010 	.word	0xc0000010
     2c4:	c0000020 	.word	0xc0000020
     2c8:	40000400 	.word	0x40000400
     2cc:	000002e5 	.word	0x000002e5

000002d0 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     2d0:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
     2d2:	4b02      	ldr	r3, [pc, #8]	; (2dc <delay_init+0xc>)
     2d4:	6018      	str	r0, [r3, #0]
     2d6:	4b02      	ldr	r3, [pc, #8]	; (2e0 <delay_init+0x10>)
     2d8:	4798      	blx	r3
}
     2da:	bd10      	pop	{r4, pc}
     2dc:	200000a4 	.word	0x200000a4
     2e0:	00000739 	.word	0x00000739

000002e4 <delay_ms>:
/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     2e4:	4b04      	ldr	r3, [pc, #16]	; (2f8 <delay_ms+0x14>)
{
     2e6:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     2e8:	681c      	ldr	r4, [r3, #0]
     2ea:	4b04      	ldr	r3, [pc, #16]	; (2fc <delay_ms+0x18>)
     2ec:	4798      	blx	r3
     2ee:	4b04      	ldr	r3, [pc, #16]	; (300 <delay_ms+0x1c>)
     2f0:	0001      	movs	r1, r0
     2f2:	0020      	movs	r0, r4
     2f4:	4798      	blx	r3
}
     2f6:	bd10      	pop	{r4, pc}
     2f8:	200000a4 	.word	0x200000a4
     2fc:	00000389 	.word	0x00000389
     300:	0000074d 	.word	0x0000074d

00000304 <flash_ready>:
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
     304:	6943      	ldr	r3, [r0, #20]
{
     306:	b510      	push	{r4, lr}
	if (descr->callbacks.cb_ready) {
     308:	2b00      	cmp	r3, #0
     30a:	d000      	beq.n	30e <flash_ready+0xa>
		descr->callbacks.cb_ready(descr);
     30c:	4798      	blx	r3
	}
}
     30e:	bd10      	pop	{r4, pc}

00000310 <flash_error>:
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
     310:	6983      	ldr	r3, [r0, #24]
{
     312:	b510      	push	{r4, lr}
	if (descr->callbacks.cb_error) {
     314:	2b00      	cmp	r3, #0
     316:	d000      	beq.n	31a <flash_error+0xa>
		descr->callbacks.cb_error(descr);
     318:	4798      	blx	r3
	}
}
     31a:	bd10      	pop	{r4, pc}

0000031c <flash_init>:
{
     31c:	b570      	push	{r4, r5, r6, lr}
     31e:	0004      	movs	r4, r0
     320:	000d      	movs	r5, r1
	ASSERT(flash && hw);
     322:	2800      	cmp	r0, #0
     324:	d012      	beq.n	34c <flash_init+0x30>
     326:	0008      	movs	r0, r1
     328:	1e43      	subs	r3, r0, #1
     32a:	4198      	sbcs	r0, r3
     32c:	b2c0      	uxtb	r0, r0
     32e:	4908      	ldr	r1, [pc, #32]	; (350 <flash_init+0x34>)
     330:	4b08      	ldr	r3, [pc, #32]	; (354 <flash_init+0x38>)
     332:	2238      	movs	r2, #56	; 0x38
     334:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
     336:	0029      	movs	r1, r5
     338:	0020      	movs	r0, r4
     33a:	4b07      	ldr	r3, [pc, #28]	; (358 <flash_init+0x3c>)
     33c:	4798      	blx	r3
	if (rc) {
     33e:	2800      	cmp	r0, #0
     340:	d103      	bne.n	34a <flash_init+0x2e>
	flash->dev.flash_cb.ready_cb = flash_ready;
     342:	4b06      	ldr	r3, [pc, #24]	; (35c <flash_init+0x40>)
     344:	6023      	str	r3, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
     346:	4b06      	ldr	r3, [pc, #24]	; (360 <flash_init+0x44>)
     348:	6063      	str	r3, [r4, #4]
}
     34a:	bd70      	pop	{r4, r5, r6, pc}
     34c:	2000      	movs	r0, #0
     34e:	e7ee      	b.n	32e <flash_init+0x12>
     350:	00001fd4 	.word	0x00001fd4
     354:	00000365 	.word	0x00000365
     358:	00000409 	.word	0x00000409
     35c:	00000305 	.word	0x00000305
     360:	00000311 	.word	0x00000311

00000364 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     364:	2800      	cmp	r0, #0
     366:	d100      	bne.n	36a <assert+0x6>
		__asm("BKPT #0");
     368:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     36a:	4770      	bx	lr

0000036c <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     36c:	4a04      	ldr	r2, [pc, #16]	; (380 <_sbrk+0x14>)
     36e:	6813      	ldr	r3, [r2, #0]
     370:	2b00      	cmp	r3, #0
     372:	d003      	beq.n	37c <_sbrk+0x10>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	heap += incr;
     374:	1818      	adds	r0, r3, r0
     376:	6010      	str	r0, [r2, #0]

	return (caddr_t)prev_heap;
}
     378:	0018      	movs	r0, r3
     37a:	4770      	bx	lr
     37c:	4b01      	ldr	r3, [pc, #4]	; (384 <_sbrk+0x18>)
     37e:	e7f9      	b.n	374 <_sbrk+0x8>
     380:	200000a8 	.word	0x200000a8
     384:	20002308 	.word	0x20002308

00000388 <_get_cycles_for_ms>:
{
	switch (power) {
	case 8:
		return (ms * (freq / 100000)) * 100;
	case 7:
		return (ms * (freq / 10000)) * 10;
     388:	23fa      	movs	r3, #250	; 0xfa
     38a:	011b      	lsls	r3, r3, #4
     38c:	4358      	muls	r0, r3
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     38e:	4770      	bx	lr

00000390 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     390:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     392:	4b09      	ldr	r3, [pc, #36]	; (3b8 <_init_chip+0x28>)
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_set_performance_level(2);
     394:	2002      	movs	r0, #2
     396:	685a      	ldr	r2, [r3, #4]
     398:	605a      	str	r2, [r3, #4]
     39a:	4b08      	ldr	r3, [pc, #32]	; (3bc <_init_chip+0x2c>)
     39c:	4798      	blx	r3

	_osc32kctrl_init_sources();
     39e:	4b08      	ldr	r3, [pc, #32]	; (3c0 <_init_chip+0x30>)
     3a0:	4798      	blx	r3
	_oscctrl_init_sources();
     3a2:	4b08      	ldr	r3, [pc, #32]	; (3c4 <_init_chip+0x34>)
     3a4:	4798      	blx	r3
	_mclk_init();
     3a6:	4b08      	ldr	r3, [pc, #32]	; (3c8 <_init_chip+0x38>)
     3a8:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     3aa:	4b08      	ldr	r3, [pc, #32]	; (3cc <_init_chip+0x3c>)
     3ac:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     3ae:	20ff      	movs	r0, #255	; 0xff
     3b0:	4b07      	ldr	r3, [pc, #28]	; (3d0 <_init_chip+0x40>)
     3b2:	4798      	blx	r3
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
     3b4:	bd10      	pop	{r4, pc}
     3b6:	46c0      	nop			; (mov r8, r8)
     3b8:	41004000 	.word	0x41004000
     3bc:	00000715 	.word	0x00000715
     3c0:	000006c5 	.word	0x000006c5
     3c4:	000006dd 	.word	0x000006dd
     3c8:	000003f5 	.word	0x000003f5
     3cc:	00000711 	.word	0x00000711
     3d0:	000003d5 	.word	0x000003d5

000003d4 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     3d4:	07c3      	lsls	r3, r0, #31
     3d6:	d506      	bpl.n	3e6 <_gclk_init_generators_by_fref+0x12>
}

static inline void hri_gclk_write_GENCTRL_reg(const void *const hw, uint8_t index, hri_gclk_genctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENCTRL[index].reg = data;
     3d8:	4a03      	ldr	r2, [pc, #12]	; (3e8 <_gclk_init_generators_by_fref+0x14>)
     3da:	4b04      	ldr	r3, [pc, #16]	; (3ec <_gclk_init_generators_by_fref+0x18>)
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     3dc:	4904      	ldr	r1, [pc, #16]	; (3f0 <_gclk_init_generators_by_fref+0x1c>)
	((Gclk *)hw)->GENCTRL[index].reg = data;
     3de:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     3e0:	6853      	ldr	r3, [r2, #4]
     3e2:	420b      	tst	r3, r1
     3e4:	d1fc      	bne.n	3e0 <_gclk_init_generators_by_fref+0xc>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
}
     3e6:	4770      	bx	lr
     3e8:	40001800 	.word	0x40001800
     3ec:	00010106 	.word	0x00010106
     3f0:	000007fd 	.word	0x000007fd

000003f4 <_mclk_init>:
	((Mclk *)hw)->BUPDIV.reg = data;
     3f4:	2208      	movs	r2, #8
     3f6:	4b03      	ldr	r3, [pc, #12]	; (404 <_mclk_init+0x10>)
     3f8:	719a      	strb	r2, [r3, #6]
	((Mclk *)hw)->LPDIV.reg = data;
     3fa:	3a04      	subs	r2, #4
     3fc:	715a      	strb	r2, [r3, #5]
	((Mclk *)hw)->CPUDIV.reg = data;
     3fe:	3a03      	subs	r2, #3
     400:	711a      	strb	r2, [r3, #4]
{
	void *hw = (void *)MCLK;
	hri_mclk_write_BUPDIV_reg(hw, MCLK_BUPDIV_BUPDIV(CONF_MCLK_BUPDIV));
	hri_mclk_write_LPDIV_reg(hw, MCLK_LPDIV_LPDIV(CONF_MCLK_LPDIV));
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
}
     402:	4770      	bx	lr
     404:	40000400 	.word	0x40000400

00000408 <_flash_init>:

/**
 * \brief Initialize NVM
 */
int32_t _flash_init(struct _flash_device *const device, void *const hw)
{
     408:	b570      	push	{r4, r5, r6, lr}
     40a:	0005      	movs	r5, r0
     40c:	000c      	movs	r4, r1
	ASSERT(device && (hw == NVMCTRL));
     40e:	2800      	cmp	r0, #0
     410:	d01d      	beq.n	44e <_flash_init+0x46>
     412:	4b10      	ldr	r3, [pc, #64]	; (454 <_flash_init+0x4c>)
     414:	18c8      	adds	r0, r1, r3
     416:	4243      	negs	r3, r0
     418:	4158      	adcs	r0, r3
     41a:	b2c0      	uxtb	r0, r0
     41c:	2246      	movs	r2, #70	; 0x46
     41e:	490e      	ldr	r1, [pc, #56]	; (458 <_flash_init+0x50>)
     420:	4b0e      	ldr	r3, [pc, #56]	; (45c <_flash_init+0x54>)
     422:	4798      	blx	r3

static inline hri_nvmctrl_ctrlb_reg_t hri_nvmctrl_get_CTRLB_reg(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Nvmctrl *)hw)->CTRLB.reg;
	tmp &= mask;
     424:	239e      	movs	r3, #158	; 0x9e
	uint32_t ctrlb;

	device->hw = hw;
     426:	612c      	str	r4, [r5, #16]
	tmp = ((Nvmctrl *)hw)->CTRLB.reg;
     428:	6862      	ldr	r2, [r4, #4]
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     42a:	2180      	movs	r1, #128	; 0x80
	tmp &= mask;
     42c:	4013      	ands	r3, r2
     42e:	2210      	movs	r2, #16
}

static inline void hri_nvmctrl_write_CTRLB_reg(const void *const hw, hri_nvmctrl_ctrlb_reg_t data)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg = data;
     430:	6063      	str	r3, [r4, #4]
	ctrlb      = _nvm.ctrlb & ~(NVMCTRL_CTRLB_RWS_Msk | NVMCTRL_CTRLB_MANW);
	ctrlb |= hri_nvmctrl_get_CTRLB_reg(device->hw, NVMCTRL_CTRLB_RWS_Msk | NVMCTRL_CTRLB_MANW);
	hri_nvmctrl_write_CTRLB_reg(device->hw, ctrlb);

	_nvm_dev = device;
     432:	4b0b      	ldr	r3, [pc, #44]	; (460 <_flash_init+0x58>)
     434:	601d      	str	r5, [r3, #0]
     436:	4b0b      	ldr	r3, [pc, #44]	; (464 <_flash_init+0x5c>)
     438:	505a      	str	r2, [r3, r1]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     43a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     43e:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     442:	3101      	adds	r1, #1
     444:	31ff      	adds	r1, #255	; 0xff
     446:	505a      	str	r2, [r3, r1]
	NVIC_DisableIRQ(NVMCTRL_IRQn);
	NVIC_ClearPendingIRQ(NVMCTRL_IRQn);
	NVIC_EnableIRQ(NVMCTRL_IRQn);
	return ERR_NONE;
}
     448:	2000      	movs	r0, #0
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     44a:	601a      	str	r2, [r3, #0]
     44c:	bd70      	pop	{r4, r5, r6, pc}
     44e:	2000      	movs	r0, #0
     450:	e7e4      	b.n	41c <_flash_init+0x14>
     452:	46c0      	nop			; (mov r8, r8)
     454:	beffc000 	.word	0xbeffc000
     458:	00001fec 	.word	0x00001fec
     45c:	00000365 	.word	0x00000365
     460:	200000ac 	.word	0x200000ac
     464:	e000e100 	.word	0xe000e100

00000468 <NVMCTRL_Handler>:
 */
void NVMCTRL_Handler(void)
{
	void *const hw = _nvm_dev->hw;

	if (hri_nvmctrl_get_interrupt_READY_bit(hw)) {
     468:	2201      	movs	r2, #1
	void *const hw = _nvm_dev->hw;
     46a:	4b0b      	ldr	r3, [pc, #44]	; (498 <NVMCTRL_Handler+0x30>)
{
     46c:	b510      	push	{r4, lr}
	void *const hw = _nvm_dev->hw;
     46e:	6818      	ldr	r0, [r3, #0]
     470:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
     472:	7d19      	ldrb	r1, [r3, #20]
	if (hri_nvmctrl_get_interrupt_READY_bit(hw)) {
     474:	420a      	tst	r2, r1
     476:	d004      	beq.n	482 <NVMCTRL_Handler+0x1a>
		if (NULL != _nvm_dev->flash_cb.ready_cb) {
     478:	6803      	ldr	r3, [r0, #0]
     47a:	2b00      	cmp	r3, #0
     47c:	d000      	beq.n	480 <NVMCTRL_Handler+0x18>
			_nvm_dev->flash_cb.ready_cb(_nvm_dev);
		}
	} else if (hri_nvmctrl_get_interrupt_ERROR_bit(hw)) {
		hri_nvmctrl_clear_interrupt_ERROR_bit(hw);
		if (NULL != _nvm_dev->flash_cb.error_cb) {
			_nvm_dev->flash_cb.error_cb(_nvm_dev);
     47e:	4798      	blx	r3
		}
	}
}
     480:	bd10      	pop	{r4, pc}
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_ERROR) >> NVMCTRL_INTFLAG_ERROR_Pos;
     482:	7d19      	ldrb	r1, [r3, #20]
     484:	0849      	lsrs	r1, r1, #1
	} else if (hri_nvmctrl_get_interrupt_ERROR_bit(hw)) {
     486:	420a      	tst	r2, r1
     488:	d0fa      	beq.n	480 <NVMCTRL_Handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_ERROR;
     48a:	2202      	movs	r2, #2
     48c:	751a      	strb	r2, [r3, #20]
		if (NULL != _nvm_dev->flash_cb.error_cb) {
     48e:	6843      	ldr	r3, [r0, #4]
     490:	2b00      	cmp	r3, #0
     492:	d1f4      	bne.n	47e <NVMCTRL_Handler+0x16>
     494:	e7f4      	b.n	480 <NVMCTRL_Handler+0x18>
     496:	46c0      	nop			; (mov r8, r8)
     498:	200000ac 	.word	0x200000ac

0000049c <_rww_flash_read>:

/**
 * \brief Reads a number of bytes in the internal RWWEE Flash.
 */
int32_t _rww_flash_read(struct _flash_device *const device, const uint32_t src_addr, uint8_t *buffer, uint32_t length)
{
     49c:	b570      	push	{r4, r5, r6, lr}
	if ((addr < NVMCTRL_RWW_EEPROM_ADDR)
     49e:	2580      	movs	r5, #128	; 0x80
	    || (addr > (NVMCTRL_RWW_EEPROM_ADDR + NVMCTRL_PAGE_SIZE * NVMCTRL_RWWEE_PAGES))) {
     4a0:	4c19      	ldr	r4, [pc, #100]	; (508 <_rww_flash_read+0x6c>)
	if ((addr < NVMCTRL_RWW_EEPROM_ADDR)
     4a2:	01ad      	lsls	r5, r5, #6
	    || (addr > (NVMCTRL_RWW_EEPROM_ADDR + NVMCTRL_PAGE_SIZE * NVMCTRL_RWWEE_PAGES))) {
     4a4:	190c      	adds	r4, r1, r4
	if ((addr < NVMCTRL_RWW_EEPROM_ADDR)
     4a6:	42ac      	cmp	r4, r5
     4a8:	d902      	bls.n	4b0 <_rww_flash_read+0x14>
	/* Check if the address is valid */
	if (!_is_valid_rww_flash_address(src_addr) || !_is_valid_rww_flash_address(src_addr + length)) {
		return ERR_BAD_ADDRESS;
     4aa:	200e      	movs	r0, #14
     4ac:	4240      	negs	r0, r0
	}

	_flash_read(device, src_addr, buffer, length);

	return ERR_NONE;
}
     4ae:	bd70      	pop	{r4, r5, r6, pc}
	    || (addr > (NVMCTRL_RWW_EEPROM_ADDR + NVMCTRL_PAGE_SIZE * NVMCTRL_RWWEE_PAGES))) {
     4b0:	4c15      	ldr	r4, [pc, #84]	; (508 <_rww_flash_read+0x6c>)
     4b2:	191c      	adds	r4, r3, r4
     4b4:	1864      	adds	r4, r4, r1
	if ((addr < NVMCTRL_RWW_EEPROM_ADDR)
     4b6:	42ac      	cmp	r4, r5
     4b8:	d8f7      	bhi.n	4aa <_rww_flash_read+0xe>
	while (!hri_nvmctrl_get_interrupt_READY_bit(device->hw)) {
     4ba:	2401      	movs	r4, #1
     4bc:	6905      	ldr	r5, [r0, #16]
	uint32_t nvm_address = src_addr / 2;
     4be:	084e      	lsrs	r6, r1, #1
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
     4c0:	7d28      	ldrb	r0, [r5, #20]
	while (!hri_nvmctrl_get_interrupt_READY_bit(device->hw)) {
     4c2:	4204      	tst	r4, r0
     4c4:	d0fc      	beq.n	4c0 <_rww_flash_read+0x24>
}

static inline void hri_nvmctrl_clear_STATUS_reg(const void *const hw, hri_nvmctrl_status_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->STATUS.reg = mask;
     4c6:	2020      	movs	r0, #32
     4c8:	30ff      	adds	r0, #255	; 0xff
     4ca:	8328      	strh	r0, [r5, #24]
		i = 0;
     4cc:	2000      	movs	r0, #0
	if (src_addr % 2) {
     4ce:	420c      	tst	r4, r1
     4d0:	d113      	bne.n	4fa <_rww_flash_read+0x5e>
	while (i < length) {
     4d2:	4283      	cmp	r3, r0
     4d4:	d90f      	bls.n	4f6 <_rww_flash_read+0x5a>
     4d6:	0076      	lsls	r6, r6, #1
     4d8:	1e5d      	subs	r5, r3, #1
     4da:	1812      	adds	r2, r2, r0
     4dc:	1a36      	subs	r6, r6, r0
     4de:	1831      	adds	r1, r6, r0
		data      = NVM_MEMORY[nvm_address++];
     4e0:	8809      	ldrh	r1, [r1, #0]
     4e2:	b289      	uxth	r1, r1
		buffer[i] = (data & 0xFF);
     4e4:	7011      	strb	r1, [r2, #0]
		if (i < (length - 1)) {
     4e6:	4285      	cmp	r5, r0
     4e8:	d901      	bls.n	4ee <_rww_flash_read+0x52>
			buffer[i + 1] = (data >> 8);
     4ea:	0a09      	lsrs	r1, r1, #8
     4ec:	7051      	strb	r1, [r2, #1]
		i += 2;
     4ee:	3002      	adds	r0, #2
     4f0:	3202      	adds	r2, #2
	while (i < length) {
     4f2:	4283      	cmp	r3, r0
     4f4:	d8f3      	bhi.n	4de <_rww_flash_read+0x42>
	return ERR_NONE;
     4f6:	2000      	movs	r0, #0
     4f8:	e7d9      	b.n	4ae <_rww_flash_read+0x12>
		data      = NVM_MEMORY[nvm_address++];
     4fa:	43a1      	bics	r1, r4
     4fc:	8809      	ldrh	r1, [r1, #0]
     4fe:	3601      	adds	r6, #1
		buffer[0] = data >> 8;
     500:	0a09      	lsrs	r1, r1, #8
     502:	7011      	strb	r1, [r2, #0]
		i         = 1;
     504:	3001      	adds	r0, #1
     506:	e7e4      	b.n	4d2 <_rww_flash_read+0x36>
     508:	ffc00000 	.word	0xffc00000

0000050c <_rww_flash_write>:

/**
 * \brief Writes a number of bytes in the internal RWWEE Flash.
 */
int32_t _rww_flash_write(struct _flash_device *const device, const uint32_t dst_addr, uint8_t *buffer, uint32_t length)
{
     50c:	b5f0      	push	{r4, r5, r6, r7, lr}
     50e:	4657      	mov	r7, sl
     510:	464e      	mov	r6, r9
     512:	46de      	mov	lr, fp
     514:	4645      	mov	r5, r8
     516:	4692      	mov	sl, r2
	if ((addr < NVMCTRL_RWW_EEPROM_ADDR)
     518:	2280      	movs	r2, #128	; 0x80
{
     51a:	b5e0      	push	{r5, r6, r7, lr}
     51c:	4699      	mov	r9, r3
	    || (addr > (NVMCTRL_RWW_EEPROM_ADDR + NVMCTRL_PAGE_SIZE * NVMCTRL_RWWEE_PAGES))) {
     51e:	4b62      	ldr	r3, [pc, #392]	; (6a8 <_rww_flash_write+0x19c>)
{
     520:	b0c5      	sub	sp, #276	; 0x114
	    || (addr > (NVMCTRL_RWW_EEPROM_ADDR + NVMCTRL_PAGE_SIZE * NVMCTRL_RWWEE_PAGES))) {
     522:	18cb      	adds	r3, r1, r3
{
     524:	9002      	str	r0, [sp, #8]
	if ((addr < NVMCTRL_RWW_EEPROM_ADDR)
     526:	0192      	lsls	r2, r2, #6
     528:	4293      	cmp	r3, r2
     52a:	d908      	bls.n	53e <_rww_flash_write+0x32>
	uint32_t i, j, k;
	uint32_t wr_start_addr = dst_addr;

	/* Check if the address is valid */
	if (!_is_valid_rww_flash_address(dst_addr) || !_is_valid_rww_flash_address(dst_addr + length)) {
		return ERR_BAD_ADDRESS;
     52c:	200e      	movs	r0, #14
     52e:	4240      	negs	r0, r0
		}

	} while (row_end_addr < (wr_start_addr + length - 1));

	return ERR_NONE;
}
     530:	b045      	add	sp, #276	; 0x114
     532:	bc3c      	pop	{r2, r3, r4, r5}
     534:	4690      	mov	r8, r2
     536:	4699      	mov	r9, r3
     538:	46a2      	mov	sl, r4
     53a:	46ab      	mov	fp, r5
     53c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    || (addr > (NVMCTRL_RWW_EEPROM_ADDR + NVMCTRL_PAGE_SIZE * NVMCTRL_RWWEE_PAGES))) {
     53e:	4b5a      	ldr	r3, [pc, #360]	; (6a8 <_rww_flash_write+0x19c>)
     540:	444b      	add	r3, r9
     542:	185b      	adds	r3, r3, r1
	if ((addr < NVMCTRL_RWW_EEPROM_ADDR)
     544:	4293      	cmp	r3, r2
     546:	d8f1      	bhi.n	52c <_rww_flash_write+0x20>
     548:	000e      	movs	r6, r1
	while (!hri_nvmctrl_get_interrupt_READY_bit(device->hw)) {
     54a:	2701      	movs	r7, #1
		row_start_addr = wr_start_addr & ~((NVMCTRL_PAGE_SIZE * NVMCTRL_ROW_PAGES) - 1);
     54c:	0033      	movs	r3, r6
     54e:	22ff      	movs	r2, #255	; 0xff
     550:	4393      	bics	r3, r2
     552:	4698      	mov	r8, r3
		row_end_addr   = row_start_addr + NVMCTRL_ROW_PAGES * NVMCTRL_PAGE_SIZE - 1;
     554:	23ff      	movs	r3, #255	; 0xff
     556:	4443      	add	r3, r8
     558:	9303      	str	r3, [sp, #12]
     55a:	9b02      	ldr	r3, [sp, #8]
     55c:	ac04      	add	r4, sp, #16
     55e:	691d      	ldr	r5, [r3, #16]
     560:	4b51      	ldr	r3, [pc, #324]	; (6a8 <_rww_flash_write+0x19c>)
     562:	0022      	movs	r2, r4
     564:	4443      	add	r3, r8
     566:	469c      	mov	ip, r3
     568:	4b50      	ldr	r3, [pc, #320]	; (6ac <_rww_flash_write+0x1a0>)
     56a:	4664      	mov	r4, ip
     56c:	4443      	add	r3, r8
     56e:	469b      	mov	fp, r3
     570:	46b4      	mov	ip, r6
     572:	465e      	mov	r6, fp
     574:	4693      	mov	fp, r2
     576:	2380      	movs	r3, #128	; 0x80
     578:	03db      	lsls	r3, r3, #15
     57a:	18e1      	adds	r1, r4, r3
	if ((addr < NVMCTRL_RWW_EEPROM_ADDR)
     57c:	23fe      	movs	r3, #254	; 0xfe
     57e:	015b      	lsls	r3, r3, #5
     580:	429c      	cmp	r4, r3
     582:	d971      	bls.n	668 <_rww_flash_write+0x15c>
     584:	3240      	adds	r2, #64	; 0x40
     586:	0010      	movs	r0, r2
     588:	3440      	adds	r4, #64	; 0x40
     58a:	0002      	movs	r2, r0
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
     58c:	42a6      	cmp	r6, r4
     58e:	d1f2      	bne.n	576 <_rww_flash_write+0x6a>
     590:	4666      	mov	r6, ip
		j = (wr_start_addr - row_start_addr) / NVMCTRL_PAGE_SIZE;
     592:	4643      	mov	r3, r8
     594:	223f      	movs	r2, #63	; 0x3f
		while ((wr_start_addr <= row_end_addr) && (length > 0)) {
     596:	9803      	ldr	r0, [sp, #12]
		j = (wr_start_addr - row_start_addr) / NVMCTRL_PAGE_SIZE;
     598:	1af3      	subs	r3, r6, r3
     59a:	0999      	lsrs	r1, r3, #6
     59c:	465c      	mov	r4, fp
     59e:	4013      	ands	r3, r2
		while ((wr_start_addr <= row_end_addr) && (length > 0)) {
     5a0:	4286      	cmp	r6, r0
     5a2:	d821      	bhi.n	5e8 <_rww_flash_write+0xdc>
     5a4:	464a      	mov	r2, r9
     5a6:	2a00      	cmp	r2, #0
     5a8:	d01e      	beq.n	5e8 <_rww_flash_write+0xdc>
			k                = (k + 1) % NVMCTRL_PAGE_SIZE;
     5aa:	464a      	mov	r2, r9
     5ac:	4654      	mov	r4, sl
     5ae:	4684      	mov	ip, r0
     5b0:	46aa      	mov	sl, r5
     5b2:	46d9      	mov	r9, fp
     5b4:	0015      	movs	r5, r2
     5b6:	e001      	b.n	5bc <_rww_flash_write+0xb0>
		while ((wr_start_addr <= row_end_addr) && (length > 0)) {
     5b8:	2d00      	cmp	r5, #0
     5ba:	d010      	beq.n	5de <_rww_flash_write+0xd2>
			tmp_buffer[j][k] = *buffer;
     5bc:	a804      	add	r0, sp, #16
     5be:	4683      	mov	fp, r0
     5c0:	018a      	lsls	r2, r1, #6
     5c2:	7820      	ldrb	r0, [r4, #0]
     5c4:	445a      	add	r2, fp
     5c6:	54d0      	strb	r0, [r2, r3]
			k                = (k + 1) % NVMCTRL_PAGE_SIZE;
     5c8:	223f      	movs	r2, #63	; 0x3f
     5ca:	3301      	adds	r3, #1
     5cc:	4013      	ands	r3, r2
				j++;
     5ce:	425a      	negs	r2, r3
     5d0:	415a      	adcs	r2, r3
			wr_start_addr++;
     5d2:	3601      	adds	r6, #1
				j++;
     5d4:	1889      	adds	r1, r1, r2
			buffer++;
     5d6:	3401      	adds	r4, #1
			length--;
     5d8:	3d01      	subs	r5, #1
		while ((wr_start_addr <= row_end_addr) && (length > 0)) {
     5da:	45b4      	cmp	ip, r6
     5dc:	d2ec      	bcs.n	5b8 <_rww_flash_write+0xac>
     5de:	002b      	movs	r3, r5
     5e0:	4655      	mov	r5, sl
     5e2:	46a2      	mov	sl, r4
     5e4:	464c      	mov	r4, r9
     5e6:	4699      	mov	r9, r3
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
     5e8:	7d2b      	ldrb	r3, [r5, #20]
	while (!hri_nvmctrl_get_interrupt_READY_bit(hw)) {
     5ea:	421f      	tst	r7, r3
     5ec:	d0fc      	beq.n	5e8 <_rww_flash_write+0xdc>
	((Nvmctrl *)hw)->STATUS.reg = mask;
     5ee:	2320      	movs	r3, #32
     5f0:	33ff      	adds	r3, #255	; 0xff
     5f2:	832b      	strh	r3, [r5, #24]
     5f4:	9301      	str	r3, [sp, #4]
     5f6:	4643      	mov	r3, r8
	hri_nvmctrl_write_ADDR_reg(hw, dst_addr / 2);
     5f8:	4642      	mov	r2, r8
     5fa:	46b0      	mov	r8, r6
     5fc:	001e      	movs	r6, r3
     5fe:	0852      	lsrs	r2, r2, #1
	((Nvmctrl *)hw)->ADDR.reg = data;
     600:	61ea      	str	r2, [r5, #28]
     602:	4693      	mov	fp, r2
	((Nvmctrl *)hw)->CTRLA.reg = data;
     604:	4a2a      	ldr	r2, [pc, #168]	; (6b0 <_rww_flash_write+0x1a4>)
     606:	802a      	strh	r2, [r5, #0]
	ASSERT(!(dst_addr % 2));
     608:	22c5      	movs	r2, #197	; 0xc5
     60a:	492a      	ldr	r1, [pc, #168]	; (6b4 <_rww_flash_write+0x1a8>)
     60c:	0052      	lsls	r2, r2, #1
     60e:	2001      	movs	r0, #1
     610:	4b29      	ldr	r3, [pc, #164]	; (6b8 <_rww_flash_write+0x1ac>)
     612:	4798      	blx	r3
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
     614:	7d2b      	ldrb	r3, [r5, #20]
	while (!hri_nvmctrl_get_interrupt_READY_bit(hw)) {
     616:	421f      	tst	r7, r3
     618:	d0fc      	beq.n	614 <_rww_flash_write+0x108>
	((Nvmctrl *)hw)->CTRLA.reg = data;
     61a:	4b28      	ldr	r3, [pc, #160]	; (6bc <_rww_flash_write+0x1b0>)
     61c:	802b      	strh	r3, [r5, #0]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
     61e:	7d2b      	ldrb	r3, [r5, #20]
	while (!hri_nvmctrl_get_interrupt_READY_bit(hw)) {
     620:	421f      	tst	r7, r3
     622:	d0fc      	beq.n	61e <_rww_flash_write+0x112>
	((Nvmctrl *)hw)->STATUS.reg = mask;
     624:	466b      	mov	r3, sp
     626:	889b      	ldrh	r3, [r3, #4]
     628:	0020      	movs	r0, r4
     62a:	832b      	strh	r3, [r5, #24]
     62c:	465b      	mov	r3, fp
     62e:	0059      	lsls	r1, r3, #1
     630:	3040      	adds	r0, #64	; 0x40
     632:	1b09      	subs	r1, r1, r4
			data |= (buffer[i + 1] << 8);
     634:	7862      	ldrb	r2, [r4, #1]
     636:	7823      	ldrb	r3, [r4, #0]
     638:	0212      	lsls	r2, r2, #8
     63a:	4313      	orrs	r3, r2
     63c:	190a      	adds	r2, r1, r4
     63e:	3402      	adds	r4, #2
		NVM_MEMORY[nvm_address++] = data;
     640:	8013      	strh	r3, [r2, #0]
	for (i = 0; i < size; i += 2) {
     642:	42a0      	cmp	r0, r4
     644:	d1f6      	bne.n	634 <_rww_flash_write+0x128>
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
     646:	7d2b      	ldrb	r3, [r5, #20]
	while (!hri_nvmctrl_get_interrupt_READY_bit(hw)) {
     648:	421f      	tst	r7, r3
     64a:	d0fc      	beq.n	646 <_rww_flash_write+0x13a>
	((Nvmctrl *)hw)->ADDR.reg = data;
     64c:	465b      	mov	r3, fp
     64e:	61eb      	str	r3, [r5, #28]
	((Nvmctrl *)hw)->CTRLA.reg = data;
     650:	4b1b      	ldr	r3, [pc, #108]	; (6c0 <_rww_flash_write+0x1b4>)
     652:	3640      	adds	r6, #64	; 0x40
     654:	802b      	strh	r3, [r5, #0]
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
     656:	ab44      	add	r3, sp, #272	; 0x110
     658:	4298      	cmp	r0, r3
     65a:	d01a      	beq.n	692 <_rww_flash_write+0x186>
     65c:	9b02      	ldr	r3, [sp, #8]
     65e:	0004      	movs	r4, r0
     660:	691d      	ldr	r5, [r3, #16]
     662:	0873      	lsrs	r3, r6, #1
     664:	469b      	mov	fp, r3
     666:	e7cf      	b.n	608 <_rww_flash_write+0xfc>
	uint32_t nvm_address = src_addr / 2;
     668:	0849      	lsrs	r1, r1, #1
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
     66a:	7d2b      	ldrb	r3, [r5, #20]
	while (!hri_nvmctrl_get_interrupt_READY_bit(device->hw)) {
     66c:	421f      	tst	r7, r3
     66e:	d0fc      	beq.n	66a <_rww_flash_write+0x15e>
	((Nvmctrl *)hw)->STATUS.reg = mask;
     670:	2320      	movs	r3, #32
     672:	0010      	movs	r0, r2
     674:	33ff      	adds	r3, #255	; 0xff
     676:	0049      	lsls	r1, r1, #1
     678:	832b      	strh	r3, [r5, #24]
     67a:	3040      	adds	r0, #64	; 0x40
     67c:	1a89      	subs	r1, r1, r2
     67e:	188b      	adds	r3, r1, r2
		data      = NVM_MEMORY[nvm_address++];
     680:	881b      	ldrh	r3, [r3, #0]
     682:	b29b      	uxth	r3, r3
		buffer[i] = (data & 0xFF);
     684:	7013      	strb	r3, [r2, #0]
			buffer[i + 1] = (data >> 8);
     686:	0a1b      	lsrs	r3, r3, #8
     688:	7053      	strb	r3, [r2, #1]
     68a:	3202      	adds	r2, #2
	while (i < length) {
     68c:	4290      	cmp	r0, r2
     68e:	d1f6      	bne.n	67e <_rww_flash_write+0x172>
     690:	e77a      	b.n	588 <_rww_flash_write+0x7c>
     692:	4646      	mov	r6, r8
	} while (row_end_addr < (wr_start_addr + length - 1));
     694:	464b      	mov	r3, r9
     696:	9a03      	ldr	r2, [sp, #12]
     698:	199b      	adds	r3, r3, r6
     69a:	3b01      	subs	r3, #1
     69c:	429a      	cmp	r2, r3
     69e:	d200      	bcs.n	6a2 <_rww_flash_write+0x196>
     6a0:	e754      	b.n	54c <_rww_flash_write+0x40>
	return ERR_NONE;
     6a2:	2000      	movs	r0, #0
     6a4:	e744      	b.n	530 <_rww_flash_write+0x24>
     6a6:	46c0      	nop			; (mov r8, r8)
     6a8:	ffc00000 	.word	0xffc00000
     6ac:	ffc00100 	.word	0xffc00100
     6b0:	ffffa51a 	.word	0xffffa51a
     6b4:	00001fec 	.word	0x00001fec
     6b8:	00000365 	.word	0x00000365
     6bc:	ffffa544 	.word	0xffffa544
     6c0:	ffffa51c 	.word	0xffffa51c

000006c4 <_osc32kctrl_init_sources>:
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSC32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSC32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
     6c4:	21f8      	movs	r1, #248	; 0xf8
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
     6c6:	4b04      	ldr	r3, [pc, #16]	; (6d8 <_osc32kctrl_init_sources+0x14>)
     6c8:	0149      	lsls	r1, r1, #5
     6ca:	69da      	ldr	r2, [r3, #28]
     6cc:	400a      	ands	r2, r1
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
     6ce:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     6d0:	2201      	movs	r2, #1
     6d2:	611a      	str	r2, [r3, #16]
		;
#endif
#endif
	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
     6d4:	4770      	bx	lr
     6d6:	46c0      	nop			; (mov r8, r8)
     6d8:	40001000 	.word	0x40001000

000006dc <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_OSC16MCTRL_reg(const void *const hw, hri_oscctrl_osc16mctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC16MCTRL.reg = data;
     6dc:	2382      	movs	r3, #130	; 0x82
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
     6de:	2038      	movs	r0, #56	; 0x38
     6e0:	2102      	movs	r1, #2
	((Oscctrl *)hw)->OSC16MCTRL.reg = data;
     6e2:	4a0a      	ldr	r2, [pc, #40]	; (70c <_oscctrl_init_sources+0x30>)
     6e4:	7513      	strb	r3, [r2, #20]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
     6e6:	5c13      	ldrb	r3, [r2, r0]
     6e8:	4219      	tst	r1, r3
     6ea:	d1fc      	bne.n	6e6 <_oscctrl_init_sources+0xa>
#endif
#endif

#if CONF_OSC16M_CONFIG == 1
#if CONF_OSC16M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC16MRDY_bit(hw))
     6ec:	2110      	movs	r1, #16
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC16MRDY) >> OSCCTRL_STATUS_OSC16MRDY_Pos;
     6ee:	4a07      	ldr	r2, [pc, #28]	; (70c <_oscctrl_init_sources+0x30>)
     6f0:	68d3      	ldr	r3, [r2, #12]
     6f2:	4219      	tst	r1, r3
     6f4:	d0fc      	beq.n	6f0 <_oscctrl_init_sources+0x14>
	((Oscctrl *)hw)->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND;
     6f6:	2180      	movs	r1, #128	; 0x80
     6f8:	7d13      	ldrb	r3, [r2, #20]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
     6fa:	4804      	ldr	r0, [pc, #16]	; (70c <_oscctrl_init_sources+0x30>)
	((Oscctrl *)hw)->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND;
     6fc:	430b      	orrs	r3, r1
     6fe:	7513      	strb	r3, [r2, #20]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
     700:	220e      	movs	r2, #14
     702:	3948      	subs	r1, #72	; 0x48
     704:	5c43      	ldrb	r3, [r0, r1]
     706:	421a      	tst	r2, r3
     708:	d1fc      	bne.n	704 <_oscctrl_init_sources+0x28>
#if CONF_OSC16M_ONDEMAND == 1
	hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
     70a:	4770      	bx	lr
     70c:	40000c00 	.word	0x40000c00

00000710 <_oscctrl_init_referenced_generators>:
#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
		;
#endif
	(void)hw, (void)tmp;
}
     710:	4770      	bx	lr
     712:	46c0      	nop			; (mov r8, r8)

00000714 <_set_performance_level>:
}

static inline hri_pm_plcfg_reg_t hri_pm_get_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Pm *)hw)->PLCFG.reg;
     714:	2280      	movs	r2, #128	; 0x80
	tmp = (tmp & PM_PLCFG_PLSEL(mask)) >> PM_PLCFG_PLSEL_Pos;
     716:	2303      	movs	r3, #3
	tmp = ((Pm *)hw)->PLCFG.reg;
     718:	05d2      	lsls	r2, r2, #23
     71a:	7891      	ldrb	r1, [r2, #2]
/**
 * \brief Set performance level
 */
void _set_performance_level(const uint8_t level)
{
	if (hri_pm_get_PLCFG_PLSEL_bf(PM, PM_PLCFG_PLSEL_Msk) != level) {
     71c:	4019      	ands	r1, r3
     71e:	4288      	cmp	r0, r1
     720:	d009      	beq.n	736 <_set_performance_level+0x22>
	((Pm *)hw)->INTFLAG.reg = mask;
     722:	21ff      	movs	r1, #255	; 0xff
     724:	7191      	strb	r1, [r2, #6]

static inline void hri_pm_write_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t data)
{
	uint8_t tmp;
	PM_CRITICAL_SECTION_ENTER();
	tmp = ((Pm *)hw)->PLCFG.reg;
     726:	7891      	ldrb	r1, [r2, #2]
	tmp &= ~PM_PLCFG_PLSEL_Msk;
     728:	4399      	bics	r1, r3
	tmp |= PM_PLCFG_PLSEL(data);
     72a:	4003      	ands	r3, r0
     72c:	430b      	orrs	r3, r1
	((Pm *)hw)->PLCFG.reg = tmp;
     72e:	7093      	strb	r3, [r2, #2]
	return ((Pm *)hw)->INTFLAG.reg;
     730:	7993      	ldrb	r3, [r2, #6]
		hri_pm_clear_INTFLAG_reg(PM, 0xFF);
		hri_pm_write_PLCFG_PLSEL_bf(PM, level);
		while (!hri_pm_read_INTFLAG_reg(PM))
     732:	2b00      	cmp	r3, #0
     734:	d0fc      	beq.n	730 <_set_performance_level+0x1c>
			;
	}
}
     736:	4770      	bx	lr

00000738 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
     738:	4b02      	ldr	r3, [pc, #8]	; (744 <_delay_init+0xc>)
     73a:	4a03      	ldr	r2, [pc, #12]	; (748 <_delay_init+0x10>)
     73c:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
     73e:	2205      	movs	r2, #5
     740:	601a      	str	r2, [r3, #0]
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
	_system_time_init(hw);
}
     742:	4770      	bx	lr
     744:	e000e010 	.word	0xe000e010
     748:	00ffffff 	.word	0x00ffffff

0000074c <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
     74c:	0e0b      	lsrs	r3, r1, #24
{
     74e:	b570      	push	{r4, r5, r6, lr}
	uint32_t buf = cycles;

	while (n--) {
     750:	1e5e      	subs	r6, r3, #1
     752:	b2f6      	uxtb	r6, r6
     754:	2b00      	cmp	r3, #0
     756:	d013      	beq.n	780 <_delay_cycles+0x34>
		SysTick->LOAD = 0xFFFFFF;
		SysTick->VAL  = 0xFFFFFF;
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
     758:	2080      	movs	r0, #128	; 0x80
	while (n--) {
     75a:	0034      	movs	r4, r6
		SysTick->LOAD = 0xFFFFFF;
     75c:	4a0d      	ldr	r2, [pc, #52]	; (794 <_delay_cycles+0x48>)
     75e:	4d0e      	ldr	r5, [pc, #56]	; (798 <_delay_cycles+0x4c>)
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
     760:	0240      	lsls	r0, r0, #9
		SysTick->LOAD = 0xFFFFFF;
     762:	6055      	str	r5, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
     764:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
     766:	6813      	ldr	r3, [r2, #0]
     768:	4203      	tst	r3, r0
     76a:	d0fc      	beq.n	766 <_delay_cycles+0x1a>
	while (n--) {
     76c:	3c01      	subs	r4, #1
     76e:	b2e4      	uxtb	r4, r4
     770:	2cff      	cmp	r4, #255	; 0xff
     772:	d1f6      	bne.n	762 <_delay_cycles+0x16>
     774:	0633      	lsls	r3, r6, #24
     776:	1af6      	subs	r6, r6, r3
     778:	4b08      	ldr	r3, [pc, #32]	; (79c <_delay_cycles+0x50>)
     77a:	469c      	mov	ip, r3
     77c:	4461      	add	r1, ip
     77e:	1871      	adds	r1, r6, r1
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
     780:	4a04      	ldr	r2, [pc, #16]	; (794 <_delay_cycles+0x48>)
     782:	6051      	str	r1, [r2, #4]
	SysTick->VAL  = buf;
     784:	6091      	str	r1, [r2, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
     786:	2180      	movs	r1, #128	; 0x80
     788:	0249      	lsls	r1, r1, #9
     78a:	6813      	ldr	r3, [r2, #0]
     78c:	420b      	tst	r3, r1
     78e:	d0fc      	beq.n	78a <_delay_cycles+0x3e>
		;
}
     790:	bd70      	pop	{r4, r5, r6, pc}
     792:	46c0      	nop			; (mov r8, r8)
     794:	e000e010 	.word	0xe000e010
     798:	00ffffff 	.word	0x00ffffff
     79c:	ff000001 	.word	0xff000001

000007a0 <aes_measurement>:
static uint8_t iv[16] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };
static uint8_t iv2[16] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f }; /*(This is same but needed for decryption. Note: AES Module was not doing decryption without iv2  )*/


void aes_measurement(void)
{
     7a0:	b5f0      	push	{r4, r5, r6, r7, lr}
     7a2:	46de      	mov	lr, fp
     7a4:	4657      	mov	r7, sl
     7a6:	464e      	mov	r6, r9
     7a8:	4645      	mov	r5, r8
		0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
		0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff
	};*/
	
	
	mbedtls_aes_setkey_enc( &aes, key_256, AES_KEY_SIZE );
     7aa:	2280      	movs	r2, #128	; 0x80
{
     7ac:	b5e0      	push	{r5, r6, r7, lr}
	mbedtls_aes_setkey_enc( &aes, key_256, AES_KEY_SIZE );
     7ae:	4c48      	ldr	r4, [pc, #288]	; (8d0 <aes_measurement+0x130>)
{
     7b0:	b085      	sub	sp, #20
	mbedtls_aes_setkey_enc( &aes, key_256, AES_KEY_SIZE );
     7b2:	0052      	lsls	r2, r2, #1
     7b4:	0021      	movs	r1, r4
     7b6:	4b47      	ldr	r3, [pc, #284]	; (8d4 <aes_measurement+0x134>)
     7b8:	4847      	ldr	r0, [pc, #284]	; (8d8 <aes_measurement+0x138>)
     7ba:	4798      	blx	r3
	mbedtls_aes_setkey_dec( &aes2, key_256, AES_KEY_SIZE );
     7bc:	2280      	movs	r2, #128	; 0x80
     7be:	4847      	ldr	r0, [pc, #284]	; (8dc <aes_measurement+0x13c>)
     7c0:	0052      	lsls	r2, r2, #1
     7c2:	0021      	movs	r1, r4
     7c4:	4b46      	ldr	r3, [pc, #280]	; (8e0 <aes_measurement+0x140>)
     7c6:	3018      	adds	r0, #24
     7c8:	4798      	blx	r3
	
	// Allocate buffer memory
	uint8_t *input = malloc(sizeof(uint8_t) * MAX_NUM_BYTES);
     7ca:	4b46      	ldr	r3, [pc, #280]	; (8e4 <aes_measurement+0x144>)
     7cc:	4846      	ldr	r0, [pc, #280]	; (8e8 <aes_measurement+0x148>)
     7ce:	4798      	blx	r3
	
	// Allocate buffer memory
	uint8_t *output = malloc(sizeof(uint8_t) * MAX_NUM_BYTES);
	//uint8_t input[MAX_NUM_BYTES];

    delay_ms(10);
     7d0:	4e46      	ldr	r6, [pc, #280]	; (8ec <aes_measurement+0x14c>)
	uint8_t *input = malloc(sizeof(uint8_t) * MAX_NUM_BYTES);
     7d2:	0005      	movs	r5, r0
    delay_ms(10);
     7d4:	200a      	movs	r0, #10
     7d6:	47b0      	blx	r6
     7d8:	4a45      	ldr	r2, [pc, #276]	; (8f0 <aes_measurement+0x150>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     7da:	27c0      	movs	r7, #192	; 0xc0
     7dc:	4693      	mov	fp, r2
     7de:	4a45      	ldr	r2, [pc, #276]	; (8f4 <aes_measurement+0x154>)

	for (size_t num_bytes = MIN_NUM_BYTES; num_bytes <= MAX_NUM_BYTES; num_bytes += STEP_SIZE) {
     7e0:	2310      	movs	r3, #16
     7e2:	4692      	mov	sl, r2
     7e4:	2280      	movs	r2, #128	; 0x80
     7e6:	0352      	lsls	r2, r2, #13
     7e8:	4691      	mov	r9, r2
     7ea:	05ff      	lsls	r7, r7, #23
{
     7ec:	2200      	movs	r2, #0
     7ee:	0014      	movs	r4, r2
		
		// Fill with sequential data.
		for (size_t byte = 0; byte < num_bytes; byte++) {
			input[byte] = byte; // 0x00 to write 0's OR 0xFF to write 1's.
     7f0:	552c      	strb	r4, [r5, r4]
		for (size_t byte = 0; byte < num_bytes; byte++) {
     7f2:	3401      	adds	r4, #1
     7f4:	429c      	cmp	r4, r3
     7f6:	d1fb      	bne.n	7f0 <aes_measurement+0x50>
			//input[byte] = 0xfa;
		}
			

		// Start encryption
		START_MEASURE(DGI_GPIO2);
     7f8:	2002      	movs	r0, #2
     7fa:	9403      	str	r4, [sp, #12]
     7fc:	47b0      	blx	r6
     7fe:	464b      	mov	r3, r9
		//io_write(terminal_io, "Encryption", sizeof(uint8_t)*10);
		/*encrypt*/		
		mbedtls_aes_crypt_cbc( &aes, MBEDTLS_AES_ENCRYPT, num_bytes, iv, input, input);
     800:	0022      	movs	r2, r4
     802:	61bb      	str	r3, [r7, #24]
     804:	2101      	movs	r1, #1
     806:	465b      	mov	r3, fp
     808:	9501      	str	r5, [sp, #4]
     80a:	9500      	str	r5, [sp, #0]
     80c:	4832      	ldr	r0, [pc, #200]	; (8d8 <aes_measurement+0x138>)
     80e:	47d0      	blx	sl
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     810:	464b      	mov	r3, r9
		STOP_MEASURE(DGI_GPIO2);
     812:	2002      	movs	r0, #2
     814:	617b      	str	r3, [r7, #20]
     816:	47b0      	blx	r6
		
		/* Save to flash
		   Put data at end of flash.
	    **/		
		START_MEASURE(DGI_GPIO3);
     818:	2002      	movs	r0, #2
     81a:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     81c:	2380      	movs	r3, #128	; 0x80
		//********************************************** Solution - 1 @ To write on emulation (RWW) Area
		if (_rww_flash_write(&FLASH_0.dev, NVMCTRL_RWW_EEPROM_ADDR, input, num_bytes ) != ERR_NONE) {
     81e:	2180      	movs	r1, #128	; 0x80
     820:	039b      	lsls	r3, r3, #14
     822:	4698      	mov	r8, r3
     824:	61bb      	str	r3, [r7, #24]
     826:	002a      	movs	r2, r5
     828:	0023      	movs	r3, r4
     82a:	03c9      	lsls	r1, r1, #15
     82c:	4832      	ldr	r0, [pc, #200]	; (8f8 <aes_measurement+0x158>)
     82e:	4c33      	ldr	r4, [pc, #204]	; (8fc <aes_measurement+0x15c>)
     830:	47a0      	blx	r4
     832:	2800      	cmp	r0, #0
     834:	d14a      	bne.n	8cc <aes_measurement+0x12c>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     836:	4643      	mov	r3, r8
		// ------------------------------------------- To write page by page use the code below (Avoid loops)---------
		//for (uint32_t page_index = 0; page_index * FLASH_PAGE_SIZE < num_bytes; page_index += 1) {
			/* Write data to flash */
			//flash_write(&FLASH_0, target_addr + page_index * FLASH_PAGE_SIZE, &input[page_index * FLASH_PAGE_SIZE], FLASH_PAGE_SIZE);
		//}
		STOP_MEASURE(DGI_GPIO3);
     838:	2002      	movs	r0, #2
     83a:	617b      	str	r3, [r7, #20]
     83c:	47b0      	blx	r6
		
		SLEEP
     83e:	2002      	movs	r0, #2
     840:	47b0      	blx	r6
     842:	9c03      	ldr	r4, [sp, #12]
     844:	21fe      	movs	r1, #254	; 0xfe
     846:	0022      	movs	r2, r4
     848:	4b2d      	ldr	r3, [pc, #180]	; (900 <aes_measurement+0x160>)
     84a:	0028      	movs	r0, r5
     84c:	4798      	blx	r3
		for (size_t byte = 0; byte < num_bytes; byte++) {
			input[byte] = 0xfe;
		}

		// Start reading from flash
		START_MEASURE(DGI_GPIO3);
     84e:	2002      	movs	r0, #2
     850:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     852:	4643      	mov	r3, r8
		
		/* Read data from RWWEE flash (Solution 1) */
		if (_rww_flash_read(&FLASH_0.dev, NVMCTRL_RWW_EEPROM_ADDR, input, num_bytes) != ERR_NONE) {
     854:	2180      	movs	r1, #128	; 0x80
     856:	61bb      	str	r3, [r7, #24]
     858:	002a      	movs	r2, r5
     85a:	0023      	movs	r3, r4
     85c:	03c9      	lsls	r1, r1, #15
     85e:	4826      	ldr	r0, [pc, #152]	; (8f8 <aes_measurement+0x158>)
     860:	4c28      	ldr	r4, [pc, #160]	; (904 <aes_measurement+0x164>)
     862:	47a0      	blx	r4
     864:	2800      	cmp	r0, #0
     866:	d132      	bne.n	8ce <aes_measurement+0x12e>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     868:	4643      	mov	r3, r8
			; /* Trap here when flash read error happen */
		}
		
		/* Read data from flash (Solution 2) */
		//flash_read(&FLASH_0, target_addr, output, num_bytes);
		STOP_MEASURE(DGI_GPIO3);
     86a:	2002      	movs	r0, #2
     86c:	617b      	str	r3, [r7, #20]
     86e:	47b0      	blx	r6
		
	

		// Start decryption
		START_MEASURE(DGI_GPIO2);
     870:	2002      	movs	r0, #2
     872:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     874:	464b      	mov	r3, r9
     876:	61bb      	str	r3, [r7, #24]
		/*decrypt*/
		mbedtls_aes_crypt_cbc( &aes2, MBEDTLS_AES_DECRYPT, num_bytes, iv2, input, input);
     878:	465b      	mov	r3, fp
     87a:	9c03      	ldr	r4, [sp, #12]
     87c:	4817      	ldr	r0, [pc, #92]	; (8dc <aes_measurement+0x13c>)
     87e:	0022      	movs	r2, r4
     880:	3310      	adds	r3, #16
     882:	2100      	movs	r1, #0
     884:	3018      	adds	r0, #24
     886:	9501      	str	r5, [sp, #4]
     888:	9500      	str	r5, [sp, #0]
     88a:	47d0      	blx	sl
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     88c:	464b      	mov	r3, r9
		STOP_MEASURE(DGI_GPIO2);
     88e:	2002      	movs	r0, #2
     890:	617b      	str	r3, [r7, #20]
     892:	47b0      	blx	r6
	for (size_t num_bytes = MIN_NUM_BYTES; num_bytes <= MAX_NUM_BYTES; num_bytes += STEP_SIZE) {
     894:	0023      	movs	r3, r4
     896:	22bc      	movs	r2, #188	; 0xbc
     898:	3310      	adds	r3, #16
     89a:	0152      	lsls	r2, r2, #5
     89c:	4293      	cmp	r3, r2
     89e:	d1a5      	bne.n	7ec <aes_measurement+0x4c>
		}*/
		
		
	}
		// Free the memory
		free(input);
     8a0:	0028      	movs	r0, r5
     8a2:	4b19      	ldr	r3, [pc, #100]	; (908 <aes_measurement+0x168>)
     8a4:	4798      	blx	r3

		END_MEASUREMENT;
     8a6:	200a      	movs	r0, #10
     8a8:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     8aa:	2202      	movs	r2, #2
     8ac:	2398      	movs	r3, #152	; 0x98
     8ae:	50fa      	str	r2, [r7, r3]
     8b0:	2380      	movs	r3, #128	; 0x80
     8b2:	025b      	lsls	r3, r3, #9
     8b4:	61bb      	str	r3, [r7, #24]
     8b6:	464b      	mov	r3, r9
     8b8:	61bb      	str	r3, [r7, #24]
     8ba:	4643      	mov	r3, r8
     8bc:	61bb      	str	r3, [r7, #24]
}
     8be:	b005      	add	sp, #20
     8c0:	bc3c      	pop	{r2, r3, r4, r5}
     8c2:	4690      	mov	r8, r2
     8c4:	4699      	mov	r9, r3
     8c6:	46a2      	mov	sl, r4
     8c8:	46ab      	mov	fp, r5
     8ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
     8cc:	e7fe      	b.n	8cc <aes_measurement+0x12c>
     8ce:	e7fe      	b.n	8ce <aes_measurement+0x12e>
     8d0:	0000200c 	.word	0x0000200c
     8d4:	00000925 	.word	0x00000925
     8d8:	200000b0 	.word	0x200000b0
     8dc:	200001b0 	.word	0x200001b0
     8e0:	00001089 	.word	0x00001089
     8e4:	00001e11 	.word	0x00001e11
     8e8:	00001770 	.word	0x00001770
     8ec:	000002e5 	.word	0x000002e5
     8f0:	20000000 	.word	0x20000000
     8f4:	00001c01 	.word	0x00001c01
     8f8:	200002e8 	.word	0x200002e8
     8fc:	0000050d 	.word	0x0000050d
     900:	00001e4b 	.word	0x00001e4b
     904:	0000049d 	.word	0x0000049d
     908:	00001e25 	.word	0x00001e25

0000090c <main>:

int main(void)
{
     90c:	b510      	push	{r4, lr}
	atmel_start_init();
     90e:	4b03      	ldr	r3, [pc, #12]	; (91c <main+0x10>)
     910:	4798      	blx	r3
	
	// Start measurements
	aes_measurement();
     912:	4b03      	ldr	r3, [pc, #12]	; (920 <main+0x14>)
     914:	4798      	blx	r3
	/*while (true) {
		delay_ms(500);
		gpio_toggle_pin_level(LED0);
	}*/
	
     916:	2000      	movs	r0, #0
     918:	bd10      	pop	{r4, pc}
     91a:	46c0      	nop			; (mov r8, r8)
     91c:	00000115 	.word	0x00000115
     920:	000007a1 	.word	0x000007a1

00000924 <mbedtls_aes_setkey_enc>:
void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
    if( ctx == NULL )
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_aes_context ) );
     924:	b5f0      	push	{r4, r5, r6, r7, lr}
            memcpy( buf, aes_test_ofb_ct[u], 64 );
            aes_tests = aes_test_ofb_pt;
        }
        else
        {
            memcpy( buf, aes_test_ofb_pt, 64 );
     926:	46de      	mov	lr, fp
     928:	4657      	mov	r7, sl
     92a:	464e      	mov	r6, r9
     92c:	4645      	mov	r5, r8
     92e:	b5e0      	push	{r5, r6, r7, lr}
            aes_tests = aes_test_ofb_ct[u];
     930:	4683      	mov	fp, r0
     932:	b083      	sub	sp, #12
     934:	2ac0      	cmp	r2, #192	; 0xc0
     936:	d037      	beq.n	9a8 <mbedtls_aes_setkey_enc+0x84>
     938:	2380      	movs	r3, #128	; 0x80
     93a:	005b      	lsls	r3, r3, #1
     93c:	429a      	cmp	r2, r3
     93e:	d02f      	beq.n	9a0 <mbedtls_aes_setkey_enc+0x7c>
            mbedtls_printf( "skipped\n" );
     940:	2a80      	cmp	r2, #128	; 0x80
     942:	d008      	beq.n	956 <mbedtls_aes_setkey_enc+0x32>
     944:	2020      	movs	r0, #32
            continue;
     946:	4240      	negs	r0, r0
     948:	b003      	add	sp, #12
        if( ret == MBEDTLS_ERR_PLATFORM_FEATURE_UNSUPPORTED && keybits == 192 )
     94a:	bc3c      	pop	{r2, r3, r4, r5}
     94c:	4690      	mov	r8, r2
     94e:	4699      	mov	r9, r3
     950:	46a2      	mov	sl, r4
            mbedtls_printf( "skipped\n" );
     952:	46ab      	mov	fp, r5
     954:	bdf0      	pop	{r4, r5, r6, r7, pc}
     956:	3bf6      	subs	r3, #246	; 0xf6
            continue;
     958:	469c      	mov	ip, r3
            mbedtls_printf( "  AES-CFB128-%3d (%s): ", keybits,
     95a:	6003      	str	r3, [r0, #0]
     95c:	465f      	mov	r7, fp
     95e:	465b      	mov	r3, fp
     960:	2600      	movs	r6, #0
            memcpy( buf, aes_test_ctr_ct[u], len );
            aes_tests = aes_test_ctr_pt[u];
        }
        else
        {
            memcpy( buf, aes_test_ctr_pt[u], len );
     962:	4658      	mov	r0, fp
     964:	3708      	adds	r7, #8
     966:	605f      	str	r7, [r3, #4]
     968:	0952      	lsrs	r2, r2, #5
     96a:	784b      	ldrb	r3, [r1, #1]
     96c:	788c      	ldrb	r4, [r1, #2]
     96e:	021b      	lsls	r3, r3, #8
            aes_tests = aes_test_ctr_ct[u];
     970:	0424      	lsls	r4, r4, #16
     972:	4323      	orrs	r3, r4
     974:	780c      	ldrb	r4, [r1, #0]
     976:	3601      	adds	r6, #1
     978:	4323      	orrs	r3, r4
     97a:	78cc      	ldrb	r4, [r1, #3]
            mbedtls_printf( "passed\n" );
     97c:	3104      	adds	r1, #4
     97e:	0624      	lsls	r4, r4, #24
     980:	4323      	orrs	r3, r4
     982:	c708      	stmia	r7!, {r3}
        if( memcmp( buf, aes_tests, 16 ) != 0 )
     984:	4296      	cmp	r6, r2
     986:	d3f0      	bcc.n	96a <mbedtls_aes_setkey_enc+0x46>
     988:	4663      	mov	r3, ip
     98a:	4683      	mov	fp, r0
     98c:	2b0c      	cmp	r3, #12
     98e:	d100      	bne.n	992 <mbedtls_aes_setkey_enc+0x6e>
     990:	e1a4      	b.n	cdc <mbedtls_aes_setkey_enc+0x3b8>
        if( verbose != 0 )
     992:	2b0e      	cmp	r3, #14
     994:	d100      	bne.n	998 <mbedtls_aes_setkey_enc+0x74>
     996:	e13f      	b.n	c18 <mbedtls_aes_setkey_enc+0x2f4>
     998:	2b0a      	cmp	r3, #10
            mbedtls_printf( "passed\n" );
     99a:	d009      	beq.n	9b0 <mbedtls_aes_setkey_enc+0x8c>
     99c:	2000      	movs	r0, #0
     99e:	e7d3      	b.n	948 <mbedtls_aes_setkey_enc+0x24>
     9a0:	230e      	movs	r3, #14
        if( ret == MBEDTLS_ERR_PLATFORM_FEATURE_UNSUPPORTED && keybits == 192 )
     9a2:	6003      	str	r3, [r0, #0]
     9a4:	469c      	mov	ip, r3
     9a6:	e7d9      	b.n	95c <mbedtls_aes_setkey_enc+0x38>
     9a8:	230c      	movs	r3, #12
            mbedtls_printf( "skipped\n" );
     9aa:	6003      	str	r3, [r0, #0]
     9ac:	469c      	mov	ip, r3
     9ae:	e7d5      	b.n	95c <mbedtls_aes_setkey_enc+0x38>
            continue;
     9b0:	22ff      	movs	r2, #255	; 0xff
    ret = mbedtls_aes_setkey_enc( &ctx->tweak, key2, key2bits );
     9b2:	6943      	ldr	r3, [r0, #20]
     9b4:	4cc7      	ldr	r4, [pc, #796]	; (cd4 <mbedtls_aes_setkey_enc+0x3b0>)
     9b6:	0a19      	lsrs	r1, r3, #8
    if( ret != 0 )
     9b8:	3428      	adds	r4, #40	; 0x28
     9ba:	4011      	ands	r1, r2
     9bc:	5c65      	ldrb	r5, [r4, r1]
    return mbedtls_aes_setkey_enc( &ctx->crypt, key1, key1bits );
     9be:	2101      	movs	r1, #1
     9c0:	6880      	ldr	r0, [r0, #8]
     9c2:	4041      	eors	r1, r0
     9c4:	404d      	eors	r5, r1
     9c6:	0e19      	lsrs	r1, r3, #24
     9c8:	5c61      	ldrb	r1, [r4, r1]
            aes_tests = aes_test_xts_pt32[u];
        }
        else
        {
            ret = mbedtls_aes_xts_setkey_enc( &ctx_xts, key, 256 );
            if( ret != 0)
     9ca:	4658      	mov	r0, fp
     9cc:	0409      	lsls	r1, r1, #16
     9ce:	404d      	eors	r5, r1
                goto exit;
            memcpy( buf, aes_test_xts_pt32[u], len );
     9d0:	0011      	movs	r1, r2
     9d2:	4019      	ands	r1, r3
     9d4:	5c61      	ldrb	r1, [r4, r1]
     9d6:	0609      	lsls	r1, r1, #24
     9d8:	404d      	eors	r5, r1
     9da:	0c19      	lsrs	r1, r3, #16
     9dc:	4011      	ands	r1, r2
     9de:	5c61      	ldrb	r1, [r4, r1]
     9e0:	0209      	lsls	r1, r1, #8
            aes_tests = aes_test_xts_ct32[u];
     9e2:	404d      	eors	r5, r1
     9e4:	4659      	mov	r1, fp
     9e6:	618d      	str	r5, [r1, #24]
     9e8:	68c9      	ldr	r1, [r1, #12]
     9ea:	6907      	ldr	r7, [r0, #16]
            mbedtls_printf( "passed\n" );
     9ec:	4069      	eors	r1, r5
     9ee:	404f      	eors	r7, r1
     9f0:	407b      	eors	r3, r7
     9f2:	61c1      	str	r1, [r0, #28]
            mbedtls_printf( "  AES-OFB-%3d (%s): ", keybits,
     9f4:	6207      	str	r7, [r0, #32]
     9f6:	6243      	str	r3, [r0, #36]	; 0x24
            mbedtls_printf( "  AES-CTR-128 (%s): ",
     9f8:	2002      	movs	r0, #2
     9fa:	0a1e      	lsrs	r6, r3, #8
            mbedtls_printf( "passed\n" );
     9fc:	4016      	ands	r6, r2
     9fe:	5da6      	ldrb	r6, [r4, r6]
     a00:	4045      	eors	r5, r0
     a02:	4075      	eors	r5, r6
            ret = 1;
            goto exit;
        }

        if( verbose != 0 )
            mbedtls_printf( "passed\n" );
     a04:	0e1e      	lsrs	r6, r3, #24
     a06:	5da6      	ldrb	r6, [r4, r6]
     a08:	4658      	mov	r0, fp
     a0a:	0436      	lsls	r6, r6, #16
            mbedtls_printf( "  AES-XTS-128 (%s): ",
     a0c:	406e      	eors	r6, r5
     a0e:	0015      	movs	r5, r2
        mbedtls_printf( "\n" );
     a10:	401d      	ands	r5, r3
     a12:	5d65      	ldrb	r5, [r4, r5]
     a14:	062d      	lsls	r5, r5, #24
     a16:	406e      	eors	r6, r5
        mbedtls_printf( "\n" );
     a18:	0c1d      	lsrs	r5, r3, #16
     a1a:	4015      	ands	r5, r2
     a1c:	5d65      	ldrb	r5, [r4, r5]
     a1e:	022d      	lsls	r5, r5, #8
    }

    if( verbose != 0 )
        mbedtls_printf( "\n" );
     a20:	406e      	eors	r6, r5
     a22:	4071      	eors	r1, r6
     a24:	404f      	eors	r7, r1
     a26:	407b      	eors	r3, r7
     a28:	6286      	str	r6, [r0, #40]	; 0x28
     a2a:	62c1      	str	r1, [r0, #44]	; 0x2c
     a2c:	6307      	str	r7, [r0, #48]	; 0x30
     a2e:	6343      	str	r3, [r0, #52]	; 0x34
     a30:	2004      	movs	r0, #4
     a32:	0a1d      	lsrs	r5, r3, #8
     a34:	4015      	ands	r5, r2
     a36:	5d65      	ldrb	r5, [r4, r5]
     a38:	4046      	eors	r6, r0
     a3a:	4075      	eors	r5, r6
     a3c:	0e1e      	lsrs	r6, r3, #24
     a3e:	5da6      	ldrb	r6, [r4, r6]
     a40:	4658      	mov	r0, fp
     a42:	0436      	lsls	r6, r6, #16
     a44:	4075      	eors	r5, r6
     a46:	0016      	movs	r6, r2
     a48:	401e      	ands	r6, r3
     a4a:	5da6      	ldrb	r6, [r4, r6]
     a4c:	0636      	lsls	r6, r6, #24
     a4e:	4075      	eors	r5, r6
     a50:	0c1e      	lsrs	r6, r3, #16
     a52:	4016      	ands	r6, r2
     a54:	5da6      	ldrb	r6, [r4, r6]
     a56:	0236      	lsls	r6, r6, #8
     a58:	4075      	eors	r5, r6
     a5a:	4069      	eors	r1, r5
     a5c:	404f      	eors	r7, r1
     a5e:	407b      	eors	r3, r7
     a60:	6385      	str	r5, [r0, #56]	; 0x38
     a62:	63c1      	str	r1, [r0, #60]	; 0x3c
     a64:	6407      	str	r7, [r0, #64]	; 0x40
     a66:	6443      	str	r3, [r0, #68]	; 0x44
     a68:	2008      	movs	r0, #8
     a6a:	0a1e      	lsrs	r6, r3, #8
     a6c:	4016      	ands	r6, r2
     a6e:	5da6      	ldrb	r6, [r4, r6]
     a70:	4045      	eors	r5, r0
     a72:	406e      	eors	r6, r5
     a74:	0e1d      	lsrs	r5, r3, #24
     a76:	5d65      	ldrb	r5, [r4, r5]
     a78:	4658      	mov	r0, fp
     a7a:	042d      	lsls	r5, r5, #16
     a7c:	406e      	eors	r6, r5
     a7e:	0015      	movs	r5, r2
     a80:	401d      	ands	r5, r3
     a82:	5d65      	ldrb	r5, [r4, r5]
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
     a84:	062d      	lsls	r5, r5, #24
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
     a86:	406e      	eors	r6, r5
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
     a88:	0c1d      	lsrs	r5, r3, #16
     a8a:	4015      	ands	r5, r2
     a8c:	5d65      	ldrb	r5, [r4, r5]
     a8e:	022d      	lsls	r5, r5, #8
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
     a90:	406e      	eors	r6, r5
                RK[6]  = RK[2] ^ RK[5];
     a92:	003d      	movs	r5, r7
                RK[5]  = RK[1] ^ RK[4];
     a94:	4071      	eors	r1, r6
                RK[6]  = RK[2] ^ RK[5];
     a96:	404d      	eors	r5, r1
                RK[7]  = RK[3] ^ RK[6];
     a98:	406b      	eors	r3, r5
                RK[4]  = RK[0] ^ RCON[i] ^
     a9a:	6486      	str	r6, [r0, #72]	; 0x48
                RK[5]  = RK[1] ^ RK[4];
     a9c:	64c1      	str	r1, [r0, #76]	; 0x4c
                RK[6]  = RK[2] ^ RK[5];
     a9e:	6505      	str	r5, [r0, #80]	; 0x50
                RK[7]  = RK[3] ^ RK[6];
     aa0:	6543      	str	r3, [r0, #84]	; 0x54
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
     aa2:	2010      	movs	r0, #16
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
     aa4:	0a1f      	lsrs	r7, r3, #8
     aa6:	4017      	ands	r7, r2
     aa8:	5de7      	ldrb	r7, [r4, r7]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
     aaa:	4046      	eors	r6, r0
     aac:	4077      	eors	r7, r6
     aae:	0e1e      	lsrs	r6, r3, #24
     ab0:	5da6      	ldrb	r6, [r4, r6]
                RK[4]  = RK[0] ^ RCON[i] ^
     ab2:	4658      	mov	r0, fp
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
     ab4:	0436      	lsls	r6, r6, #16
     ab6:	4077      	eors	r7, r6
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
     ab8:	0016      	movs	r6, r2
     aba:	401e      	ands	r6, r3
     abc:	5da6      	ldrb	r6, [r4, r6]
     abe:	0636      	lsls	r6, r6, #24
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
     ac0:	4077      	eors	r7, r6
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
     ac2:	0c1e      	lsrs	r6, r3, #16
     ac4:	4016      	ands	r6, r2
     ac6:	5da6      	ldrb	r6, [r4, r6]
     ac8:	0236      	lsls	r6, r6, #8
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
     aca:	4077      	eors	r7, r6
                RK[5]  = RK[1] ^ RK[4];
     acc:	4079      	eors	r1, r7
                RK[6]  = RK[2] ^ RK[5];
     ace:	404d      	eors	r5, r1
                RK[7]  = RK[3] ^ RK[6];
     ad0:	406b      	eors	r3, r5
                RK[4]  = RK[0] ^ RCON[i] ^
     ad2:	6587      	str	r7, [r0, #88]	; 0x58
                RK[5]  = RK[1] ^ RK[4];
     ad4:	65c1      	str	r1, [r0, #92]	; 0x5c
                RK[6]  = RK[2] ^ RK[5];
     ad6:	6605      	str	r5, [r0, #96]	; 0x60
                RK[7]  = RK[3] ^ RK[6];
     ad8:	6643      	str	r3, [r0, #100]	; 0x64
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
     ada:	2020      	movs	r0, #32
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
     adc:	0a1e      	lsrs	r6, r3, #8
     ade:	4016      	ands	r6, r2
     ae0:	5da6      	ldrb	r6, [r4, r6]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
     ae2:	4047      	eors	r7, r0
     ae4:	407e      	eors	r6, r7
     ae6:	0e1f      	lsrs	r7, r3, #24
     ae8:	5de7      	ldrb	r7, [r4, r7]
                RK[4]  = RK[0] ^ RCON[i] ^
     aea:	4658      	mov	r0, fp
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
     aec:	043f      	lsls	r7, r7, #16
     aee:	407e      	eors	r6, r7
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
     af0:	0017      	movs	r7, r2
     af2:	401f      	ands	r7, r3
     af4:	5de7      	ldrb	r7, [r4, r7]
     af6:	063f      	lsls	r7, r7, #24
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
     af8:	407e      	eors	r6, r7
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
     afa:	0c1f      	lsrs	r7, r3, #16
     afc:	4017      	ands	r7, r2
     afe:	5de7      	ldrb	r7, [r4, r7]
     b00:	023f      	lsls	r7, r7, #8
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
     b02:	407e      	eors	r6, r7
                RK[5]  = RK[1] ^ RK[4];
     b04:	4071      	eors	r1, r6
                RK[6]  = RK[2] ^ RK[5];
     b06:	404d      	eors	r5, r1
                RK[7]  = RK[3] ^ RK[6];
     b08:	406b      	eors	r3, r5
                RK[4]  = RK[0] ^ RCON[i] ^
     b0a:	6686      	str	r6, [r0, #104]	; 0x68
                RK[5]  = RK[1] ^ RK[4];
     b0c:	66c1      	str	r1, [r0, #108]	; 0x6c
                RK[6]  = RK[2] ^ RK[5];
     b0e:	6705      	str	r5, [r0, #112]	; 0x70
                RK[7]  = RK[3] ^ RK[6];
     b10:	6743      	str	r3, [r0, #116]	; 0x74
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
     b12:	2040      	movs	r0, #64	; 0x40
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
     b14:	0a1f      	lsrs	r7, r3, #8
     b16:	4017      	ands	r7, r2
     b18:	5de7      	ldrb	r7, [r4, r7]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
     b1a:	4046      	eors	r6, r0
     b1c:	407e      	eors	r6, r7
     b1e:	0e1f      	lsrs	r7, r3, #24
     b20:	5de7      	ldrb	r7, [r4, r7]
                RK[4]  = RK[0] ^ RCON[i] ^
     b22:	4658      	mov	r0, fp
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
     b24:	043f      	lsls	r7, r7, #16
     b26:	407e      	eors	r6, r7
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
     b28:	0017      	movs	r7, r2
     b2a:	401f      	ands	r7, r3
     b2c:	5de7      	ldrb	r7, [r4, r7]
     b2e:	063f      	lsls	r7, r7, #24
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
     b30:	407e      	eors	r6, r7
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
     b32:	0c1f      	lsrs	r7, r3, #16
     b34:	4017      	ands	r7, r2
     b36:	5de7      	ldrb	r7, [r4, r7]
     b38:	023f      	lsls	r7, r7, #8
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
     b3a:	4077      	eors	r7, r6
                RK[5]  = RK[1] ^ RK[4];
     b3c:	4079      	eors	r1, r7
                RK[4]  = RK[0] ^ RCON[i] ^
     b3e:	6787      	str	r7, [r0, #120]	; 0x78
                RK[5]  = RK[1] ^ RK[4];
     b40:	67c1      	str	r1, [r0, #124]	; 0x7c
                RK[6]  = RK[2] ^ RK[5];
     b42:	465e      	mov	r6, fp
     b44:	2080      	movs	r0, #128	; 0x80
     b46:	404d      	eors	r5, r1
     b48:	5035      	str	r5, [r6, r0]
     b4a:	4684      	mov	ip, r0
                RK[7]  = RK[3] ^ RK[6];
     b4c:	2684      	movs	r6, #132	; 0x84
     b4e:	4658      	mov	r0, fp
     b50:	406b      	eors	r3, r5
     b52:	5183      	str	r3, [r0, r6]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
     b54:	4660      	mov	r0, ip
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
     b56:	0a1e      	lsrs	r6, r3, #8
     b58:	4016      	ands	r6, r2
     b5a:	5da6      	ldrb	r6, [r4, r6]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
     b5c:	4047      	eors	r7, r0
     b5e:	407e      	eors	r6, r7
     b60:	0e1f      	lsrs	r7, r3, #24
     b62:	5de7      	ldrb	r7, [r4, r7]
                RK[4]  = RK[0] ^ RCON[i] ^
     b64:	4658      	mov	r0, fp
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
     b66:	043f      	lsls	r7, r7, #16
     b68:	407e      	eors	r6, r7
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
     b6a:	0017      	movs	r7, r2
     b6c:	401f      	ands	r7, r3
     b6e:	5de7      	ldrb	r7, [r4, r7]
     b70:	063f      	lsls	r7, r7, #24
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
     b72:	407e      	eors	r6, r7
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
     b74:	0c1f      	lsrs	r7, r3, #16
     b76:	4017      	ands	r7, r2
     b78:	5de7      	ldrb	r7, [r4, r7]
     b7a:	023f      	lsls	r7, r7, #8
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
     b7c:	407e      	eors	r6, r7
                RK[4]  = RK[0] ^ RCON[i] ^
     b7e:	2788      	movs	r7, #136	; 0x88
                RK[5]  = RK[1] ^ RK[4];
     b80:	4071      	eors	r1, r6
                RK[4]  = RK[0] ^ RCON[i] ^
     b82:	51c6      	str	r6, [r0, r7]
                RK[5]  = RK[1] ^ RK[4];
     b84:	3704      	adds	r7, #4
     b86:	51c1      	str	r1, [r0, r7]
                RK[6]  = RK[2] ^ RK[5];
     b88:	404d      	eors	r5, r1
     b8a:	3704      	adds	r7, #4
     b8c:	51c5      	str	r5, [r0, r7]
                RK[7]  = RK[3] ^ RK[6];
     b8e:	406b      	eors	r3, r5
     b90:	3704      	adds	r7, #4
     b92:	51c3      	str	r3, [r0, r7]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
     b94:	201b      	movs	r0, #27
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
     b96:	0a1f      	lsrs	r7, r3, #8
     b98:	4017      	ands	r7, r2
     b9a:	5de7      	ldrb	r7, [r4, r7]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
     b9c:	4046      	eors	r6, r0
     b9e:	4077      	eors	r7, r6
     ba0:	0e1e      	lsrs	r6, r3, #24
     ba2:	5da6      	ldrb	r6, [r4, r6]
                RK[4]  = RK[0] ^ RCON[i] ^
     ba4:	4658      	mov	r0, fp
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
     ba6:	0436      	lsls	r6, r6, #16
     ba8:	4077      	eors	r7, r6
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
     baa:	0016      	movs	r6, r2
     bac:	401e      	ands	r6, r3
     bae:	5da6      	ldrb	r6, [r4, r6]
     bb0:	0636      	lsls	r6, r6, #24
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
     bb2:	4077      	eors	r7, r6
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
     bb4:	0c1e      	lsrs	r6, r3, #16
     bb6:	4016      	ands	r6, r2
     bb8:	5da6      	ldrb	r6, [r4, r6]
     bba:	0236      	lsls	r6, r6, #8
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
     bbc:	4077      	eors	r7, r6
                RK[4]  = RK[0] ^ RCON[i] ^
     bbe:	2698      	movs	r6, #152	; 0x98
                RK[5]  = RK[1] ^ RK[4];
     bc0:	4079      	eors	r1, r7
                RK[4]  = RK[0] ^ RCON[i] ^
     bc2:	5187      	str	r7, [r0, r6]
                RK[5]  = RK[1] ^ RK[4];
     bc4:	3604      	adds	r6, #4
     bc6:	5181      	str	r1, [r0, r6]
                RK[6]  = RK[2] ^ RK[5];
     bc8:	404d      	eors	r5, r1
     bca:	3604      	adds	r6, #4
     bcc:	5185      	str	r5, [r0, r6]
                RK[7]  = RK[3] ^ RK[6];
     bce:	406b      	eors	r3, r5
     bd0:	3604      	adds	r6, #4
     bd2:	5183      	str	r3, [r0, r6]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
     bd4:	2036      	movs	r0, #54	; 0x36
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
     bd6:	0a1e      	lsrs	r6, r3, #8
     bd8:	4016      	ands	r6, r2
     bda:	5da6      	ldrb	r6, [r4, r6]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
     bdc:	4047      	eors	r7, r0
     bde:	407e      	eors	r6, r7
     be0:	0e1f      	lsrs	r7, r3, #24
     be2:	5de7      	ldrb	r7, [r4, r7]
                RK[4]  = RK[0] ^ RCON[i] ^
     be4:	4658      	mov	r0, fp
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
     be6:	043f      	lsls	r7, r7, #16
     be8:	407e      	eors	r6, r7
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
     bea:	0017      	movs	r7, r2
     bec:	401f      	ands	r7, r3
     bee:	5de7      	ldrb	r7, [r4, r7]
     bf0:	063f      	lsls	r7, r7, #24
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
     bf2:	407e      	eors	r6, r7
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
     bf4:	0c1f      	lsrs	r7, r3, #16
     bf6:	403a      	ands	r2, r7
     bf8:	5ca2      	ldrb	r2, [r4, r2]
                RK[4]  = RK[0] ^ RCON[i] ^
     bfa:	24a8      	movs	r4, #168	; 0xa8
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
     bfc:	0212      	lsls	r2, r2, #8
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
     bfe:	4072      	eors	r2, r6
                RK[4]  = RK[0] ^ RCON[i] ^
     c00:	5102      	str	r2, [r0, r4]
                RK[5]  = RK[1] ^ RK[4];
     c02:	4051      	eors	r1, r2
     c04:	22ac      	movs	r2, #172	; 0xac
                RK[6]  = RK[2] ^ RK[5];
     c06:	404d      	eors	r5, r1
                RK[5]  = RK[1] ^ RK[4];
     c08:	5081      	str	r1, [r0, r2]
                RK[6]  = RK[2] ^ RK[5];
     c0a:	3204      	adds	r2, #4
     c0c:	5085      	str	r5, [r0, r2]
                RK[7]  = RK[3] ^ RK[6];
     c0e:	405d      	eors	r5, r3
     c10:	23b4      	movs	r3, #180	; 0xb4
     c12:	50c5      	str	r5, [r0, r3]
    return( 0 );
     c14:	2000      	movs	r0, #0
     c16:	e697      	b.n	948 <mbedtls_aes_setkey_enc+0x24>
     c18:	6a03      	ldr	r3, [r0, #32]
     c1a:	4a2e      	ldr	r2, [pc, #184]	; (cd4 <mbedtls_aes_setkey_enc+0x3b0>)
     c1c:	469a      	mov	sl, r3
     c1e:	69c3      	ldr	r3, [r0, #28]
     c20:	4693      	mov	fp, r2
     c22:	4699      	mov	r9, r3
     c24:	6903      	ldr	r3, [r0, #16]
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
     c26:	22ff      	movs	r2, #255	; 0xff
     c28:	4698      	mov	r8, r3
     c2a:	4694      	mov	ip, r2
     c2c:	465d      	mov	r5, fp
     c2e:	4642      	mov	r2, r8
     c30:	68c3      	ldr	r3, [r0, #12]
     c32:	6984      	ldr	r4, [r0, #24]
     c34:	6947      	ldr	r7, [r0, #20]
     c36:	9300      	str	r3, [sp, #0]
     c38:	6a46      	ldr	r6, [r0, #36]	; 0x24
     c3a:	6883      	ldr	r3, [r0, #8]
     c3c:	3528      	adds	r5, #40	; 0x28
     c3e:	3028      	adds	r0, #40	; 0x28
     c40:	9201      	str	r2, [sp, #4]
     c42:	4661      	mov	r1, ip
     c44:	0a32      	lsrs	r2, r6, #8
     c46:	400a      	ands	r2, r1
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
     c48:	0e31      	lsrs	r1, r6, #24
     c4a:	5c69      	ldrb	r1, [r5, r1]
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
     c4c:	5caa      	ldrb	r2, [r5, r2]
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
     c4e:	0409      	lsls	r1, r1, #16
     c50:	404a      	eors	r2, r1
     c52:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
     c54:	4662      	mov	r2, ip
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
     c56:	4661      	mov	r1, ip
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
     c58:	4032      	ands	r2, r6
     c5a:	5caa      	ldrb	r2, [r5, r2]
     c5c:	0612      	lsls	r2, r2, #24
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
     c5e:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
     c60:	0c32      	lsrs	r2, r6, #16
     c62:	400a      	ands	r2, r1
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
     c64:	4659      	mov	r1, fp
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
     c66:	5caa      	ldrb	r2, [r5, r2]
     c68:	0212      	lsls	r2, r2, #8
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
     c6a:	4053      	eors	r3, r2
     c6c:	c904      	ldmia	r1!, {r2}
     c6e:	4053      	eors	r3, r2
                RK[9]  = RK[1] ^ RK[8];
     c70:	9a00      	ldr	r2, [sp, #0]
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
     c72:	468b      	mov	fp, r1
                RK[10] = RK[2] ^ RK[9];
     c74:	9901      	ldr	r1, [sp, #4]
                RK[9]  = RK[1] ^ RK[8];
     c76:	405a      	eors	r2, r3
                RK[10] = RK[2] ^ RK[9];
     c78:	4051      	eors	r1, r2
                RK[9]  = RK[1] ^ RK[8];
     c7a:	6042      	str	r2, [r0, #4]
     c7c:	9200      	str	r2, [sp, #0]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
     c7e:	4662      	mov	r2, ip
                RK[11] = RK[3] ^ RK[10];
     c80:	404f      	eors	r7, r1
                RK[10] = RK[2] ^ RK[9];
     c82:	6081      	str	r1, [r0, #8]
     c84:	9101      	str	r1, [sp, #4]
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
     c86:	4661      	mov	r1, ip
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
     c88:	403a      	ands	r2, r7
     c8a:	5caa      	ldrb	r2, [r5, r2]
                RK[8]  = RK[0] ^ RCON[i] ^
     c8c:	6003      	str	r3, [r0, #0]
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
     c8e:	4054      	eors	r4, r2
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
     c90:	0e3a      	lsrs	r2, r7, #24
     c92:	5caa      	ldrb	r2, [r5, r2]
                RK[11] = RK[3] ^ RK[10];
     c94:	60c7      	str	r7, [r0, #12]
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
     c96:	0612      	lsls	r2, r2, #24
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
     c98:	4054      	eors	r4, r2
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
     c9a:	0a3a      	lsrs	r2, r7, #8
     c9c:	400a      	ands	r2, r1
     c9e:	5caa      	ldrb	r2, [r5, r2]
     ca0:	0212      	lsls	r2, r2, #8
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
     ca2:	4062      	eors	r2, r4
     ca4:	0c3c      	lsrs	r4, r7, #16
     ca6:	400c      	ands	r4, r1
     ca8:	5d2c      	ldrb	r4, [r5, r4]
     caa:	0424      	lsls	r4, r4, #16
     cac:	4054      	eors	r4, r2
                RK[13] = RK[5] ^ RK[12];
     cae:	464a      	mov	r2, r9
     cb0:	4062      	eors	r2, r4
     cb2:	4691      	mov	r9, r2
     cb4:	6142      	str	r2, [r0, #20]
                RK[14] = RK[6] ^ RK[13];
     cb6:	4649      	mov	r1, r9
     cb8:	4652      	mov	r2, sl
     cba:	404a      	eors	r2, r1
     cbc:	6182      	str	r2, [r0, #24]
                RK[15] = RK[7] ^ RK[14];
     cbe:	4056      	eors	r6, r2
                RK[14] = RK[6] ^ RK[13];
     cc0:	4692      	mov	sl, r2
            for( i = 0; i < 7; i++, RK += 8 )
     cc2:	4a05      	ldr	r2, [pc, #20]	; (cd8 <mbedtls_aes_setkey_enc+0x3b4>)
                RK[12] = RK[4] ^
     cc4:	6104      	str	r4, [r0, #16]
                RK[15] = RK[7] ^ RK[14];
     cc6:	61c6      	str	r6, [r0, #28]
     cc8:	3020      	adds	r0, #32
            for( i = 0; i < 7; i++, RK += 8 )
     cca:	4593      	cmp	fp, r2
     ccc:	d1b9      	bne.n	c42 <mbedtls_aes_setkey_enc+0x31e>
    return( 0 );
     cce:	2000      	movs	r0, #0
     cd0:	e63a      	b.n	948 <mbedtls_aes_setkey_enc+0x24>
     cd2:	46c0      	nop			; (mov r8, r8)
     cd4:	0000202c 	.word	0x0000202c
     cd8:	00002048 	.word	0x00002048
     cdc:	69c1      	ldr	r1, [r0, #28]
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
     cde:	2028      	movs	r0, #40	; 0x28
     ce0:	4684      	mov	ip, r0
     ce2:	4ce8      	ldr	r4, [pc, #928]	; (1084 <mbedtls_aes_setkey_enc+0x760>)
     ce4:	23ff      	movs	r3, #255	; 0xff
     ce6:	44a4      	add	ip, r4
     ce8:	4660      	mov	r0, ip
     cea:	0a0a      	lsrs	r2, r1, #8
     cec:	401a      	ands	r2, r3
     cee:	5c82      	ldrb	r2, [r0, r2]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
     cf0:	4658      	mov	r0, fp
     cf2:	2401      	movs	r4, #1
     cf4:	6880      	ldr	r0, [r0, #8]
     cf6:	4044      	eors	r4, r0
     cf8:	4660      	mov	r0, ip
     cfa:	4062      	eors	r2, r4
     cfc:	0e0c      	lsrs	r4, r1, #24
     cfe:	5d04      	ldrb	r4, [r0, r4]
     d00:	0424      	lsls	r4, r4, #16
     d02:	4062      	eors	r2, r4
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
     d04:	001c      	movs	r4, r3
     d06:	400c      	ands	r4, r1
     d08:	5d04      	ldrb	r4, [r0, r4]
     d0a:	0624      	lsls	r4, r4, #24
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
     d0c:	4062      	eors	r2, r4
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
     d0e:	0c0c      	lsrs	r4, r1, #16
     d10:	401c      	ands	r4, r3
     d12:	5d04      	ldrb	r4, [r0, r4]
     d14:	0224      	lsls	r4, r4, #8
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
     d16:	4062      	eors	r2, r4
     d18:	4692      	mov	sl, r2
                RK[6]  = RK[0] ^ RCON[i] ^
     d1a:	465a      	mov	r2, fp
     d1c:	4650      	mov	r0, sl
                RK[7]  = RK[1] ^ RK[6];
     d1e:	68d7      	ldr	r7, [r2, #12]
                RK[6]  = RK[0] ^ RCON[i] ^
     d20:	6210      	str	r0, [r2, #32]
                RK[7]  = RK[1] ^ RK[6];
     d22:	465a      	mov	r2, fp
                RK[8]  = RK[2] ^ RK[7];
     d24:	6916      	ldr	r6, [r2, #16]
                RK[7]  = RK[1] ^ RK[6];
     d26:	4047      	eors	r7, r0
                RK[9]  = RK[3] ^ RK[8];
     d28:	6955      	ldr	r5, [r2, #20]
                RK[8]  = RK[2] ^ RK[7];
     d2a:	407e      	eors	r6, r7
                RK[10] = RK[4] ^ RK[9];
     d2c:	6994      	ldr	r4, [r2, #24]
                RK[9]  = RK[3] ^ RK[8];
     d2e:	4075      	eors	r5, r6
                RK[10] = RK[4] ^ RK[9];
     d30:	406c      	eors	r4, r5
                RK[11] = RK[5] ^ RK[10];
     d32:	4061      	eors	r1, r4
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
     d34:	0a08      	lsrs	r0, r1, #8
     d36:	4018      	ands	r0, r3
     d38:	4680      	mov	r8, r0
                RK[7]  = RK[1] ^ RK[6];
     d3a:	6257      	str	r7, [r2, #36]	; 0x24
                RK[8]  = RK[2] ^ RK[7];
     d3c:	6296      	str	r6, [r2, #40]	; 0x28
                RK[9]  = RK[3] ^ RK[8];
     d3e:	62d5      	str	r5, [r2, #44]	; 0x2c
                RK[10] = RK[4] ^ RK[9];
     d40:	6314      	str	r4, [r2, #48]	; 0x30
                RK[11] = RK[5] ^ RK[10];
     d42:	6351      	str	r1, [r2, #52]	; 0x34
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
     d44:	4660      	mov	r0, ip
     d46:	4642      	mov	r2, r8
     d48:	5c82      	ldrb	r2, [r0, r2]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
     d4a:	4650      	mov	r0, sl
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
     d4c:	4690      	mov	r8, r2
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
     d4e:	2202      	movs	r2, #2
     d50:	4050      	eors	r0, r2
     d52:	0002      	movs	r2, r0
     d54:	4640      	mov	r0, r8
     d56:	4042      	eors	r2, r0
     d58:	0e08      	lsrs	r0, r1, #24
     d5a:	4680      	mov	r8, r0
     d5c:	4691      	mov	r9, r2
     d5e:	4660      	mov	r0, ip
     d60:	4642      	mov	r2, r8
     d62:	5c82      	ldrb	r2, [r0, r2]
     d64:	4648      	mov	r0, r9
     d66:	0412      	lsls	r2, r2, #16
     d68:	4050      	eors	r0, r2
     d6a:	4681      	mov	r9, r0
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
     d6c:	0018      	movs	r0, r3
     d6e:	4008      	ands	r0, r1
     d70:	4680      	mov	r8, r0
     d72:	4660      	mov	r0, ip
     d74:	4642      	mov	r2, r8
     d76:	5c82      	ldrb	r2, [r0, r2]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
     d78:	4648      	mov	r0, r9
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
     d7a:	0612      	lsls	r2, r2, #24
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
     d7c:	4050      	eors	r0, r2
     d7e:	4681      	mov	r9, r0
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
     d80:	0c08      	lsrs	r0, r1, #16
     d82:	4018      	ands	r0, r3
     d84:	4680      	mov	r8, r0
     d86:	4660      	mov	r0, ip
     d88:	4642      	mov	r2, r8
     d8a:	5c82      	ldrb	r2, [r0, r2]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
     d8c:	4648      	mov	r0, r9
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
     d8e:	0212      	lsls	r2, r2, #8
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
     d90:	4050      	eors	r0, r2
                RK[6]  = RK[0] ^ RCON[i] ^
     d92:	465a      	mov	r2, fp
                RK[7]  = RK[1] ^ RK[6];
     d94:	4047      	eors	r7, r0
                RK[8]  = RK[2] ^ RK[7];
     d96:	407e      	eors	r6, r7
                RK[9]  = RK[3] ^ RK[8];
     d98:	4075      	eors	r5, r6
                RK[10] = RK[4] ^ RK[9];
     d9a:	406c      	eors	r4, r5
                RK[11] = RK[5] ^ RK[10];
     d9c:	4061      	eors	r1, r4
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
     d9e:	4682      	mov	sl, r0
                RK[6]  = RK[0] ^ RCON[i] ^
     da0:	6390      	str	r0, [r2, #56]	; 0x38
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
     da2:	0a08      	lsrs	r0, r1, #8
     da4:	4018      	ands	r0, r3
                RK[7]  = RK[1] ^ RK[6];
     da6:	465a      	mov	r2, fp
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
     da8:	4680      	mov	r8, r0
                RK[7]  = RK[1] ^ RK[6];
     daa:	63d7      	str	r7, [r2, #60]	; 0x3c
                RK[8]  = RK[2] ^ RK[7];
     dac:	6416      	str	r6, [r2, #64]	; 0x40
                RK[9]  = RK[3] ^ RK[8];
     dae:	6455      	str	r5, [r2, #68]	; 0x44
                RK[10] = RK[4] ^ RK[9];
     db0:	6494      	str	r4, [r2, #72]	; 0x48
                RK[11] = RK[5] ^ RK[10];
     db2:	64d1      	str	r1, [r2, #76]	; 0x4c
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
     db4:	4660      	mov	r0, ip
     db6:	4642      	mov	r2, r8
     db8:	5c82      	ldrb	r2, [r0, r2]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
     dba:	4650      	mov	r0, sl
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
     dbc:	4690      	mov	r8, r2
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
     dbe:	2204      	movs	r2, #4
     dc0:	4050      	eors	r0, r2
     dc2:	0002      	movs	r2, r0
     dc4:	4640      	mov	r0, r8
     dc6:	4042      	eors	r2, r0
     dc8:	0e08      	lsrs	r0, r1, #24
     dca:	4680      	mov	r8, r0
     dcc:	4691      	mov	r9, r2
     dce:	4660      	mov	r0, ip
     dd0:	4642      	mov	r2, r8
     dd2:	5c82      	ldrb	r2, [r0, r2]
     dd4:	4648      	mov	r0, r9
     dd6:	0412      	lsls	r2, r2, #16
     dd8:	4050      	eors	r0, r2
     dda:	4681      	mov	r9, r0
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
     ddc:	0018      	movs	r0, r3
     dde:	4008      	ands	r0, r1
     de0:	4680      	mov	r8, r0
     de2:	4660      	mov	r0, ip
     de4:	4642      	mov	r2, r8
     de6:	5c82      	ldrb	r2, [r0, r2]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
     de8:	4648      	mov	r0, r9
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
     dea:	0612      	lsls	r2, r2, #24
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
     dec:	4050      	eors	r0, r2
     dee:	4681      	mov	r9, r0
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
     df0:	0c08      	lsrs	r0, r1, #16
     df2:	4018      	ands	r0, r3
     df4:	4680      	mov	r8, r0
     df6:	4660      	mov	r0, ip
     df8:	4642      	mov	r2, r8
     dfa:	5c82      	ldrb	r2, [r0, r2]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
     dfc:	4648      	mov	r0, r9
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
     dfe:	0212      	lsls	r2, r2, #8
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
     e00:	4050      	eors	r0, r2
                RK[6]  = RK[0] ^ RCON[i] ^
     e02:	465a      	mov	r2, fp
                RK[7]  = RK[1] ^ RK[6];
     e04:	4047      	eors	r7, r0
                RK[8]  = RK[2] ^ RK[7];
     e06:	407e      	eors	r6, r7
                RK[9]  = RK[3] ^ RK[8];
     e08:	4075      	eors	r5, r6
                RK[10] = RK[4] ^ RK[9];
     e0a:	406c      	eors	r4, r5
                RK[11] = RK[5] ^ RK[10];
     e0c:	4061      	eors	r1, r4
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
     e0e:	4682      	mov	sl, r0
                RK[6]  = RK[0] ^ RCON[i] ^
     e10:	6510      	str	r0, [r2, #80]	; 0x50
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
     e12:	0a08      	lsrs	r0, r1, #8
     e14:	4018      	ands	r0, r3
                RK[7]  = RK[1] ^ RK[6];
     e16:	465a      	mov	r2, fp
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
     e18:	4680      	mov	r8, r0
                RK[7]  = RK[1] ^ RK[6];
     e1a:	6557      	str	r7, [r2, #84]	; 0x54
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
     e1c:	4660      	mov	r0, ip
                RK[8]  = RK[2] ^ RK[7];
     e1e:	6596      	str	r6, [r2, #88]	; 0x58
                RK[9]  = RK[3] ^ RK[8];
     e20:	65d5      	str	r5, [r2, #92]	; 0x5c
                RK[10] = RK[4] ^ RK[9];
     e22:	6614      	str	r4, [r2, #96]	; 0x60
                RK[11] = RK[5] ^ RK[10];
     e24:	6651      	str	r1, [r2, #100]	; 0x64
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
     e26:	4642      	mov	r2, r8
     e28:	5c82      	ldrb	r2, [r0, r2]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
     e2a:	4650      	mov	r0, sl
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
     e2c:	4690      	mov	r8, r2
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
     e2e:	2208      	movs	r2, #8
     e30:	4050      	eors	r0, r2
     e32:	0002      	movs	r2, r0
     e34:	4640      	mov	r0, r8
     e36:	4042      	eors	r2, r0
     e38:	0e08      	lsrs	r0, r1, #24
     e3a:	4680      	mov	r8, r0
     e3c:	4691      	mov	r9, r2
     e3e:	4660      	mov	r0, ip
     e40:	4642      	mov	r2, r8
     e42:	5c82      	ldrb	r2, [r0, r2]
     e44:	4648      	mov	r0, r9
     e46:	0412      	lsls	r2, r2, #16
     e48:	4050      	eors	r0, r2
     e4a:	4681      	mov	r9, r0
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
     e4c:	0018      	movs	r0, r3
     e4e:	4008      	ands	r0, r1
     e50:	4680      	mov	r8, r0
     e52:	4660      	mov	r0, ip
     e54:	4642      	mov	r2, r8
     e56:	5c82      	ldrb	r2, [r0, r2]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
     e58:	4648      	mov	r0, r9
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
     e5a:	0612      	lsls	r2, r2, #24
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
     e5c:	4050      	eors	r0, r2
     e5e:	4681      	mov	r9, r0
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
     e60:	0c08      	lsrs	r0, r1, #16
     e62:	4018      	ands	r0, r3
     e64:	4680      	mov	r8, r0
     e66:	4660      	mov	r0, ip
     e68:	4642      	mov	r2, r8
     e6a:	5c82      	ldrb	r2, [r0, r2]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
     e6c:	4648      	mov	r0, r9
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
     e6e:	0212      	lsls	r2, r2, #8
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
     e70:	4050      	eors	r0, r2
                RK[6]  = RK[0] ^ RCON[i] ^
     e72:	465a      	mov	r2, fp
     e74:	6690      	str	r0, [r2, #104]	; 0x68
                RK[7]  = RK[1] ^ RK[6];
     e76:	465a      	mov	r2, fp
     e78:	4047      	eors	r7, r0
                RK[8]  = RK[2] ^ RK[7];
     e7a:	407e      	eors	r6, r7
                RK[9]  = RK[3] ^ RK[8];
     e7c:	4075      	eors	r5, r6
                RK[10] = RK[4] ^ RK[9];
     e7e:	406c      	eors	r4, r5
                RK[11] = RK[5] ^ RK[10];
     e80:	4061      	eors	r1, r4
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
     e82:	4682      	mov	sl, r0
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
     e84:	0a08      	lsrs	r0, r1, #8
     e86:	4018      	ands	r0, r3
                RK[7]  = RK[1] ^ RK[6];
     e88:	66d7      	str	r7, [r2, #108]	; 0x6c
                RK[8]  = RK[2] ^ RK[7];
     e8a:	6716      	str	r6, [r2, #112]	; 0x70
                RK[9]  = RK[3] ^ RK[8];
     e8c:	6755      	str	r5, [r2, #116]	; 0x74
                RK[10] = RK[4] ^ RK[9];
     e8e:	6794      	str	r4, [r2, #120]	; 0x78
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
     e90:	4680      	mov	r8, r0
                RK[11] = RK[5] ^ RK[10];
     e92:	465a      	mov	r2, fp
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
     e94:	4660      	mov	r0, ip
                RK[11] = RK[5] ^ RK[10];
     e96:	67d1      	str	r1, [r2, #124]	; 0x7c
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
     e98:	4642      	mov	r2, r8
     e9a:	5c82      	ldrb	r2, [r0, r2]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
     e9c:	4650      	mov	r0, sl
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
     e9e:	4690      	mov	r8, r2
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
     ea0:	2210      	movs	r2, #16
     ea2:	4050      	eors	r0, r2
     ea4:	0002      	movs	r2, r0
     ea6:	4640      	mov	r0, r8
     ea8:	4042      	eors	r2, r0
     eaa:	0e08      	lsrs	r0, r1, #24
     eac:	4680      	mov	r8, r0
     eae:	4691      	mov	r9, r2
     eb0:	4660      	mov	r0, ip
     eb2:	4642      	mov	r2, r8
     eb4:	5c82      	ldrb	r2, [r0, r2]
     eb6:	4648      	mov	r0, r9
     eb8:	0412      	lsls	r2, r2, #16
     eba:	4050      	eors	r0, r2
     ebc:	4681      	mov	r9, r0
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
     ebe:	0018      	movs	r0, r3
     ec0:	4008      	ands	r0, r1
     ec2:	4680      	mov	r8, r0
     ec4:	4660      	mov	r0, ip
     ec6:	4642      	mov	r2, r8
     ec8:	5c82      	ldrb	r2, [r0, r2]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
     eca:	4648      	mov	r0, r9
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
     ecc:	0612      	lsls	r2, r2, #24
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
     ece:	4050      	eors	r0, r2
     ed0:	4681      	mov	r9, r0
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
     ed2:	0c08      	lsrs	r0, r1, #16
     ed4:	4018      	ands	r0, r3
     ed6:	4680      	mov	r8, r0
     ed8:	4660      	mov	r0, ip
     eda:	4642      	mov	r2, r8
     edc:	5c82      	ldrb	r2, [r0, r2]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
     ede:	4648      	mov	r0, r9
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
     ee0:	0212      	lsls	r2, r2, #8
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
     ee2:	4050      	eors	r0, r2
     ee4:	0002      	movs	r2, r0
                RK[10] = RK[4] ^ RK[9];
     ee6:	9400      	str	r4, [sp, #0]
                RK[6]  = RK[0] ^ RCON[i] ^
     ee8:	2080      	movs	r0, #128	; 0x80
     eea:	465c      	mov	r4, fp
     eec:	4680      	mov	r8, r0
     eee:	5022      	str	r2, [r4, r0]
                RK[7]  = RK[1] ^ RK[6];
     ef0:	2084      	movs	r0, #132	; 0x84
     ef2:	4057      	eors	r7, r2
     ef4:	5027      	str	r7, [r4, r0]
                RK[8]  = RK[2] ^ RK[7];
     ef6:	407e      	eors	r6, r7
                RK[7]  = RK[1] ^ RK[6];
     ef8:	9201      	str	r2, [sp, #4]
                RK[8]  = RK[2] ^ RK[7];
     efa:	3004      	adds	r0, #4
                RK[10] = RK[4] ^ RK[9];
     efc:	9a00      	ldr	r2, [sp, #0]
                RK[8]  = RK[2] ^ RK[7];
     efe:	5026      	str	r6, [r4, r0]
                RK[9]  = RK[3] ^ RK[8];
     f00:	4075      	eors	r5, r6
     f02:	3004      	adds	r0, #4
     f04:	5025      	str	r5, [r4, r0]
                RK[10] = RK[4] ^ RK[9];
     f06:	406a      	eors	r2, r5
     f08:	3004      	adds	r0, #4
                RK[11] = RK[5] ^ RK[10];
     f0a:	4051      	eors	r1, r2
                RK[10] = RK[4] ^ RK[9];
     f0c:	5022      	str	r2, [r4, r0]
                RK[11] = RK[5] ^ RK[10];
     f0e:	3004      	adds	r0, #4
     f10:	5021      	str	r1, [r4, r0]
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
     f12:	0a08      	lsrs	r0, r1, #8
     f14:	4018      	ands	r0, r3
     f16:	4681      	mov	r9, r0
                RK[10] = RK[4] ^ RK[9];
     f18:	9200      	str	r2, [sp, #0]
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
     f1a:	4660      	mov	r0, ip
     f1c:	464a      	mov	r2, r9
     f1e:	5c82      	ldrb	r2, [r0, r2]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
     f20:	9801      	ldr	r0, [sp, #4]
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
     f22:	4691      	mov	r9, r2
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
     f24:	2220      	movs	r2, #32
     f26:	4050      	eors	r0, r2
     f28:	0002      	movs	r2, r0
     f2a:	4648      	mov	r0, r9
     f2c:	4042      	eors	r2, r0
     f2e:	0e08      	lsrs	r0, r1, #24
     f30:	4681      	mov	r9, r0
     f32:	4692      	mov	sl, r2
     f34:	4660      	mov	r0, ip
     f36:	464a      	mov	r2, r9
     f38:	5c82      	ldrb	r2, [r0, r2]
     f3a:	4650      	mov	r0, sl
     f3c:	0412      	lsls	r2, r2, #16
     f3e:	4050      	eors	r0, r2
     f40:	4682      	mov	sl, r0
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
     f42:	0018      	movs	r0, r3
     f44:	4008      	ands	r0, r1
     f46:	4681      	mov	r9, r0
     f48:	4660      	mov	r0, ip
     f4a:	464a      	mov	r2, r9
     f4c:	5c82      	ldrb	r2, [r0, r2]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
     f4e:	4650      	mov	r0, sl
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
     f50:	0612      	lsls	r2, r2, #24
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
     f52:	4050      	eors	r0, r2
     f54:	4682      	mov	sl, r0
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
     f56:	0c08      	lsrs	r0, r1, #16
     f58:	4018      	ands	r0, r3
     f5a:	4681      	mov	r9, r0
     f5c:	4660      	mov	r0, ip
     f5e:	464a      	mov	r2, r9
     f60:	5c82      	ldrb	r2, [r0, r2]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
     f62:	4650      	mov	r0, sl
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
     f64:	0212      	lsls	r2, r2, #8
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
     f66:	4050      	eors	r0, r2
     f68:	0002      	movs	r2, r0
                RK[6]  = RK[0] ^ RCON[i] ^
     f6a:	2098      	movs	r0, #152	; 0x98
     f6c:	5022      	str	r2, [r4, r0]
                RK[7]  = RK[1] ^ RK[6];
     f6e:	209c      	movs	r0, #156	; 0x9c
     f70:	4057      	eors	r7, r2
     f72:	5027      	str	r7, [r4, r0]
                RK[8]  = RK[2] ^ RK[7];
     f74:	407e      	eors	r6, r7
                RK[7]  = RK[1] ^ RK[6];
     f76:	9201      	str	r2, [sp, #4]
                RK[8]  = RK[2] ^ RK[7];
     f78:	3004      	adds	r0, #4
                RK[10] = RK[4] ^ RK[9];
     f7a:	9a00      	ldr	r2, [sp, #0]
                RK[8]  = RK[2] ^ RK[7];
     f7c:	5026      	str	r6, [r4, r0]
                RK[9]  = RK[3] ^ RK[8];
     f7e:	4075      	eors	r5, r6
     f80:	3004      	adds	r0, #4
     f82:	5025      	str	r5, [r4, r0]
                RK[10] = RK[4] ^ RK[9];
     f84:	406a      	eors	r2, r5
     f86:	3004      	adds	r0, #4
     f88:	5022      	str	r2, [r4, r0]
                RK[11] = RK[5] ^ RK[10];
     f8a:	4051      	eors	r1, r2
     f8c:	3004      	adds	r0, #4
     f8e:	5021      	str	r1, [r4, r0]
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
     f90:	0a08      	lsrs	r0, r1, #8
     f92:	4018      	ands	r0, r3
     f94:	4681      	mov	r9, r0
                RK[10] = RK[4] ^ RK[9];
     f96:	9200      	str	r2, [sp, #0]
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
     f98:	4660      	mov	r0, ip
     f9a:	464a      	mov	r2, r9
     f9c:	5c82      	ldrb	r2, [r0, r2]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
     f9e:	9801      	ldr	r0, [sp, #4]
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
     fa0:	4691      	mov	r9, r2
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
     fa2:	2240      	movs	r2, #64	; 0x40
     fa4:	4050      	eors	r0, r2
     fa6:	0002      	movs	r2, r0
     fa8:	4648      	mov	r0, r9
     faa:	4042      	eors	r2, r0
     fac:	0e08      	lsrs	r0, r1, #24
     fae:	4681      	mov	r9, r0
     fb0:	4692      	mov	sl, r2
     fb2:	4660      	mov	r0, ip
     fb4:	464a      	mov	r2, r9
     fb6:	5c82      	ldrb	r2, [r0, r2]
     fb8:	4650      	mov	r0, sl
     fba:	0412      	lsls	r2, r2, #16
     fbc:	4050      	eors	r0, r2
     fbe:	4682      	mov	sl, r0
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
     fc0:	0018      	movs	r0, r3
     fc2:	4008      	ands	r0, r1
     fc4:	4681      	mov	r9, r0
     fc6:	4660      	mov	r0, ip
     fc8:	464a      	mov	r2, r9
     fca:	5c82      	ldrb	r2, [r0, r2]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
     fcc:	4650      	mov	r0, sl
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
     fce:	0612      	lsls	r2, r2, #24
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
     fd0:	4050      	eors	r0, r2
     fd2:	4682      	mov	sl, r0
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
     fd4:	0c08      	lsrs	r0, r1, #16
     fd6:	4018      	ands	r0, r3
     fd8:	4681      	mov	r9, r0
     fda:	4660      	mov	r0, ip
     fdc:	464a      	mov	r2, r9
     fde:	5c82      	ldrb	r2, [r0, r2]
     fe0:	0212      	lsls	r2, r2, #8
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
     fe2:	0010      	movs	r0, r2
     fe4:	4652      	mov	r2, sl
     fe6:	4050      	eors	r0, r2
                RK[6]  = RK[0] ^ RCON[i] ^
     fe8:	22b0      	movs	r2, #176	; 0xb0
     fea:	50a0      	str	r0, [r4, r2]
                RK[7]  = RK[1] ^ RK[6];
     fec:	22b4      	movs	r2, #180	; 0xb4
     fee:	4047      	eors	r7, r0
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
     ff0:	4681      	mov	r9, r0
                RK[7]  = RK[1] ^ RK[6];
     ff2:	4658      	mov	r0, fp
     ff4:	50a7      	str	r7, [r4, r2]
                RK[8]  = RK[2] ^ RK[7];
     ff6:	407e      	eors	r6, r7
     ff8:	3204      	adds	r2, #4
     ffa:	50a6      	str	r6, [r4, r2]
                RK[9]  = RK[3] ^ RK[8];
     ffc:	4075      	eors	r5, r6
     ffe:	3204      	adds	r2, #4
    1000:	50a5      	str	r5, [r4, r2]
                RK[10] = RK[4] ^ RK[9];
    1002:	9c00      	ldr	r4, [sp, #0]
    1004:	3204      	adds	r2, #4
    1006:	406c      	eors	r4, r5
    1008:	5084      	str	r4, [r0, r2]
                RK[11] = RK[5] ^ RK[10];
    100a:	4061      	eors	r1, r4
    100c:	3204      	adds	r2, #4
    100e:	5081      	str	r1, [r0, r2]
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
    1010:	4660      	mov	r0, ip
    1012:	0a0a      	lsrs	r2, r1, #8
    1014:	401a      	ands	r2, r3
    1016:	5c82      	ldrb	r2, [r0, r2]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
    1018:	4640      	mov	r0, r8
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
    101a:	4692      	mov	sl, r2
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
    101c:	464a      	mov	r2, r9
    101e:	4050      	eors	r0, r2
    1020:	0002      	movs	r2, r0
    1022:	4650      	mov	r0, sl
    1024:	4050      	eors	r0, r2
    1026:	4681      	mov	r9, r0
    1028:	0e08      	lsrs	r0, r1, #24
    102a:	4680      	mov	r8, r0
    102c:	4660      	mov	r0, ip
    102e:	4642      	mov	r2, r8
    1030:	5c82      	ldrb	r2, [r0, r2]
    1032:	4648      	mov	r0, r9
    1034:	0412      	lsls	r2, r2, #16
    1036:	4050      	eors	r0, r2
    1038:	4681      	mov	r9, r0
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
    103a:	0018      	movs	r0, r3
    103c:	4008      	ands	r0, r1
    103e:	4680      	mov	r8, r0
    1040:	4660      	mov	r0, ip
    1042:	4642      	mov	r2, r8
    1044:	5c82      	ldrb	r2, [r0, r2]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
    1046:	4648      	mov	r0, r9
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
    1048:	0612      	lsls	r2, r2, #24
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
    104a:	4050      	eors	r0, r2
    104c:	0002      	movs	r2, r0
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
    104e:	0c08      	lsrs	r0, r1, #16
    1050:	4003      	ands	r3, r0
    1052:	4660      	mov	r0, ip
    1054:	5cc3      	ldrb	r3, [r0, r3]
                RK[6]  = RK[0] ^ RCON[i] ^
    1056:	4658      	mov	r0, fp
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
    1058:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
    105a:	4053      	eors	r3, r2
                RK[6]  = RK[0] ^ RCON[i] ^
    105c:	22c8      	movs	r2, #200	; 0xc8
    105e:	5083      	str	r3, [r0, r2]
                RK[7]  = RK[1] ^ RK[6];
    1060:	407b      	eors	r3, r7
    1062:	3204      	adds	r2, #4
    1064:	5083      	str	r3, [r0, r2]
                RK[8]  = RK[2] ^ RK[7];
    1066:	4073      	eors	r3, r6
    1068:	3204      	adds	r2, #4
    106a:	5083      	str	r3, [r0, r2]
                RK[9]  = RK[3] ^ RK[8];
    106c:	406b      	eors	r3, r5
    106e:	3204      	adds	r2, #4
    1070:	5083      	str	r3, [r0, r2]
                RK[10] = RK[4] ^ RK[9];
    1072:	4063      	eors	r3, r4
    1074:	3204      	adds	r2, #4
    1076:	5083      	str	r3, [r0, r2]
                RK[11] = RK[5] ^ RK[10];
    1078:	404b      	eors	r3, r1
    107a:	3204      	adds	r2, #4
    107c:	5083      	str	r3, [r0, r2]
    return( 0 );
    107e:	2000      	movs	r0, #0
    1080:	e462      	b.n	948 <mbedtls_aes_setkey_enc+0x24>
    1082:	46c0      	nop			; (mov r8, r8)
    1084:	0000202c 	.word	0x0000202c

00001088 <mbedtls_aes_setkey_dec>:
{
    1088:	b5f0      	push	{r4, r5, r6, r7, lr}
    108a:	46de      	mov	lr, fp
    108c:	464e      	mov	r6, r9
    108e:	4645      	mov	r5, r8
    1090:	4657      	mov	r7, sl
    1092:	b5e0      	push	{r5, r6, r7, lr}
    1094:	0016      	movs	r6, r2
    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
    1096:	228c      	movs	r2, #140	; 0x8c
{
    1098:	0004      	movs	r4, r0
    109a:	b0cd      	sub	sp, #308	; 0x134
    109c:	000d      	movs	r5, r1
    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
    109e:	0052      	lsls	r2, r2, #1
    10a0:	2100      	movs	r1, #0
    10a2:	4b97      	ldr	r3, [pc, #604]	; (1300 <mbedtls_aes_setkey_dec+0x278>)
    10a4:	a806      	add	r0, sp, #24
    10a6:	4798      	blx	r3
    ctx->rk = RK = ctx->buf;
    10a8:	0023      	movs	r3, r4
    10aa:	3308      	adds	r3, #8
    10ac:	6063      	str	r3, [r4, #4]
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
    10ae:	0032      	movs	r2, r6
    10b0:	0029      	movs	r1, r5
    10b2:	a806      	add	r0, sp, #24
    10b4:	4b93      	ldr	r3, [pc, #588]	; (1304 <mbedtls_aes_setkey_dec+0x27c>)
    10b6:	4798      	blx	r3
    10b8:	9002      	str	r0, [sp, #8]
    10ba:	2800      	cmp	r0, #0
    10bc:	d000      	beq.n	10c0 <mbedtls_aes_setkey_dec+0x38>
    10be:	e112      	b.n	12e6 <mbedtls_aes_setkey_dec+0x25e>
    ctx->nr = cty.nr;
    10c0:	9b06      	ldr	r3, [sp, #24]
    10c2:	001a      	movs	r2, r3
    10c4:	9303      	str	r3, [sp, #12]
    10c6:	6023      	str	r3, [r4, #0]
    SK = cty.rk + cty.nr * 4;
    10c8:	011b      	lsls	r3, r3, #4
    10ca:	0019      	movs	r1, r3
    10cc:	468c      	mov	ip, r1
    10ce:	9304      	str	r3, [sp, #16]
    10d0:	9b07      	ldr	r3, [sp, #28]
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    10d2:	3a01      	subs	r2, #1
    SK = cty.rk + cty.nr * 4;
    10d4:	4463      	add	r3, ip
    *RK++ = *SK++;
    10d6:	6819      	ldr	r1, [r3, #0]
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    10d8:	4690      	mov	r8, r2
    *RK++ = *SK++;
    10da:	60a1      	str	r1, [r4, #8]
    *RK++ = *SK++;
    10dc:	6859      	ldr	r1, [r3, #4]
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    10de:	2210      	movs	r2, #16
    *RK++ = *SK++;
    10e0:	60e1      	str	r1, [r4, #12]
    *RK++ = *SK++;
    10e2:	6899      	ldr	r1, [r3, #8]
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    10e4:	4252      	negs	r2, r2
    *RK++ = *SK++;
    10e6:	6121      	str	r1, [r4, #16]
    *RK++ = *SK++;
    10e8:	2118      	movs	r1, #24
    10ea:	468c      	mov	ip, r1
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    10ec:	4691      	mov	r9, r2
    *RK++ = *SK++;
    10ee:	44a4      	add	ip, r4
    10f0:	68d8      	ldr	r0, [r3, #12]
    10f2:	4661      	mov	r1, ip
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    10f4:	4499      	add	r9, r3
    10f6:	4643      	mov	r3, r8
    *RK++ = *SK++;
    10f8:	9101      	str	r1, [sp, #4]
    10fa:	6160      	str	r0, [r4, #20]
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    10fc:	2b00      	cmp	r3, #0
    10fe:	dc00      	bgt.n	1102 <mbedtls_aes_setkey_dec+0x7a>
    1100:	e0e3      	b.n	12ca <mbedtls_aes_setkey_dec+0x242>
    1102:	464c      	mov	r4, r9
    1104:	4b80      	ldr	r3, [pc, #512]	; (1308 <mbedtls_aes_setkey_dec+0x280>)
    1106:	4660      	mov	r0, ip
    1108:	469c      	mov	ip, r3
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
    110a:	4b80      	ldr	r3, [pc, #512]	; (130c <mbedtls_aes_setkey_dec+0x284>)
    110c:	3210      	adds	r2, #16
    110e:	4f80      	ldr	r7, [pc, #512]	; (1310 <mbedtls_aes_setkey_dec+0x288>)
    1110:	32ff      	adds	r2, #255	; 0xff
    1112:	3328      	adds	r3, #40	; 0x28
    1114:	9405      	str	r4, [sp, #20]
    1116:	0015      	movs	r5, r2
    1118:	6821      	ldr	r1, [r4, #0]
    111a:	3c10      	subs	r4, #16
    111c:	400d      	ands	r5, r1
    111e:	5d5d      	ldrb	r5, [r3, r5]
    1120:	00ad      	lsls	r5, r5, #2
    1122:	46aa      	mov	sl, r5
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
    1124:	0e0d      	lsrs	r5, r1, #24
    1126:	5d5d      	ldrb	r5, [r3, r5]
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
    1128:	44e2      	add	sl, ip
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
    112a:	00ad      	lsls	r5, r5, #2
    112c:	46ab      	mov	fp, r5
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
    112e:	4655      	mov	r5, sl
    1130:	6aad      	ldr	r5, [r5, #40]	; 0x28
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
    1132:	44bb      	add	fp, r7
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
    1134:	46aa      	mov	sl, r5
    1136:	465d      	mov	r5, fp
    1138:	6aad      	ldr	r5, [r5, #40]	; 0x28
    113a:	46ab      	mov	fp, r5
    113c:	4655      	mov	r5, sl
    113e:	465e      	mov	r6, fp
    1140:	4075      	eors	r5, r6
    1142:	46aa      	mov	sl, r5
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
    1144:	0a0d      	lsrs	r5, r1, #8
    1146:	4015      	ands	r5, r2
    1148:	5d5d      	ldrb	r5, [r3, r5]
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
    114a:	0c09      	lsrs	r1, r1, #16
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
    114c:	00ad      	lsls	r5, r5, #2
    114e:	46ab      	mov	fp, r5
    1150:	4d70      	ldr	r5, [pc, #448]	; (1314 <mbedtls_aes_setkey_dec+0x28c>)
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
    1152:	4011      	ands	r1, r2
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
    1154:	46a9      	mov	r9, r5
    1156:	44cb      	add	fp, r9
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
    1158:	465d      	mov	r5, fp
    115a:	6aad      	ldr	r5, [r5, #40]	; 0x28
    115c:	5c59      	ldrb	r1, [r3, r1]
    115e:	46ab      	mov	fp, r5
    1160:	4655      	mov	r5, sl
    1162:	465e      	mov	r6, fp
    1164:	4075      	eors	r5, r6
    1166:	46aa      	mov	sl, r5
    1168:	4d6b      	ldr	r5, [pc, #428]	; (1318 <mbedtls_aes_setkey_dec+0x290>)
    116a:	0089      	lsls	r1, r1, #2
    116c:	46a9      	mov	r9, r5
    116e:	4655      	mov	r5, sl
    1170:	4449      	add	r1, r9
    1172:	6a89      	ldr	r1, [r1, #40]	; 0x28
    1174:	4069      	eors	r1, r5
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
    1176:	0015      	movs	r5, r2
    1178:	6001      	str	r1, [r0, #0]
    117a:	6961      	ldr	r1, [r4, #20]
    117c:	400d      	ands	r5, r1
    117e:	5d5d      	ldrb	r5, [r3, r5]
    1180:	00ad      	lsls	r5, r5, #2
    1182:	46aa      	mov	sl, r5
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
    1184:	0e0d      	lsrs	r5, r1, #24
    1186:	5d5d      	ldrb	r5, [r3, r5]
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
    1188:	44e2      	add	sl, ip
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
    118a:	00ad      	lsls	r5, r5, #2
    118c:	46ab      	mov	fp, r5
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
    118e:	4655      	mov	r5, sl
    1190:	6aad      	ldr	r5, [r5, #40]	; 0x28
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
    1192:	44bb      	add	fp, r7
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
    1194:	46aa      	mov	sl, r5
    1196:	465d      	mov	r5, fp
    1198:	6aad      	ldr	r5, [r5, #40]	; 0x28
    119a:	46ab      	mov	fp, r5
    119c:	4655      	mov	r5, sl
    119e:	465e      	mov	r6, fp
    11a0:	4075      	eors	r5, r6
    11a2:	46aa      	mov	sl, r5
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
    11a4:	0a0d      	lsrs	r5, r1, #8
    11a6:	4015      	ands	r5, r2
    11a8:	5d5d      	ldrb	r5, [r3, r5]
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
    11aa:	0c09      	lsrs	r1, r1, #16
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
    11ac:	00ad      	lsls	r5, r5, #2
    11ae:	46ab      	mov	fp, r5
    11b0:	4d58      	ldr	r5, [pc, #352]	; (1314 <mbedtls_aes_setkey_dec+0x28c>)
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
    11b2:	4011      	ands	r1, r2
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
    11b4:	46a9      	mov	r9, r5
    11b6:	44cb      	add	fp, r9
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
    11b8:	465d      	mov	r5, fp
    11ba:	6aad      	ldr	r5, [r5, #40]	; 0x28
    11bc:	5c59      	ldrb	r1, [r3, r1]
    11be:	46ab      	mov	fp, r5
    11c0:	4655      	mov	r5, sl
    11c2:	465e      	mov	r6, fp
    11c4:	4075      	eors	r5, r6
    11c6:	46aa      	mov	sl, r5
    11c8:	4d53      	ldr	r5, [pc, #332]	; (1318 <mbedtls_aes_setkey_dec+0x290>)
    11ca:	0089      	lsls	r1, r1, #2
    11cc:	46a9      	mov	r9, r5
    11ce:	4655      	mov	r5, sl
    11d0:	4449      	add	r1, r9
    11d2:	6a89      	ldr	r1, [r1, #40]	; 0x28
    11d4:	4069      	eors	r1, r5
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
    11d6:	0015      	movs	r5, r2
    11d8:	6041      	str	r1, [r0, #4]
    11da:	69a1      	ldr	r1, [r4, #24]
    11dc:	400d      	ands	r5, r1
    11de:	5d5d      	ldrb	r5, [r3, r5]
    11e0:	00ad      	lsls	r5, r5, #2
    11e2:	46aa      	mov	sl, r5
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
    11e4:	0e0d      	lsrs	r5, r1, #24
    11e6:	5d5d      	ldrb	r5, [r3, r5]
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
    11e8:	44e2      	add	sl, ip
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
    11ea:	00ad      	lsls	r5, r5, #2
    11ec:	46ab      	mov	fp, r5
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
    11ee:	4655      	mov	r5, sl
    11f0:	6aad      	ldr	r5, [r5, #40]	; 0x28
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
    11f2:	44bb      	add	fp, r7
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
    11f4:	46aa      	mov	sl, r5
    11f6:	465d      	mov	r5, fp
    11f8:	6aad      	ldr	r5, [r5, #40]	; 0x28
    11fa:	46ab      	mov	fp, r5
    11fc:	4655      	mov	r5, sl
    11fe:	465e      	mov	r6, fp
    1200:	4075      	eors	r5, r6
    1202:	46aa      	mov	sl, r5
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
    1204:	0a0d      	lsrs	r5, r1, #8
    1206:	4015      	ands	r5, r2
    1208:	5d5d      	ldrb	r5, [r3, r5]
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
    120a:	0c09      	lsrs	r1, r1, #16
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
    120c:	00ad      	lsls	r5, r5, #2
    120e:	46ab      	mov	fp, r5
    1210:	4d40      	ldr	r5, [pc, #256]	; (1314 <mbedtls_aes_setkey_dec+0x28c>)
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
    1212:	4011      	ands	r1, r2
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
    1214:	46a9      	mov	r9, r5
    1216:	44cb      	add	fp, r9
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
    1218:	465d      	mov	r5, fp
    121a:	6aad      	ldr	r5, [r5, #40]	; 0x28
    121c:	5c59      	ldrb	r1, [r3, r1]
    121e:	46ab      	mov	fp, r5
    1220:	4655      	mov	r5, sl
    1222:	465e      	mov	r6, fp
    1224:	4075      	eors	r5, r6
    1226:	46aa      	mov	sl, r5
    1228:	4d3b      	ldr	r5, [pc, #236]	; (1318 <mbedtls_aes_setkey_dec+0x290>)
    122a:	0089      	lsls	r1, r1, #2
    122c:	46a9      	mov	r9, r5
    122e:	4655      	mov	r5, sl
    1230:	4449      	add	r1, r9
    1232:	6a89      	ldr	r1, [r1, #40]	; 0x28
    1234:	4069      	eors	r1, r5
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
    1236:	0015      	movs	r5, r2
    1238:	6081      	str	r1, [r0, #8]
    123a:	69e1      	ldr	r1, [r4, #28]
    123c:	400d      	ands	r5, r1
    123e:	5d5d      	ldrb	r5, [r3, r5]
    1240:	00ad      	lsls	r5, r5, #2
    1242:	46aa      	mov	sl, r5
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
    1244:	0e0d      	lsrs	r5, r1, #24
    1246:	5d5d      	ldrb	r5, [r3, r5]
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
    1248:	44e2      	add	sl, ip
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
    124a:	00ad      	lsls	r5, r5, #2
    124c:	46ab      	mov	fp, r5
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
    124e:	4655      	mov	r5, sl
    1250:	6aad      	ldr	r5, [r5, #40]	; 0x28
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
    1252:	44bb      	add	fp, r7
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
    1254:	46aa      	mov	sl, r5
    1256:	465d      	mov	r5, fp
    1258:	6aad      	ldr	r5, [r5, #40]	; 0x28
    125a:	46ab      	mov	fp, r5
    125c:	4655      	mov	r5, sl
    125e:	465e      	mov	r6, fp
    1260:	4075      	eors	r5, r6
    1262:	46aa      	mov	sl, r5
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
    1264:	0a0d      	lsrs	r5, r1, #8
    1266:	4015      	ands	r5, r2
    1268:	5d5d      	ldrb	r5, [r3, r5]
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
    126a:	0c09      	lsrs	r1, r1, #16
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
    126c:	00ad      	lsls	r5, r5, #2
    126e:	46ab      	mov	fp, r5
    1270:	4d28      	ldr	r5, [pc, #160]	; (1314 <mbedtls_aes_setkey_dec+0x28c>)
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
    1272:	4011      	ands	r1, r2
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
    1274:	46a9      	mov	r9, r5
    1276:	44cb      	add	fp, r9
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
    1278:	465d      	mov	r5, fp
    127a:	6aad      	ldr	r5, [r5, #40]	; 0x28
    127c:	5c59      	ldrb	r1, [r3, r1]
    127e:	46ab      	mov	fp, r5
    1280:	4655      	mov	r5, sl
    1282:	465e      	mov	r6, fp
    1284:	4075      	eors	r5, r6
    1286:	46aa      	mov	sl, r5
    1288:	4d23      	ldr	r5, [pc, #140]	; (1318 <mbedtls_aes_setkey_dec+0x290>)
    128a:	0089      	lsls	r1, r1, #2
    128c:	46ab      	mov	fp, r5
    128e:	4655      	mov	r5, sl
    1290:	4459      	add	r1, fp
    1292:	6a89      	ldr	r1, [r1, #40]	; 0x28
    1294:	4069      	eors	r1, r5
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
    1296:	60c1      	str	r1, [r0, #12]
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    1298:	2101      	movs	r1, #1
    129a:	4249      	negs	r1, r1
    129c:	468a      	mov	sl, r1
    129e:	44d0      	add	r8, sl
    12a0:	4641      	mov	r1, r8
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
    12a2:	3010      	adds	r0, #16
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    12a4:	2900      	cmp	r1, #0
    12a6:	d000      	beq.n	12aa <mbedtls_aes_setkey_dec+0x222>
    12a8:	e735      	b.n	1116 <mbedtls_aes_setkey_dec+0x8e>
    12aa:	9b05      	ldr	r3, [sp, #20]
    12ac:	4699      	mov	r9, r3
    12ae:	464a      	mov	r2, r9
    12b0:	9b03      	ldr	r3, [sp, #12]
    12b2:	011b      	lsls	r3, r3, #4
    12b4:	1ad3      	subs	r3, r2, r3
    12b6:	2210      	movs	r2, #16
    12b8:	4691      	mov	r9, r2
    12ba:	9a01      	ldr	r2, [sp, #4]
    12bc:	4499      	add	r9, r3
    12be:	4694      	mov	ip, r2
    12c0:	9b04      	ldr	r3, [sp, #16]
    12c2:	3b10      	subs	r3, #16
    12c4:	449c      	add	ip, r3
    12c6:	4663      	mov	r3, ip
    12c8:	9301      	str	r3, [sp, #4]
    *RK++ = *SK++;
    12ca:	464a      	mov	r2, r9
    12cc:	9b01      	ldr	r3, [sp, #4]
    12ce:	6812      	ldr	r2, [r2, #0]
    12d0:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
    12d2:	464a      	mov	r2, r9
    12d4:	6852      	ldr	r2, [r2, #4]
    12d6:	605a      	str	r2, [r3, #4]
    *RK++ = *SK++;
    12d8:	464a      	mov	r2, r9
    12da:	6892      	ldr	r2, [r2, #8]
    12dc:	609a      	str	r2, [r3, #8]
    *RK++ = *SK++;
    12de:	464a      	mov	r2, r9
    12e0:	68d2      	ldr	r2, [r2, #12]
    12e2:	9201      	str	r2, [sp, #4]
    12e4:	60da      	str	r2, [r3, #12]
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_aes_context ) );
    12e6:	218c      	movs	r1, #140	; 0x8c
    12e8:	a806      	add	r0, sp, #24
    12ea:	0049      	lsls	r1, r1, #1
    12ec:	4b0b      	ldr	r3, [pc, #44]	; (131c <mbedtls_aes_setkey_dec+0x294>)
    12ee:	4798      	blx	r3
}
    12f0:	9802      	ldr	r0, [sp, #8]
    12f2:	b04d      	add	sp, #308	; 0x134
    12f4:	bc3c      	pop	{r2, r3, r4, r5}
    12f6:	4690      	mov	r8, r2
    12f8:	4699      	mov	r9, r3
    12fa:	46a2      	mov	sl, r4
    12fc:	46ab      	mov	fp, r5
    12fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1300:	00001e4b 	.word	0x00001e4b
    1304:	00000925 	.word	0x00000925
    1308:	0000212c 	.word	0x0000212c
    130c:	0000202c 	.word	0x0000202c
    1310:	0000252c 	.word	0x0000252c
    1314:	0000292c 	.word	0x0000292c
    1318:	00002d2c 	.word	0x00002d2c
    131c:	00001db5 	.word	0x00001db5

00001320 <mbedtls_internal_aes_encrypt>:
{
    1320:	b5f0      	push	{r4, r5, r6, r7, lr}
    1322:	464e      	mov	r6, r9
    1324:	4645      	mov	r5, r8
    1326:	46de      	mov	lr, fp
    1328:	4657      	mov	r7, sl
    132a:	b5e0      	push	{r5, r6, r7, lr}
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    132c:	784c      	ldrb	r4, [r1, #1]
    132e:	780b      	ldrb	r3, [r1, #0]
    1330:	0224      	lsls	r4, r4, #8
    1332:	431c      	orrs	r4, r3
    1334:	788b      	ldrb	r3, [r1, #2]
{
    1336:	b089      	sub	sp, #36	; 0x24
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    1338:	041b      	lsls	r3, r3, #16
    133a:	431c      	orrs	r4, r3
    133c:	78cb      	ldrb	r3, [r1, #3]
{
    133e:	9206      	str	r2, [sp, #24]
    RK = ctx->rk;
    1340:	6842      	ldr	r2, [r0, #4]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    1342:	061b      	lsls	r3, r3, #24
    1344:	4323      	orrs	r3, r4
    1346:	6814      	ldr	r4, [r2, #0]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    1348:	7a0d      	ldrb	r5, [r1, #8]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    134a:	405c      	eors	r4, r3
    134c:	9402      	str	r4, [sp, #8]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    134e:	794c      	ldrb	r4, [r1, #5]
    1350:	790b      	ldrb	r3, [r1, #4]
    1352:	0224      	lsls	r4, r4, #8
    1354:	431c      	orrs	r4, r3
    1356:	798b      	ldrb	r3, [r1, #6]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
    1358:	7b4e      	ldrb	r6, [r1, #13]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    135a:	041b      	lsls	r3, r3, #16
    135c:	431c      	orrs	r4, r3
    135e:	79cb      	ldrb	r3, [r1, #7]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
    1360:	0236      	lsls	r6, r6, #8
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    1362:	061b      	lsls	r3, r3, #24
    1364:	4323      	orrs	r3, r4
    1366:	6854      	ldr	r4, [r2, #4]
    1368:	4063      	eors	r3, r4
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    136a:	7a4c      	ldrb	r4, [r1, #9]
    136c:	0224      	lsls	r4, r4, #8
    136e:	432c      	orrs	r4, r5
    1370:	7a8d      	ldrb	r5, [r1, #10]
    1372:	042d      	lsls	r5, r5, #16
    1374:	432c      	orrs	r4, r5
    1376:	7acd      	ldrb	r5, [r1, #11]
    1378:	062d      	lsls	r5, r5, #24
    137a:	4325      	orrs	r5, r4
    137c:	6894      	ldr	r4, [r2, #8]
    137e:	4065      	eors	r5, r4
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
    1380:	7b0c      	ldrb	r4, [r1, #12]
    1382:	4326      	orrs	r6, r4
    1384:	7b8c      	ldrb	r4, [r1, #14]
    1386:	0424      	lsls	r4, r4, #16
    1388:	4326      	orrs	r6, r4
    138a:	7bcc      	ldrb	r4, [r1, #15]
    138c:	2110      	movs	r1, #16
    138e:	468c      	mov	ip, r1
    1390:	4494      	add	ip, r2
    1392:	4661      	mov	r1, ip
    1394:	0624      	lsls	r4, r4, #24
    1396:	9105      	str	r1, [sp, #20]
    1398:	68d1      	ldr	r1, [r2, #12]
    139a:	4334      	orrs	r4, r6
    139c:	404c      	eors	r4, r1
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    139e:	6801      	ldr	r1, [r0, #0]
    13a0:	1049      	asrs	r1, r1, #1
    13a2:	9107      	str	r1, [sp, #28]
    13a4:	3901      	subs	r1, #1
    13a6:	1e08      	subs	r0, r1, #0
    13a8:	9104      	str	r1, [sp, #16]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
    13aa:	6911      	ldr	r1, [r2, #16]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    13ac:	dc00      	bgt.n	13b0 <mbedtls_internal_aes_encrypt+0x90>
    13ae:	e1d9      	b.n	1764 <mbedtls_internal_aes_encrypt+0x444>
    13b0:	9a05      	ldr	r2, [sp, #20]
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
    13b2:	27ff      	movs	r7, #255	; 0xff
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    13b4:	4694      	mov	ip, r2
    13b6:	4af0      	ldr	r2, [pc, #960]	; (1778 <mbedtls_internal_aes_encrypt+0x458>)
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
    13b8:	4666      	mov	r6, ip
    13ba:	4693      	mov	fp, r2
    13bc:	4aef      	ldr	r2, [pc, #956]	; (177c <mbedtls_internal_aes_encrypt+0x45c>)
    13be:	9301      	str	r3, [sp, #4]
    13c0:	4692      	mov	sl, r2
    13c2:	4aef      	ldr	r2, [pc, #956]	; (1780 <mbedtls_internal_aes_encrypt+0x460>)
    13c4:	4691      	mov	r9, r2
    13c6:	4aef      	ldr	r2, [pc, #956]	; (1784 <mbedtls_internal_aes_encrypt+0x464>)
    13c8:	4690      	mov	r8, r2
    13ca:	9b02      	ldr	r3, [sp, #8]
    13cc:	0e20      	lsrs	r0, r4, #24
    13ce:	001a      	movs	r2, r3
    13d0:	403a      	ands	r2, r7
    13d2:	0092      	lsls	r2, r2, #2
    13d4:	0080      	lsls	r0, r0, #2
    13d6:	445a      	add	r2, fp
    13d8:	4450      	add	r0, sl
    13da:	6a80      	ldr	r0, [r0, #40]	; 0x28
    13dc:	6a92      	ldr	r2, [r2, #40]	; 0x28
    13de:	4042      	eors	r2, r0
    13e0:	4051      	eors	r1, r2
    13e2:	9a01      	ldr	r2, [sp, #4]
    13e4:	0a10      	lsrs	r0, r2, #8
    13e6:	4038      	ands	r0, r7
    13e8:	0080      	lsls	r0, r0, #2
    13ea:	4448      	add	r0, r9
    13ec:	6a82      	ldr	r2, [r0, #40]	; 0x28
    13ee:	0038      	movs	r0, r7
    13f0:	4051      	eors	r1, r2
    13f2:	0c2a      	lsrs	r2, r5, #16
    13f4:	403a      	ands	r2, r7
    13f6:	0092      	lsls	r2, r2, #2
    13f8:	4442      	add	r2, r8
    13fa:	6a92      	ldr	r2, [r2, #40]	; 0x28
    13fc:	4051      	eors	r1, r2
    13fe:	9a01      	ldr	r2, [sp, #4]
    1400:	4010      	ands	r0, r2
    1402:	0082      	lsls	r2, r0, #2
    1404:	0e18      	lsrs	r0, r3, #24
    1406:	0080      	lsls	r0, r0, #2
    1408:	445a      	add	r2, fp
    140a:	4450      	add	r0, sl
    140c:	6a80      	ldr	r0, [r0, #40]	; 0x28
    140e:	6a92      	ldr	r2, [r2, #40]	; 0x28
    1410:	6873      	ldr	r3, [r6, #4]
    1412:	4042      	eors	r2, r0
    1414:	0a28      	lsrs	r0, r5, #8
    1416:	4038      	ands	r0, r7
    1418:	0080      	lsls	r0, r0, #2
    141a:	4448      	add	r0, r9
    141c:	6a80      	ldr	r0, [r0, #40]	; 0x28
    141e:	405a      	eors	r2, r3
    1420:	4042      	eors	r2, r0
    1422:	0c20      	lsrs	r0, r4, #16
    1424:	4038      	ands	r0, r7
    1426:	0080      	lsls	r0, r0, #2
    1428:	4440      	add	r0, r8
    142a:	6a80      	ldr	r0, [r0, #40]	; 0x28
    142c:	4042      	eors	r2, r0
    142e:	0038      	movs	r0, r7
    1430:	4028      	ands	r0, r5
    1432:	0080      	lsls	r0, r0, #2
    1434:	4684      	mov	ip, r0
    1436:	44dc      	add	ip, fp
    1438:	4663      	mov	r3, ip
    143a:	9801      	ldr	r0, [sp, #4]
    143c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    143e:	0e00      	lsrs	r0, r0, #24
    1440:	0080      	lsls	r0, r0, #2
    1442:	4450      	add	r0, sl
    1444:	6a80      	ldr	r0, [r0, #40]	; 0x28
    1446:	9203      	str	r2, [sp, #12]
    1448:	4058      	eors	r0, r3
    144a:	68b3      	ldr	r3, [r6, #8]
    144c:	0e2d      	lsrs	r5, r5, #24
    144e:	4058      	eors	r0, r3
    1450:	0a23      	lsrs	r3, r4, #8
    1452:	001a      	movs	r2, r3
    1454:	403a      	ands	r2, r7
    1456:	0093      	lsls	r3, r2, #2
    1458:	469c      	mov	ip, r3
    145a:	44cc      	add	ip, r9
    145c:	4663      	mov	r3, ip
    145e:	9a02      	ldr	r2, [sp, #8]
    1460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1462:	403c      	ands	r4, r7
    1464:	4058      	eors	r0, r3
    1466:	0c13      	lsrs	r3, r2, #16
    1468:	403b      	ands	r3, r7
    146a:	009b      	lsls	r3, r3, #2
    146c:	469c      	mov	ip, r3
    146e:	44c4      	add	ip, r8
    1470:	4663      	mov	r3, ip
    1472:	00a4      	lsls	r4, r4, #2
    1474:	00ad      	lsls	r5, r5, #2
    1476:	445c      	add	r4, fp
    1478:	4455      	add	r5, sl
    147a:	6aad      	ldr	r5, [r5, #40]	; 0x28
    147c:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    147e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1480:	406c      	eors	r4, r5
    1482:	0a15      	lsrs	r5, r2, #8
    1484:	403d      	ands	r5, r7
    1486:	00ad      	lsls	r5, r5, #2
    1488:	4058      	eors	r0, r3
    148a:	444d      	add	r5, r9
    148c:	68f3      	ldr	r3, [r6, #12]
    148e:	6aad      	ldr	r5, [r5, #40]	; 0x28
    1490:	405c      	eors	r4, r3
    1492:	406c      	eors	r4, r5
    1494:	9d01      	ldr	r5, [sp, #4]
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    1496:	6932      	ldr	r2, [r6, #16]
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
    1498:	0c2b      	lsrs	r3, r5, #16
    149a:	403b      	ands	r3, r7
    149c:	009b      	lsls	r3, r3, #2
    149e:	4443      	add	r3, r8
    14a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    14a2:	405c      	eors	r4, r3
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    14a4:	003b      	movs	r3, r7
    14a6:	0e25      	lsrs	r5, r4, #24
    14a8:	400b      	ands	r3, r1
    14aa:	009b      	lsls	r3, r3, #2
    14ac:	00ad      	lsls	r5, r5, #2
    14ae:	445b      	add	r3, fp
    14b0:	4455      	add	r5, sl
    14b2:	6aad      	ldr	r5, [r5, #40]	; 0x28
    14b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    14b6:	406b      	eors	r3, r5
    14b8:	4053      	eors	r3, r2
    14ba:	9a03      	ldr	r2, [sp, #12]
    14bc:	0a15      	lsrs	r5, r2, #8
    14be:	403d      	ands	r5, r7
    14c0:	00ad      	lsls	r5, r5, #2
    14c2:	444d      	add	r5, r9
    14c4:	6aad      	ldr	r5, [r5, #40]	; 0x28
    14c6:	406b      	eors	r3, r5
    14c8:	0c05      	lsrs	r5, r0, #16
    14ca:	403d      	ands	r5, r7
    14cc:	00ad      	lsls	r5, r5, #2
    14ce:	4445      	add	r5, r8
    14d0:	6aad      	ldr	r5, [r5, #40]	; 0x28
    14d2:	406b      	eors	r3, r5
    14d4:	9302      	str	r3, [sp, #8]
    14d6:	003b      	movs	r3, r7
    14d8:	0e0d      	lsrs	r5, r1, #24
    14da:	4013      	ands	r3, r2
    14dc:	009b      	lsls	r3, r3, #2
    14de:	00ad      	lsls	r5, r5, #2
    14e0:	445b      	add	r3, fp
    14e2:	4455      	add	r5, sl
    14e4:	6aad      	ldr	r5, [r5, #40]	; 0x28
    14e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    14e8:	6972      	ldr	r2, [r6, #20]
    14ea:	406b      	eors	r3, r5
    14ec:	0a05      	lsrs	r5, r0, #8
    14ee:	403d      	ands	r5, r7
    14f0:	00ad      	lsls	r5, r5, #2
    14f2:	444d      	add	r5, r9
    14f4:	6aad      	ldr	r5, [r5, #40]	; 0x28
    14f6:	4053      	eors	r3, r2
    14f8:	406b      	eors	r3, r5
    14fa:	0c25      	lsrs	r5, r4, #16
    14fc:	403d      	ands	r5, r7
    14fe:	00ad      	lsls	r5, r5, #2
    1500:	4445      	add	r5, r8
    1502:	6aad      	ldr	r5, [r5, #40]	; 0x28
    1504:	9a03      	ldr	r2, [sp, #12]
    1506:	406b      	eors	r3, r5
    1508:	003d      	movs	r5, r7
    150a:	4005      	ands	r5, r0
    150c:	00ad      	lsls	r5, r5, #2
    150e:	445d      	add	r5, fp
    1510:	46ac      	mov	ip, r5
    1512:	9301      	str	r3, [sp, #4]
    1514:	4663      	mov	r3, ip
    1516:	0e15      	lsrs	r5, r2, #24
    1518:	00ad      	lsls	r5, r5, #2
    151a:	4455      	add	r5, sl
    151c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    151e:	6aad      	ldr	r5, [r5, #40]	; 0x28
    1520:	0e00      	lsrs	r0, r0, #24
    1522:	405d      	eors	r5, r3
    1524:	69b3      	ldr	r3, [r6, #24]
    1526:	0080      	lsls	r0, r0, #2
    1528:	405d      	eors	r5, r3
    152a:	0a23      	lsrs	r3, r4, #8
    152c:	403b      	ands	r3, r7
    152e:	009b      	lsls	r3, r3, #2
    1530:	469c      	mov	ip, r3
    1532:	44cc      	add	ip, r9
    1534:	4663      	mov	r3, ip
    1536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1538:	403c      	ands	r4, r7
    153a:	405d      	eors	r5, r3
    153c:	0c0b      	lsrs	r3, r1, #16
    153e:	403b      	ands	r3, r7
    1540:	009b      	lsls	r3, r3, #2
    1542:	469c      	mov	ip, r3
    1544:	44c4      	add	ip, r8
    1546:	4663      	mov	r3, ip
    1548:	00a4      	lsls	r4, r4, #2
    154a:	0a09      	lsrs	r1, r1, #8
    154c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    154e:	445c      	add	r4, fp
    1550:	4450      	add	r0, sl
    1552:	4039      	ands	r1, r7
    1554:	0c12      	lsrs	r2, r2, #16
    1556:	6a80      	ldr	r0, [r0, #40]	; 0x28
    1558:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    155a:	0089      	lsls	r1, r1, #2
    155c:	403a      	ands	r2, r7
    155e:	4449      	add	r1, r9
    1560:	405d      	eors	r5, r3
    1562:	0092      	lsls	r2, r2, #2
    1564:	69f3      	ldr	r3, [r6, #28]
    1566:	4044      	eors	r4, r0
    1568:	4442      	add	r2, r8
    156a:	6a88      	ldr	r0, [r1, #40]	; 0x28
    156c:	6a92      	ldr	r2, [r2, #40]	; 0x28
    156e:	405c      	eors	r4, r3
    1570:	4044      	eors	r4, r0
    1572:	4054      	eors	r4, r2
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    1574:	9a04      	ldr	r2, [sp, #16]
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    1576:	6a31      	ldr	r1, [r6, #32]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    1578:	3a01      	subs	r2, #1
    157a:	9204      	str	r2, [sp, #16]
    157c:	3620      	adds	r6, #32
    157e:	2a00      	cmp	r2, #0
    1580:	d000      	beq.n	1584 <mbedtls_internal_aes_encrypt+0x264>
    1582:	e722      	b.n	13ca <mbedtls_internal_aes_encrypt+0xaa>
    1584:	4880      	ldr	r0, [pc, #512]	; (1788 <mbedtls_internal_aes_encrypt+0x468>)
    1586:	9a07      	ldr	r2, [sp, #28]
    1588:	4684      	mov	ip, r0
    158a:	9805      	ldr	r0, [sp, #20]
    158c:	4462      	add	r2, ip
    158e:	4684      	mov	ip, r0
    1590:	0152      	lsls	r2, r2, #5
    1592:	4494      	add	ip, r2
    1594:	4662      	mov	r2, ip
    1596:	9b01      	ldr	r3, [sp, #4]
    1598:	9205      	str	r2, [sp, #20]
    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
    159a:	20ff      	movs	r0, #255	; 0xff
    159c:	9a02      	ldr	r2, [sp, #8]
    159e:	0e26      	lsrs	r6, r4, #24
    15a0:	4002      	ands	r2, r0
    15a2:	0092      	lsls	r2, r2, #2
    15a4:	00b6      	lsls	r6, r6, #2
    15a6:	445a      	add	r2, fp
    15a8:	4456      	add	r6, sl
    15aa:	0a1f      	lsrs	r7, r3, #8
    15ac:	6ab6      	ldr	r6, [r6, #40]	; 0x28
    15ae:	6a92      	ldr	r2, [r2, #40]	; 0x28
    15b0:	4007      	ands	r7, r0
    15b2:	00bf      	lsls	r7, r7, #2
    15b4:	4072      	eors	r2, r6
    15b6:	444f      	add	r7, r9
    15b8:	4051      	eors	r1, r2
    15ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
    15bc:	0e1f      	lsrs	r7, r3, #24
    15be:	4051      	eors	r1, r2
    15c0:	0c2a      	lsrs	r2, r5, #16
    15c2:	4002      	ands	r2, r0
    15c4:	0092      	lsls	r2, r2, #2
    15c6:	4442      	add	r2, r8
    15c8:	6a92      	ldr	r2, [r2, #40]	; 0x28
    15ca:	00bf      	lsls	r7, r7, #2
    15cc:	4051      	eors	r1, r2
    15ce:	0002      	movs	r2, r0
    15d0:	468c      	mov	ip, r1
    15d2:	9902      	ldr	r1, [sp, #8]
    15d4:	401a      	ands	r2, r3
    15d6:	0e09      	lsrs	r1, r1, #24
    15d8:	0092      	lsls	r2, r2, #2
    15da:	0089      	lsls	r1, r1, #2
    15dc:	445a      	add	r2, fp
    15de:	4451      	add	r1, sl
    15e0:	6a89      	ldr	r1, [r1, #40]	; 0x28
    15e2:	6a92      	ldr	r2, [r2, #40]	; 0x28
    15e4:	4457      	add	r7, sl
    15e6:	404a      	eors	r2, r1
    15e8:	9905      	ldr	r1, [sp, #20]
    15ea:	0c1b      	lsrs	r3, r3, #16
    15ec:	684e      	ldr	r6, [r1, #4]
    15ee:	0a29      	lsrs	r1, r5, #8
    15f0:	4072      	eors	r2, r6
    15f2:	0006      	movs	r6, r0
    15f4:	4001      	ands	r1, r0
    15f6:	0089      	lsls	r1, r1, #2
    15f8:	4449      	add	r1, r9
    15fa:	6a89      	ldr	r1, [r1, #40]	; 0x28
    15fc:	402e      	ands	r6, r5
    15fe:	404a      	eors	r2, r1
    1600:	0c21      	lsrs	r1, r4, #16
    1602:	4001      	ands	r1, r0
    1604:	0089      	lsls	r1, r1, #2
    1606:	4441      	add	r1, r8
    1608:	6a89      	ldr	r1, [r1, #40]	; 0x28
    160a:	0e2d      	lsrs	r5, r5, #24
    160c:	404a      	eors	r2, r1
    160e:	00b1      	lsls	r1, r6, #2
    1610:	9201      	str	r2, [sp, #4]
    1612:	4459      	add	r1, fp
    1614:	9a05      	ldr	r2, [sp, #20]
    1616:	6a8e      	ldr	r6, [r1, #40]	; 0x28
    1618:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    161a:	6897      	ldr	r7, [r2, #8]
    161c:	404e      	eors	r6, r1
    161e:	9703      	str	r7, [sp, #12]
    1620:	407e      	eors	r6, r7
    1622:	0a27      	lsrs	r7, r4, #8
    1624:	4007      	ands	r7, r0
    1626:	4004      	ands	r4, r0
    1628:	00bf      	lsls	r7, r7, #2
    162a:	00a4      	lsls	r4, r4, #2
    162c:	00ad      	lsls	r5, r5, #2
    162e:	444f      	add	r7, r9
    1630:	445c      	add	r4, fp
    1632:	4455      	add	r5, sl
    1634:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    1636:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    1638:	9f02      	ldr	r7, [sp, #8]
    163a:	6aad      	ldr	r5, [r5, #40]	; 0x28
    163c:	404e      	eors	r6, r1
    163e:	4065      	eors	r5, r4
    1640:	0c39      	lsrs	r1, r7, #16
    1642:	68d4      	ldr	r4, [r2, #12]
    1644:	4001      	ands	r1, r0
    1646:	4065      	eors	r5, r4
    1648:	0089      	lsls	r1, r1, #2
    164a:	0a3c      	lsrs	r4, r7, #8
    164c:	4441      	add	r1, r8
    164e:	4004      	ands	r4, r0
    1650:	6a89      	ldr	r1, [r1, #40]	; 0x28
    1652:	00a4      	lsls	r4, r4, #2
    1654:	444c      	add	r4, r9
    1656:	4003      	ands	r3, r0
    1658:	4071      	eors	r1, r6
    165a:	009b      	lsls	r3, r3, #2
    165c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    165e:	4443      	add	r3, r8
    1660:	4075      	eors	r5, r6
    1662:	6a9e      	ldr	r6, [r3, #40]	; 0x28
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
    1664:	4664      	mov	r4, ip
    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
    1666:	0033      	movs	r3, r6
    1668:	406b      	eors	r3, r5
    166a:	4699      	mov	r9, r3
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
    166c:	4b47      	ldr	r3, [pc, #284]	; (178c <mbedtls_internal_aes_encrypt+0x46c>)
    166e:	4004      	ands	r4, r0
    1670:	3328      	adds	r3, #40	; 0x28
    1672:	5d1d      	ldrb	r5, [r3, r4]
    X0 = *RK++ ^ \
    1674:	6914      	ldr	r4, [r2, #16]
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
    1676:	9e01      	ldr	r6, [sp, #4]
    X0 = *RK++ ^ \
    1678:	4065      	eors	r5, r4
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
    167a:	464c      	mov	r4, r9
    167c:	0e24      	lsrs	r4, r4, #24
    167e:	5d1c      	ldrb	r4, [r3, r4]
    1680:	0624      	lsls	r4, r4, #24
    X0 = *RK++ ^ \
    1682:	4065      	eors	r5, r4
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
    1684:	0a34      	lsrs	r4, r6, #8
    1686:	4004      	ands	r4, r0
    1688:	5d1c      	ldrb	r4, [r3, r4]
    168a:	0224      	lsls	r4, r4, #8
    X0 = *RK++ ^ \
    168c:	4065      	eors	r5, r4
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
    168e:	0c0c      	lsrs	r4, r1, #16
    1690:	4004      	ands	r4, r0
    1692:	5d1c      	ldrb	r4, [r3, r4]
    1694:	0424      	lsls	r4, r4, #16
    X0 = *RK++ ^ \
    1696:	4065      	eors	r5, r4
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
    1698:	0004      	movs	r4, r0
    169a:	4034      	ands	r4, r6
    169c:	5d1f      	ldrb	r7, [r3, r4]
    X1 = *RK++ ^ \
    169e:	6954      	ldr	r4, [r2, #20]
    X2 = *RK++ ^ \
    16a0:	6996      	ldr	r6, [r2, #24]
    X1 = *RK++ ^ \
    16a2:	4067      	eors	r7, r4
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
    16a4:	4664      	mov	r4, ip
    16a6:	0e24      	lsrs	r4, r4, #24
    16a8:	5d1c      	ldrb	r4, [r3, r4]
    X2 = *RK++ ^ \
    16aa:	9602      	str	r6, [sp, #8]
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
    16ac:	0624      	lsls	r4, r4, #24
    X1 = *RK++ ^ \
    16ae:	4067      	eors	r7, r4
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
    16b0:	0a0c      	lsrs	r4, r1, #8
    16b2:	4004      	ands	r4, r0
    16b4:	5d1c      	ldrb	r4, [r3, r4]
    X3 = *RK++ ^ \
    16b6:	69d2      	ldr	r2, [r2, #28]
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
    16b8:	0224      	lsls	r4, r4, #8
    X1 = *RK++ ^ \
    16ba:	4067      	eors	r7, r4
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
    16bc:	464c      	mov	r4, r9
    16be:	0c24      	lsrs	r4, r4, #16
    16c0:	4004      	ands	r4, r0
    16c2:	5d1c      	ldrb	r4, [r3, r4]
    16c4:	0424      	lsls	r4, r4, #16
    X1 = *RK++ ^ \
    16c6:	4067      	eors	r7, r4
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
    16c8:	0004      	movs	r4, r0
    16ca:	400c      	ands	r4, r1
    16cc:	5d1c      	ldrb	r4, [r3, r4]
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
    16ce:	0e09      	lsrs	r1, r1, #24
    X2 = *RK++ ^ \
    16d0:	4066      	eors	r6, r4
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
    16d2:	9c01      	ldr	r4, [sp, #4]
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
    16d4:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
    16d6:	0e24      	lsrs	r4, r4, #24
    16d8:	5d1c      	ldrb	r4, [r3, r4]
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
    16da:	0609      	lsls	r1, r1, #24
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
    16dc:	0624      	lsls	r4, r4, #24
    X2 = *RK++ ^ \
    16de:	4074      	eors	r4, r6
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
    16e0:	464e      	mov	r6, r9
    16e2:	0a36      	lsrs	r6, r6, #8
    16e4:	4006      	ands	r6, r0
    16e6:	5d9e      	ldrb	r6, [r3, r6]
    16e8:	0236      	lsls	r6, r6, #8
    X2 = *RK++ ^ \
    16ea:	4074      	eors	r4, r6
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
    16ec:	4666      	mov	r6, ip
    16ee:	0c36      	lsrs	r6, r6, #16
    16f0:	4006      	ands	r6, r0
    16f2:	5d9e      	ldrb	r6, [r3, r6]
    16f4:	0436      	lsls	r6, r6, #16
    X2 = *RK++ ^ \
    16f6:	4074      	eors	r4, r6
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
    16f8:	464e      	mov	r6, r9
    16fa:	4006      	ands	r6, r0
    16fc:	5d9e      	ldrb	r6, [r3, r6]
    X3 = *RK++ ^ \
    16fe:	4056      	eors	r6, r2
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
    1700:	4662      	mov	r2, ip
    X3 = *RK++ ^ \
    1702:	404e      	eors	r6, r1
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
    1704:	0a11      	lsrs	r1, r2, #8
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
    1706:	9a01      	ldr	r2, [sp, #4]
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
    1708:	4001      	ands	r1, r0
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
    170a:	0c12      	lsrs	r2, r2, #16
    170c:	4010      	ands	r0, r2
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
    170e:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
    1710:	5c1b      	ldrb	r3, [r3, r0]
}
    1712:	2000      	movs	r0, #0
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
    1714:	0209      	lsls	r1, r1, #8
    X3 = *RK++ ^ \
    1716:	4071      	eors	r1, r6
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
    1718:	041b      	lsls	r3, r3, #16
    X3 = *RK++ ^ \
    171a:	404b      	eors	r3, r1
    PUT_UINT32_LE( X0, output,  0 );
    171c:	9906      	ldr	r1, [sp, #24]
    171e:	0a2a      	lsrs	r2, r5, #8
    1720:	704a      	strb	r2, [r1, #1]
    1722:	0c2a      	lsrs	r2, r5, #16
    1724:	708a      	strb	r2, [r1, #2]
    PUT_UINT32_LE( X1, output,  4 );
    1726:	0a3a      	lsrs	r2, r7, #8
    1728:	714a      	strb	r2, [r1, #5]
    172a:	0c3a      	lsrs	r2, r7, #16
    172c:	718a      	strb	r2, [r1, #6]
    PUT_UINT32_LE( X2, output,  8 );
    172e:	0a22      	lsrs	r2, r4, #8
    1730:	724a      	strb	r2, [r1, #9]
    1732:	0c22      	lsrs	r2, r4, #16
    PUT_UINT32_LE( X0, output,  0 );
    1734:	700d      	strb	r5, [r1, #0]
    PUT_UINT32_LE( X1, output,  4 );
    1736:	710f      	strb	r7, [r1, #4]
    PUT_UINT32_LE( X2, output,  8 );
    1738:	720c      	strb	r4, [r1, #8]
    173a:	728a      	strb	r2, [r1, #10]
    PUT_UINT32_LE( X0, output,  0 );
    173c:	0e2d      	lsrs	r5, r5, #24
    PUT_UINT32_LE( X3, output, 12 );
    173e:	0a1a      	lsrs	r2, r3, #8
    PUT_UINT32_LE( X1, output,  4 );
    1740:	0e3f      	lsrs	r7, r7, #24
    PUT_UINT32_LE( X2, output,  8 );
    1742:	0e24      	lsrs	r4, r4, #24
    PUT_UINT32_LE( X0, output,  0 );
    1744:	70cd      	strb	r5, [r1, #3]
    PUT_UINT32_LE( X1, output,  4 );
    1746:	71cf      	strb	r7, [r1, #7]
    PUT_UINT32_LE( X2, output,  8 );
    1748:	72cc      	strb	r4, [r1, #11]
    PUT_UINT32_LE( X3, output, 12 );
    174a:	730b      	strb	r3, [r1, #12]
    174c:	734a      	strb	r2, [r1, #13]
    174e:	0c1a      	lsrs	r2, r3, #16
    1750:	0e1b      	lsrs	r3, r3, #24
    1752:	738a      	strb	r2, [r1, #14]
    1754:	73cb      	strb	r3, [r1, #15]
}
    1756:	b009      	add	sp, #36	; 0x24
    1758:	bc3c      	pop	{r2, r3, r4, r5}
    175a:	4690      	mov	r8, r2
    175c:	4699      	mov	r9, r3
    175e:	46a2      	mov	sl, r4
    1760:	46ab      	mov	fp, r5
    1762:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1764:	4a04      	ldr	r2, [pc, #16]	; (1778 <mbedtls_internal_aes_encrypt+0x458>)
    1766:	4693      	mov	fp, r2
    1768:	4a04      	ldr	r2, [pc, #16]	; (177c <mbedtls_internal_aes_encrypt+0x45c>)
    176a:	4692      	mov	sl, r2
    176c:	4a04      	ldr	r2, [pc, #16]	; (1780 <mbedtls_internal_aes_encrypt+0x460>)
    176e:	4691      	mov	r9, r2
    1770:	4a04      	ldr	r2, [pc, #16]	; (1784 <mbedtls_internal_aes_encrypt+0x464>)
    1772:	4690      	mov	r8, r2
    1774:	e711      	b.n	159a <mbedtls_internal_aes_encrypt+0x27a>
    1776:	46c0      	nop			; (mov r8, r8)
    1778:	0000312c 	.word	0x0000312c
    177c:	0000352c 	.word	0x0000352c
    1780:	0000392c 	.word	0x0000392c
    1784:	00003d2c 	.word	0x00003d2c
    1788:	07ffffff 	.word	0x07ffffff
    178c:	0000202c 	.word	0x0000202c

00001790 <mbedtls_internal_aes_decrypt>:
{
    1790:	b5f0      	push	{r4, r5, r6, r7, lr}
    1792:	464e      	mov	r6, r9
    1794:	4645      	mov	r5, r8
    1796:	46de      	mov	lr, fp
    1798:	4657      	mov	r7, sl
    179a:	b5e0      	push	{r5, r6, r7, lr}
    179c:	b089      	sub	sp, #36	; 0x24
    179e:	9206      	str	r2, [sp, #24]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    17a0:	784a      	ldrb	r2, [r1, #1]
    17a2:	780b      	ldrb	r3, [r1, #0]
    17a4:	0212      	lsls	r2, r2, #8
    17a6:	431a      	orrs	r2, r3
    17a8:	788b      	ldrb	r3, [r1, #2]
    RK = ctx->rk;
    17aa:	6845      	ldr	r5, [r0, #4]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    17ac:	041b      	lsls	r3, r3, #16
    17ae:	431a      	orrs	r2, r3
    17b0:	78cb      	ldrb	r3, [r1, #3]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    17b2:	7a4c      	ldrb	r4, [r1, #9]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    17b4:	061b      	lsls	r3, r3, #24
    17b6:	4313      	orrs	r3, r2
    17b8:	682a      	ldr	r2, [r5, #0]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    17ba:	0224      	lsls	r4, r4, #8
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    17bc:	405a      	eors	r2, r3
    17be:	9202      	str	r2, [sp, #8]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    17c0:	794a      	ldrb	r2, [r1, #5]
    17c2:	790b      	ldrb	r3, [r1, #4]
    17c4:	0212      	lsls	r2, r2, #8
    17c6:	431a      	orrs	r2, r3
    17c8:	798b      	ldrb	r3, [r1, #6]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
    17ca:	7b4e      	ldrb	r6, [r1, #13]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    17cc:	041b      	lsls	r3, r3, #16
    17ce:	431a      	orrs	r2, r3
    17d0:	79cb      	ldrb	r3, [r1, #7]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
    17d2:	0236      	lsls	r6, r6, #8
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    17d4:	061b      	lsls	r3, r3, #24
    17d6:	4313      	orrs	r3, r2
    17d8:	686a      	ldr	r2, [r5, #4]
    17da:	4053      	eors	r3, r2
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    17dc:	7a0a      	ldrb	r2, [r1, #8]
    17de:	4314      	orrs	r4, r2
    17e0:	7a8a      	ldrb	r2, [r1, #10]
    17e2:	0412      	lsls	r2, r2, #16
    17e4:	4314      	orrs	r4, r2
    17e6:	7aca      	ldrb	r2, [r1, #11]
    17e8:	0612      	lsls	r2, r2, #24
    17ea:	4322      	orrs	r2, r4
    17ec:	68ac      	ldr	r4, [r5, #8]
    17ee:	4062      	eors	r2, r4
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
    17f0:	7b0c      	ldrb	r4, [r1, #12]
    17f2:	4326      	orrs	r6, r4
    17f4:	7b8c      	ldrb	r4, [r1, #14]
    17f6:	0424      	lsls	r4, r4, #16
    17f8:	4326      	orrs	r6, r4
    17fa:	7bcc      	ldrb	r4, [r1, #15]
    17fc:	2110      	movs	r1, #16
    17fe:	468c      	mov	ip, r1
    1800:	44ac      	add	ip, r5
    1802:	4661      	mov	r1, ip
    1804:	0624      	lsls	r4, r4, #24
    1806:	9105      	str	r1, [sp, #20]
    1808:	68e9      	ldr	r1, [r5, #12]
    180a:	4334      	orrs	r4, r6
    180c:	404c      	eors	r4, r1
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    180e:	6801      	ldr	r1, [r0, #0]
    1810:	1049      	asrs	r1, r1, #1
    1812:	9107      	str	r1, [sp, #28]
    1814:	3901      	subs	r1, #1
    1816:	1e08      	subs	r0, r1, #0
    1818:	9103      	str	r1, [sp, #12]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
    181a:	6929      	ldr	r1, [r5, #16]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    181c:	dc00      	bgt.n	1820 <mbedtls_internal_aes_decrypt+0x90>
    181e:	e1d9      	b.n	1bd4 <mbedtls_internal_aes_decrypt+0x444>
    1820:	9805      	ldr	r0, [sp, #20]
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
    1822:	27ff      	movs	r7, #255	; 0xff
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    1824:	4684      	mov	ip, r0
    1826:	48f0      	ldr	r0, [pc, #960]	; (1be8 <mbedtls_internal_aes_decrypt+0x458>)
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
    1828:	4666      	mov	r6, ip
    182a:	4683      	mov	fp, r0
    182c:	48ef      	ldr	r0, [pc, #956]	; (1bec <mbedtls_internal_aes_decrypt+0x45c>)
    182e:	9301      	str	r3, [sp, #4]
    1830:	4682      	mov	sl, r0
    1832:	48ef      	ldr	r0, [pc, #956]	; (1bf0 <mbedtls_internal_aes_decrypt+0x460>)
    1834:	4681      	mov	r9, r0
    1836:	48ef      	ldr	r0, [pc, #956]	; (1bf4 <mbedtls_internal_aes_decrypt+0x464>)
    1838:	4680      	mov	r8, r0
    183a:	9b01      	ldr	r3, [sp, #4]
    183c:	9802      	ldr	r0, [sp, #8]
    183e:	0e1d      	lsrs	r5, r3, #24
    1840:	4038      	ands	r0, r7
    1842:	0080      	lsls	r0, r0, #2
    1844:	00ad      	lsls	r5, r5, #2
    1846:	4458      	add	r0, fp
    1848:	4455      	add	r5, sl
    184a:	6aad      	ldr	r5, [r5, #40]	; 0x28
    184c:	6a80      	ldr	r0, [r0, #40]	; 0x28
    184e:	4068      	eors	r0, r5
    1850:	0a25      	lsrs	r5, r4, #8
    1852:	403d      	ands	r5, r7
    1854:	00ad      	lsls	r5, r5, #2
    1856:	444d      	add	r5, r9
    1858:	4041      	eors	r1, r0
    185a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    185c:	003d      	movs	r5, r7
    185e:	4041      	eors	r1, r0
    1860:	0c10      	lsrs	r0, r2, #16
    1862:	4038      	ands	r0, r7
    1864:	0080      	lsls	r0, r0, #2
    1866:	4440      	add	r0, r8
    1868:	6a80      	ldr	r0, [r0, #40]	; 0x28
    186a:	401d      	ands	r5, r3
    186c:	4041      	eors	r1, r0
    186e:	00a8      	lsls	r0, r5, #2
    1870:	0e15      	lsrs	r5, r2, #24
    1872:	00ad      	lsls	r5, r5, #2
    1874:	4458      	add	r0, fp
    1876:	4455      	add	r5, sl
    1878:	6aad      	ldr	r5, [r5, #40]	; 0x28
    187a:	6a80      	ldr	r0, [r0, #40]	; 0x28
    187c:	6873      	ldr	r3, [r6, #4]
    187e:	4068      	eors	r0, r5
    1880:	9d02      	ldr	r5, [sp, #8]
    1882:	4058      	eors	r0, r3
    1884:	0a2d      	lsrs	r5, r5, #8
    1886:	403d      	ands	r5, r7
    1888:	00ad      	lsls	r5, r5, #2
    188a:	444d      	add	r5, r9
    188c:	6aad      	ldr	r5, [r5, #40]	; 0x28
    188e:	4068      	eors	r0, r5
    1890:	0c25      	lsrs	r5, r4, #16
    1892:	403d      	ands	r5, r7
    1894:	00ad      	lsls	r5, r5, #2
    1896:	4445      	add	r5, r8
    1898:	6aad      	ldr	r5, [r5, #40]	; 0x28
    189a:	4068      	eors	r0, r5
    189c:	003d      	movs	r5, r7
    189e:	4015      	ands	r5, r2
    18a0:	00ad      	lsls	r5, r5, #2
    18a2:	46ac      	mov	ip, r5
    18a4:	44dc      	add	ip, fp
    18a6:	4663      	mov	r3, ip
    18a8:	0e25      	lsrs	r5, r4, #24
    18aa:	00ad      	lsls	r5, r5, #2
    18ac:	4455      	add	r5, sl
    18ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    18b0:	6aad      	ldr	r5, [r5, #40]	; 0x28
    18b2:	9004      	str	r0, [sp, #16]
    18b4:	405d      	eors	r5, r3
    18b6:	68b3      	ldr	r3, [r6, #8]
    18b8:	403c      	ands	r4, r7
    18ba:	405d      	eors	r5, r3
    18bc:	9b01      	ldr	r3, [sp, #4]
    18be:	00a4      	lsls	r4, r4, #2
    18c0:	0a1b      	lsrs	r3, r3, #8
    18c2:	0018      	movs	r0, r3
    18c4:	4038      	ands	r0, r7
    18c6:	0083      	lsls	r3, r0, #2
    18c8:	469c      	mov	ip, r3
    18ca:	44cc      	add	ip, r9
    18cc:	4663      	mov	r3, ip
    18ce:	9802      	ldr	r0, [sp, #8]
    18d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    18d2:	445c      	add	r4, fp
    18d4:	405d      	eors	r5, r3
    18d6:	0c03      	lsrs	r3, r0, #16
    18d8:	403b      	ands	r3, r7
    18da:	009b      	lsls	r3, r3, #2
    18dc:	469c      	mov	ip, r3
    18de:	44c4      	add	ip, r8
    18e0:	4663      	mov	r3, ip
    18e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    18e4:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    18e6:	405d      	eors	r5, r3
    18e8:	0e03      	lsrs	r3, r0, #24
    18ea:	009b      	lsls	r3, r3, #2
    18ec:	469c      	mov	ip, r3
    18ee:	44d4      	add	ip, sl
    18f0:	4663      	mov	r3, ip
    18f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    18f4:	0a12      	lsrs	r2, r2, #8
    18f6:	405c      	eors	r4, r3
    18f8:	68f3      	ldr	r3, [r6, #12]
    18fa:	403a      	ands	r2, r7
    18fc:	405c      	eors	r4, r3
    18fe:	9b01      	ldr	r3, [sp, #4]
    1900:	0092      	lsls	r2, r2, #2
    1902:	0c1b      	lsrs	r3, r3, #16
    1904:	403b      	ands	r3, r7
    1906:	444a      	add	r2, r9
    1908:	009b      	lsls	r3, r3, #2
    190a:	6a92      	ldr	r2, [r2, #40]	; 0x28
    190c:	4443      	add	r3, r8
    190e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1910:	4054      	eors	r4, r2
    1912:	405c      	eors	r4, r3
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    1914:	003b      	movs	r3, r7
    1916:	9804      	ldr	r0, [sp, #16]
    1918:	400b      	ands	r3, r1
    191a:	0e02      	lsrs	r2, r0, #24
    191c:	009b      	lsls	r3, r3, #2
    191e:	0092      	lsls	r2, r2, #2
    1920:	445b      	add	r3, fp
    1922:	4452      	add	r2, sl
    1924:	6a92      	ldr	r2, [r2, #40]	; 0x28
    1926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1928:	4053      	eors	r3, r2
    192a:	6932      	ldr	r2, [r6, #16]
    192c:	4053      	eors	r3, r2
    192e:	0a22      	lsrs	r2, r4, #8
    1930:	403a      	ands	r2, r7
    1932:	0092      	lsls	r2, r2, #2
    1934:	444a      	add	r2, r9
    1936:	6a92      	ldr	r2, [r2, #40]	; 0x28
    1938:	4053      	eors	r3, r2
    193a:	0c2a      	lsrs	r2, r5, #16
    193c:	403a      	ands	r2, r7
    193e:	0092      	lsls	r2, r2, #2
    1940:	4442      	add	r2, r8
    1942:	6a92      	ldr	r2, [r2, #40]	; 0x28
    1944:	4053      	eors	r3, r2
    1946:	9302      	str	r3, [sp, #8]
    1948:	003b      	movs	r3, r7
    194a:	0e2a      	lsrs	r2, r5, #24
    194c:	4003      	ands	r3, r0
    194e:	009b      	lsls	r3, r3, #2
    1950:	0092      	lsls	r2, r2, #2
    1952:	445b      	add	r3, fp
    1954:	4452      	add	r2, sl
    1956:	6a92      	ldr	r2, [r2, #40]	; 0x28
    1958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    195a:	4053      	eors	r3, r2
    195c:	6972      	ldr	r2, [r6, #20]
    195e:	4053      	eors	r3, r2
    1960:	0a0a      	lsrs	r2, r1, #8
    1962:	403a      	ands	r2, r7
    1964:	0092      	lsls	r2, r2, #2
    1966:	444a      	add	r2, r9
    1968:	6a92      	ldr	r2, [r2, #40]	; 0x28
    196a:	4053      	eors	r3, r2
    196c:	0c22      	lsrs	r2, r4, #16
    196e:	403a      	ands	r2, r7
    1970:	0092      	lsls	r2, r2, #2
    1972:	4442      	add	r2, r8
    1974:	6a92      	ldr	r2, [r2, #40]	; 0x28
    1976:	4053      	eors	r3, r2
    1978:	003a      	movs	r2, r7
    197a:	402a      	ands	r2, r5
    197c:	0092      	lsls	r2, r2, #2
    197e:	445a      	add	r2, fp
    1980:	4694      	mov	ip, r2
    1982:	9301      	str	r3, [sp, #4]
    1984:	4663      	mov	r3, ip
    1986:	0e22      	lsrs	r2, r4, #24
    1988:	0092      	lsls	r2, r2, #2
    198a:	4452      	add	r2, sl
    198c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    198e:	6a92      	ldr	r2, [r2, #40]	; 0x28
    1990:	403c      	ands	r4, r7
    1992:	405a      	eors	r2, r3
    1994:	69b3      	ldr	r3, [r6, #24]
    1996:	00a4      	lsls	r4, r4, #2
    1998:	405a      	eors	r2, r3
    199a:	0a03      	lsrs	r3, r0, #8
    199c:	403b      	ands	r3, r7
    199e:	009b      	lsls	r3, r3, #2
    19a0:	469c      	mov	ip, r3
    19a2:	44cc      	add	ip, r9
    19a4:	4663      	mov	r3, ip
    19a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    19a8:	0a2d      	lsrs	r5, r5, #8
    19aa:	405a      	eors	r2, r3
    19ac:	0c0b      	lsrs	r3, r1, #16
    19ae:	403b      	ands	r3, r7
    19b0:	009b      	lsls	r3, r3, #2
    19b2:	469c      	mov	ip, r3
    19b4:	44c4      	add	ip, r8
    19b6:	4663      	mov	r3, ip
    19b8:	0e09      	lsrs	r1, r1, #24
    19ba:	0089      	lsls	r1, r1, #2
    19bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    19be:	445c      	add	r4, fp
    19c0:	4451      	add	r1, sl
    19c2:	403d      	ands	r5, r7
    19c4:	6a89      	ldr	r1, [r1, #40]	; 0x28
    19c6:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    19c8:	00ad      	lsls	r5, r5, #2
    19ca:	0c00      	lsrs	r0, r0, #16
    19cc:	405a      	eors	r2, r3
    19ce:	444d      	add	r5, r9
    19d0:	69f3      	ldr	r3, [r6, #28]
    19d2:	4038      	ands	r0, r7
    19d4:	404c      	eors	r4, r1
    19d6:	0080      	lsls	r0, r0, #2
    19d8:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    19da:	4440      	add	r0, r8
    19dc:	405c      	eors	r4, r3
    19de:	404c      	eors	r4, r1
    19e0:	6a81      	ldr	r1, [r0, #40]	; 0x28
    19e2:	3620      	adds	r6, #32
    19e4:	404c      	eors	r4, r1
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    19e6:	9903      	ldr	r1, [sp, #12]
    19e8:	3901      	subs	r1, #1
    19ea:	1e08      	subs	r0, r1, #0
    19ec:	9103      	str	r1, [sp, #12]
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    19ee:	6831      	ldr	r1, [r6, #0]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    19f0:	d000      	beq.n	19f4 <mbedtls_internal_aes_decrypt+0x264>
    19f2:	e722      	b.n	183a <mbedtls_internal_aes_decrypt+0xaa>
    19f4:	4d80      	ldr	r5, [pc, #512]	; (1bf8 <mbedtls_internal_aes_decrypt+0x468>)
    19f6:	9807      	ldr	r0, [sp, #28]
    19f8:	46ac      	mov	ip, r5
    19fa:	9d05      	ldr	r5, [sp, #20]
    19fc:	4460      	add	r0, ip
    19fe:	46ac      	mov	ip, r5
    1a00:	0140      	lsls	r0, r0, #5
    1a02:	4484      	add	ip, r0
    1a04:	4660      	mov	r0, ip
    1a06:	9b01      	ldr	r3, [sp, #4]
    1a08:	9005      	str	r0, [sp, #20]
    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
    1a0a:	20ff      	movs	r0, #255	; 0xff
    1a0c:	9d02      	ldr	r5, [sp, #8]
    1a0e:	0e1e      	lsrs	r6, r3, #24
    1a10:	4005      	ands	r5, r0
    1a12:	00ad      	lsls	r5, r5, #2
    1a14:	00b6      	lsls	r6, r6, #2
    1a16:	445d      	add	r5, fp
    1a18:	4456      	add	r6, sl
    1a1a:	0a27      	lsrs	r7, r4, #8
    1a1c:	6ab6      	ldr	r6, [r6, #40]	; 0x28
    1a1e:	6aad      	ldr	r5, [r5, #40]	; 0x28
    1a20:	4007      	ands	r7, r0
    1a22:	00bf      	lsls	r7, r7, #2
    1a24:	4075      	eors	r5, r6
    1a26:	444f      	add	r7, r9
    1a28:	4069      	eors	r1, r5
    1a2a:	6abd      	ldr	r5, [r7, #40]	; 0x28
    1a2c:	9e02      	ldr	r6, [sp, #8]
    1a2e:	4069      	eors	r1, r5
    1a30:	0c15      	lsrs	r5, r2, #16
    1a32:	4005      	ands	r5, r0
    1a34:	00ad      	lsls	r5, r5, #2
    1a36:	4445      	add	r5, r8
    1a38:	6aad      	ldr	r5, [r5, #40]	; 0x28
    1a3a:	4069      	eors	r1, r5
    1a3c:	468c      	mov	ip, r1
    1a3e:	0001      	movs	r1, r0
    1a40:	4019      	ands	r1, r3
    1a42:	008d      	lsls	r5, r1, #2
    1a44:	0e11      	lsrs	r1, r2, #24
    1a46:	0089      	lsls	r1, r1, #2
    1a48:	445d      	add	r5, fp
    1a4a:	4451      	add	r1, sl
    1a4c:	6a89      	ldr	r1, [r1, #40]	; 0x28
    1a4e:	6aad      	ldr	r5, [r5, #40]	; 0x28
    1a50:	404d      	eors	r5, r1
    1a52:	9905      	ldr	r1, [sp, #20]
    1a54:	684f      	ldr	r7, [r1, #4]
    1a56:	0a31      	lsrs	r1, r6, #8
    1a58:	4001      	ands	r1, r0
    1a5a:	0089      	lsls	r1, r1, #2
    1a5c:	4449      	add	r1, r9
    1a5e:	6a89      	ldr	r1, [r1, #40]	; 0x28
    1a60:	407d      	eors	r5, r7
    1a62:	404d      	eors	r5, r1
    1a64:	0c21      	lsrs	r1, r4, #16
    1a66:	4001      	ands	r1, r0
    1a68:	0089      	lsls	r1, r1, #2
    1a6a:	4441      	add	r1, r8
    1a6c:	6a89      	ldr	r1, [r1, #40]	; 0x28
    1a6e:	0e27      	lsrs	r7, r4, #24
    1a70:	404d      	eors	r5, r1
    1a72:	0001      	movs	r1, r0
    1a74:	4011      	ands	r1, r2
    1a76:	0089      	lsls	r1, r1, #2
    1a78:	00bf      	lsls	r7, r7, #2
    1a7a:	4459      	add	r1, fp
    1a7c:	4457      	add	r7, sl
    1a7e:	9501      	str	r5, [sp, #4]
    1a80:	6a8e      	ldr	r6, [r1, #40]	; 0x28
    1a82:	9d05      	ldr	r5, [sp, #20]
    1a84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    1a86:	0a1f      	lsrs	r7, r3, #8
    1a88:	4007      	ands	r7, r0
    1a8a:	404e      	eors	r6, r1
    1a8c:	00bf      	lsls	r7, r7, #2
    1a8e:	68a9      	ldr	r1, [r5, #8]
    1a90:	444f      	add	r7, r9
    1a92:	9103      	str	r1, [sp, #12]
    1a94:	404e      	eors	r6, r1
    1a96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    1a98:	9f02      	ldr	r7, [sp, #8]
    1a9a:	404e      	eors	r6, r1
    1a9c:	0c39      	lsrs	r1, r7, #16
    1a9e:	4001      	ands	r1, r0
    1aa0:	0089      	lsls	r1, r1, #2
    1aa2:	4441      	add	r1, r8
    1aa4:	6a89      	ldr	r1, [r1, #40]	; 0x28
    1aa6:	4004      	ands	r4, r0
    1aa8:	4071      	eors	r1, r6
    1aaa:	0e3e      	lsrs	r6, r7, #24
    1aac:	00a4      	lsls	r4, r4, #2
    1aae:	00b6      	lsls	r6, r6, #2
    1ab0:	445c      	add	r4, fp
    1ab2:	4456      	add	r6, sl
    1ab4:	6ab6      	ldr	r6, [r6, #40]	; 0x28
    1ab6:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    1ab8:	0a12      	lsrs	r2, r2, #8
    1aba:	4002      	ands	r2, r0
    1abc:	4074      	eors	r4, r6
    1abe:	0092      	lsls	r2, r2, #2
    1ac0:	68ee      	ldr	r6, [r5, #12]
    1ac2:	0c1b      	lsrs	r3, r3, #16
    1ac4:	444a      	add	r2, r9
    1ac6:	4003      	ands	r3, r0
    1ac8:	4074      	eors	r4, r6
    1aca:	009b      	lsls	r3, r3, #2
    1acc:	6a96      	ldr	r6, [r2, #40]	; 0x28
    1ace:	4443      	add	r3, r8
    1ad0:	4074      	eors	r4, r6
    1ad2:	6a9e      	ldr	r6, [r3, #40]	; 0x28
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
    1ad4:	4662      	mov	r2, ip
    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
    1ad6:	0033      	movs	r3, r6
    1ad8:	4063      	eors	r3, r4
    1ada:	4699      	mov	r9, r3
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
    1adc:	4b47      	ldr	r3, [pc, #284]	; (1bfc <mbedtls_internal_aes_decrypt+0x46c>)
    1ade:	4002      	ands	r2, r0
    1ae0:	3328      	adds	r3, #40	; 0x28
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
    1ae2:	9e01      	ldr	r6, [sp, #4]
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
    1ae4:	5c9c      	ldrb	r4, [r3, r2]
    X0 = *RK++ ^ \
    1ae6:	692a      	ldr	r2, [r5, #16]
    1ae8:	4054      	eors	r4, r2
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
    1aea:	0e32      	lsrs	r2, r6, #24
    1aec:	5c9a      	ldrb	r2, [r3, r2]
    1aee:	0612      	lsls	r2, r2, #24
    X0 = *RK++ ^ \
    1af0:	4054      	eors	r4, r2
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
    1af2:	464a      	mov	r2, r9
    1af4:	0a12      	lsrs	r2, r2, #8
    1af6:	4002      	ands	r2, r0
    1af8:	5c9a      	ldrb	r2, [r3, r2]
    1afa:	0212      	lsls	r2, r2, #8
    X0 = *RK++ ^ \
    1afc:	4054      	eors	r4, r2
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
    1afe:	0c0a      	lsrs	r2, r1, #16
    1b00:	4002      	ands	r2, r0
    1b02:	5c9a      	ldrb	r2, [r3, r2]
    1b04:	0412      	lsls	r2, r2, #16
    X0 = *RK++ ^ \
    1b06:	4054      	eors	r4, r2
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
    1b08:	0002      	movs	r2, r0
    1b0a:	4032      	ands	r2, r6
    1b0c:	5c9f      	ldrb	r7, [r3, r2]
    X1 = *RK++ ^ \
    1b0e:	696a      	ldr	r2, [r5, #20]
    X2 = *RK++ ^ \
    1b10:	69ae      	ldr	r6, [r5, #24]
    X1 = *RK++ ^ \
    1b12:	4057      	eors	r7, r2
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
    1b14:	0e0a      	lsrs	r2, r1, #24
    1b16:	5c9a      	ldrb	r2, [r3, r2]
    X2 = *RK++ ^ \
    1b18:	9602      	str	r6, [sp, #8]
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
    1b1a:	0612      	lsls	r2, r2, #24
    X1 = *RK++ ^ \
    1b1c:	4057      	eors	r7, r2
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
    1b1e:	4662      	mov	r2, ip
    1b20:	0a12      	lsrs	r2, r2, #8
    1b22:	4002      	ands	r2, r0
    1b24:	5c9a      	ldrb	r2, [r3, r2]
    X3 = *RK++ ^ \
    1b26:	69ed      	ldr	r5, [r5, #28]
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
    1b28:	0212      	lsls	r2, r2, #8
    X1 = *RK++ ^ \
    1b2a:	4057      	eors	r7, r2
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
    1b2c:	464a      	mov	r2, r9
    1b2e:	0c12      	lsrs	r2, r2, #16
    1b30:	4002      	ands	r2, r0
    1b32:	5c9a      	ldrb	r2, [r3, r2]
    1b34:	0412      	lsls	r2, r2, #16
    X1 = *RK++ ^ \
    1b36:	4057      	eors	r7, r2
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
    1b38:	0002      	movs	r2, r0
    1b3a:	400a      	ands	r2, r1
    1b3c:	5c9a      	ldrb	r2, [r3, r2]
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
    1b3e:	0a09      	lsrs	r1, r1, #8
    X2 = *RK++ ^ \
    1b40:	4056      	eors	r6, r2
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
    1b42:	464a      	mov	r2, r9
    1b44:	0e12      	lsrs	r2, r2, #24
    1b46:	5c9a      	ldrb	r2, [r3, r2]
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
    1b48:	4001      	ands	r1, r0
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
    1b4a:	0612      	lsls	r2, r2, #24
    X2 = *RK++ ^ \
    1b4c:	4072      	eors	r2, r6
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
    1b4e:	9e01      	ldr	r6, [sp, #4]
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
    1b50:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
    1b52:	0a36      	lsrs	r6, r6, #8
    1b54:	4006      	ands	r6, r0
    1b56:	5d9e      	ldrb	r6, [r3, r6]
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
    1b58:	0209      	lsls	r1, r1, #8
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
    1b5a:	0236      	lsls	r6, r6, #8
    X2 = *RK++ ^ \
    1b5c:	4072      	eors	r2, r6
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
    1b5e:	4666      	mov	r6, ip
    1b60:	0c36      	lsrs	r6, r6, #16
    1b62:	4006      	ands	r6, r0
    1b64:	5d9e      	ldrb	r6, [r3, r6]
    1b66:	0436      	lsls	r6, r6, #16
    X2 = *RK++ ^ \
    1b68:	4072      	eors	r2, r6
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
    1b6a:	464e      	mov	r6, r9
    1b6c:	4006      	ands	r6, r0
    1b6e:	5d9e      	ldrb	r6, [r3, r6]
    X3 = *RK++ ^ \
    1b70:	406e      	eors	r6, r5
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
    1b72:	4665      	mov	r5, ip
    1b74:	0e2d      	lsrs	r5, r5, #24
    1b76:	5d5d      	ldrb	r5, [r3, r5]
    1b78:	062d      	lsls	r5, r5, #24
    X3 = *RK++ ^ \
    1b7a:	406e      	eors	r6, r5
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
    1b7c:	9d01      	ldr	r5, [sp, #4]
    X3 = *RK++ ^ \
    1b7e:	4071      	eors	r1, r6
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
    1b80:	0c2d      	lsrs	r5, r5, #16
    1b82:	4028      	ands	r0, r5
    1b84:	5c1b      	ldrb	r3, [r3, r0]
    PUT_UINT32_LE( X0, output,  0 );
    1b86:	9806      	ldr	r0, [sp, #24]
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
    1b88:	041b      	lsls	r3, r3, #16
    X3 = *RK++ ^ \
    1b8a:	404b      	eors	r3, r1
    PUT_UINT32_LE( X0, output,  0 );
    1b8c:	0a21      	lsrs	r1, r4, #8
    1b8e:	7041      	strb	r1, [r0, #1]
    1b90:	0c21      	lsrs	r1, r4, #16
    1b92:	7081      	strb	r1, [r0, #2]
    PUT_UINT32_LE( X1, output,  4 );
    1b94:	0a39      	lsrs	r1, r7, #8
    1b96:	7141      	strb	r1, [r0, #5]
    1b98:	0c39      	lsrs	r1, r7, #16
    1b9a:	7181      	strb	r1, [r0, #6]
    PUT_UINT32_LE( X2, output,  8 );
    1b9c:	0a11      	lsrs	r1, r2, #8
    1b9e:	7202      	strb	r2, [r0, #8]
    1ba0:	7241      	strb	r1, [r0, #9]
    1ba2:	0c11      	lsrs	r1, r2, #16
    1ba4:	0e12      	lsrs	r2, r2, #24
    PUT_UINT32_LE( X0, output,  0 );
    1ba6:	7004      	strb	r4, [r0, #0]
    PUT_UINT32_LE( X1, output,  4 );
    1ba8:	7107      	strb	r7, [r0, #4]
    PUT_UINT32_LE( X2, output,  8 );
    1baa:	72c2      	strb	r2, [r0, #11]
    PUT_UINT32_LE( X0, output,  0 );
    1bac:	0e24      	lsrs	r4, r4, #24
    PUT_UINT32_LE( X3, output, 12 );
    1bae:	0a1a      	lsrs	r2, r3, #8
    PUT_UINT32_LE( X1, output,  4 );
    1bb0:	0e3f      	lsrs	r7, r7, #24
    PUT_UINT32_LE( X0, output,  0 );
    1bb2:	70c4      	strb	r4, [r0, #3]
    PUT_UINT32_LE( X1, output,  4 );
    1bb4:	71c7      	strb	r7, [r0, #7]
    PUT_UINT32_LE( X2, output,  8 );
    1bb6:	7281      	strb	r1, [r0, #10]
    PUT_UINT32_LE( X3, output, 12 );
    1bb8:	7303      	strb	r3, [r0, #12]
    1bba:	7342      	strb	r2, [r0, #13]
    1bbc:	0c1a      	lsrs	r2, r3, #16
    1bbe:	0e1b      	lsrs	r3, r3, #24
    1bc0:	7382      	strb	r2, [r0, #14]
    1bc2:	73c3      	strb	r3, [r0, #15]
}
    1bc4:	2000      	movs	r0, #0
    1bc6:	b009      	add	sp, #36	; 0x24
    1bc8:	bc3c      	pop	{r2, r3, r4, r5}
    1bca:	4690      	mov	r8, r2
    1bcc:	4699      	mov	r9, r3
    1bce:	46a2      	mov	sl, r4
    1bd0:	46ab      	mov	fp, r5
    1bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1bd4:	4804      	ldr	r0, [pc, #16]	; (1be8 <mbedtls_internal_aes_decrypt+0x458>)
    1bd6:	4683      	mov	fp, r0
    1bd8:	4804      	ldr	r0, [pc, #16]	; (1bec <mbedtls_internal_aes_decrypt+0x45c>)
    1bda:	4682      	mov	sl, r0
    1bdc:	4804      	ldr	r0, [pc, #16]	; (1bf0 <mbedtls_internal_aes_decrypt+0x460>)
    1bde:	4681      	mov	r9, r0
    1be0:	4804      	ldr	r0, [pc, #16]	; (1bf4 <mbedtls_internal_aes_decrypt+0x464>)
    1be2:	4680      	mov	r8, r0
    1be4:	e711      	b.n	1a0a <mbedtls_internal_aes_decrypt+0x27a>
    1be6:	46c0      	nop			; (mov r8, r8)
    1be8:	0000212c 	.word	0x0000212c
    1bec:	0000252c 	.word	0x0000252c
    1bf0:	0000292c 	.word	0x0000292c
    1bf4:	00002d2c 	.word	0x00002d2c
    1bf8:	07ffffff 	.word	0x07ffffff
    1bfc:	0000412c 	.word	0x0000412c

00001c00 <mbedtls_aes_crypt_cbc>:
{
    1c00:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c02:	4657      	mov	r7, sl
    1c04:	464e      	mov	r6, r9
    1c06:	4645      	mov	r5, r8
    1c08:	46de      	mov	lr, fp
    1c0a:	b5e0      	push	{r5, r6, r7, lr}
    1c0c:	b085      	sub	sp, #20
    1c0e:	4681      	mov	r9, r0
    1c10:	468a      	mov	sl, r1
    1c12:	0017      	movs	r7, r2
    1c14:	001d      	movs	r5, r3
    1c16:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    1c18:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    if( length % 16 )
    1c1a:	0713      	lsls	r3, r2, #28
    1c1c:	d000      	beq.n	1c20 <mbedtls_aes_crypt_cbc+0x20>
    1c1e:	e0bf      	b.n	1da0 <mbedtls_aes_crypt_cbc+0x1a0>
    if( mode == MBEDTLS_AES_DECRYPT )
    1c20:	2900      	cmp	r1, #0
    1c22:	d05e      	beq.n	1ce2 <mbedtls_aes_crypt_cbc+0xe2>
        while( length > 0 )
    1c24:	2a00      	cmp	r2, #0
    1c26:	d100      	bne.n	1c2a <mbedtls_aes_crypt_cbc+0x2a>
    1c28:	e0b2      	b.n	1d90 <mbedtls_aes_crypt_cbc+0x190>
    1c2a:	4b5f      	ldr	r3, [pc, #380]	; (1da8 <mbedtls_aes_crypt_cbc+0x1a8>)
    1c2c:	4698      	mov	r8, r3
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
    1c2e:	4b5f      	ldr	r3, [pc, #380]	; (1dac <mbedtls_aes_crypt_cbc+0x1ac>)
    1c30:	469b      	mov	fp, r3
    1c32:	e00d      	b.n	1c50 <mbedtls_aes_crypt_cbc+0x50>
    1c34:	0022      	movs	r2, r4
    1c36:	0021      	movs	r1, r4
    1c38:	4648      	mov	r0, r9
    1c3a:	47d8      	blx	fp
            memcpy( iv, output, 16 );
    1c3c:	0021      	movs	r1, r4
    1c3e:	2210      	movs	r2, #16
    1c40:	0028      	movs	r0, r5
            length -= 16;
    1c42:	3f10      	subs	r7, #16
            memcpy( iv, output, 16 );
    1c44:	47c0      	blx	r8
            input  += 16;
    1c46:	3610      	adds	r6, #16
            output += 16;
    1c48:	3410      	adds	r4, #16
        while( length > 0 )
    1c4a:	2f00      	cmp	r7, #0
    1c4c:	d100      	bne.n	1c50 <mbedtls_aes_crypt_cbc+0x50>
    1c4e:	e09f      	b.n	1d90 <mbedtls_aes_crypt_cbc+0x190>
                output[i] = (unsigned char)( input[i] ^ iv[i] );
    1c50:	782a      	ldrb	r2, [r5, #0]
    1c52:	7833      	ldrb	r3, [r6, #0]
    1c54:	4053      	eors	r3, r2
    1c56:	7023      	strb	r3, [r4, #0]
    1c58:	786a      	ldrb	r2, [r5, #1]
    1c5a:	7873      	ldrb	r3, [r6, #1]
    1c5c:	4053      	eors	r3, r2
    1c5e:	7063      	strb	r3, [r4, #1]
    1c60:	78aa      	ldrb	r2, [r5, #2]
    1c62:	78b3      	ldrb	r3, [r6, #2]
    1c64:	4053      	eors	r3, r2
    1c66:	70a3      	strb	r3, [r4, #2]
    1c68:	78ea      	ldrb	r2, [r5, #3]
    1c6a:	78f3      	ldrb	r3, [r6, #3]
    1c6c:	4053      	eors	r3, r2
    1c6e:	70e3      	strb	r3, [r4, #3]
    1c70:	792a      	ldrb	r2, [r5, #4]
    1c72:	7933      	ldrb	r3, [r6, #4]
    1c74:	4053      	eors	r3, r2
    1c76:	7123      	strb	r3, [r4, #4]
    1c78:	796a      	ldrb	r2, [r5, #5]
    1c7a:	7973      	ldrb	r3, [r6, #5]
    1c7c:	4053      	eors	r3, r2
    1c7e:	7163      	strb	r3, [r4, #5]
    1c80:	79aa      	ldrb	r2, [r5, #6]
    1c82:	79b3      	ldrb	r3, [r6, #6]
    1c84:	4053      	eors	r3, r2
    1c86:	71a3      	strb	r3, [r4, #6]
    1c88:	79ea      	ldrb	r2, [r5, #7]
    1c8a:	79f3      	ldrb	r3, [r6, #7]
    1c8c:	4053      	eors	r3, r2
    1c8e:	71e3      	strb	r3, [r4, #7]
    1c90:	7a2a      	ldrb	r2, [r5, #8]
    1c92:	7a33      	ldrb	r3, [r6, #8]
    1c94:	4053      	eors	r3, r2
    1c96:	7223      	strb	r3, [r4, #8]
    1c98:	7a6a      	ldrb	r2, [r5, #9]
    1c9a:	7a73      	ldrb	r3, [r6, #9]
    1c9c:	4053      	eors	r3, r2
    1c9e:	7263      	strb	r3, [r4, #9]
    1ca0:	7aaa      	ldrb	r2, [r5, #10]
    1ca2:	7ab3      	ldrb	r3, [r6, #10]
    1ca4:	4053      	eors	r3, r2
    1ca6:	72a3      	strb	r3, [r4, #10]
    1ca8:	7aea      	ldrb	r2, [r5, #11]
    1caa:	7af3      	ldrb	r3, [r6, #11]
    1cac:	4053      	eors	r3, r2
    1cae:	72e3      	strb	r3, [r4, #11]
    1cb0:	7b2a      	ldrb	r2, [r5, #12]
    1cb2:	7b33      	ldrb	r3, [r6, #12]
    1cb4:	4053      	eors	r3, r2
    1cb6:	7323      	strb	r3, [r4, #12]
    1cb8:	7b6a      	ldrb	r2, [r5, #13]
    1cba:	7b73      	ldrb	r3, [r6, #13]
    1cbc:	4053      	eors	r3, r2
    1cbe:	7363      	strb	r3, [r4, #13]
    1cc0:	7baa      	ldrb	r2, [r5, #14]
    1cc2:	7bb3      	ldrb	r3, [r6, #14]
    1cc4:	4053      	eors	r3, r2
    1cc6:	73a3      	strb	r3, [r4, #14]
    1cc8:	7bf3      	ldrb	r3, [r6, #15]
    1cca:	7bea      	ldrb	r2, [r5, #15]
    1ccc:	4053      	eors	r3, r2
    1cce:	73e3      	strb	r3, [r4, #15]
    if( mode == MBEDTLS_AES_ENCRYPT )
    1cd0:	4653      	mov	r3, sl
    1cd2:	2b01      	cmp	r3, #1
    1cd4:	d1ae      	bne.n	1c34 <mbedtls_aes_crypt_cbc+0x34>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
    1cd6:	0022      	movs	r2, r4
    1cd8:	0021      	movs	r1, r4
    1cda:	4648      	mov	r0, r9
    1cdc:	4b34      	ldr	r3, [pc, #208]	; (1db0 <mbedtls_aes_crypt_cbc+0x1b0>)
    1cde:	4798      	blx	r3
    1ce0:	e7ac      	b.n	1c3c <mbedtls_aes_crypt_cbc+0x3c>
        while( length > 0 )
    1ce2:	2a00      	cmp	r2, #0
    1ce4:	d054      	beq.n	1d90 <mbedtls_aes_crypt_cbc+0x190>
    1ce6:	4b30      	ldr	r3, [pc, #192]	; (1da8 <mbedtls_aes_crypt_cbc+0x1a8>)
    1ce8:	4698      	mov	r8, r3
    1cea:	4b30      	ldr	r3, [pc, #192]	; (1dac <mbedtls_aes_crypt_cbc+0x1ac>)
    1cec:	469a      	mov	sl, r3
            memcpy( temp, input, 16 );
    1cee:	0031      	movs	r1, r6
    1cf0:	2210      	movs	r2, #16
    1cf2:	4668      	mov	r0, sp
    1cf4:	47c0      	blx	r8
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
    1cf6:	0022      	movs	r2, r4
    1cf8:	0031      	movs	r1, r6
    1cfa:	4648      	mov	r0, r9
    1cfc:	47d0      	blx	sl
                output[i] = (unsigned char)( output[i] ^ iv[i] );
    1cfe:	782b      	ldrb	r3, [r5, #0]
    1d00:	7822      	ldrb	r2, [r4, #0]
            memcpy( iv, temp, 16 );
    1d02:	4669      	mov	r1, sp
                output[i] = (unsigned char)( output[i] ^ iv[i] );
    1d04:	4053      	eors	r3, r2
    1d06:	7023      	strb	r3, [r4, #0]
    1d08:	786a      	ldrb	r2, [r5, #1]
    1d0a:	7863      	ldrb	r3, [r4, #1]
            memcpy( iv, temp, 16 );
    1d0c:	0028      	movs	r0, r5
                output[i] = (unsigned char)( output[i] ^ iv[i] );
    1d0e:	4053      	eors	r3, r2
    1d10:	7063      	strb	r3, [r4, #1]
    1d12:	78aa      	ldrb	r2, [r5, #2]
    1d14:	78a3      	ldrb	r3, [r4, #2]
            length -= 16;
    1d16:	3f10      	subs	r7, #16
                output[i] = (unsigned char)( output[i] ^ iv[i] );
    1d18:	4053      	eors	r3, r2
    1d1a:	70a3      	strb	r3, [r4, #2]
    1d1c:	78ea      	ldrb	r2, [r5, #3]
    1d1e:	78e3      	ldrb	r3, [r4, #3]
            input  += 16;
    1d20:	3610      	adds	r6, #16
                output[i] = (unsigned char)( output[i] ^ iv[i] );
    1d22:	4053      	eors	r3, r2
    1d24:	70e3      	strb	r3, [r4, #3]
    1d26:	792a      	ldrb	r2, [r5, #4]
    1d28:	7923      	ldrb	r3, [r4, #4]
    1d2a:	4053      	eors	r3, r2
    1d2c:	7123      	strb	r3, [r4, #4]
    1d2e:	796a      	ldrb	r2, [r5, #5]
    1d30:	7963      	ldrb	r3, [r4, #5]
    1d32:	4053      	eors	r3, r2
    1d34:	7163      	strb	r3, [r4, #5]
    1d36:	79aa      	ldrb	r2, [r5, #6]
    1d38:	79a3      	ldrb	r3, [r4, #6]
    1d3a:	4053      	eors	r3, r2
    1d3c:	71a3      	strb	r3, [r4, #6]
    1d3e:	79ea      	ldrb	r2, [r5, #7]
    1d40:	79e3      	ldrb	r3, [r4, #7]
    1d42:	4053      	eors	r3, r2
    1d44:	71e3      	strb	r3, [r4, #7]
    1d46:	7a2a      	ldrb	r2, [r5, #8]
    1d48:	7a23      	ldrb	r3, [r4, #8]
    1d4a:	4053      	eors	r3, r2
    1d4c:	7223      	strb	r3, [r4, #8]
    1d4e:	7a6a      	ldrb	r2, [r5, #9]
    1d50:	7a63      	ldrb	r3, [r4, #9]
    1d52:	4053      	eors	r3, r2
    1d54:	7263      	strb	r3, [r4, #9]
    1d56:	7aaa      	ldrb	r2, [r5, #10]
    1d58:	7aa3      	ldrb	r3, [r4, #10]
    1d5a:	4053      	eors	r3, r2
    1d5c:	72a3      	strb	r3, [r4, #10]
    1d5e:	7aea      	ldrb	r2, [r5, #11]
    1d60:	7ae3      	ldrb	r3, [r4, #11]
    1d62:	4053      	eors	r3, r2
    1d64:	72e3      	strb	r3, [r4, #11]
    1d66:	7b2a      	ldrb	r2, [r5, #12]
    1d68:	7b23      	ldrb	r3, [r4, #12]
    1d6a:	4053      	eors	r3, r2
    1d6c:	7323      	strb	r3, [r4, #12]
    1d6e:	7b6a      	ldrb	r2, [r5, #13]
    1d70:	7b63      	ldrb	r3, [r4, #13]
    1d72:	4053      	eors	r3, r2
    1d74:	7363      	strb	r3, [r4, #13]
    1d76:	7baa      	ldrb	r2, [r5, #14]
    1d78:	7ba3      	ldrb	r3, [r4, #14]
    1d7a:	4053      	eors	r3, r2
    1d7c:	73a3      	strb	r3, [r4, #14]
    1d7e:	7bea      	ldrb	r2, [r5, #15]
    1d80:	7be3      	ldrb	r3, [r4, #15]
    1d82:	4053      	eors	r3, r2
    1d84:	73e3      	strb	r3, [r4, #15]
            memcpy( iv, temp, 16 );
    1d86:	2210      	movs	r2, #16
    1d88:	47c0      	blx	r8
            output += 16;
    1d8a:	3410      	adds	r4, #16
        while( length > 0 )
    1d8c:	2f00      	cmp	r7, #0
    1d8e:	d1ae      	bne.n	1cee <mbedtls_aes_crypt_cbc+0xee>
    1d90:	2000      	movs	r0, #0
}
    1d92:	b005      	add	sp, #20
    1d94:	bc3c      	pop	{r2, r3, r4, r5}
    1d96:	4690      	mov	r8, r2
    1d98:	4699      	mov	r9, r3
    1d9a:	46a2      	mov	sl, r4
    1d9c:	46ab      	mov	fp, r5
    1d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return( MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH );
    1da0:	2022      	movs	r0, #34	; 0x22
    1da2:	4240      	negs	r0, r0
    1da4:	e7f5      	b.n	1d92 <mbedtls_aes_crypt_cbc+0x192>
    1da6:	46c0      	nop			; (mov r8, r8)
    1da8:	00001e39 	.word	0x00001e39
    1dac:	00001791 	.word	0x00001791
    1db0:	00001321 	.word	0x00001321

00001db4 <mbedtls_platform_zeroize>:
 * platform and needs.
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
    1db4:	b510      	push	{r4, lr}
    memset_func( buf, 0, len );
    1db6:	4b03      	ldr	r3, [pc, #12]	; (1dc4 <mbedtls_platform_zeroize+0x10>)
{
    1db8:	000a      	movs	r2, r1
    memset_func( buf, 0, len );
    1dba:	681b      	ldr	r3, [r3, #0]
    1dbc:	2100      	movs	r1, #0
    1dbe:	4798      	blx	r3
}
    1dc0:	bd10      	pop	{r4, pc}
    1dc2:	46c0      	nop			; (mov r8, r8)
    1dc4:	20000020 	.word	0x20000020

00001dc8 <__libc_init_array>:
    1dc8:	b570      	push	{r4, r5, r6, lr}
    1dca:	2600      	movs	r6, #0
    1dcc:	4d0c      	ldr	r5, [pc, #48]	; (1e00 <__libc_init_array+0x38>)
    1dce:	4c0d      	ldr	r4, [pc, #52]	; (1e04 <__libc_init_array+0x3c>)
    1dd0:	1b64      	subs	r4, r4, r5
    1dd2:	10a4      	asrs	r4, r4, #2
    1dd4:	42a6      	cmp	r6, r4
    1dd6:	d109      	bne.n	1dec <__libc_init_array+0x24>
    1dd8:	2600      	movs	r6, #0
    1dda:	f002 fda1 	bl	4920 <_init>
    1dde:	4d0a      	ldr	r5, [pc, #40]	; (1e08 <__libc_init_array+0x40>)
    1de0:	4c0a      	ldr	r4, [pc, #40]	; (1e0c <__libc_init_array+0x44>)
    1de2:	1b64      	subs	r4, r4, r5
    1de4:	10a4      	asrs	r4, r4, #2
    1de6:	42a6      	cmp	r6, r4
    1de8:	d105      	bne.n	1df6 <__libc_init_array+0x2e>
    1dea:	bd70      	pop	{r4, r5, r6, pc}
    1dec:	00b3      	lsls	r3, r6, #2
    1dee:	58eb      	ldr	r3, [r5, r3]
    1df0:	4798      	blx	r3
    1df2:	3601      	adds	r6, #1
    1df4:	e7ee      	b.n	1dd4 <__libc_init_array+0xc>
    1df6:	00b3      	lsls	r3, r6, #2
    1df8:	58eb      	ldr	r3, [r5, r3]
    1dfa:	4798      	blx	r3
    1dfc:	3601      	adds	r6, #1
    1dfe:	e7f2      	b.n	1de6 <__libc_init_array+0x1e>
    1e00:	0000492c 	.word	0x0000492c
    1e04:	0000492c 	.word	0x0000492c
    1e08:	0000492c 	.word	0x0000492c
    1e0c:	00004930 	.word	0x00004930

00001e10 <malloc>:
    1e10:	b510      	push	{r4, lr}
    1e12:	4b03      	ldr	r3, [pc, #12]	; (1e20 <malloc+0x10>)
    1e14:	0001      	movs	r1, r0
    1e16:	6818      	ldr	r0, [r3, #0]
    1e18:	f000 f86a 	bl	1ef0 <_malloc_r>
    1e1c:	bd10      	pop	{r4, pc}
    1e1e:	46c0      	nop			; (mov r8, r8)
    1e20:	20000024 	.word	0x20000024

00001e24 <free>:
    1e24:	b510      	push	{r4, lr}
    1e26:	4b03      	ldr	r3, [pc, #12]	; (1e34 <free+0x10>)
    1e28:	0001      	movs	r1, r0
    1e2a:	6818      	ldr	r0, [r3, #0]
    1e2c:	f000 f816 	bl	1e5c <_free_r>
    1e30:	bd10      	pop	{r4, pc}
    1e32:	46c0      	nop			; (mov r8, r8)
    1e34:	20000024 	.word	0x20000024

00001e38 <memcpy>:
    1e38:	2300      	movs	r3, #0
    1e3a:	b510      	push	{r4, lr}
    1e3c:	429a      	cmp	r2, r3
    1e3e:	d100      	bne.n	1e42 <memcpy+0xa>
    1e40:	bd10      	pop	{r4, pc}
    1e42:	5ccc      	ldrb	r4, [r1, r3]
    1e44:	54c4      	strb	r4, [r0, r3]
    1e46:	3301      	adds	r3, #1
    1e48:	e7f8      	b.n	1e3c <memcpy+0x4>

00001e4a <memset>:
    1e4a:	0003      	movs	r3, r0
    1e4c:	1882      	adds	r2, r0, r2
    1e4e:	4293      	cmp	r3, r2
    1e50:	d100      	bne.n	1e54 <memset+0xa>
    1e52:	4770      	bx	lr
    1e54:	7019      	strb	r1, [r3, #0]
    1e56:	3301      	adds	r3, #1
    1e58:	e7f9      	b.n	1e4e <memset+0x4>
	...

00001e5c <_free_r>:
    1e5c:	b570      	push	{r4, r5, r6, lr}
    1e5e:	0005      	movs	r5, r0
    1e60:	2900      	cmp	r1, #0
    1e62:	d010      	beq.n	1e86 <_free_r+0x2a>
    1e64:	1f0c      	subs	r4, r1, #4
    1e66:	6823      	ldr	r3, [r4, #0]
    1e68:	2b00      	cmp	r3, #0
    1e6a:	da00      	bge.n	1e6e <_free_r+0x12>
    1e6c:	18e4      	adds	r4, r4, r3
    1e6e:	0028      	movs	r0, r5
    1e70:	f000 f8ae 	bl	1fd0 <__malloc_lock>
    1e74:	4a1d      	ldr	r2, [pc, #116]	; (1eec <_free_r+0x90>)
    1e76:	6813      	ldr	r3, [r2, #0]
    1e78:	2b00      	cmp	r3, #0
    1e7a:	d105      	bne.n	1e88 <_free_r+0x2c>
    1e7c:	6063      	str	r3, [r4, #4]
    1e7e:	6014      	str	r4, [r2, #0]
    1e80:	0028      	movs	r0, r5
    1e82:	f000 f8a6 	bl	1fd2 <__malloc_unlock>
    1e86:	bd70      	pop	{r4, r5, r6, pc}
    1e88:	42a3      	cmp	r3, r4
    1e8a:	d909      	bls.n	1ea0 <_free_r+0x44>
    1e8c:	6821      	ldr	r1, [r4, #0]
    1e8e:	1860      	adds	r0, r4, r1
    1e90:	4283      	cmp	r3, r0
    1e92:	d1f3      	bne.n	1e7c <_free_r+0x20>
    1e94:	6818      	ldr	r0, [r3, #0]
    1e96:	685b      	ldr	r3, [r3, #4]
    1e98:	1841      	adds	r1, r0, r1
    1e9a:	6021      	str	r1, [r4, #0]
    1e9c:	e7ee      	b.n	1e7c <_free_r+0x20>
    1e9e:	0013      	movs	r3, r2
    1ea0:	685a      	ldr	r2, [r3, #4]
    1ea2:	2a00      	cmp	r2, #0
    1ea4:	d001      	beq.n	1eaa <_free_r+0x4e>
    1ea6:	42a2      	cmp	r2, r4
    1ea8:	d9f9      	bls.n	1e9e <_free_r+0x42>
    1eaa:	6819      	ldr	r1, [r3, #0]
    1eac:	1858      	adds	r0, r3, r1
    1eae:	42a0      	cmp	r0, r4
    1eb0:	d10b      	bne.n	1eca <_free_r+0x6e>
    1eb2:	6820      	ldr	r0, [r4, #0]
    1eb4:	1809      	adds	r1, r1, r0
    1eb6:	1858      	adds	r0, r3, r1
    1eb8:	6019      	str	r1, [r3, #0]
    1eba:	4282      	cmp	r2, r0
    1ebc:	d1e0      	bne.n	1e80 <_free_r+0x24>
    1ebe:	6810      	ldr	r0, [r2, #0]
    1ec0:	6852      	ldr	r2, [r2, #4]
    1ec2:	1841      	adds	r1, r0, r1
    1ec4:	6019      	str	r1, [r3, #0]
    1ec6:	605a      	str	r2, [r3, #4]
    1ec8:	e7da      	b.n	1e80 <_free_r+0x24>
    1eca:	42a0      	cmp	r0, r4
    1ecc:	d902      	bls.n	1ed4 <_free_r+0x78>
    1ece:	230c      	movs	r3, #12
    1ed0:	602b      	str	r3, [r5, #0]
    1ed2:	e7d5      	b.n	1e80 <_free_r+0x24>
    1ed4:	6821      	ldr	r1, [r4, #0]
    1ed6:	1860      	adds	r0, r4, r1
    1ed8:	4282      	cmp	r2, r0
    1eda:	d103      	bne.n	1ee4 <_free_r+0x88>
    1edc:	6810      	ldr	r0, [r2, #0]
    1ede:	6852      	ldr	r2, [r2, #4]
    1ee0:	1841      	adds	r1, r0, r1
    1ee2:	6021      	str	r1, [r4, #0]
    1ee4:	6062      	str	r2, [r4, #4]
    1ee6:	605c      	str	r4, [r3, #4]
    1ee8:	e7ca      	b.n	1e80 <_free_r+0x24>
    1eea:	46c0      	nop			; (mov r8, r8)
    1eec:	200002e0 	.word	0x200002e0

00001ef0 <_malloc_r>:
    1ef0:	2303      	movs	r3, #3
    1ef2:	b570      	push	{r4, r5, r6, lr}
    1ef4:	1ccd      	adds	r5, r1, #3
    1ef6:	439d      	bics	r5, r3
    1ef8:	3508      	adds	r5, #8
    1efa:	0006      	movs	r6, r0
    1efc:	2d0c      	cmp	r5, #12
    1efe:	d21e      	bcs.n	1f3e <_malloc_r+0x4e>
    1f00:	250c      	movs	r5, #12
    1f02:	42a9      	cmp	r1, r5
    1f04:	d81d      	bhi.n	1f42 <_malloc_r+0x52>
    1f06:	0030      	movs	r0, r6
    1f08:	f000 f862 	bl	1fd0 <__malloc_lock>
    1f0c:	4a25      	ldr	r2, [pc, #148]	; (1fa4 <_malloc_r+0xb4>)
    1f0e:	6814      	ldr	r4, [r2, #0]
    1f10:	0021      	movs	r1, r4
    1f12:	2900      	cmp	r1, #0
    1f14:	d119      	bne.n	1f4a <_malloc_r+0x5a>
    1f16:	4c24      	ldr	r4, [pc, #144]	; (1fa8 <_malloc_r+0xb8>)
    1f18:	6823      	ldr	r3, [r4, #0]
    1f1a:	2b00      	cmp	r3, #0
    1f1c:	d103      	bne.n	1f26 <_malloc_r+0x36>
    1f1e:	0030      	movs	r0, r6
    1f20:	f000 f844 	bl	1fac <_sbrk_r>
    1f24:	6020      	str	r0, [r4, #0]
    1f26:	0029      	movs	r1, r5
    1f28:	0030      	movs	r0, r6
    1f2a:	f000 f83f 	bl	1fac <_sbrk_r>
    1f2e:	1c43      	adds	r3, r0, #1
    1f30:	d12c      	bne.n	1f8c <_malloc_r+0x9c>
    1f32:	230c      	movs	r3, #12
    1f34:	0030      	movs	r0, r6
    1f36:	6033      	str	r3, [r6, #0]
    1f38:	f000 f84b 	bl	1fd2 <__malloc_unlock>
    1f3c:	e003      	b.n	1f46 <_malloc_r+0x56>
    1f3e:	2d00      	cmp	r5, #0
    1f40:	dadf      	bge.n	1f02 <_malloc_r+0x12>
    1f42:	230c      	movs	r3, #12
    1f44:	6033      	str	r3, [r6, #0]
    1f46:	2000      	movs	r0, #0
    1f48:	bd70      	pop	{r4, r5, r6, pc}
    1f4a:	680b      	ldr	r3, [r1, #0]
    1f4c:	1b5b      	subs	r3, r3, r5
    1f4e:	d41a      	bmi.n	1f86 <_malloc_r+0x96>
    1f50:	2b0b      	cmp	r3, #11
    1f52:	d903      	bls.n	1f5c <_malloc_r+0x6c>
    1f54:	600b      	str	r3, [r1, #0]
    1f56:	18cc      	adds	r4, r1, r3
    1f58:	6025      	str	r5, [r4, #0]
    1f5a:	e003      	b.n	1f64 <_malloc_r+0x74>
    1f5c:	428c      	cmp	r4, r1
    1f5e:	d10e      	bne.n	1f7e <_malloc_r+0x8e>
    1f60:	6863      	ldr	r3, [r4, #4]
    1f62:	6013      	str	r3, [r2, #0]
    1f64:	0030      	movs	r0, r6
    1f66:	f000 f834 	bl	1fd2 <__malloc_unlock>
    1f6a:	0020      	movs	r0, r4
    1f6c:	2207      	movs	r2, #7
    1f6e:	300b      	adds	r0, #11
    1f70:	1d23      	adds	r3, r4, #4
    1f72:	4390      	bics	r0, r2
    1f74:	1ac3      	subs	r3, r0, r3
    1f76:	d0e7      	beq.n	1f48 <_malloc_r+0x58>
    1f78:	425a      	negs	r2, r3
    1f7a:	50e2      	str	r2, [r4, r3]
    1f7c:	e7e4      	b.n	1f48 <_malloc_r+0x58>
    1f7e:	684b      	ldr	r3, [r1, #4]
    1f80:	6063      	str	r3, [r4, #4]
    1f82:	000c      	movs	r4, r1
    1f84:	e7ee      	b.n	1f64 <_malloc_r+0x74>
    1f86:	000c      	movs	r4, r1
    1f88:	6849      	ldr	r1, [r1, #4]
    1f8a:	e7c2      	b.n	1f12 <_malloc_r+0x22>
    1f8c:	2303      	movs	r3, #3
    1f8e:	1cc4      	adds	r4, r0, #3
    1f90:	439c      	bics	r4, r3
    1f92:	42a0      	cmp	r0, r4
    1f94:	d0e0      	beq.n	1f58 <_malloc_r+0x68>
    1f96:	1a21      	subs	r1, r4, r0
    1f98:	0030      	movs	r0, r6
    1f9a:	f000 f807 	bl	1fac <_sbrk_r>
    1f9e:	1c43      	adds	r3, r0, #1
    1fa0:	d1da      	bne.n	1f58 <_malloc_r+0x68>
    1fa2:	e7c6      	b.n	1f32 <_malloc_r+0x42>
    1fa4:	200002e0 	.word	0x200002e0
    1fa8:	200002e4 	.word	0x200002e4

00001fac <_sbrk_r>:
    1fac:	2300      	movs	r3, #0
    1fae:	b570      	push	{r4, r5, r6, lr}
    1fb0:	4c06      	ldr	r4, [pc, #24]	; (1fcc <_sbrk_r+0x20>)
    1fb2:	0005      	movs	r5, r0
    1fb4:	0008      	movs	r0, r1
    1fb6:	6023      	str	r3, [r4, #0]
    1fb8:	f7fe f9d8 	bl	36c <_sbrk>
    1fbc:	1c43      	adds	r3, r0, #1
    1fbe:	d103      	bne.n	1fc8 <_sbrk_r+0x1c>
    1fc0:	6823      	ldr	r3, [r4, #0]
    1fc2:	2b00      	cmp	r3, #0
    1fc4:	d000      	beq.n	1fc8 <_sbrk_r+0x1c>
    1fc6:	602b      	str	r3, [r5, #0]
    1fc8:	bd70      	pop	{r4, r5, r6, pc}
    1fca:	46c0      	nop			; (mov r8, r8)
    1fcc:	20000304 	.word	0x20000304

00001fd0 <__malloc_lock>:
    1fd0:	4770      	bx	lr

00001fd2 <__malloc_unlock>:
    1fd2:	4770      	bx	lr
    1fd4:	682f2e2e 	.word	0x682f2e2e
    1fd8:	732f6c61 	.word	0x732f6c61
    1fdc:	682f6372 	.word	0x682f6372
    1fe0:	665f6c61 	.word	0x665f6c61
    1fe4:	6873616c 	.word	0x6873616c
    1fe8:	0000632e 	.word	0x0000632e
    1fec:	682f2e2e 	.word	0x682f2e2e
    1ff0:	6e2f6c70 	.word	0x6e2f6c70
    1ff4:	74636d76 	.word	0x74636d76
    1ff8:	682f6c72 	.word	0x682f6c72
    1ffc:	6e5f6c70 	.word	0x6e5f6c70
    2000:	74636d76 	.word	0x74636d76
    2004:	632e6c72 	.word	0x632e6c72
    2008:	00000000 	.word	0x00000000

0000200c <key_256>:
    200c:	10eb3d60 be71ca15 f0ae732b 81777d85     `=....q.+s...}w.
    201c:	072c351f d708613b a310982d f4df1409     .5,.;a..-.......

0000202c <RCON>:
    202c:	00000001 00000002 00000004 00000008     ................
    203c:	00000010 00000020 00000040 00000080     .... ...@.......
    204c:	0000001b 00000036                       ....6...

00002054 <FSb>:
    2054:	7b777c63 c56f6bf2 2b670130 76abd7fe     c|w{.ko.0.g+...v
    2064:	7dc982ca f04759fa afa2d4ad c072a49c     ...}.YG.......r.
    2074:	2693fdb7 ccf73f36 f1e5a534 1531d871     ...&6?..4...q.1.
    2084:	c323c704 9a059618 e2801207 75b227eb     ..#..........'.u
    2094:	1a2c8309 a05a6e1b b3d63b52 842fe329     ..,..nZ.R;..)./.
    20a4:	ed00d153 5bb1fc20 39becb6a cf584c4a     S... ..[j..9JLX.
    20b4:	fbaaefd0 85334d43 7f02f945 a89f3c50     ....CM3.E...P<..
    20c4:	8f40a351 f5389d92 21dab6bc d2f3ff10     Q.@...8....!....
    20d4:	ec130ccd 1744975f 3d7ea7c4 73195d64     ...._.D...~=d].s
    20e4:	dc4f8160 88902a22 14b8ee46 db0b5ede     `.O."*..F....^..
    20f4:	0a3a32e0 5c240649 62acd3c2 79e49591     .2:.I.$\...b...y
    2104:	6d37c8e7 a94ed58d eaf4566c 08ae7a65     ..7m..N.lV..ez..
    2114:	2e2578ba c6b4a61c 1f74dde8 8a8bbd4b     .x%.......t.K...
    2124:	66b53e70 0ef60348 b9573561 9e1dc186     p>.fH...a5W.....
    2134:	1198f8e1 948ed969 e9871e9b df2855ce     ....i........U(.
    2144:	0d89a18c 6842e6bf 0f2d9941 16bb54b0     ......BhA.-..T..

00002154 <RT0>:
    2154:	50a7f451 5365417e c3a4171a 965e273a     Q..P~AeS....:'^.
    2164:	cb6bab3b f1459d1f ab58faac 9303e34b     ;.k...E...X.K...
    2174:	55fa3020 f66d76ad 9176cc88 254c02f5      0.U.vm...v...L%
    2184:	fcd7e54f d7cb2ac5 80443526 8fa362b5     O....*..&5D..b..
    2194:	495ab1de 671bba25 980eea45 e1c0fe5d     ..ZI%..gE...]...
    21a4:	02752fc3 12f04c81 a397468d c6f9d36b     ./u..L...F..k...
    21b4:	e75f8f03 959c9215 eb7a6dbf da595295     .._......mz..RY.
    21c4:	2d83bed4 d3217458 2969e049 44c8c98e     ...-Xt!.I.i)...D
    21d4:	6a89c275 78798ef4 6b3e5899 dd71b927     u..j..yx.X>k'.q.
    21e4:	b64fe1be 17ad88f0 66ac20c9 b43ace7d     ..O...... .f}.:.
    21f4:	184adf63 82311ae5 60335197 457f5362     c.J...1..Q3`bS.E
    2204:	e07764b1 84ae6bbb 1ca081fe 942b08f9     .dw..k........+.
    2214:	58684870 19fd458f 876cde94 b7f87b52     pHhX.E....l.R{..
    2224:	23d373ab e2024b72 578f1fe3 2aab5566     .s.#rK.....WfU.*
    2234:	0728ebb2 03c2b52f 9a7bc586 a50837d3     ..(./.....{..7..
    2244:	f2872830 b2a5bf23 ba6a0302 5c8216ed     0(..#.....j....\
    2254:	2b1ccf8a 92b479a7 f0f207f3 a1e2694e     ...+.y......Ni..
    2264:	cdf4da65 d5be0506 1f6234d1 8afea6c4     e........4b.....
    2274:	9d532e34 a055f3a2 32e18a05 75ebf6a4     4.S...U....2...u
    2284:	39ec830b aaef6040 069f715e 51106ebd     ...9@`..^q...n.Q
    2294:	f98a213e 3d06dd96 ae053edd 46bde64d     >!.....=.>..M..F
    22a4:	b58d5491 055dc471 6fd40604 ff155060     .T..q.]....o`P..
    22b4:	24fb9819 97e9bdd6 cc434089 779ed967     ...$.....@C.g..w
    22c4:	bd42e8b0 888b8907 385b19e7 dbeec879     ..B.......[8y...
    22d4:	470a7ca1 e90f427c c91e84f8 00000000     .|.G|B..........
    22e4:	83868009 48ed2b32 ac70111e 4e725a6c     ....2+.H..p.lZrN
    22f4:	fbff0efd 5638850f 1ed5ae3d 27392d36     ......8V=...6-9'
    2304:	64d90f0a 21a65c68 d1545b9b 3a2e3624     ...dh\.!.[T.$6.:
    2314:	b1670a0c 0fe75793 d296eeb4 9e919b1b     ..g..W..........
    2324:	4fc5c080 a220dc61 694b775a 161a121c     ...Oa. .ZwKi....
    2334:	0aba93e2 e52aa0c0 43e0223c 1d171b12     ......*.<".C....
    2344:	0b0d090e adc78bf2 b9a8b62d c8a91e14     ........-.......
    2354:	8519f157 4c0775af bbdd99ee fd607fa3     W....u.L......`.
    2364:	9f2601f7 bcf5725c c53b6644 347efb5b     ..&.\r..Df;.[.~4
    2374:	7629438b dcc623cb 68fcedb6 63f1e4b8     .C)v.#.....h...c
    2384:	cadc31d7 10856342 40229713 2011c684     .1..Bc...."@... 
    2394:	7d244a85 f83dbbd2 1132f9ae 6da129c7     .J$}..=...2..).m
    23a4:	4b2f9e1d f330b2dc ec52860d d0e3c177     ../K..0...R.w...
    23b4:	6c16b32b 99b970a9 fa489411 2264e947     +..l.p....H.G.d"
    23c4:	c48cfca8 1a3ff0a0 d82c7d56 ef903322     ......?.V},."3..
    23d4:	c74e4987 c1d138d9 fea2ca8c 360bd498     .IN..8.........6
    23e4:	cf81f5a6 28de7aa5 268eb7da a4bfad3f     .....z.(...&?...
    23f4:	e49d3a2c 0d927850 9bcc5f6a 62467e54     ,:..Px..j_..T~Fb
    2404:	c2138df6 e8b8d890 5ef7392e f5afc382     .........9.^....
    2414:	be805d9f 7c93d069 a92dd56f b31225cf     .]..i..|o.-..%..
    2424:	3b99acc8 a77d1810 6e639ce8 7bbb3bdb     ...;..}...cn.;.{
    2434:	097826cd f418596e 01b79aec a89a4f83     .&x.nY.......O..
    2444:	656e95e6 7ee6ffaa 08cfbc21 e6e815ef     ..ne...~!.......
    2454:	d99be7ba ce366f4a d4099fea d67cb029     ....Jo6.....).|.
    2464:	afb2a431 31233f2a 3094a5c6 c066a235     1...*?#1...05.f.
    2474:	37bc4e74 a6ca82fc b0d090e0 15d8a733     tN.7........3...
    2484:	4a9804f1 f7daec41 0e50cd7f 2ff69117     ...JA.....P..../
    2494:	8dd64d76 4db0ef43 544daacc df0496e4     vM..C..M..MT....
    24a4:	e3b5d19e 1b886a4c b81f2cc1 7f516546     ....Lj...,..FeQ.
    24b4:	04ea5e9d 5d358c01 737487fa 2e410bfb     .^....5]..ts..A.
    24c4:	5a1d67b3 52d2db92 335610e9 1347d66d     .g.Z...R..V3m.G.
    24d4:	8c61d79a 7a0ca137 8e14f859 893c13eb     ..a.7..zY.....<.
    24e4:	ee27a9ce 35c961b7 ede51ce1 3cb1477a     ..'..a.5....zG.<
    24f4:	59dfd29c 3f73f255 79ce1418 bf37c773     ...YU.s?...ys.7.
    2504:	eacdf753 5baafd5f 146f3ddf 86db4478     S..._..[.=o.xD..
    2514:	81f3afca 3ec468b9 2c342438 5f40a3c2     .....h.>8$4,..@_
    2524:	72c31d16 0c25e2bc 8b493c28 41950dff     ...r..%.(<I....A
    2534:	7101a839 deb30c08 9ce4b4d8 90c15664     9..q........dV..
    2544:	6184cb7b 70b632d5 745c6c48 4257b8d0     {..a.2.pHl\t..WB

00002554 <RT3>:
    2554:	5150a7f4 7e536541 1ac3a417 3a965e27     ..PQAeS~....'^.:
    2564:	3bcb6bab 1ff1459d acab58fa 4b9303e3     .k.;.E...X.....K
    2574:	2055fa30 adf66d76 889176cc f5254c02     0.U vm...v...L%.
    2584:	4ffcd7e5 c5d7cb2a 26804435 b58fa362     ...O*...5D.&b...
    2594:	de495ab1 25671bba 45980eea 5de1c0fe     .ZI...g%...E...]
    25a4:	c302752f 8112f04c 8da39746 6bc6f9d3     /u..L...F......k
    25b4:	03e75f8f 15959c92 bfeb7a6d 95da5952     ._......mz..RY..
    25c4:	d42d83be 58d32174 492969e0 8e44c8c9     ..-.t!.X.i)I..D.
    25d4:	756a89c2 f478798e 996b3e58 27dd71b9     ..ju.yx.X>k..q.'
    25e4:	beb64fe1 f017ad88 c966ac20 7db43ace     .O...... .f..:.}
    25f4:	63184adf e582311a 97603351 62457f53     .J.c.1..Q3`.S.Eb
    2604:	b1e07764 bb84ae6b fe1ca081 f9942b08     dw..k........+..
    2614:	70586848 8f19fd45 94876cde 52b7f87b     HhXpE....l..{..R
    2624:	ab23d373 72e2024b e3578f1f 662aab55     s.#.K..r..W.U.*f
    2634:	b20728eb 2f03c2b5 869a7bc5 d3a50837     .(...../.{..7...
    2644:	30f28728 23b2a5bf 02ba6a03 ed5c8216     (..0...#.j....\.
    2654:	8a2b1ccf a792b479 f3f0f207 4ea1e269     ..+.y.......i..N
    2664:	65cdf4da 06d5be05 d11f6234 c48afea6     ...e....4b......
    2674:	349d532e a2a055f3 0532e18a a475ebf6     .S.4.U....2...u.
    2684:	0b39ec83 40aaef60 5e069f71 bd51106e     ..9.`..@q..^n.Q.
    2694:	3ef98a21 963d06dd ddae053e 4d46bde6     !..>..=.>.....FM
    26a4:	91b58d54 71055dc4 046fd406 60ff1550     T....].q..o.P..`
    26b4:	1924fb98 d697e9bd 89cc4340 67779ed9     ..$.....@C....wg
    26c4:	b0bd42e8 07888b89 e7385b19 79dbeec8     .B.......[8....y
    26d4:	a1470a7c 7ce90f42 f8c91e84 00000000     |.G.B..|........
    26e4:	09838680 3248ed2b 1eac7011 6c4e725a     ....+.H2.p..ZrNl
    26f4:	fdfbff0e 0f563885 3d1ed5ae 3627392d     .....8V....=-9'6
    2704:	0a64d90f 6821a65c 9bd1545b 243a2e36     ..d.\.!h[T..6.:$
    2714:	0cb1670a 930fe757 b4d296ee 1b9e919b     .g..W...........
    2724:	804fc5c0 61a220dc 5a694b77 1c161a12     ..O.. .awKiZ....
    2734:	e20aba93 c0e52aa0 3c43e022 121d171b     .....*..".C<....
    2744:	0e0b0d09 f2adc78b 2db9a8b6 14c8a91e     ...........-....
    2754:	578519f1 af4c0775 eebbdd99 a3fd607f     ...Wu.L......`..
    2764:	f79f2601 5cbcf572 44c53b66 5b347efb     .&..r..\f;.D.~4[
    2774:	8b762943 cbdcc623 b668fced b863f1e4     C)v.#.....h...c.
    2784:	d7cadc31 42108563 13402297 842011c6     1...c..B."@... .
    2794:	857d244a d2f83dbb ae1132f9 c76da129     J$}..=...2..).m.
    27a4:	1d4b2f9e dcf330b2 0dec5286 77d0e3c1     ./K..0...R.....w
    27b4:	2b6c16b3 a999b970 11fa4894 472264e9     ..l+p....H...d"G
    27c4:	a8c48cfc a01a3ff0 56d82c7d 22ef9033     .....?..},.V3.."
    27d4:	87c74e49 d9c1d138 8cfea2ca 98360bd4     IN..8.........6.
    27e4:	a6cf81f5 a528de7a da268eb7 3fa4bfad     ....z.(...&....?
    27f4:	2ce49d3a 500d9278 6a9bcc5f 5462467e     :..,x..P_..j~FbT
    2804:	f6c2138d 90e8b8d8 2e5ef739 82f5afc3     ........9.^.....
    2814:	9fbe805d 697c93d0 6fa92dd5 cfb31225     ].....|i.-.o%...
    2824:	c83b99ac 10a77d18 e86e639c db7bbb3b     ..;..}...cn.;.{.
    2834:	cd097826 6ef41859 ec01b79a 83a89a4f     &x..Y..n....O...
    2844:	e6656e95 aa7ee6ff 2108cfbc efe6e815     .ne...~....!....
    2854:	bad99be7 4ace366f ead4099f 29d67cb0     ....o6.J.....|.)
    2864:	31afb2a4 2a31233f c63094a5 35c066a2     ...1?#1*..0..f.5
    2874:	7437bc4e fca6ca82 e0b0d090 3315d8a7     N.7t...........3
    2884:	f14a9804 41f7daec 7f0e50cd 172ff691     ..J....A.P..../.
    2894:	768dd64d 434db0ef cc544daa e4df0496     M..v..MC.MT.....
    28a4:	9ee3b5d1 4c1b886a c1b81f2c 467f5165     ....j..L,...eQ.F
    28b4:	9d04ea5e 015d358c fa737487 fb2e410b     ^....5]..ts..A..
    28c4:	b35a1d67 9252d2db e9335610 6d1347d6     g.Z...R..V3..G.m
    28d4:	9a8c61d7 377a0ca1 598e14f8 eb893c13     .a....z7...Y.<..
    28e4:	ceee27a9 b735c961 e1ede51c 7a3cb147     .'..a.5.....G.<z
    28f4:	9c59dfd2 553f73f2 1879ce14 73bf37c7     ..Y..s?U..y..7.s
    2904:	53eacdf7 5f5baafd df146f3d 7886db44     ...S..[_=o..D..x
    2914:	ca81f3af b93ec468 382c3424 c25f40a3     ....h.>.$4,8.@_.
    2924:	1672c31d bc0c25e2 288b493c ff41950d     ..r..%..<I.(..A.
    2934:	397101a8 08deb30c d89ce4b4 6490c156     ..q9........V..d
    2944:	7b6184cb d570b632 48745c6c d04257b8     ..a{2.p.l\tH.WB.

00002954 <RT1>:
    2954:	a7f45150 65417e53 a4171ac3 5e273a96     PQ..S~Ae.....:'^
    2964:	6bab3bcb 459d1ff1 58faacab 03e34b93     .;.k...E...X.K..
    2974:	fa302055 6d76adf6 76cc8891 4c02f525     U 0...vm...v%..L
    2984:	d7e54ffc cb2ac5d7 44352680 a362b58f     .O....*..&5D..b.
    2994:	5ab1de49 1bba2567 0eea4598 c0fe5de1     I..Zg%...E...]..
    29a4:	752fc302 f04c8112 97468da3 f9d36bc6     ../u..L...F..k..
    29b4:	5f8f03e7 9c921595 7a6dbfeb 595295da     ..._......mz..RY
    29c4:	83bed42d 217458d3 69e04929 c8c98e44     -....Xt!)I.iD...
    29d4:	89c2756a 798ef478 3e58996b 71b927dd     ju..x..yk.X>.'.q
    29e4:	4fe1beb6 ad88f017 ac20c966 3ace7db4     ...O....f. ..}.:
    29f4:	4adf6318 311ae582 33519760 7f536245     .c.J...1`.Q3EbS.
    2a04:	7764b1e0 ae6bbb84 a081fe1c 2b08f994     ..dw..k........+
    2a14:	68487058 fd458f19 6cde9487 f87b52b7     XpHh..E....l.R{.
    2a24:	d373ab23 024b72e2 8f1fe357 ab55662a     #.s..rK.W...*fU.
    2a34:	28ebb207 c2b52f03 7bc5869a 0837d3a5     ...(./.....{..7.
    2a44:	872830f2 a5bf23b2 6a0302ba 8216ed5c     .0(..#.....j\...
    2a54:	1ccf8a2b b479a792 f207f3f0 e2694ea1     +.....y......Ni.
    2a64:	f4da65cd be0506d5 6234d11f fea6c48a     .e........4b....
    2a74:	532e349d 55f3a2a0 e18a0532 ebf6a475     .4.S...U2...u...
    2a84:	ec830b39 ef6040aa 9f715e06 106ebd51     9....@`..^q.Q.n.
    2a94:	8a213ef9 06dd963d 053eddae bde64d46     .>!.=.....>.FM..
    2aa4:	8d5491b5 5dc47105 d406046f 155060ff     ..T..q.]o....`P.
    2ab4:	fb981924 e9bdd697 434089cc 9ed96777     $.........@Cwg..
    2ac4:	42e8b0bd 8b890788 5b19e738 eec879db     ...B....8..[.y..
    2ad4:	0a7ca147 0f427ce9 1e84f8c9 00000000     G.|..|B.........
    2ae4:	86800983 ed2b3248 70111eac 725a6c4e     ....H2+....pNlZr
    2af4:	ff0efdfb 38850f56 d5ae3d1e 392d3627     ....V..8.=..'6-9
    2b04:	d90f0a64 a65c6821 545b9bd1 2e36243a     d...!h\...[T:$6.
    2b14:	670a0cb1 e757930f 96eeb4d2 919b1b9e     ...g..W.........
    2b24:	c5c0804f 20dc61a2 4b775a69 1a121c16     O....a. iZwK....
    2b34:	ba93e20a 2aa0c0e5 e0223c43 171b121d     .......*C<".....
    2b44:	0d090e0b c78bf2ad a8b62db9 a91e14c8     .........-......
    2b54:	19f15785 0775af4c dd99eebb 607fa3fd     .W..L.u........`
    2b64:	2601f79f f5725cbc 3b6644c5 7efb5b34     ...&.\r..Df;4[.~
    2b74:	29438b76 c623cbdc fcedb668 f1e4b863     v.C)..#.h...c...
    2b84:	dc31d7ca 85634210 22971340 11c68420     ..1..Bc.@.." ...
    2b94:	244a857d 3dbbd2f8 32f9ae11 a129c76d     }.J$...=...2m.).
    2ba4:	2f9e1d4b 30b2dcf3 52860dec e3c177d0     K../...0...R.w..
    2bb4:	16b32b6c b970a999 489411fa 64e94722     l+....p....H"G.d
    2bc4:	8cfca8c4 3ff0a01a 2c7d56d8 903322ef     .......?.V},."3.
    2bd4:	4e4987c7 d138d9c1 a2ca8cfe 0bd49836     ..IN..8.....6...
    2be4:	81f5a6cf de7aa528 8eb7da26 bfad3fa4     ....(.z.&....?..
    2bf4:	9d3a2ce4 9278500d cc5f6a9b 467e5462     .,:..Px..j_.bT~F
    2c04:	138df6c2 b8d890e8 f7392e5e afc382f5     ........^.9.....
    2c14:	805d9fbe 93d0697c 2dd56fa9 1225cfb3     ..].|i...o.-..%.
    2c24:	99acc83b 7d1810a7 639ce86e bb3bdb7b     ;......}n..c{.;.
    2c34:	7826cd09 18596ef4 b79aec01 9a4f83a8     ..&x.nY.......O.
    2c44:	6e95e665 e6ffaa7e cfbc2108 e815efe6     e..n~....!......
    2c54:	9be7bad9 366f4ace 099fead4 7cb029d6     .....Jo6.....).|
    2c64:	b2a431af 233f2a31 94a5c630 66a235c0     .1..1*?#0....5.f
    2c74:	bc4e7437 ca82fca6 d090e0b0 d8a73315     7tN..........3..
    2c84:	9804f14a daec41f7 50cd7f0e f691172f     J....A.....P/...
    2c94:	d64d768d b0ef434d 4daacc54 0496e4df     .vM.MC..T..M....
    2ca4:	b5d19ee3 886a4c1b 1f2cc1b8 5165467f     .....Lj...,..FeQ
    2cb4:	ea5e9d04 358c015d 7487fa73 410bfb2e     ..^.]..5s..t...A
    2cc4:	1d67b35a d2db9252 5610e933 47d66d13     Z.g.R...3..V.m.G
    2cd4:	61d79a8c 0ca1377a 14f8598e 3c13eb89     ...az7...Y.....<
    2ce4:	27a9ceee c961b735 e51ce1ed b1477a3c     ...'5.a.....<zG.
    2cf4:	dfd29c59 73f2553f ce141879 37c773bf     Y...?U.sy....s.7
    2d04:	cdf753ea aafd5f5b 6f3ddf14 db447886     .S..[_....=o.xD.
    2d14:	f3afca81 c468b93e 3424382c 40a3c25f     ....>.h.,8$4_..@
    2d24:	c31d1672 25e2bc0c 493c288b 950dff41     r......%.(<IA...
    2d34:	01a83971 b30c08de e4b4d89c c1566490     q9...........dV.
    2d44:	84cb7b61 b632d570 5c6c4874 57b8d042     a{..p.2.tHl\B..W

00002d54 <RT2>:
    2d54:	f45150a7 417e5365 171ac3a4 273a965e     .PQ.eS~A....^.:'
    2d64:	ab3bcb6b 9d1ff145 faacab58 e34b9303     k.;.E...X.....K.
    2d74:	302055fa 76adf66d cc889176 02f5254c     .U 0m..vv...L%..
    2d84:	e54ffcd7 2ac5d7cb 35268044 62b58fa3     ..O....*D.&5...b
    2d94:	b1de495a ba25671b ea45980e fe5de1c0     ZI...g%...E...].
    2da4:	2fc30275 4c8112f0 468da397 d36bc6f9     u../...L...F..k.
    2db4:	8f03e75f 9215959c 6dbfeb7a 5295da59     _.......z..mY..R
    2dc4:	bed42d83 7458d321 e0492969 c98e44c8     .-..!.Xti)I..D..
    2dd4:	c2756a89 8ef47879 58996b3e b927dd71     .ju.yx..>k.Xq.'.
    2de4:	e1beb64f 88f017ad 20c966ac ce7db43a     O........f. :.}.
    2df4:	df63184a 1ae58231 51976033 5362457f     J.c.1...3`.Q.EbS
    2e04:	64b1e077 6bbb84ae 81fe1ca0 08f9942b     w..d...k....+...
    2e14:	48705868 458f19fd de94876c 7b52b7f8     hXpH...El.....R{
    2e24:	73ab23d3 4b72e202 1fe3578f 55662aab     .#.s..rK.W...*fU
    2e34:	ebb20728 b52f03c2 c5869a7b 37d3a508     (...../.{......7
    2e44:	2830f287 bf23b2a5 0302ba6a 16ed5c82     ..0(..#.j....\..
    2e54:	cf8a2b1c 79a792b4 07f3f0f2 694ea1e2     .+.....y......Ni
    2e64:	da65cdf4 0506d5be 34d11f62 a6c48afe     ..e.....b..4....
    2e74:	2e349d53 f3a2a055 8a0532e1 f6a475eb     S.4.U....2...u..
    2e84:	830b39ec 6040aaef 715e069f 6ebd5110     .9....@`..^q.Q.n
    2e94:	213ef98a dd963d06 3eddae05 e64d46bd     ..>!.=.....>.FM.
    2ea4:	5491b58d c471055d 06046fd4 5060ff15     ...T].q..o....`P
    2eb4:	981924fb bdd697e9 4089cc43 d967779e     .$......C..@.wg.
    2ec4:	e8b0bd42 8907888b 19e7385b c879dbee     B.......[8....y.
    2ed4:	7ca1470a 427ce90f 84f8c91e 00000000     .G.|..|B........
    2ee4:	80098386 2b3248ed 111eac70 5a6c4e72     .....H2+p...rNlZ
    2ef4:	0efdfbff 850f5638 ae3d1ed5 2d362739     ....8V....=.9'6-
    2f04:	0f0a64d9 5c6821a6 5b9bd154 36243a2e     .d...!h\T..[.:$6
    2f14:	0a0cb167 57930fe7 eeb4d296 9b1b9e91     g......W........
    2f24:	c0804fc5 dc61a220 775a694b 121c161a     .O.. .a.KiZw....
    2f34:	93e20aba a0c0e52a 223c43e0 1b121d17     ....*....C<"....
    2f44:	090e0b0d 8bf2adc7 b62db9a8 1e14c8a9     ..........-.....
    2f54:	f1578519 75af4c07 99eebbdd 7fa3fd60     ..W..L.u....`...
    2f64:	01f79f26 725cbcf5 6644c53b fb5b347e     &.....\r;.Df~4[.
    2f74:	438b7629 23cbdcc6 edb668fc e4b863f1     )v.C...#.h...c..
    2f84:	31d7cadc 63421085 97134022 c6842011     ...1..Bc"@... ..
    2f94:	4a857d24 bbd2f83d f9ae1132 29c76da1     $}.J=...2....m.)
    2fa4:	9e1d4b2f b2dcf330 860dec52 c177d0e3     /K..0...R.....w.
    2fb4:	b32b6c16 70a999b9 9411fa48 e9472264     .l+....pH...d"G.
    2fc4:	fca8c48c f0a01a3f 7d56d82c 3322ef90     ....?...,.V}.."3
    2fd4:	4987c74e 38d9c1d1 ca8cfea2 d498360b     N..I...8.....6..
    2fe4:	f5a6cf81 7aa528de b7da268e ad3fa4bf     .....(.z.&....?.
    2ff4:	3a2ce49d 78500d92 5f6a9bcc 7e546246     ..,:..Px..j_FbT~
    3004:	8df6c213 d890e8b8 392e5ef7 c382f5af     .........^.9....
    3014:	5d9fbe80 d0697c93 d56fa92d 25cfb312     ...].|i.-.o....%
    3024:	acc83b99 1810a77d 9ce86e63 3bdb7bbb     .;..}...cn...{.;
    3034:	26cd0978 596ef418 9aec01b7 4f83a89a     x..&..nY.......O
    3044:	95e6656e ffaa7ee6 bc2108cf 15efe6e8     ne...~....!.....
    3054:	e7bad99b 6f4ace36 9fead409 b029d67c     ....6.Jo....|.).
    3064:	a431afb2 3f2a3123 a5c63094 a235c066     ..1.#1*?.0..f.5.
    3074:	4e7437bc 82fca6ca 90e0b0d0 a73315d8     .7tN..........3.
    3084:	04f14a98 ec41f7da cd7f0e50 91172ff6     .J....A.P..../..
    3094:	4d768dd6 ef434db0 aacc544d 96e4df04     ..vM.MC.MT......
    30a4:	d19ee3b5 6a4c1b88 2cc1b81f 65467f51     ......Lj...,Q.Fe
    30b4:	5e9d04ea 8c015d35 87fa7374 0bfb2e41     ...^5]..ts..A...
    30c4:	67b35a1d db9252d2 10e93356 d66d1347     .Z.g.R..V3..G.m.
    30d4:	d79a8c61 a1377a0c f8598e14 13eb893c     a....z7...Y.<...
    30e4:	a9ceee27 61b735c9 1ce1ede5 477a3cb1     '....5.a.....<zG
    30f4:	d29c59df f2553f73 141879ce c773bf37     .Y..s?U..y..7.s.
    3104:	f753eacd fd5f5baa 3ddf146f 447886db     ..S..[_.o..=..xD
    3114:	afca81f3 68b93ec4 24382c34 a3c25f40     .....>.h4,8$@_..
    3124:	1d1672c3 e2bc0c25 3c288b49 0dff4195     .r..%...I.(<.A..
    3134:	a8397101 0c08deb3 b4d89ce4 566490c1     .q9...........dV
    3144:	cb7b6184 32d570b6 6c48745c b8d04257     .a{..p.2\tHlWB..

00003154 <FT0>:
    3154:	a56363c6 847c7cf8 997777ee 8d7b7bf6     .cc..||..ww..{{.
    3164:	0df2f2ff bd6b6bd6 b16f6fde 54c5c591     .....kk..oo....T
    3174:	50303060 03010102 a96767ce 7d2b2b56     `00P.....gg.V++}
    3184:	19fefee7 62d7d7b5 e6abab4d 9a7676ec     .......bM....vv.
    3194:	45caca8f 9d82821f 40c9c989 877d7dfa     ...E.......@.}}.
    31a4:	15fafaef eb5959b2 c947478e 0bf0f0fb     .....YY..GG.....
    31b4:	ecadad41 67d4d4b3 fda2a25f eaafaf45     A......g_...E...
    31c4:	bf9c9c23 f7a4a453 967272e4 5bc0c09b     #...S....rr....[
    31d4:	c2b7b775 1cfdfde1 ae93933d 6a26264c     u.......=...L&&j
    31e4:	5a36366c 413f3f7e 02f7f7f5 4fcccc83     l66Z~??A.......O
    31f4:	5c343468 f4a5a551 34e5e5d1 08f1f1f9     h44\Q......4....
    3204:	937171e2 73d8d8ab 53313162 3f15152a     .qq....sb11S*..?
    3214:	0c040408 52c7c795 65232346 5ec3c39d     .......RF##e...^
    3224:	28181830 a1969637 0f05050a b59a9a2f     0..(7......./...
    3234:	0907070e 36121224 9b80801b 3de2e2df     ....$..6.......=
    3244:	26ebebcd 6927274e cdb2b27f 9f7575ea     ...&N''i.....uu.
    3254:	1b090912 9e83831d 742c2c58 2e1a1a34     ........X,,t4...
    3264:	2d1b1b36 b26e6edc ee5a5ab4 fba0a05b     6..-.nn..ZZ.[...
    3274:	f65252a4 4d3b3b76 61d6d6b7 ceb3b37d     .RR.v;;M...a}...
    3284:	7b292952 3ee3e3dd 712f2f5e 97848413     R)){...>^//q....
    3294:	f55353a6 68d1d1b9 00000000 2cededc1     .SS....h.......,
    32a4:	60202040 1ffcfce3 c8b1b179 ed5b5bb6     @  `....y....[[.
    32b4:	be6a6ad4 46cbcb8d d9bebe67 4b393972     .jj....Fg...r99K
    32c4:	de4a4a94 d44c4c98 e85858b0 4acfcf85     .JJ..LL..XX....J
    32d4:	6bd0d0bb 2aefefc5 e5aaaa4f 16fbfbed     ...k...*O.......
    32e4:	c5434386 d74d4d9a 55333366 94858511     .CC..MM.f33U....
    32f4:	cf45458a 10f9f9e9 06020204 817f7ffe     .EE.............
    3304:	f05050a0 443c3c78 ba9f9f25 e3a8a84b     .PP.x<<D%...K...
    3314:	f35151a2 fea3a35d c0404080 8a8f8f05     .QQ.]....@@.....
    3324:	ad92923f bc9d9d21 48383870 04f5f5f1     ?...!...p88H....
    3334:	dfbcbc63 c1b6b677 75dadaaf 63212142     c...w......uB!!c
    3344:	30101020 1affffe5 0ef3f3fd 6dd2d2bf      ..0...........m
    3354:	4ccdcd81 140c0c18 35131326 2fececc3     ...L....&..5.../
    3364:	e15f5fbe a2979735 cc444488 3917172e     .__.5....DD....9
    3374:	57c4c493 f2a7a755 827e7efc 473d3d7a     ...WU....~~.z==G
    3384:	ac6464c8 e75d5dba 2b191932 957373e6     .dd..]].2..+.ss.
    3394:	a06060c0 98818119 d14f4f9e 7fdcdca3     .``......OO.....
    33a4:	66222244 7e2a2a54 ab90903b 8388880b     D""fT**~;.......
    33b4:	ca46468c 29eeeec7 d3b8b86b 3c141428     .FF....)k...(..<
    33c4:	79dedea7 e25e5ebc 1d0b0b16 76dbdbad     ...y.^^........v
    33d4:	3be0e0db 56323264 4e3a3a74 1e0a0a14     ...;d22Vt::N....
    33e4:	db494992 0a06060c 6c242448 e45c5cb8     .II.....H$$l.\\.
    33f4:	5dc2c29f 6ed3d3bd efacac43 a66262c4     ...]...nC....bb.
    3404:	a8919139 a4959531 37e4e4d3 8b7979f2     9...1......7.yy.
    3414:	32e7e7d5 43c8c88b 5937376e b76d6dda     ...2...Cn77Y.mm.
    3424:	8c8d8d01 64d5d5b1 d24e4e9c e0a9a949     .......d.NN.I...
    3434:	b46c6cd8 fa5656ac 07f4f4f3 25eaeacf     .ll..VV........%
    3444:	af6565ca 8e7a7af4 e9aeae47 18080810     .ee..zz.G.......
    3454:	d5baba6f 887878f0 6f25254a 722e2e5c     o....xx.J%%o\..r
    3464:	241c1c38 f1a6a657 c7b4b473 51c6c697     8..$W...s......Q
    3474:	23e8e8cb 7cdddda1 9c7474e8 211f1f3e     ...#...|.tt.>..!
    3484:	dd4b4b96 dcbdbd61 868b8b0d 858a8a0f     .KK.a...........
    3494:	907070e0 423e3e7c c4b5b571 aa6666cc     .pp.|>>Bq....ff.
    34a4:	d8484890 05030306 01f6f6f7 120e0e1c     .HH.............
    34b4:	a36161c2 5f35356a f95757ae d0b9b969     .aa.j55_.WW.i...
    34c4:	91868617 58c1c199 271d1d3a b99e9e27     .......X:..''...
    34d4:	38e1e1d9 13f8f8eb b398982b 33111122     ...8....+..."..3
    34e4:	bb6969d2 70d9d9a9 898e8e07 a7949433     .ii....p....3...
    34f4:	b69b9b2d 221e1e3c 92878715 20e9e9c9     -...<.."....... 
    3504:	49cece87 ff5555aa 78282850 7adfdfa5     ...I.UU.P((x...z
    3514:	8f8c8c03 f8a1a159 80898909 170d0d1a     ....Y...........
    3524:	dabfbf65 31e6e6d7 c6424284 b86868d0     e......1.BB..hh.
    3534:	c3414182 b0999929 772d2d5a 110f0f1e     .AA.)...Z--w....
    3544:	cbb0b07b fc5454a8 d6bbbb6d 3a16162c     {....TT.m...,..:

00003554 <FT3>:
    3554:	c6a56363 f8847c7c ee997777 f68d7b7b     cc..||..ww..{{..
    3564:	ff0df2f2 d6bd6b6b deb16f6f 9154c5c5     ....kk..oo....T.
    3574:	60503030 02030101 cea96767 567d2b2b     00P`....gg..++}V
    3584:	e719fefe b562d7d7 4de6abab ec9a7676     ......b....Mvv..
    3594:	8f45caca 1f9d8282 8940c9c9 fa877d7d     ..E.......@.}}..
    35a4:	ef15fafa b2eb5959 8ec94747 fb0bf0f0     ....YY..GG......
    35b4:	41ecadad b367d4d4 5ffda2a2 45eaafaf     ...A..g...._...E
    35c4:	23bf9c9c 53f7a4a4 e4967272 9b5bc0c0     ...#...Srr....[.
    35d4:	75c2b7b7 e11cfdfd 3dae9393 4c6a2626     ...u.......=&&jL
    35e4:	6c5a3636 7e413f3f f502f7f7 834fcccc     66Zl??A~......O.
    35f4:	685c3434 51f4a5a5 d134e5e5 f908f1f1     44\h...Q..4.....
    3604:	e2937171 ab73d8d8 62533131 2a3f1515     qq....s.11Sb..?*
    3614:	080c0404 9552c7c7 46652323 9d5ec3c3     ......R.##eF..^.
    3624:	30281818 37a19696 0a0f0505 2fb59a9a     ..(0...7......./
    3634:	0e090707 24361212 1b9b8080 df3de2e2     ......6$......=.
    3644:	cd26ebeb 4e692727 7fcdb2b2 ea9f7575     ..&.''iN....uu..
    3654:	121b0909 1d9e8383 58742c2c 342e1a1a     ........,,tX...4
    3664:	362d1b1b dcb26e6e b4ee5a5a 5bfba0a0     ..-6nn..ZZ.....[
    3674:	a4f65252 764d3b3b b761d6d6 7dceb3b3     RR..;;Mv..a....}
    3684:	527b2929 dd3ee3e3 5e712f2f 13978484     )){R..>.//q^....
    3694:	a6f55353 b968d1d1 00000000 c12ceded     SS....h.......,.
    36a4:	40602020 e31ffcfc 79c8b1b1 b6ed5b5b       `@.......y[[..
    36b4:	d4be6a6a 8d46cbcb 67d9bebe 724b3939     jj....F....g99Kr
    36c4:	94de4a4a 98d44c4c b0e85858 854acfcf     JJ..LL..XX....J.
    36d4:	bb6bd0d0 c52aefef 4fe5aaaa ed16fbfb     ..k...*....O....
    36e4:	86c54343 9ad74d4d 66553333 11948585     CC..MM..33Uf....
    36f4:	8acf4545 e910f9f9 04060202 fe817f7f     EE..............
    3704:	a0f05050 78443c3c 25ba9f9f 4be3a8a8     PP..<<Dx...%...K
    3714:	a2f35151 5dfea3a3 80c04040 058a8f8f     QQ.....]@@......
    3724:	3fad9292 21bc9d9d 70483838 f104f5f5     ...?...!88Hp....
    3734:	63dfbcbc 77c1b6b6 af75dada 42632121     ...c...w..u.!!cB
    3744:	20301010 e51affff fd0ef3f3 bf6dd2d2     ..0 ..........m.
    3754:	814ccdcd 18140c0c 26351313 c32fecec     ..L.......5&../.
    3764:	bee15f5f 35a29797 88cc4444 2e391717     __.....5DD....9.
    3774:	9357c4c4 55f2a7a7 fc827e7e 7a473d3d     ..W....U~~..==Gz
    3784:	c8ac6464 bae75d5d 322b1919 e6957373     dd..]]....+2ss..
    3794:	c0a06060 19988181 9ed14f4f a37fdcdc     ``......OO......
    37a4:	44662222 547e2a2a 3bab9090 0b838888     ""fD**~T...;....
    37b4:	8cca4646 c729eeee 6bd3b8b8 283c1414     FF....)....k..<(
    37c4:	a779dede bce25e5e 161d0b0b ad76dbdb     ..y.^^........v.
    37d4:	db3be0e0 64563232 744e3a3a 141e0a0a     ..;.22Vd::Nt....
    37e4:	92db4949 0c0a0606 486c2424 b8e45c5c     II......$$lH\\..
    37f4:	9f5dc2c2 bd6ed3d3 43efacac c4a66262     ..]...n....Cbb..
    3804:	39a89191 31a49595 d337e4e4 f28b7979     ...9...1..7.yy..
    3814:	d532e7e7 8b43c8c8 6e593737 dab76d6d     ..2...C.77Ynmm..
    3824:	018c8d8d b164d5d5 9cd24e4e 49e0a9a9     ......d.NN.....I
    3834:	d8b46c6c acfa5656 f307f4f4 cf25eaea     ll..VV........%.
    3844:	caaf6565 f48e7a7a 47e9aeae 10180808     ee..zz.....G....
    3854:	6fd5baba f0887878 4a6f2525 5c722e2e     ...oxx..%%oJ..r\
    3864:	38241c1c 57f1a6a6 73c7b4b4 9751c6c6     ..$8...W...s..Q.
    3874:	cb23e8e8 a17cdddd e89c7474 3e211f1f     ..#...|.tt....!>
    3884:	96dd4b4b 61dcbdbd 0d868b8b 0f858a8a     KK.....a........
    3894:	e0907070 7c423e3e 71c4b5b5 ccaa6666     pp..>>B|...qff..
    38a4:	90d84848 06050303 f701f6f6 1c120e0e     HH..............
    38b4:	c2a36161 6a5f3535 aef95757 69d0b9b9     aa..55_jWW.....i
    38c4:	17918686 9958c1c1 3a271d1d 27b99e9e     ......X...':...'
    38d4:	d938e1e1 eb13f8f8 2bb39898 22331111     ..8........+..3"
    38e4:	d2bb6969 a970d9d9 07898e8e 33a79494     ii....p........3
    38f4:	2db69b9b 3c221e1e 15928787 c920e9e9     ...-.."<...... .
    3904:	8749cece aaff5555 50782828 a57adfdf     ..I.UU..((xP..z.
    3914:	038f8c8c 59f8a1a1 09808989 1a170d0d     .......Y........
    3924:	65dabfbf d731e6e6 84c64242 d0b86868     ...e..1.BB..hh..
    3934:	82c34141 29b09999 5a772d2d 1e110f0f     AA.....)--wZ....
    3944:	7bcbb0b0 a8fc5454 6dd6bbbb 2c3a1616     ...{TT.....m..:,

00003954 <FT1>:
    3954:	6363c6a5 7c7cf884 7777ee99 7b7bf68d     ..cc..||..ww..{{
    3964:	f2f2ff0d 6b6bd6bd 6f6fdeb1 c5c59154     ......kk..ooT...
    3974:	30306050 01010203 6767cea9 2b2b567d     P`00......gg}V++
    3984:	fefee719 d7d7b562 abab4de6 7676ec9a     ....b....M....vv
    3994:	caca8f45 82821f9d c9c98940 7d7dfa87     E.......@.....}}
    39a4:	fafaef15 5959b2eb 47478ec9 f0f0fb0b     ......YY..GG....
    39b4:	adad41ec d4d4b367 a2a25ffd afaf45ea     .A..g...._...E..
    39c4:	9c9c23bf a4a453f7 7272e496 c0c09b5b     .#...S....rr[...
    39d4:	b7b775c2 fdfde11c 93933dae 26264c6a     .u.......=..jL&&
    39e4:	36366c5a 3f3f7e41 f7f7f502 cccc834f     Zl66A~??....O...
    39f4:	3434685c a5a551f4 e5e5d134 f1f1f908     \h44.Q..4.......
    3a04:	7171e293 d8d8ab73 31316253 15152a3f     ..qqs...Sb11?*..
    3a14:	0404080c c7c79552 23234665 c3c39d5e     ....R...eF##^...
    3a24:	18183028 969637a1 05050a0f 9a9a2fb5     (0...7......./..
    3a34:	07070e09 12122436 80801b9b e2e2df3d     ....6$......=...
    3a44:	ebebcd26 27274e69 b2b27fcd 7575ea9f     &...iN''......uu
    3a54:	0909121b 83831d9e 2c2c5874 1a1a342e     ........tX,,.4..
    3a64:	1b1b362d 6e6edcb2 5a5ab4ee a0a05bfb     -6....nn..ZZ.[..
    3a74:	5252a4f6 3b3b764d d6d6b761 b3b37dce     ..RRMv;;a....}..
    3a84:	2929527b e3e3dd3e 2f2f5e71 84841397     {R))>...q^//....
    3a94:	5353a6f5 d1d1b968 00000000 ededc12c     ..SSh.......,...
    3aa4:	20204060 fcfce31f b1b179c8 5b5bb6ed     `@  .....y....[[
    3ab4:	6a6ad4be cbcb8d46 bebe67d9 3939724b     ..jjF....g..Kr99
    3ac4:	4a4a94de 4c4c98d4 5858b0e8 cfcf854a     ..JJ..LL..XXJ...
    3ad4:	d0d0bb6b efefc52a aaaa4fe5 fbfbed16     k...*....O......
    3ae4:	434386c5 4d4d9ad7 33336655 85851194     ..CC..MMUf33....
    3af4:	45458acf f9f9e910 02020406 7f7ffe81     ..EE............
    3b04:	5050a0f0 3c3c7844 9f9f25ba a8a84be3     ..PPDx<<.%...K..
    3b14:	5151a2f3 a3a35dfe 404080c0 8f8f058a     ..QQ.]....@@....
    3b24:	92923fad 9d9d21bc 38387048 f5f5f104     .?...!..Hp88....
    3b34:	bcbc63df b6b677c1 dadaaf75 21214263     .c...w..u...cB!!
    3b44:	10102030 ffffe51a f3f3fd0e d2d2bf6d     0 ..........m...
    3b54:	cdcd814c 0c0c1814 13132635 ececc32f     L.......5&../...
    3b64:	5f5fbee1 979735a2 444488cc 17172e39     ..__.5....DD9...
    3b74:	c4c49357 a7a755f2 7e7efc82 3d3d7a47     W....U....~~Gz==
    3b84:	6464c8ac 5d5dbae7 1919322b 7373e695     ..dd..]]+2....ss
    3b94:	6060c0a0 81811998 4f4f9ed1 dcdca37f     ..``......OO....
    3ba4:	22224466 2a2a547e 90903bab 88880b83     fD""~T**.;......
    3bb4:	46468cca eeeec729 b8b86bd3 1414283c     ..FF)....k..<(..
    3bc4:	dedea779 5e5ebce2 0b0b161d dbdbad76     y.....^^....v...
    3bd4:	e0e0db3b 32326456 3a3a744e 0a0a141e     ;...Vd22Nt::....
    3be4:	494992db 06060c0a 2424486c 5c5cb8e4     ..II....lH$$..\\
    3bf4:	c2c29f5d d3d3bd6e acac43ef 6262c4a6     ]...n....C....bb
    3c04:	919139a8 959531a4 e4e4d337 7979f28b     .9...1..7.....yy
    3c14:	e7e7d532 c8c88b43 37376e59 6d6ddab7     2...C...Yn77..mm
    3c24:	8d8d018c d5d5b164 4e4e9cd2 a9a949e0     ....d.....NN.I..
    3c34:	6c6cd8b4 5656acfa f4f4f307 eaeacf25     ..ll..VV....%...
    3c44:	6565caaf 7a7af48e aeae47e9 08081018     ..ee..zz.G......
    3c54:	baba6fd5 7878f088 25254a6f 2e2e5c72     .o....xxoJ%%r\..
    3c64:	1c1c3824 a6a657f1 b4b473c7 c6c69751     $8...W...s..Q...
    3c74:	e8e8cb23 dddda17c 7474e89c 1f1f3e21     #...|.....tt!>..
    3c84:	4b4b96dd bdbd61dc 8b8b0d86 8a8a0f85     ..KK.a..........
    3c94:	7070e090 3e3e7c42 b5b571c4 6666ccaa     ..ppB|>>.q....ff
    3ca4:	484890d8 03030605 f6f6f701 0e0e1c12     ..HH............
    3cb4:	6161c2a3 35356a5f 5757aef9 b9b969d0     ..aa_j55..WW.i..
    3cc4:	86861791 c1c19958 1d1d3a27 9e9e27b9     ....X...':...'..
    3cd4:	e1e1d938 f8f8eb13 98982bb3 11112233     8........+..3"..
    3ce4:	6969d2bb d9d9a970 8e8e0789 949433a7     ..iip........3..
    3cf4:	9b9b2db6 1e1e3c22 87871592 e9e9c920     .-.."<...... ...
    3d04:	cece8749 5555aaff 28285078 dfdfa57a     I.....UUxP((z...
    3d14:	8c8c038f a1a159f8 89890980 0d0d1a17     .....Y..........
    3d24:	bfbf65da e6e6d731 424284c6 6868d0b8     .e..1.....BB..hh
    3d34:	414182c3 999929b0 2d2d5a77 0f0f1e11     ..AA.)..wZ--....
    3d44:	b0b07bcb 5454a8fc bbbb6dd6 16162c3a     .{....TT.m..:,..

00003d54 <FT2>:
    3d54:	63c6a563 7cf8847c 77ee9977 7bf68d7b     c..c|..|w..w{..{
    3d64:	f2ff0df2 6bd6bd6b 6fdeb16f c59154c5     ....k..ko..o.T..
    3d74:	30605030 01020301 67cea967 2b567d2b     0P`0....g..g+}V+
    3d84:	fee719fe d7b562d7 ab4de6ab 76ec9a76     .....b....M.v..v
    3d94:	ca8f45ca 821f9d82 c98940c9 7dfa877d     .E.......@..}..}
    3da4:	faef15fa 59b2eb59 478ec947 f0fb0bf0     ....Y..YG..G....
    3db4:	ad41ecad d4b367d4 a25ffda2 af45eaaf     ..A..g...._...E.
    3dc4:	9c23bf9c a453f7a4 72e49672 c09b5bc0     ..#...S.r..r.[..
    3dd4:	b775c2b7 fde11cfd 933dae93 264c6a26     ..u.......=.&jL&
    3de4:	366c5a36 3f7e413f f7f502f7 cc834fcc     6Zl6?A~?.....O..
    3df4:	34685c34 a551f4a5 e5d134e5 f1f908f1     4\h4..Q..4......
    3e04:	71e29371 d8ab73d8 31625331 152a3f15     q..q.s..1Sb1.?*.
    3e14:	04080c04 c79552c7 23466523 c39d5ec3     .....R..#eF#.^..
    3e24:	18302818 9637a196 050a0f05 9a2fb59a     .(0...7......./.
    3e34:	070e0907 12243612 801b9b80 e2df3de2     .....6$......=..
    3e44:	ebcd26eb 274e6927 b27fcdb2 75ea9f75     .&..'iN'....u..u
    3e54:	09121b09 831d9e83 2c58742c 1a342e1a     ........,tX,..4.
    3e64:	1b362d1b 6edcb26e 5ab4ee5a a05bfba0     .-6.n..nZ..Z..[.
    3e74:	52a4f652 3b764d3b d6b761d6 b37dceb3     R..R;Mv;.a....}.
    3e84:	29527b29 e3dd3ee3 2f5e712f 84139784     ){R).>../q^/....
    3e94:	53a6f553 d1b968d1 00000000 edc12ced     S..S.h.......,..
    3ea4:	20406020 fce31ffc b179c8b1 5bb6ed5b      `@ ......y.[..[
    3eb4:	6ad4be6a cb8d46cb be67d9be 39724b39     j..j.F....g.9Kr9
    3ec4:	4a94de4a 4c98d44c 58b0e858 cf854acf     J..JL..LX..X.J..
    3ed4:	d0bb6bd0 efc52aef aa4fe5aa fbed16fb     .k...*....O.....
    3ee4:	4386c543 4d9ad74d 33665533 85119485     C..CM..M3Uf3....
    3ef4:	458acf45 f9e910f9 02040602 7ffe817f     E..E............
    3f04:	50a0f050 3c78443c 9f25ba9f a84be3a8     P..P<Dx<..%...K.
    3f14:	51a2f351 a35dfea3 4080c040 8f058a8f     Q..Q..].@..@....
    3f24:	923fad92 9d21bc9d 38704838 f5f104f5     ..?...!.8Hp8....
    3f34:	bc63dfbc b677c1b6 daaf75da 21426321     ..c...w..u..!cB!
    3f44:	10203010 ffe51aff f3fd0ef3 d2bf6dd2     .0 ..........m..
    3f54:	cd814ccd 0c18140c 13263513 ecc32fec     .L.......5&../..
    3f64:	5fbee15f 9735a297 4488cc44 172e3917     _.._..5.D..D.9..
    3f74:	c49357c4 a755f2a7 7efc827e 3d7a473d     .W....U.~..~=Gz=
    3f84:	64c8ac64 5dbae75d 19322b19 73e69573     d..d]..].+2.s..s
    3f94:	60c0a060 81199881 4f9ed14f dca37fdc     `..`....O..O....
    3fa4:	22446622 2a547e2a 903bab90 880b8388     "fD"*~T*..;.....
    3fb4:	468cca46 eec729ee b86bd3b8 14283c14     F..F.)....k..<(.
    3fc4:	dea779de 5ebce25e 0b161d0b dbad76db     .y..^..^.....v..
    3fd4:	e0db3be0 32645632 3a744e3a 0a141e0a     .;..2Vd2:Nt:....
    3fe4:	4992db49 060c0a06 24486c24 5cb8e45c     I..I....$lH$\..\
    3ff4:	c29f5dc2 d3bd6ed3 ac43efac 62c4a662     .]...n....C.b..b
    4004:	9139a891 9531a495 e4d337e4 79f28b79     ..9...1..7..y..y
    4014:	e7d532e7 c88b43c8 376e5937 6ddab76d     .2...C..7Yn7m..m
    4024:	8d018c8d d5b164d5 4e9cd24e a949e0a9     .....d..N..N..I.
    4034:	6cd8b46c 56acfa56 f4f307f4 eacf25ea     l..lV..V.....%..
    4044:	65caaf65 7af48e7a ae47e9ae 08101808     e..ez..z..G.....
    4054:	ba6fd5ba 78f08878 254a6f25 2e5c722e     ..o.x..x%oJ%.r\.
    4064:	1c38241c a657f1a6 b473c7b4 c69751c6     .$8...W...s..Q..
    4074:	e8cb23e8 dda17cdd 74e89c74 1f3e211f     .#...|..t..t.!>.
    4084:	4b96dd4b bd61dcbd 8b0d868b 8a0f858a     K..K..a.........
    4094:	70e09070 3e7c423e b571c4b5 66ccaa66     p..p>B|>..q.f..f
    40a4:	4890d848 03060503 f6f701f6 0e1c120e     H..H............
    40b4:	61c2a361 356a5f35 57aef957 b969d0b9     a..a5_j5W..W..i.
    40c4:	86179186 c19958c1 1d3a271d 9e27b99e     .....X...':...'.
    40d4:	e1d938e1 f8eb13f8 982bb398 11223311     .8........+..3".
    40e4:	69d2bb69 d9a970d9 8e07898e 9433a794     i..i.p........3.
    40f4:	9b2db69b 1e3c221e 87159287 e9c920e9     ..-.."<...... ..
    4104:	ce8749ce 55aaff55 28507828 dfa57adf     .I..U..U(xP(.z..
    4114:	8c038f8c a159f8a1 89098089 0d1a170d     ......Y.........
    4124:	bf65dabf e6d731e6 4284c642 68d0b868     ..e..1..B..Bh..h
    4134:	4182c341 9929b099 2d5a772d 0f1e110f     A..A..).-wZ-....
    4144:	b07bcbb0 54a8fc54 bb6dd6bb 162c3a16     ..{.T..T..m..:,.

00004154 <RSb>:
    4154:	d56a0952 38a53630 9ea340bf fbd7f381     R.j.06.8.@......
    4164:	8239e37c 87ff2f9b 44438e34 cbe9dec4     |.9../..4.CD....
    4174:	32947b54 3d23c2a6 0b954cee 4ec3fa42     T{.2..#=.L..B..N
    4184:	66a12e08 b224d928 49a25b76 25d18b6d     ...f(.$.v[.Im..%
    4194:	64f6f872 16986886 cc5ca4d4 92b6655d     r..d.h....\.]e..
    41a4:	5048706c dab9edfd 5746155e 849d8da7     lpHP....^.FW....
    41b4:	00abd890 0ad3bc8c 0558e4f7 0645b3b8     ..........X...E.
    41c4:	8f1e2cd0 020f3fca 03bdafc1 6b8a1301     .,...?.........k
    41d4:	4111913a eadc674f cecff297 73e6b4f0     :..AOg.........s
    41e4:	2274ac96 8535ade7 e837f9e2 6edf751c     ..t"..5...7..u.n
    41f4:	711af147 89c5291d 0e62b76f 1bbe18aa     G..q.)..o.b.....
    4204:	4b3e56fc 2079d2c6 fec0db9a f45acd78     .V>K..y ....x.Z.
    4214:	33a8dd1f 31c70788 591012b1 5fec8027     ...3...1...Y'.._
    4224:	a97f5160 0d4ab519 9f7ae52d ef9cc993     `Q....J.-.z.....
    4234:	4d3be0a0 b0f52aae 3cbbebc8 61995383     ..;M.*.....<.S.a
    4244:	7e042b17 26d677ba 631469e1 7d0c2155     .+.~.w.&.i.cU!.}

00004254 <aes_test_cfb128_pt>:
    4254:	e2bec16b 969f402e 117e3de9 2a179373     k....@...=~.s..*
    4264:	578a2dae 9cac031e ac6fb79e 518eaf45     .-.W......o.E..Q
    4274:	461cc830 11e45ca3 19c1fbe5 ef520a1a     0..F.\........R.
    4284:	45249ff6 179b4fdf 7b412bad 10376ce6     ..$E.O...+A{.l7.

00004294 <aes_test_ofb_pt>:
    4294:	e2bec16b 969f402e 117e3de9 2a179373     k....@...=~.s..*
    42a4:	578a2dae 9cac031e ac6fb79e 518eaf45     .-.W......o.E..Q
    42b4:	461cc830 11e45ca3 19c1fbe5 ef520a1a     0..F.\........R.
    42c4:	45249ff6 179b4fdf 7b412bad 10376ce6     ..$E.O...+A{.l7.

000042d4 <aes_test_ecb_dec>:
    42d4:	c26a4144 583cf5d1 7e910333 e0ebe96b     DAj...<X3..~k...
    42e4:	9e1ee348 f2186725 9c312992 a45bf119     H...%g...)1...[.
    42f4:	fdcf8c05 2d38cbbb 58566f1f de4a8a5d     ......8-.oVX].J.

00004304 <aes_test_ecb_enc>:
    4304:	2c054cc3 738ddac0 5ffe1a45 7f29be03     .L.,...sE.._..).
    4314:	2a75f6f3 1183d7e8 5641f038 14b13106     ..u*....8.AV.1..
    4324:	ccee798b 5deea093 eab430ff a46d6321     .y.....].0..!cm.

00004334 <aes_test_cbc_dec>:
    4334:	e037cafa 7353c8b0 736e70df 86afc9f7     ..7...Ss.pns....
    4344:	dd78f65d 754eba17 c66817b6 7b7cefad     ].x...Nu..h...|{
    4354:	81e10448 7529e68f 8ce8a319 13043157     H.....)u....W1..

00004364 <aes_test_cbc_enc>:
    4364:	5efc058a 84f45a09 28d3088a 3d8e68d3     ...^.Z.....(.h.=
    4374:	d566d97b bbc1d83a faadd285 04b17be8     {.f.:........{..
    4384:	65533cfe b5452f3e b288cd6f f08f89cc     .<Se>/E.o.......

00004394 <aes_test_cfb128_key>:
    4394:	16157e2b a6d2ae28 8815f7ab 3c4fcf09     +~..(.........O<
	...
    43b4:	f7b0738e 52640eda 2bf310c8 e5799080     .s....dR...+..y.
    43c4:	d2eaf862 7b6b2c52 00000000 00000000     b...R,k{........
    43d4:	10eb3d60 be71ca15 f0ae732b 81777d85     `=....q.+s...}w.
    43e4:	072c351f d708613b a310982d f4df1409     .5,.;a..-.......

000043f4 <aes_test_cfb128_ct>:
    43f4:	2ed93f3b 20ad2db7 f8493433 4afb3ce8     ;?...-. 34I..<.J
    4404:	3745a6c8 3fa9b3a0 adcde3cd 8be51c9f     ..E7...?........
    4414:	671f7526 40b1cba3 f18c80b1 dff4a487     &u.g...@........
    4424:	35054bc0 0e1c5d7c 6fc6c4ea e6f2f79f     .K.5|].....o....
    4434:	6f0dc8cd ab8cf1dd 0959c234 74419ac9     ...o....4.Y...At
    4444:	7f7fce67 21361781 702b1a96 7a3d1d17     g.....6!..+p..=z
    4454:	1d8a1e2e b1889bd5 ed0fe6c8 c9c4fa1e     ................
    4464:	9c9f5fc0 a04f83a9 ba8fae42 ff094b58     ._....O.B...XK..
    4474:	bf847edc 4b1679da 8684cd7e 60385d98     .~...y.K~....]8`
    4484:	14edff39 c8b1283b 633c1132 7b40e531     9...;(..2.<c1.@{
    4494:	241310df 924be515 a8d03ea1 f9e27a26     ...$..K..>..&z..
    44a4:	7485a375 f8ceb91a 3d623120 71e4b155     u..t.... 1b=U..q

000044b4 <aes_test_cfb128_iv>:
    44b4:	03020100 07060504 0b0a0908 0f0e0d0c     ................

000044c4 <aes_test_ofb_key>:
    44c4:	16157e2b a6d2ae28 8815f7ab 3c4fcf09     +~..(.........O<
	...
    44e4:	f7b0738e 52640eda 2bf310c8 e5799080     .s....dR...+..y.
    44f4:	d2eaf862 7b6b2c52 00000000 00000000     b...R,k{........
    4504:	10eb3d60 be71ca15 f0ae732b 81777d85     `=....q.+s...}w.
    4514:	072c351f d708613b a310982d f4df1409     .5,.;a..-.......

00004524 <aes_test_ofb_ct>:
    4524:	2ed93f3b 20ad2db7 f8493433 4afb3ce8     ;?...-. 34I..<.J
    4534:	8d508977 038f9116 da523cf5 25d84ec5     w.P......<R..N.%
    4544:	1e054097 f6ec5f9c a8f74443 cced6022     .@..._..CD.."`..
    4554:	28654c30 78c759f6 d910a566 5eaed6c1     0Le(.Y.xf......^
    4564:	6f0dc8cd ab8cf1dd 0959c234 74419ac9     ...o....4.Y...At
    4574:	8d8bc2fc 7c83634c 0017e809 010410c1     ....Lc.|........
    4584:	ea9a9a8d 6f59f6c0 4d6d9c55 f2a559af     ......YoU.mM.Y..
    4594:	08209f6d 3e6cca57 4b52ac9c 2ac9acd9     m. .W.l>..RK...*
    45a4:	bf847edc 4b1679da 8684cd7e 60385d98     .~...y.K~....]8`
    45b4:	67dceb4f 3a0bd240 d86a8fc8 8db04f2a     O..g@..:..j.*O..
    45c4:	a047ab71 ed6ee886 5b1c9df3 08c497ba     q.G...n....[....
    45d4:	1d142601 e87bf367 8b5a8f53 84e440e7     .&..g.{.S.Z..@..

000045e4 <aes_test_ctr_nonce_counter>:
    45e4:	30000000 00000000 00000000 01000000     ...0............
    45f4:	dbb66c00 593b54c0 0bd948da 01000000     .l...T;Y.H......
    4604:	7b01e000 3f7f7727 f086174a 01000000     ...{'w.?J.......

00004614 <aes_test_ctr_key>:
    4614:	f85268ae cc671012 76a5f74b 9ef37755     .hR...g.K..vUw..
    4624:	7806247e d7e0fa17 1fced643 63915332     ~$.x....C...2S.c
    4634:	03be9176 a820505e 85616eac dca0f929     v...^P ..na.)...

00004644 <aes_test_ctr_len>:
    4644:	00000010 00000020 00000024              .... ...$...

00004650 <aes_test_ctr_ct>:
    4650:	4f5d09e4 79b3a7b7 a375612d b8111326     ..]O...y-au.&...
	...
    4680:	06a10451 d9728a16 ee410d79 88d3da8e     Q.....r.y.A.....
    4690:	fc1e2eeb c857da46 df30e6fc 28be4191     ....F.W...0..A.(
	...
    46b0:	a848cfc1 d9fd2f9f e95246cf d772dbef     ..H../...FR...r.
    46c0:	2ba44045 36786dde ea5c9ad5 5310f3ae     E@.+.mx6..\....S
    46d0:	2f07b225 00000000 00000000 00000000     %../............

000046e0 <aes_test_ctr_pt>:
    46e0:	676e6953 6220656c 6b636f6c 67736d20     Single block msg
	...
    4710:	03020100 07060504 0b0a0908 0f0e0d0c     ................
    4720:	13121110 17161514 1b1a1918 1f1e1d1c     ................
	...
    4740:	03020100 07060504 0b0a0908 0f0e0d0c     ................
    4750:	13121110 17161514 1b1a1918 1f1e1d1c     ................
    4760:	23222120 00000000 00000000 00000000      !"#............

00004770 <aes_test_xts_key>:
	...
    4790:	11111111 11111111 11111111 11111111     ................
    47a0:	22222222 22222222 22222222 22222222     """"""""""""""""
    47b0:	fcfdfeff f8f9fafb f4f5f6f7 f0f1f2f3     ................
    47c0:	22222222 22222222 22222222 22222222     """"""""""""""""

000047d0 <aes_test_xts_data_unit>:
	...
    47e0:	33333333 00000033 00000000 00000000     33333...........
    47f0:	33333333 00000033 00000000 00000000     33333...........

00004800 <aes_test_xts_ct32>:
    4800:	9ef67c91 ecb268bd a3e99f9b 92a6ddea     .|...h..........
    4810:	f5d243cd 85ed9895 65c2028c 2e92bf2f     .C.........e/...
    4820:	5e1854c4 6e93166a 38403339 8b83efac     .T.^j..n93@8....
    4830:	ff6f18fb c4ad8074 ec829328 f094d3d6     ..o.t...(.......
    4840:	6b3385af 1afc7a59 b22e0b90 d249c91e     ..3kYz........I.
    4850:	044cdf92 53210b7e 97a58621 897a221a     ..L.~.!S!...."z.

00004860 <aes_test_xts_pt32>:
	...
    4880:	44444444 44444444 44444444 44444444     DDDDDDDDDDDDDDDD
    4890:	44444444 44444444 44444444 44444444     DDDDDDDDDDDDDDDD
    48a0:	44444444 44444444 44444444 44444444     DDDDDDDDDDDDDDDD
    48b0:	44444444 44444444 44444444 44444444     DDDDDDDDDDDDDDDD

000048c0 <__sf_fake_stderr>:
	...

000048e0 <__sf_fake_stdin>:
	...

00004900 <__sf_fake_stdout>:
	...

00004920 <_init>:
    4920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4922:	46c0      	nop			; (mov r8, r8)
    4924:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4926:	bc08      	pop	{r3}
    4928:	469e      	mov	lr, r3
    492a:	4770      	bx	lr

0000492c <__init_array_start>:
    492c:	000000dd 	.word	0x000000dd

00004930 <_fini>:
    4930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4932:	46c0      	nop			; (mov r8, r8)
    4934:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4936:	bc08      	pop	{r3}
    4938:	469e      	mov	lr, r3
    493a:	4770      	bx	lr

0000493c <__fini_array_start>:
    493c:	000000b5 	.word	0x000000b5
