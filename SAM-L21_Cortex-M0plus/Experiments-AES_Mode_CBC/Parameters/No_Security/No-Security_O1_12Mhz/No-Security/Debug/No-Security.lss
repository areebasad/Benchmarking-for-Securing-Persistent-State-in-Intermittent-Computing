
No-Security.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c44  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000064  20000000  00000c44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  00020064  2**0
                  CONTENTS
  3 .bss          00000050  20000064  00000ca8  00020064  2**2
                  ALLOC
  4 .stack        00002004  200000b4  00000cf8  00020064  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000e5da  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000026e0  00000000  00000000  0002e6bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000049b7  00000000  00000000  00030d9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000488  00000000  00000000  00035756  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000458  00000000  00000000  00035bde  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001afb4  00000000  00000000  00036036  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000c2a5  00000000  00000000  00050fea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0008d0ce  00000000  00000000  0005d28f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000bec  00000000  00000000  000ea360  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	b8 20 00 20 2d 01 00 00 29 01 00 00 29 01 00 00     . . -...)...)...
	...
  2c:	29 01 00 00 00 00 00 00 00 00 00 00 29 01 00 00     )...........)...
  3c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
  4c:	29 01 00 00 95 05 00 00 29 01 00 00 29 01 00 00     ).......)...)...
  5c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
  6c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
  7c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
  8c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
  9c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
  ac:	29 01 00 00 00 00 00 00                             ).......

000000b4 <__do_global_dtors_aux>:
  b4:	b510      	push	{r4, lr}
  b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
  b8:	7823      	ldrb	r3, [r4, #0]
  ba:	2b00      	cmp	r3, #0
  bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
  be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
  c0:	2b00      	cmp	r3, #0
  c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
  c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
  c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
  c8:	bf00      	nop
  ca:	2301      	movs	r3, #1
  cc:	7023      	strb	r3, [r4, #0]
  ce:	bd10      	pop	{r4, pc}
  d0:	20000064 	.word	0x20000064
  d4:	00000000 	.word	0x00000000
  d8:	00000c44 	.word	0x00000c44

000000dc <frame_dummy>:
  dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
  de:	b510      	push	{r4, lr}
  e0:	2b00      	cmp	r3, #0
  e2:	d003      	beq.n	ec <frame_dummy+0x10>
  e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
  e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
  e8:	e000      	b.n	ec <frame_dummy+0x10>
  ea:	bf00      	nop
  ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
  ee:	6803      	ldr	r3, [r0, #0]
  f0:	2b00      	cmp	r3, #0
  f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
  f4:	bd10      	pop	{r4, pc}
  f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
  f8:	2b00      	cmp	r3, #0
  fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
  fc:	4798      	blx	r3
  fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
 100:	00000000 	.word	0x00000000
 104:	20000068 	.word	0x20000068
 108:	00000c44 	.word	0x00000c44
 10c:	00000c44 	.word	0x00000c44
 110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
 114:	b510      	push	{r4, lr}
	system_init();
 116:	4b02      	ldr	r3, [pc, #8]	; (120 <atmel_start_init+0xc>)
 118:	4798      	blx	r3
	
	gpio_init();
 11a:	4b02      	ldr	r3, [pc, #8]	; (124 <atmel_start_init+0x10>)
 11c:	4798      	blx	r3

}
 11e:	bd10      	pop	{r4, pc}
 120:	0000020d 	.word	0x0000020d
 124:	00000259 	.word	0x00000259

00000128 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 128:	e7fe      	b.n	128 <Dummy_Handler>
	...

0000012c <Reset_Handler>:
{
 12c:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
 12e:	4a1a      	ldr	r2, [pc, #104]	; (198 <Reset_Handler+0x6c>)
 130:	4b1a      	ldr	r3, [pc, #104]	; (19c <Reset_Handler+0x70>)
 132:	429a      	cmp	r2, r3
 134:	d011      	beq.n	15a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
 136:	001a      	movs	r2, r3
 138:	4b19      	ldr	r3, [pc, #100]	; (1a0 <Reset_Handler+0x74>)
 13a:	429a      	cmp	r2, r3
 13c:	d20d      	bcs.n	15a <Reset_Handler+0x2e>
 13e:	4a19      	ldr	r2, [pc, #100]	; (1a4 <Reset_Handler+0x78>)
 140:	3303      	adds	r3, #3
 142:	1a9b      	subs	r3, r3, r2
 144:	089b      	lsrs	r3, r3, #2
 146:	3301      	adds	r3, #1
 148:	009b      	lsls	r3, r3, #2
 14a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 14c:	4813      	ldr	r0, [pc, #76]	; (19c <Reset_Handler+0x70>)
 14e:	4912      	ldr	r1, [pc, #72]	; (198 <Reset_Handler+0x6c>)
 150:	588c      	ldr	r4, [r1, r2]
 152:	5084      	str	r4, [r0, r2]
 154:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
 156:	429a      	cmp	r2, r3
 158:	d1fa      	bne.n	150 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
 15a:	4a13      	ldr	r2, [pc, #76]	; (1a8 <Reset_Handler+0x7c>)
 15c:	4b13      	ldr	r3, [pc, #76]	; (1ac <Reset_Handler+0x80>)
 15e:	429a      	cmp	r2, r3
 160:	d20a      	bcs.n	178 <Reset_Handler+0x4c>
 162:	43d3      	mvns	r3, r2
 164:	4911      	ldr	r1, [pc, #68]	; (1ac <Reset_Handler+0x80>)
 166:	185b      	adds	r3, r3, r1
 168:	2103      	movs	r1, #3
 16a:	438b      	bics	r3, r1
 16c:	3304      	adds	r3, #4
 16e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
 170:	2100      	movs	r1, #0
 172:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
 174:	4293      	cmp	r3, r2
 176:	d1fc      	bne.n	172 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 178:	4a0d      	ldr	r2, [pc, #52]	; (1b0 <Reset_Handler+0x84>)
 17a:	21ff      	movs	r1, #255	; 0xff
 17c:	4b0d      	ldr	r3, [pc, #52]	; (1b4 <Reset_Handler+0x88>)
 17e:	438b      	bics	r3, r1
 180:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
 182:	4a0d      	ldr	r2, [pc, #52]	; (1b8 <Reset_Handler+0x8c>)
 184:	6853      	ldr	r3, [r2, #4]
 186:	397f      	subs	r1, #127	; 0x7f
 188:	430b      	orrs	r3, r1
 18a:	6053      	str	r3, [r2, #4]
        __libc_init_array();
 18c:	4b0b      	ldr	r3, [pc, #44]	; (1bc <Reset_Handler+0x90>)
 18e:	4798      	blx	r3
        main();
 190:	4b0b      	ldr	r3, [pc, #44]	; (1c0 <Reset_Handler+0x94>)
 192:	4798      	blx	r3
 194:	e7fe      	b.n	194 <Reset_Handler+0x68>
 196:	46c0      	nop			; (mov r8, r8)
 198:	00000c44 	.word	0x00000c44
 19c:	20000000 	.word	0x20000000
 1a0:	20000064 	.word	0x20000064
 1a4:	20000004 	.word	0x20000004
 1a8:	20000064 	.word	0x20000064
 1ac:	200000b4 	.word	0x200000b4
 1b0:	e000ed00 	.word	0xe000ed00
 1b4:	00000000 	.word	0x00000000
 1b8:	41004000 	.word	0x41004000
 1bc:	000009a5 	.word	0x000009a5
 1c0:	0000098d 	.word	0x0000098d

000001c4 <FLASH_0_CLOCK_init>:
}

static inline void hri_mclk_set_AHBMASK_NVMCTRL_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
 1c4:	4a03      	ldr	r2, [pc, #12]	; (1d4 <FLASH_0_CLOCK_init+0x10>)
 1c6:	6911      	ldr	r1, [r2, #16]
 1c8:	2380      	movs	r3, #128	; 0x80
 1ca:	005b      	lsls	r3, r3, #1
 1cc:	430b      	orrs	r3, r1
 1ce:	6113      	str	r3, [r2, #16]

void FLASH_0_CLOCK_init(void)
{

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}
 1d0:	4770      	bx	lr
 1d2:	46c0      	nop			; (mov r8, r8)
 1d4:	40000400 	.word	0x40000400

000001d8 <FLASH_0_init>:

void FLASH_0_init(void)
{
 1d8:	b510      	push	{r4, lr}
	FLASH_0_CLOCK_init();
 1da:	4b03      	ldr	r3, [pc, #12]	; (1e8 <FLASH_0_init+0x10>)
 1dc:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
 1de:	4903      	ldr	r1, [pc, #12]	; (1ec <FLASH_0_init+0x14>)
 1e0:	4803      	ldr	r0, [pc, #12]	; (1f0 <FLASH_0_init+0x18>)
 1e2:	4b04      	ldr	r3, [pc, #16]	; (1f4 <FLASH_0_init+0x1c>)
 1e4:	4798      	blx	r3
}
 1e6:	bd10      	pop	{r4, pc}
 1e8:	000001c5 	.word	0x000001c5
 1ec:	41004000 	.word	0x41004000
 1f0:	20000094 	.word	0x20000094
 1f4:	0000035d 	.word	0x0000035d

000001f8 <delay_driver_init>:

void delay_driver_init(void)
{
 1f8:	b510      	push	{r4, lr}
	delay_init(SysTick);
 1fa:	4802      	ldr	r0, [pc, #8]	; (204 <delay_driver_init+0xc>)
 1fc:	4b02      	ldr	r3, [pc, #8]	; (208 <delay_driver_init+0x10>)
 1fe:	4798      	blx	r3
}
 200:	bd10      	pop	{r4, pc}
 202:	46c0      	nop			; (mov r8, r8)
 204:	e000e010 	.word	0xe000e010
 208:	00000311 	.word	0x00000311

0000020c <system_init>:

void system_init(void)
{
 20c:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
 20e:	4b0d      	ldr	r3, [pc, #52]	; (244 <system_init+0x38>)
 210:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 212:	23c0      	movs	r3, #192	; 0xc0
 214:	05db      	lsls	r3, r3, #23
 216:	2280      	movs	r2, #128	; 0x80
 218:	00d2      	lsls	r2, r2, #3
 21a:	2194      	movs	r1, #148	; 0x94
 21c:	505a      	str	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
 21e:	390c      	subs	r1, #12
 220:	505a      	str	r2, [r3, r1]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 222:	4b09      	ldr	r3, [pc, #36]	; (248 <system_init+0x3c>)
 224:	22a8      	movs	r2, #168	; 0xa8
 226:	4909      	ldr	r1, [pc, #36]	; (24c <system_init+0x40>)
 228:	5099      	str	r1, [r3, r2]
 22a:	21c0      	movs	r1, #192	; 0xc0
 22c:	0609      	lsls	r1, r1, #24
 22e:	5099      	str	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 230:	21ca      	movs	r1, #202	; 0xca
 232:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
 234:	2001      	movs	r0, #1
 236:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 238:	545a      	strb	r2, [r3, r1]
	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);

	FLASH_0_init();
 23a:	4b05      	ldr	r3, [pc, #20]	; (250 <system_init+0x44>)
 23c:	4798      	blx	r3

	delay_driver_init();
 23e:	4b05      	ldr	r3, [pc, #20]	; (254 <system_init+0x48>)
 240:	4798      	blx	r3
}
 242:	bd10      	pop	{r4, pc}
 244:	000003dd 	.word	0x000003dd
 248:	40002800 	.word	0x40002800
 24c:	40000400 	.word	0x40000400
 250:	000001d9 	.word	0x000001d9
 254:	000001f9 	.word	0x000001f9

00000258 <gpio_init>:

#include "driver_init.h"
#include "gpio_init.h"

void gpio_init(void)
{
 258:	b5f0      	push	{r4, r5, r6, r7, lr}
 25a:	46c6      	mov	lr, r8
 25c:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 25e:	22c0      	movs	r2, #192	; 0xc0
 260:	05d2      	lsls	r2, r2, #23
 262:	2302      	movs	r3, #2
 264:	2194      	movs	r1, #148	; 0x94
 266:	5053      	str	r3, [r2, r1]
 268:	2180      	movs	r1, #128	; 0x80
 26a:	0249      	lsls	r1, r1, #9
 26c:	6151      	str	r1, [r2, #20]
 26e:	2780      	movs	r7, #128	; 0x80
 270:	037f      	lsls	r7, r7, #13
 272:	6157      	str	r7, [r2, #20]
 274:	2080      	movs	r0, #128	; 0x80
 276:	0380      	lsls	r0, r0, #14
 278:	4680      	mov	r8, r0
 27a:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
 27c:	2688      	movs	r6, #136	; 0x88
 27e:	5193      	str	r3, [r2, r6]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 280:	4b1c      	ldr	r3, [pc, #112]	; (2f4 <gpio_init+0x9c>)
 282:	20a8      	movs	r0, #168	; 0xa8
 284:	4d1c      	ldr	r5, [pc, #112]	; (2f8 <gpio_init+0xa0>)
 286:	501d      	str	r5, [r3, r0]
 288:	25c0      	movs	r5, #192	; 0xc0
 28a:	062d      	lsls	r5, r5, #24
 28c:	501d      	str	r5, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
 28e:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 290:	2180      	movs	r1, #128	; 0x80
 292:	05c9      	lsls	r1, r1, #23
 294:	6299      	str	r1, [r3, #40]	; 0x28
 296:	4c19      	ldr	r4, [pc, #100]	; (2fc <gpio_init+0xa4>)
 298:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
 29a:	6097      	str	r7, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 29c:	6299      	str	r1, [r3, #40]	; 0x28
 29e:	4f18      	ldr	r7, [pc, #96]	; (300 <gpio_init+0xa8>)
 2a0:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
 2a2:	4644      	mov	r4, r8
 2a4:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 2a6:	6299      	str	r1, [r3, #40]	; 0x28
 2a8:	4916      	ldr	r1, [pc, #88]	; (304 <gpio_init+0xac>)
 2aa:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 2ac:	27c1      	movs	r7, #193	; 0xc1
 2ae:	5ddc      	ldrb	r4, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
 2b0:	2101      	movs	r1, #1
 2b2:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 2b4:	55dc      	strb	r4, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 2b6:	3f71      	subs	r7, #113	; 0x71
 2b8:	5ddc      	ldrb	r4, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
 2ba:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 2bc:	55dc      	strb	r4, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 2be:	3704      	adds	r7, #4
 2c0:	5ddc      	ldrb	r4, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
 2c2:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 2c4:	55dc      	strb	r4, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 2c6:	3701      	adds	r7, #1
 2c8:	5ddc      	ldrb	r4, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
 2ca:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 2cc:	55dc      	strb	r4, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
 2ce:	2480      	movs	r4, #128	; 0x80
 2d0:	00e4      	lsls	r4, r4, #3
 2d2:	3743      	adds	r7, #67	; 0x43
 2d4:	51d4      	str	r4, [r2, r7]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
 2d6:	5194      	str	r4, [r2, r6]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 2d8:	4a0b      	ldr	r2, [pc, #44]	; (308 <gpio_init+0xb0>)
 2da:	501a      	str	r2, [r3, r0]
 2dc:	501d      	str	r5, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 2de:	3022      	adds	r0, #34	; 0x22
 2e0:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
 2e2:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 2e4:	541a      	strb	r2, [r3, r0]
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
#endif

	delay_ms(10);
 2e6:	38c0      	subs	r0, #192	; 0xc0
 2e8:	4b08      	ldr	r3, [pc, #32]	; (30c <gpio_init+0xb4>)
 2ea:	4798      	blx	r3
 2ec:	bc04      	pop	{r2}
 2ee:	4690      	mov	r8, r2
 2f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 2f2:	46c0      	nop			; (mov r8, r8)
 2f4:	40002800 	.word	0x40002800
 2f8:	40000002 	.word	0x40000002
 2fc:	c0000001 	.word	0xc0000001
 300:	c0000010 	.word	0xc0000010
 304:	c0000020 	.word	0xc0000020
 308:	40000400 	.word	0x40000400
 30c:	00000325 	.word	0x00000325

00000310 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
 310:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
 312:	4b02      	ldr	r3, [pc, #8]	; (31c <delay_init+0xc>)
 314:	6018      	str	r0, [r3, #0]
 316:	4b02      	ldr	r3, [pc, #8]	; (320 <delay_init+0x10>)
 318:	4798      	blx	r3
}
 31a:	bd10      	pop	{r4, pc}
 31c:	20000080 	.word	0x20000080
 320:	000007c5 	.word	0x000007c5

00000324 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
 324:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
 326:	4b04      	ldr	r3, [pc, #16]	; (338 <delay_ms+0x14>)
 328:	681c      	ldr	r4, [r3, #0]
 32a:	4b04      	ldr	r3, [pc, #16]	; (33c <delay_ms+0x18>)
 32c:	4798      	blx	r3
 32e:	0001      	movs	r1, r0
 330:	0020      	movs	r0, r4
 332:	4b03      	ldr	r3, [pc, #12]	; (340 <delay_ms+0x1c>)
 334:	4798      	blx	r3
}
 336:	bd10      	pop	{r4, pc}
 338:	20000080 	.word	0x20000080
 33c:	000003d1 	.word	0x000003d1
 340:	000007d9 	.word	0x000007d9

00000344 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
 344:	b510      	push	{r4, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
 346:	6943      	ldr	r3, [r0, #20]
 348:	2b00      	cmp	r3, #0
 34a:	d000      	beq.n	34e <flash_ready+0xa>
		descr->callbacks.cb_ready(descr);
 34c:	4798      	blx	r3
	}
}
 34e:	bd10      	pop	{r4, pc}

00000350 <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
 350:	b510      	push	{r4, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
 352:	6983      	ldr	r3, [r0, #24]
 354:	2b00      	cmp	r3, #0
 356:	d000      	beq.n	35a <flash_error+0xa>
		descr->callbacks.cb_error(descr);
 358:	4798      	blx	r3
	}
}
 35a:	bd10      	pop	{r4, pc}

0000035c <flash_init>:
{
 35c:	b570      	push	{r4, r5, r6, lr}
 35e:	0005      	movs	r5, r0
 360:	000c      	movs	r4, r1
	ASSERT(flash && hw);
 362:	2800      	cmp	r0, #0
 364:	d012      	beq.n	38c <flash_init+0x30>
 366:	0008      	movs	r0, r1
 368:	1e43      	subs	r3, r0, #1
 36a:	4198      	sbcs	r0, r3
 36c:	b2c0      	uxtb	r0, r0
 36e:	2238      	movs	r2, #56	; 0x38
 370:	4907      	ldr	r1, [pc, #28]	; (390 <flash_init+0x34>)
 372:	4b08      	ldr	r3, [pc, #32]	; (394 <flash_init+0x38>)
 374:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
 376:	0021      	movs	r1, r4
 378:	0028      	movs	r0, r5
 37a:	4b07      	ldr	r3, [pc, #28]	; (398 <flash_init+0x3c>)
 37c:	4798      	blx	r3
	if (rc) {
 37e:	2800      	cmp	r0, #0
 380:	d103      	bne.n	38a <flash_init+0x2e>
	flash->dev.flash_cb.ready_cb = flash_ready;
 382:	4b06      	ldr	r3, [pc, #24]	; (39c <flash_init+0x40>)
 384:	602b      	str	r3, [r5, #0]
	flash->dev.flash_cb.error_cb = flash_error;
 386:	4b06      	ldr	r3, [pc, #24]	; (3a0 <flash_init+0x44>)
 388:	606b      	str	r3, [r5, #4]
}
 38a:	bd70      	pop	{r4, r5, r6, pc}
 38c:	2000      	movs	r0, #0
 38e:	e7ee      	b.n	36e <flash_init+0x12>
 390:	00000b8c 	.word	0x00000b8c
 394:	000003a5 	.word	0x000003a5
 398:	000004e5 	.word	0x000004e5
 39c:	00000345 	.word	0x00000345
 3a0:	00000351 	.word	0x00000351

000003a4 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
 3a4:	2800      	cmp	r0, #0
 3a6:	d100      	bne.n	3aa <assert+0x6>
		__asm("BKPT #0");
 3a8:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
 3aa:	4770      	bx	lr

000003ac <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
 3ac:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
 3ae:	4a06      	ldr	r2, [pc, #24]	; (3c8 <_sbrk+0x1c>)
 3b0:	6812      	ldr	r2, [r2, #0]
 3b2:	2a00      	cmp	r2, #0
 3b4:	d004      	beq.n	3c0 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
 3b6:	4a04      	ldr	r2, [pc, #16]	; (3c8 <_sbrk+0x1c>)
 3b8:	6810      	ldr	r0, [r2, #0]

	heap += incr;
 3ba:	18c3      	adds	r3, r0, r3
 3bc:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
 3be:	4770      	bx	lr
		heap = (unsigned char *)&_end;
 3c0:	4902      	ldr	r1, [pc, #8]	; (3cc <_sbrk+0x20>)
 3c2:	4a01      	ldr	r2, [pc, #4]	; (3c8 <_sbrk+0x1c>)
 3c4:	6011      	str	r1, [r2, #0]
 3c6:	e7f6      	b.n	3b6 <_sbrk+0xa>
 3c8:	20000084 	.word	0x20000084
 3cc:	200020b8 	.word	0x200020b8

000003d0 <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 8:
		return (ms * (freq / 100000)) * 100;
 3d0:	4b01      	ldr	r3, [pc, #4]	; (3d8 <_get_cycles_for_ms+0x8>)
 3d2:	4358      	muls	r0, r3
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
 3d4:	4770      	bx	lr
 3d6:	46c0      	nop			; (mov r8, r8)
 3d8:	00002ee0 	.word	0x00002ee0

000003dc <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
 3dc:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
 3de:	4b09      	ldr	r3, [pc, #36]	; (404 <_init_chip+0x28>)
 3e0:	685a      	ldr	r2, [r3, #4]
 3e2:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_set_performance_level(2);
 3e4:	2002      	movs	r0, #2
 3e6:	4b08      	ldr	r3, [pc, #32]	; (408 <_init_chip+0x2c>)
 3e8:	4798      	blx	r3

	_osc32kctrl_init_sources();
 3ea:	4b08      	ldr	r3, [pc, #32]	; (40c <_init_chip+0x30>)
 3ec:	4798      	blx	r3
	_oscctrl_init_sources();
 3ee:	4b08      	ldr	r3, [pc, #32]	; (410 <_init_chip+0x34>)
 3f0:	4798      	blx	r3
	_mclk_init();
 3f2:	4b08      	ldr	r3, [pc, #32]	; (414 <_init_chip+0x38>)
 3f4:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
 3f6:	4b08      	ldr	r3, [pc, #32]	; (418 <_init_chip+0x3c>)
 3f8:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
 3fa:	20ff      	movs	r0, #255	; 0xff
 3fc:	4b07      	ldr	r3, [pc, #28]	; (41c <_init_chip+0x40>)
 3fe:	4798      	blx	r3
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
 400:	bd10      	pop	{r4, pc}
 402:	46c0      	nop			; (mov r8, r8)
 404:	41004000 	.word	0x41004000
 408:	0000079b 	.word	0x0000079b
 40c:	00000749 	.word	0x00000749
 410:	00000761 	.word	0x00000761
 414:	00000445 	.word	0x00000445
 418:	00000799 	.word	0x00000799
 41c:	00000421 	.word	0x00000421

00000420 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
 420:	07c3      	lsls	r3, r0, #31
 422:	d507      	bpl.n	434 <_gclk_init_generators_by_fref+0x14>
}

static inline void hri_gclk_write_GENCTRL_reg(const void *const hw, uint8_t index, hri_gclk_genctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENCTRL[index].reg = data;
 424:	4a04      	ldr	r2, [pc, #16]	; (438 <_gclk_init_generators_by_fref+0x18>)
 426:	4b05      	ldr	r3, [pc, #20]	; (43c <_gclk_init_generators_by_fref+0x1c>)
 428:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
 42a:	0019      	movs	r1, r3
 42c:	4a04      	ldr	r2, [pc, #16]	; (440 <_gclk_init_generators_by_fref+0x20>)
 42e:	684b      	ldr	r3, [r1, #4]
 430:	4213      	tst	r3, r2
 432:	d1fc      	bne.n	42e <_gclk_init_generators_by_fref+0xe>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
}
 434:	4770      	bx	lr
 436:	46c0      	nop			; (mov r8, r8)
 438:	00010106 	.word	0x00010106
 43c:	40001800 	.word	0x40001800
 440:	000007fd 	.word	0x000007fd

00000444 <_mclk_init>:
	((Mclk *)hw)->BUPDIV.reg = data;
 444:	4b03      	ldr	r3, [pc, #12]	; (454 <_mclk_init+0x10>)
 446:	2208      	movs	r2, #8
 448:	719a      	strb	r2, [r3, #6]
	((Mclk *)hw)->LPDIV.reg = data;
 44a:	3a04      	subs	r2, #4
 44c:	715a      	strb	r2, [r3, #5]
	((Mclk *)hw)->CPUDIV.reg = data;
 44e:	3a03      	subs	r2, #3
 450:	711a      	strb	r2, [r3, #4]
{
	void *hw = (void *)MCLK;
	hri_mclk_write_BUPDIV_reg(hw, MCLK_BUPDIV_BUPDIV(CONF_MCLK_BUPDIV));
	hri_mclk_write_LPDIV_reg(hw, MCLK_LPDIV_LPDIV(CONF_MCLK_LPDIV));
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
}
 452:	4770      	bx	lr
 454:	40000400 	.word	0x40000400

00000458 <_flash_program>:
 *                           write is stored
 * \param[in] size           The size of data to write to a page
 */
static void _flash_program(void *const hw, const uint32_t dst_addr, const uint8_t *buffer, const uint16_t size,
                           uint32_t nvmctrl_cmd)
{
 458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 45a:	0004      	movs	r4, r0
 45c:	000d      	movs	r5, r1
 45e:	0017      	movs	r7, r2
 460:	001e      	movs	r6, r3
	ASSERT(!(dst_addr % 2));
 462:	2301      	movs	r3, #1
 464:	404b      	eors	r3, r1
 466:	2001      	movs	r0, #1
 468:	4018      	ands	r0, r3
 46a:	22c5      	movs	r2, #197	; 0xc5
 46c:	0052      	lsls	r2, r2, #1
 46e:	4919      	ldr	r1, [pc, #100]	; (4d4 <_flash_program+0x7c>)
 470:	4b19      	ldr	r3, [pc, #100]	; (4d8 <_flash_program+0x80>)
 472:	4798      	blx	r3

	uint32_t nvm_address = dst_addr / 2;
 474:	0868      	lsrs	r0, r5, #1
	uint16_t i, data;

	while (!hri_nvmctrl_get_interrupt_READY_bit(hw)) {
 476:	2201      	movs	r2, #1
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
 478:	7d23      	ldrb	r3, [r4, #20]
 47a:	4213      	tst	r3, r2
 47c:	d0fc      	beq.n	478 <_flash_program+0x20>
	((Nvmctrl *)hw)->CTRLA.reg = data;
 47e:	4b17      	ldr	r3, [pc, #92]	; (4dc <_flash_program+0x84>)
 480:	8023      	strh	r3, [r4, #0]
		/* Wait until this module isn't busy */
	}

	hri_nvmctrl_write_CTRLA_reg(hw, NVMCTRL_CTRLA_CMD_PBC | NVMCTRL_CTRLA_CMDEX_KEY);

	while (!hri_nvmctrl_get_interrupt_READY_bit(hw)) {
 482:	2201      	movs	r2, #1
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
 484:	7d23      	ldrb	r3, [r4, #20]
 486:	4213      	tst	r3, r2
 488:	d0fc      	beq.n	484 <_flash_program+0x2c>
}

static inline void hri_nvmctrl_clear_STATUS_reg(const void *const hw, hri_nvmctrl_status_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->STATUS.reg = mask;
 48a:	2320      	movs	r3, #32
 48c:	33ff      	adds	r3, #255	; 0xff
 48e:	8323      	strh	r3, [r4, #24]
	}

	/* Clear flags */
	hri_nvmctrl_clear_STATUS_reg(hw, NVMCTRL_STATUS_MASK);

	for (i = 0; i < size; i += 2) {
 490:	2e00      	cmp	r6, #0
 492:	d00e      	beq.n	4b2 <_flash_program+0x5a>
 494:	3b1f      	subs	r3, #31
 496:	3bff      	subs	r3, #255	; 0xff
 498:	0029      	movs	r1, r5
 49a:	4399      	bics	r1, r3
 49c:	2300      	movs	r3, #0
		data = buffer[i];
 49e:	5cfd      	ldrb	r5, [r7, r3]
 4a0:	b2aa      	uxth	r2, r5
		if (i < NVMCTRL_PAGE_SIZE - 1) {
 4a2:	2b3e      	cmp	r3, #62	; 0x3e
 4a4:	d910      	bls.n	4c8 <_flash_program+0x70>
			data |= (buffer[i + 1] << 8);
		}
		NVM_MEMORY[nvm_address++] = data;
 4a6:	800a      	strh	r2, [r1, #0]
	for (i = 0; i < size; i += 2) {
 4a8:	3302      	adds	r3, #2
 4aa:	b29b      	uxth	r3, r3
 4ac:	3102      	adds	r1, #2
 4ae:	429e      	cmp	r6, r3
 4b0:	d8f5      	bhi.n	49e <_flash_program+0x46>
	}

	while (!hri_nvmctrl_get_interrupt_READY_bit(hw)) {
 4b2:	2201      	movs	r2, #1
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
 4b4:	7d23      	ldrb	r3, [r4, #20]
 4b6:	4213      	tst	r3, r2
 4b8:	d0fc      	beq.n	4b4 <_flash_program+0x5c>
	((Nvmctrl *)hw)->ADDR.reg = data;
 4ba:	61e0      	str	r0, [r4, #28]
		/* Wait until this module isn't busy */
	}

	hri_nvmctrl_write_ADDR_reg(hw, dst_addr / 2);
	hri_nvmctrl_write_CTRLA_reg(hw, nvmctrl_cmd | NVMCTRL_CTRLA_CMDEX_KEY);
 4bc:	4b08      	ldr	r3, [pc, #32]	; (4e0 <_flash_program+0x88>)
 4be:	9a06      	ldr	r2, [sp, #24]
 4c0:	4313      	orrs	r3, r2
 4c2:	b29b      	uxth	r3, r3
	((Nvmctrl *)hw)->CTRLA.reg = data;
 4c4:	8023      	strh	r3, [r4, #0]
}
 4c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			data |= (buffer[i + 1] << 8);
 4c8:	18fa      	adds	r2, r7, r3
 4ca:	7852      	ldrb	r2, [r2, #1]
 4cc:	0212      	lsls	r2, r2, #8
 4ce:	432a      	orrs	r2, r5
 4d0:	e7e9      	b.n	4a6 <_flash_program+0x4e>
 4d2:	46c0      	nop			; (mov r8, r8)
 4d4:	00000ba4 	.word	0x00000ba4
 4d8:	000003a5 	.word	0x000003a5
 4dc:	ffffa544 	.word	0xffffa544
 4e0:	ffffa500 	.word	0xffffa500

000004e4 <_flash_init>:
{
 4e4:	b570      	push	{r4, r5, r6, lr}
 4e6:	0005      	movs	r5, r0
 4e8:	000c      	movs	r4, r1
	ASSERT(device && (hw == NVMCTRL));
 4ea:	2800      	cmp	r0, #0
 4ec:	d01d      	beq.n	52a <_flash_init+0x46>
 4ee:	4b10      	ldr	r3, [pc, #64]	; (530 <_flash_init+0x4c>)
 4f0:	18c8      	adds	r0, r1, r3
 4f2:	4243      	negs	r3, r0
 4f4:	4158      	adcs	r0, r3
 4f6:	b2c0      	uxtb	r0, r0
 4f8:	2246      	movs	r2, #70	; 0x46
 4fa:	490e      	ldr	r1, [pc, #56]	; (534 <_flash_init+0x50>)
 4fc:	4b0e      	ldr	r3, [pc, #56]	; (538 <_flash_init+0x54>)
 4fe:	4798      	blx	r3
	device->hw = hw;
 500:	612c      	str	r4, [r5, #16]
	tmp = ((Nvmctrl *)hw)->CTRLB.reg;
 502:	6862      	ldr	r2, [r4, #4]
	tmp &= mask;
 504:	239e      	movs	r3, #158	; 0x9e
 506:	4013      	ands	r3, r2
	((Nvmctrl *)hw)->CTRLB.reg = data;
 508:	6063      	str	r3, [r4, #4]
	_nvm_dev = device;
 50a:	4b0c      	ldr	r3, [pc, #48]	; (53c <_flash_init+0x58>)
 50c:	601d      	str	r5, [r3, #0]
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 50e:	4b0c      	ldr	r3, [pc, #48]	; (540 <_flash_init+0x5c>)
 510:	2210      	movs	r2, #16
 512:	2180      	movs	r1, #128	; 0x80
 514:	505a      	str	r2, [r3, r1]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 516:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 51a:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 51e:	3101      	adds	r1, #1
 520:	31ff      	adds	r1, #255	; 0xff
 522:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 524:	601a      	str	r2, [r3, #0]
}
 526:	2000      	movs	r0, #0
 528:	bd70      	pop	{r4, r5, r6, pc}
 52a:	2000      	movs	r0, #0
 52c:	e7e4      	b.n	4f8 <_flash_init+0x14>
 52e:	46c0      	nop			; (mov r8, r8)
 530:	beffc000 	.word	0xbeffc000
 534:	00000ba4 	.word	0x00000ba4
 538:	000003a5 	.word	0x000003a5
 53c:	20000088 	.word	0x20000088
 540:	e000e100 	.word	0xe000e100

00000544 <_flash_read>:
{
 544:	b570      	push	{r4, r5, r6, lr}
	uint32_t nvm_address = src_addr / 2;
 546:	084c      	lsrs	r4, r1, #1
	while (!hri_nvmctrl_get_interrupt_READY_bit(device->hw)) {
 548:	6905      	ldr	r5, [r0, #16]
 54a:	2601      	movs	r6, #1
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
 54c:	7d28      	ldrb	r0, [r5, #20]
 54e:	4230      	tst	r0, r6
 550:	d0fc      	beq.n	54c <_flash_read+0x8>
	((Nvmctrl *)hw)->STATUS.reg = mask;
 552:	2020      	movs	r0, #32
 554:	30ff      	adds	r0, #255	; 0xff
 556:	8328      	strh	r0, [r5, #24]
		i = 0;
 558:	2000      	movs	r0, #0
	if (src_addr % 2) {
 55a:	07cd      	lsls	r5, r1, #31
 55c:	d505      	bpl.n	56a <_flash_read+0x26>
		data      = NVM_MEMORY[nvm_address++];
 55e:	3401      	adds	r4, #1
 560:	3001      	adds	r0, #1
 562:	4381      	bics	r1, r0
 564:	8809      	ldrh	r1, [r1, #0]
		buffer[0] = data >> 8;
 566:	0a09      	lsrs	r1, r1, #8
 568:	7011      	strb	r1, [r2, #0]
	while (i < length) {
 56a:	4298      	cmp	r0, r3
 56c:	d211      	bcs.n	592 <_flash_read+0x4e>
 56e:	1812      	adds	r2, r2, r0
 570:	0064      	lsls	r4, r4, #1
 572:	1a24      	subs	r4, r4, r0
		if (i < (length - 1)) {
 574:	1e5d      	subs	r5, r3, #1
 576:	e003      	b.n	580 <_flash_read+0x3c>
		i += 2;
 578:	3002      	adds	r0, #2
 57a:	3202      	adds	r2, #2
	while (i < length) {
 57c:	4283      	cmp	r3, r0
 57e:	d908      	bls.n	592 <_flash_read+0x4e>
 580:	1821      	adds	r1, r4, r0
		data      = NVM_MEMORY[nvm_address++];
 582:	8809      	ldrh	r1, [r1, #0]
 584:	b289      	uxth	r1, r1
		buffer[i] = (data & 0xFF);
 586:	7011      	strb	r1, [r2, #0]
		if (i < (length - 1)) {
 588:	4285      	cmp	r5, r0
 58a:	d9f5      	bls.n	578 <_flash_read+0x34>
			buffer[i + 1] = (data >> 8);
 58c:	0a09      	lsrs	r1, r1, #8
 58e:	7051      	strb	r1, [r2, #1]
 590:	e7f2      	b.n	578 <_flash_read+0x34>
}
 592:	bd70      	pop	{r4, r5, r6, pc}

00000594 <NVMCTRL_Handler>:

/**
 * \internal NVM interrupt handler
 */
void NVMCTRL_Handler(void)
{
 594:	b510      	push	{r4, lr}
	void *const hw = _nvm_dev->hw;
 596:	4b0a      	ldr	r3, [pc, #40]	; (5c0 <NVMCTRL_Handler+0x2c>)
 598:	6818      	ldr	r0, [r3, #0]
 59a:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
 59c:	7d1a      	ldrb	r2, [r3, #20]

	if (hri_nvmctrl_get_interrupt_READY_bit(hw)) {
 59e:	07d2      	lsls	r2, r2, #31
 5a0:	d504      	bpl.n	5ac <NVMCTRL_Handler+0x18>
		if (NULL != _nvm_dev->flash_cb.ready_cb) {
 5a2:	6803      	ldr	r3, [r0, #0]
 5a4:	2b00      	cmp	r3, #0
 5a6:	d000      	beq.n	5aa <NVMCTRL_Handler+0x16>
			_nvm_dev->flash_cb.ready_cb(_nvm_dev);
 5a8:	4798      	blx	r3
		hri_nvmctrl_clear_interrupt_ERROR_bit(hw);
		if (NULL != _nvm_dev->flash_cb.error_cb) {
			_nvm_dev->flash_cb.error_cb(_nvm_dev);
		}
	}
}
 5aa:	bd10      	pop	{r4, pc}
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_ERROR) >> NVMCTRL_INTFLAG_ERROR_Pos;
 5ac:	7d1a      	ldrb	r2, [r3, #20]
	} else if (hri_nvmctrl_get_interrupt_ERROR_bit(hw)) {
 5ae:	0792      	lsls	r2, r2, #30
 5b0:	d5fb      	bpl.n	5aa <NVMCTRL_Handler+0x16>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_ERROR;
 5b2:	2202      	movs	r2, #2
 5b4:	751a      	strb	r2, [r3, #20]
		if (NULL != _nvm_dev->flash_cb.error_cb) {
 5b6:	6843      	ldr	r3, [r0, #4]
 5b8:	2b00      	cmp	r3, #0
 5ba:	d0f6      	beq.n	5aa <NVMCTRL_Handler+0x16>
			_nvm_dev->flash_cb.error_cb(_nvm_dev);
 5bc:	4798      	blx	r3
}
 5be:	e7f4      	b.n	5aa <NVMCTRL_Handler+0x16>
 5c0:	20000088 	.word	0x20000088

000005c4 <_rww_flash_read>:

/**
 * \brief Reads a number of bytes in the internal RWWEE Flash.
 */
int32_t _rww_flash_read(struct _flash_device *const device, const uint32_t src_addr, uint8_t *buffer, uint32_t length)
{
 5c4:	b570      	push	{r4, r5, r6, lr}
	    || (addr > (NVMCTRL_RWW_EEPROM_ADDR + NVMCTRL_PAGE_SIZE * NVMCTRL_RWWEE_PAGES))) {
 5c6:	4c0b      	ldr	r4, [pc, #44]	; (5f4 <_rww_flash_read+0x30>)
 5c8:	190d      	adds	r5, r1, r4
	/* Check if the address is valid */
	if (!_is_valid_rww_flash_address(src_addr) || !_is_valid_rww_flash_address(src_addr + length)) {
 5ca:	2480      	movs	r4, #128	; 0x80
 5cc:	01a4      	lsls	r4, r4, #6
 5ce:	42a5      	cmp	r5, r4
 5d0:	d80a      	bhi.n	5e8 <_rww_flash_read+0x24>
	    || (addr > (NVMCTRL_RWW_EEPROM_ADDR + NVMCTRL_PAGE_SIZE * NVMCTRL_RWWEE_PAGES))) {
 5d2:	4c08      	ldr	r4, [pc, #32]	; (5f4 <_rww_flash_read+0x30>)
 5d4:	191c      	adds	r4, r3, r4
 5d6:	1864      	adds	r4, r4, r1
	if (!_is_valid_rww_flash_address(src_addr) || !_is_valid_rww_flash_address(src_addr + length)) {
 5d8:	2580      	movs	r5, #128	; 0x80
 5da:	01ad      	lsls	r5, r5, #6
 5dc:	42ac      	cmp	r4, r5
 5de:	d806      	bhi.n	5ee <_rww_flash_read+0x2a>
		return ERR_BAD_ADDRESS;
	}

	_flash_read(device, src_addr, buffer, length);
 5e0:	4c05      	ldr	r4, [pc, #20]	; (5f8 <_rww_flash_read+0x34>)
 5e2:	47a0      	blx	r4

	return ERR_NONE;
 5e4:	2000      	movs	r0, #0
}
 5e6:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_BAD_ADDRESS;
 5e8:	200e      	movs	r0, #14
 5ea:	4240      	negs	r0, r0
 5ec:	e7fb      	b.n	5e6 <_rww_flash_read+0x22>
 5ee:	200e      	movs	r0, #14
 5f0:	4240      	negs	r0, r0
 5f2:	e7f8      	b.n	5e6 <_rww_flash_read+0x22>
 5f4:	ffc00000 	.word	0xffc00000
 5f8:	00000545 	.word	0x00000545

000005fc <_rww_flash_write>:

/**
 * \brief Writes a number of bytes in the internal RWWEE Flash.
 */
int32_t _rww_flash_write(struct _flash_device *const device, const uint32_t dst_addr, uint8_t *buffer, uint32_t length)
{
 5fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 5fe:	46de      	mov	lr, fp
 600:	4657      	mov	r7, sl
 602:	464e      	mov	r6, r9
 604:	4645      	mov	r5, r8
 606:	b5e0      	push	{r5, r6, r7, lr}
 608:	b0c5      	sub	sp, #276	; 0x114
 60a:	4683      	mov	fp, r0
 60c:	0016      	movs	r6, r2
 60e:	001d      	movs	r5, r3
	    || (addr > (NVMCTRL_RWW_EEPROM_ADDR + NVMCTRL_PAGE_SIZE * NVMCTRL_RWWEE_PAGES))) {
 610:	4b49      	ldr	r3, [pc, #292]	; (738 <_rww_flash_write+0x13c>)
 612:	18ca      	adds	r2, r1, r3
	uint32_t row_start_addr, row_end_addr;
	uint32_t i, j, k;
	uint32_t wr_start_addr = dst_addr;

	/* Check if the address is valid */
	if (!_is_valid_rww_flash_address(dst_addr) || !_is_valid_rww_flash_address(dst_addr + length)) {
 614:	2380      	movs	r3, #128	; 0x80
 616:	019b      	lsls	r3, r3, #6
 618:	429a      	cmp	r2, r3
 61a:	d900      	bls.n	61e <_rww_flash_write+0x22>
 61c:	e086      	b.n	72c <_rww_flash_write+0x130>
	    || (addr > (NVMCTRL_RWW_EEPROM_ADDR + NVMCTRL_PAGE_SIZE * NVMCTRL_RWWEE_PAGES))) {
 61e:	4b46      	ldr	r3, [pc, #280]	; (738 <_rww_flash_write+0x13c>)
 620:	18eb      	adds	r3, r5, r3
 622:	185b      	adds	r3, r3, r1
	if (!_is_valid_rww_flash_address(dst_addr) || !_is_valid_rww_flash_address(dst_addr + length)) {
 624:	2280      	movs	r2, #128	; 0x80
 626:	0192      	lsls	r2, r2, #6
 628:	4293      	cmp	r3, r2
 62a:	d900      	bls.n	62e <_rww_flash_write+0x32>
 62c:	e081      	b.n	732 <_rww_flash_write+0x136>
 62e:	000c      	movs	r4, r1
 630:	e02f      	b.n	692 <_rww_flash_write+0x96>
 632:	46ba      	mov	sl, r7
 634:	4667      	mov	r7, ip
			buffer++;
			length--;
		}

		/* erase row before write */
		_flash_erase_row(device->hw, row_start_addr, NVMCTRL_CTRLA_CMD_RWWEEER);
 636:	465b      	mov	r3, fp
 638:	691a      	ldr	r2, [r3, #16]
	while (!hri_nvmctrl_get_interrupt_READY_bit(hw)) {
 63a:	2101      	movs	r1, #1
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
 63c:	7d13      	ldrb	r3, [r2, #20]
 63e:	420b      	tst	r3, r1
 640:	d0fc      	beq.n	63c <_rww_flash_write+0x40>
	((Nvmctrl *)hw)->STATUS.reg = mask;
 642:	2320      	movs	r3, #32
 644:	33ff      	adds	r3, #255	; 0xff
 646:	8313      	strh	r3, [r2, #24]
	hri_nvmctrl_write_ADDR_reg(hw, dst_addr / 2);
 648:	464b      	mov	r3, r9
 64a:	085b      	lsrs	r3, r3, #1
	((Nvmctrl *)hw)->ADDR.reg = data;
 64c:	61d3      	str	r3, [r2, #28]
	((Nvmctrl *)hw)->CTRLA.reg = data;
 64e:	4b3b      	ldr	r3, [pc, #236]	; (73c <_rww_flash_write+0x140>)
 650:	8013      	strh	r3, [r2, #0]

		/* write buffer to flash */
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
			_flash_program(device->hw,
 652:	464b      	mov	r3, r9
 654:	46a0      	mov	r8, r4
 656:	9703      	str	r7, [sp, #12]
 658:	002a      	movs	r2, r5
 65a:	464d      	mov	r5, r9
 65c:	46b1      	mov	r9, r6
 65e:	465e      	mov	r6, fp
 660:	4693      	mov	fp, r2
 662:	001f      	movs	r7, r3
 664:	1b7a      	subs	r2, r7, r5
 666:	ab04      	add	r3, sp, #16
 668:	469c      	mov	ip, r3
 66a:	4462      	add	r2, ip
 66c:	231c      	movs	r3, #28
 66e:	9300      	str	r3, [sp, #0]
 670:	3324      	adds	r3, #36	; 0x24
 672:	0039      	movs	r1, r7
 674:	6930      	ldr	r0, [r6, #16]
 676:	4c32      	ldr	r4, [pc, #200]	; (740 <_rww_flash_write+0x144>)
 678:	47a0      	blx	r4
 67a:	3740      	adds	r7, #64	; 0x40
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
 67c:	9b03      	ldr	r3, [sp, #12]
 67e:	42bb      	cmp	r3, r7
 680:	d1f0      	bne.n	664 <_rww_flash_write+0x68>
 682:	4644      	mov	r4, r8
 684:	465d      	mov	r5, fp
 686:	46b3      	mov	fp, r6
 688:	464e      	mov	r6, r9
			               tmp_buffer[i],
			               NVMCTRL_PAGE_SIZE,
			               NVMCTRL_CTRLA_CMD_RWWEEWP);
		}

	} while (row_end_addr < (wr_start_addr + length - 1));
 68a:	192b      	adds	r3, r5, r4
 68c:	3b01      	subs	r3, #1
 68e:	459a      	cmp	sl, r3
 690:	d244      	bcs.n	71c <_rww_flash_write+0x120>
		row_start_addr = wr_start_addr & ~((NVMCTRL_PAGE_SIZE * NVMCTRL_ROW_PAGES) - 1);
 692:	23ff      	movs	r3, #255	; 0xff
 694:	0022      	movs	r2, r4
 696:	439a      	bics	r2, r3
 698:	4691      	mov	r9, r2
		row_end_addr   = row_start_addr + NVMCTRL_ROW_PAGES * NVMCTRL_PAGE_SIZE - 1;
 69a:	444b      	add	r3, r9
 69c:	469a      	mov	sl, r3
 69e:	2380      	movs	r3, #128	; 0x80
 6a0:	005b      	lsls	r3, r3, #1
 6a2:	444b      	add	r3, r9
 6a4:	4698      	mov	r8, r3
 6a6:	0017      	movs	r7, r2
 6a8:	4642      	mov	r2, r8
 6aa:	9203      	str	r2, [sp, #12]
 6ac:	46a0      	mov	r8, r4
 6ae:	464c      	mov	r4, r9
 6b0:	46b1      	mov	r9, r6
 6b2:	465e      	mov	r6, fp
 6b4:	46ab      	mov	fp, r5
			_rww_flash_read(device, row_start_addr + i * NVMCTRL_PAGE_SIZE, tmp_buffer[i], NVMCTRL_PAGE_SIZE);
 6b6:	1b3a      	subs	r2, r7, r4
 6b8:	ab04      	add	r3, sp, #16
 6ba:	469c      	mov	ip, r3
 6bc:	4462      	add	r2, ip
 6be:	2340      	movs	r3, #64	; 0x40
 6c0:	0039      	movs	r1, r7
 6c2:	0030      	movs	r0, r6
 6c4:	4d1f      	ldr	r5, [pc, #124]	; (744 <_rww_flash_write+0x148>)
 6c6:	47a8      	blx	r5
 6c8:	3740      	adds	r7, #64	; 0x40
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
 6ca:	9b03      	ldr	r3, [sp, #12]
 6cc:	429f      	cmp	r7, r3
 6ce:	d1f2      	bne.n	6b6 <_rww_flash_write+0xba>
 6d0:	465d      	mov	r5, fp
 6d2:	46b3      	mov	fp, r6
 6d4:	464e      	mov	r6, r9
 6d6:	46a1      	mov	r9, r4
 6d8:	4644      	mov	r4, r8
		j = (wr_start_addr - row_start_addr) / NVMCTRL_PAGE_SIZE;
 6da:	464b      	mov	r3, r9
 6dc:	1ae3      	subs	r3, r4, r3
 6de:	0999      	lsrs	r1, r3, #6
 6e0:	223f      	movs	r2, #63	; 0x3f
 6e2:	4013      	ands	r3, r2
		while ((wr_start_addr <= row_end_addr) && (length > 0)) {
 6e4:	4554      	cmp	r4, sl
 6e6:	d8a6      	bhi.n	636 <_rww_flash_write+0x3a>
 6e8:	2d00      	cmp	r5, #0
 6ea:	d0a4      	beq.n	636 <_rww_flash_write+0x3a>
			k                = (k + 1) % NVMCTRL_PAGE_SIZE;
 6ec:	46bc      	mov	ip, r7
 6ee:	4657      	mov	r7, sl
			tmp_buffer[j][k] = *buffer;
 6f0:	018a      	lsls	r2, r1, #6
 6f2:	a804      	add	r0, sp, #16
 6f4:	4680      	mov	r8, r0
 6f6:	4442      	add	r2, r8
 6f8:	7830      	ldrb	r0, [r6, #0]
 6fa:	54d0      	strb	r0, [r2, r3]
			k                = (k + 1) % NVMCTRL_PAGE_SIZE;
 6fc:	3301      	adds	r3, #1
 6fe:	223f      	movs	r2, #63	; 0x3f
 700:	4013      	ands	r3, r2
				j++;
 702:	425a      	negs	r2, r3
 704:	415a      	adcs	r2, r3
 706:	1889      	adds	r1, r1, r2
			wr_start_addr++;
 708:	3401      	adds	r4, #1
			buffer++;
 70a:	3601      	adds	r6, #1
			length--;
 70c:	3d01      	subs	r5, #1
		while ((wr_start_addr <= row_end_addr) && (length > 0)) {
 70e:	42a7      	cmp	r7, r4
 710:	d38f      	bcc.n	632 <_rww_flash_write+0x36>
 712:	2d00      	cmp	r5, #0
 714:	d1ec      	bne.n	6f0 <_rww_flash_write+0xf4>
 716:	46ba      	mov	sl, r7
 718:	4667      	mov	r7, ip
 71a:	e78c      	b.n	636 <_rww_flash_write+0x3a>

	return ERR_NONE;
 71c:	2000      	movs	r0, #0
}
 71e:	b045      	add	sp, #276	; 0x114
 720:	bc3c      	pop	{r2, r3, r4, r5}
 722:	4690      	mov	r8, r2
 724:	4699      	mov	r9, r3
 726:	46a2      	mov	sl, r4
 728:	46ab      	mov	fp, r5
 72a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ERR_BAD_ADDRESS;
 72c:	200e      	movs	r0, #14
 72e:	4240      	negs	r0, r0
 730:	e7f5      	b.n	71e <_rww_flash_write+0x122>
 732:	200e      	movs	r0, #14
 734:	4240      	negs	r0, r0
 736:	e7f2      	b.n	71e <_rww_flash_write+0x122>
 738:	ffc00000 	.word	0xffc00000
 73c:	ffffa51a 	.word	0xffffa51a
 740:	00000459 	.word	0x00000459
 744:	000005c5 	.word	0x000005c5

00000748 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
 748:	4b04      	ldr	r3, [pc, #16]	; (75c <_osc32kctrl_init_sources+0x14>)
 74a:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSC32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSC32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
 74c:	21f8      	movs	r1, #248	; 0xf8
 74e:	0149      	lsls	r1, r1, #5
 750:	400a      	ands	r2, r1
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
 752:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
 754:	2201      	movs	r2, #1
 756:	611a      	str	r2, [r3, #16]
		;
#endif
#endif
	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
 758:	4770      	bx	lr
 75a:	46c0      	nop			; (mov r8, r8)
 75c:	40001000 	.word	0x40001000

00000760 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_OSC16MCTRL_reg(const void *const hw, hri_oscctrl_osc16mctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC16MCTRL.reg = data;
 760:	228a      	movs	r2, #138	; 0x8a
 762:	4b0c      	ldr	r3, [pc, #48]	; (794 <_oscctrl_init_sources+0x34>)
 764:	751a      	strb	r2, [r3, #20]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
 766:	0018      	movs	r0, r3
 768:	2138      	movs	r1, #56	; 0x38
 76a:	3a88      	subs	r2, #136	; 0x88
 76c:	5c43      	ldrb	r3, [r0, r1]
 76e:	4213      	tst	r3, r2
 770:	d1fc      	bne.n	76c <_oscctrl_init_sources+0xc>
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC16MRDY) >> OSCCTRL_STATUS_OSC16MRDY_Pos;
 772:	4908      	ldr	r1, [pc, #32]	; (794 <_oscctrl_init_sources+0x34>)
#endif
#endif

#if CONF_OSC16M_CONFIG == 1
#if CONF_OSC16M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC16MRDY_bit(hw))
 774:	2210      	movs	r2, #16
 776:	68cb      	ldr	r3, [r1, #12]
 778:	421a      	tst	r2, r3
 77a:	d0fc      	beq.n	776 <_oscctrl_init_sources+0x16>
	((Oscctrl *)hw)->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND;
 77c:	4a05      	ldr	r2, [pc, #20]	; (794 <_oscctrl_init_sources+0x34>)
 77e:	7d13      	ldrb	r3, [r2, #20]
 780:	2180      	movs	r1, #128	; 0x80
 782:	430b      	orrs	r3, r1
 784:	7513      	strb	r3, [r2, #20]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
 786:	0010      	movs	r0, r2
 788:	3948      	subs	r1, #72	; 0x48
 78a:	220e      	movs	r2, #14
 78c:	5c43      	ldrb	r3, [r0, r1]
 78e:	4213      	tst	r3, r2
 790:	d1fc      	bne.n	78c <_oscctrl_init_sources+0x2c>
#if CONF_OSC16M_ONDEMAND == 1
	hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
 792:	4770      	bx	lr
 794:	40000c00 	.word	0x40000c00

00000798 <_oscctrl_init_referenced_generators>:
#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
		;
#endif
	(void)hw, (void)tmp;
}
 798:	4770      	bx	lr

0000079a <_set_performance_level>:
}

static inline hri_pm_plcfg_reg_t hri_pm_get_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Pm *)hw)->PLCFG.reg;
 79a:	2380      	movs	r3, #128	; 0x80
 79c:	05db      	lsls	r3, r3, #23
 79e:	789b      	ldrb	r3, [r3, #2]
/**
 * \brief Set performance level
 */
void _set_performance_level(const uint8_t level)
{
	if (hri_pm_get_PLCFG_PLSEL_bf(PM, PM_PLCFG_PLSEL_Msk) != level) {
 7a0:	2203      	movs	r2, #3
 7a2:	4013      	ands	r3, r2
 7a4:	4298      	cmp	r0, r3
 7a6:	d00c      	beq.n	7c2 <_set_performance_level+0x28>
	((Pm *)hw)->INTFLAG.reg = mask;
 7a8:	2280      	movs	r2, #128	; 0x80
 7aa:	05d2      	lsls	r2, r2, #23
 7ac:	23ff      	movs	r3, #255	; 0xff
 7ae:	7193      	strb	r3, [r2, #6]

static inline void hri_pm_write_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t data)
{
	uint8_t tmp;
	PM_CRITICAL_SECTION_ENTER();
	tmp = ((Pm *)hw)->PLCFG.reg;
 7b0:	7893      	ldrb	r3, [r2, #2]
	tmp &= ~PM_PLCFG_PLSEL_Msk;
 7b2:	2103      	movs	r1, #3
 7b4:	438b      	bics	r3, r1
	tmp |= PM_PLCFG_PLSEL(data);
 7b6:	4008      	ands	r0, r1
 7b8:	4318      	orrs	r0, r3
	((Pm *)hw)->PLCFG.reg = tmp;
 7ba:	7090      	strb	r0, [r2, #2]
	return ((Pm *)hw)->INTFLAG.reg;
 7bc:	7993      	ldrb	r3, [r2, #6]
		hri_pm_clear_INTFLAG_reg(PM, 0xFF);
		hri_pm_write_PLCFG_PLSEL_bf(PM, level);
		while (!hri_pm_read_INTFLAG_reg(PM))
 7be:	2b00      	cmp	r3, #0
 7c0:	d0fc      	beq.n	7bc <_set_performance_level+0x22>
			;
	}
}
 7c2:	4770      	bx	lr

000007c4 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
 7c4:	4b02      	ldr	r3, [pc, #8]	; (7d0 <_delay_init+0xc>)
 7c6:	4a03      	ldr	r2, [pc, #12]	; (7d4 <_delay_init+0x10>)
 7c8:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
 7ca:	2205      	movs	r2, #5
 7cc:	601a      	str	r2, [r3, #0]
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
	_system_time_init(hw);
}
 7ce:	4770      	bx	lr
 7d0:	e000e010 	.word	0xe000e010
 7d4:	00ffffff 	.word	0x00ffffff

000007d8 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
 7d8:	b570      	push	{r4, r5, r6, lr}
	(void)hw;
	uint8_t  n   = cycles >> 24;
 7da:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
 7dc:	1e5e      	subs	r6, r3, #1
 7de:	b2f6      	uxtb	r6, r6
 7e0:	2b00      	cmp	r3, #0
 7e2:	d013      	beq.n	80c <_delay_cycles+0x34>
 7e4:	0034      	movs	r4, r6
		SysTick->LOAD = 0xFFFFFF;
 7e6:	4a0e      	ldr	r2, [pc, #56]	; (820 <_delay_cycles+0x48>)
 7e8:	4d0e      	ldr	r5, [pc, #56]	; (824 <_delay_cycles+0x4c>)
		SysTick->VAL  = 0xFFFFFF;
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
 7ea:	2080      	movs	r0, #128	; 0x80
 7ec:	0240      	lsls	r0, r0, #9
		SysTick->LOAD = 0xFFFFFF;
 7ee:	6055      	str	r5, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
 7f0:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
 7f2:	6813      	ldr	r3, [r2, #0]
 7f4:	4203      	tst	r3, r0
 7f6:	d0fc      	beq.n	7f2 <_delay_cycles+0x1a>
	while (n--) {
 7f8:	3c01      	subs	r4, #1
 7fa:	b2e4      	uxtb	r4, r4
 7fc:	2cff      	cmp	r4, #255	; 0xff
 7fe:	d1f6      	bne.n	7ee <_delay_cycles+0x16>
 800:	0633      	lsls	r3, r6, #24
 802:	1af6      	subs	r6, r6, r3
 804:	4b08      	ldr	r3, [pc, #32]	; (828 <_delay_cycles+0x50>)
 806:	469c      	mov	ip, r3
 808:	4461      	add	r1, ip
 80a:	1871      	adds	r1, r6, r1
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
 80c:	4b04      	ldr	r3, [pc, #16]	; (820 <_delay_cycles+0x48>)
 80e:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
 810:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
 812:	0019      	movs	r1, r3
 814:	2280      	movs	r2, #128	; 0x80
 816:	0252      	lsls	r2, r2, #9
 818:	680b      	ldr	r3, [r1, #0]
 81a:	4213      	tst	r3, r2
 81c:	d0fc      	beq.n	818 <_delay_cycles+0x40>
		;
}
 81e:	bd70      	pop	{r4, r5, r6, pc}
 820:	e000e010 	.word	0xe000e010
 824:	00ffffff 	.word	0x00ffffff
 828:	ff000001 	.word	0xff000001

0000082c <aes_measurement>:
#define NVMCTRL_ROW_SIZE (NVMCTRL_PAGE_SIZE * NVMCTRL_ROW_PAGES)
#endif


void aes_measurement(void)
{
 82c:	b5f0      	push	{r4, r5, r6, r7, lr}
 82e:	46ce      	mov	lr, r9
 830:	b500      	push	{lr}
	};*/

	
	
	// Allocate buffer memory
	uint8_t *input = malloc(sizeof(uint8_t) * MAX_NUM_BYTES);
 832:	484f      	ldr	r0, [pc, #316]	; (970 <aes_measurement+0x144>)
 834:	4b4f      	ldr	r3, [pc, #316]	; (974 <aes_measurement+0x148>)
 836:	4798      	blx	r3
 838:	0007      	movs	r7, r0
	
	// Allocate buffer memory
	//uint8_t *output = malloc(sizeof(uint8_t) * MAX_NUM_BYTES);
	//uint8_t output[MAX_NUM_BYTES];

    delay_ms(10);
 83a:	200a      	movs	r0, #10
 83c:	4b4e      	ldr	r3, [pc, #312]	; (978 <aes_measurement+0x14c>)
 83e:	4798      	blx	r3
 840:	2402      	movs	r4, #2
 842:	2601      	movs	r6, #1
 844:	e041      	b.n	8ca <aes_measurement+0x9e>
			
			
		/* Save to flash
		   Put data at end of flash.
	    **/		
		START_MEASURE(DGI_GPIO2);
 846:	2002      	movs	r0, #2
 848:	4b4b      	ldr	r3, [pc, #300]	; (978 <aes_measurement+0x14c>)
 84a:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
 84c:	2280      	movs	r2, #128	; 0x80
 84e:	0352      	lsls	r2, r2, #13
 850:	23c0      	movs	r3, #192	; 0xc0
 852:	05db      	lsls	r3, r3, #23
 854:	619a      	str	r2, [r3, #24]
		//********************************************** Solution - 1 @ To write on emulation (RWW) Area
		if (_rww_flash_write(&FLASH_0.dev, NVMCTRL_RWW_EEPROM_ADDR, input, num_bytes ) != ERR_NONE) {
 856:	2300      	movs	r3, #0
 858:	003a      	movs	r2, r7
 85a:	2180      	movs	r1, #128	; 0x80
 85c:	03c9      	lsls	r1, r1, #15
 85e:	4847      	ldr	r0, [pc, #284]	; (97c <aes_measurement+0x150>)
 860:	4d47      	ldr	r5, [pc, #284]	; (980 <aes_measurement+0x154>)
 862:	47a8      	blx	r5
 864:	2800      	cmp	r0, #0
 866:	d000      	beq.n	86a <aes_measurement+0x3e>
 868:	e080      	b.n	96c <aes_measurement+0x140>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 86a:	25c0      	movs	r5, #192	; 0xc0
 86c:	05ed      	lsls	r5, r5, #23
 86e:	2380      	movs	r3, #128	; 0x80
 870:	035b      	lsls	r3, r3, #13
 872:	616b      	str	r3, [r5, #20]
		// ------------------------------------------- To write page by page use the code below (Avoid loops)---------
		//for (uint32_t page_index = 0; page_index * FLASH_PAGE_SIZE < num_bytes; page_index += 1) {
			/* Write data to flash */
			//flash_write(&FLASH_0, target_addr + page_index * FLASH_PAGE_SIZE, &input[page_index * FLASH_PAGE_SIZE], FLASH_PAGE_SIZE);
		//}
		STOP_MEASURE(DGI_GPIO2);
 874:	2002      	movs	r0, #2
 876:	4b40      	ldr	r3, [pc, #256]	; (978 <aes_measurement+0x14c>)
 878:	4699      	mov	r9, r3
 87a:	4798      	blx	r3
		
		SLEEP
 87c:	2002      	movs	r0, #2
 87e:	47c8      	blx	r9
		for (size_t byte = 0; byte < num_bytes; byte++) {
			input[byte] = 0xfe;
		}

		// Start reading from flash
		START_MEASURE(DGI_GPIO3);
 880:	2002      	movs	r0, #2
 882:	47c8      	blx	r9
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
 884:	2380      	movs	r3, #128	; 0x80
 886:	039b      	lsls	r3, r3, #14
 888:	61ab      	str	r3, [r5, #24]
		
		/* Read data from RWWEE flash (Solution 1) */
		if (_rww_flash_read(&FLASH_0.dev, NVMCTRL_RWW_EEPROM_ADDR, input, num_bytes) != ERR_NONE) {
 88a:	2300      	movs	r3, #0
 88c:	003a      	movs	r2, r7
 88e:	2180      	movs	r1, #128	; 0x80
 890:	03c9      	lsls	r1, r1, #15
 892:	483a      	ldr	r0, [pc, #232]	; (97c <aes_measurement+0x150>)
 894:	4d3b      	ldr	r5, [pc, #236]	; (984 <aes_measurement+0x158>)
 896:	47a8      	blx	r5
 898:	2800      	cmp	r0, #0
 89a:	d108      	bne.n	8ae <aes_measurement+0x82>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 89c:	2280      	movs	r2, #128	; 0x80
 89e:	0392      	lsls	r2, r2, #14
 8a0:	23c0      	movs	r3, #192	; 0xc0
 8a2:	05db      	lsls	r3, r3, #23
 8a4:	615a      	str	r2, [r3, #20]
			; /* Trap here when flash read error happen */
		}
		
		/* Read data from flash (Solution 2) */
		//flash_read(&FLASH_0, target_addr, output, num_bytes);
		STOP_MEASURE(DGI_GPIO3);
 8a6:	2002      	movs	r0, #2
 8a8:	4b33      	ldr	r3, [pc, #204]	; (978 <aes_measurement+0x14c>)
 8aa:	4798      	blx	r3
 8ac:	e00b      	b.n	8c6 <aes_measurement+0x9a>
 8ae:	e045      	b.n	93c <aes_measurement+0x110>
 8b0:	2280      	movs	r2, #128	; 0x80
 8b2:	0392      	lsls	r2, r2, #14
 8b4:	23c0      	movs	r3, #192	; 0xc0
 8b6:	05db      	lsls	r3, r3, #23
 8b8:	615a      	str	r2, [r3, #20]
 8ba:	2002      	movs	r0, #2
 8bc:	4b2e      	ldr	r3, [pc, #184]	; (978 <aes_measurement+0x14c>)
 8be:	4798      	blx	r3
	for (size_t num_bytes = MIN_NUM_BYTES; num_bytes <= MAX_NUM_BYTES; num_bytes += STEP_SIZE) {
 8c0:	4b2b      	ldr	r3, [pc, #172]	; (970 <aes_measurement+0x144>)
 8c2:	429c      	cmp	r4, r3
 8c4:	d83b      	bhi.n	93e <aes_measurement+0x112>
 8c6:	3601      	adds	r6, #1
 8c8:	3401      	adds	r4, #1
		for (size_t byte = 0; byte < num_bytes; byte++) {
 8ca:	2300      	movs	r3, #0
 8cc:	2e00      	cmp	r6, #0
 8ce:	d0ba      	beq.n	846 <aes_measurement+0x1a>
			input[byte] = byte; // 0x00 to write 0's OR 0xFF to write 1's.
 8d0:	54fb      	strb	r3, [r7, r3]
		for (size_t byte = 0; byte < num_bytes; byte++) {
 8d2:	3301      	adds	r3, #1
 8d4:	429e      	cmp	r6, r3
 8d6:	d1fb      	bne.n	8d0 <aes_measurement+0xa4>
		START_MEASURE(DGI_GPIO2);
 8d8:	2002      	movs	r0, #2
 8da:	4b27      	ldr	r3, [pc, #156]	; (978 <aes_measurement+0x14c>)
 8dc:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
 8de:	2280      	movs	r2, #128	; 0x80
 8e0:	0352      	lsls	r2, r2, #13
 8e2:	23c0      	movs	r3, #192	; 0xc0
 8e4:	05db      	lsls	r3, r3, #23
 8e6:	619a      	str	r2, [r3, #24]
		if (_rww_flash_write(&FLASH_0.dev, NVMCTRL_RWW_EEPROM_ADDR, input, num_bytes ) != ERR_NONE) {
 8e8:	0033      	movs	r3, r6
 8ea:	003a      	movs	r2, r7
 8ec:	2180      	movs	r1, #128	; 0x80
 8ee:	03c9      	lsls	r1, r1, #15
 8f0:	4822      	ldr	r0, [pc, #136]	; (97c <aes_measurement+0x150>)
 8f2:	4d23      	ldr	r5, [pc, #140]	; (980 <aes_measurement+0x154>)
 8f4:	47a8      	blx	r5
 8f6:	2800      	cmp	r0, #0
 8f8:	d138      	bne.n	96c <aes_measurement+0x140>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 8fa:	2280      	movs	r2, #128	; 0x80
 8fc:	0352      	lsls	r2, r2, #13
 8fe:	23c0      	movs	r3, #192	; 0xc0
 900:	05db      	lsls	r3, r3, #23
 902:	615a      	str	r2, [r3, #20]
		STOP_MEASURE(DGI_GPIO2);
 904:	2002      	movs	r0, #2
 906:	4d1c      	ldr	r5, [pc, #112]	; (978 <aes_measurement+0x14c>)
 908:	47a8      	blx	r5
		SLEEP
 90a:	2002      	movs	r0, #2
 90c:	47a8      	blx	r5
 90e:	2300      	movs	r3, #0
			input[byte] = 0xfe;
 910:	22fe      	movs	r2, #254	; 0xfe
 912:	54fa      	strb	r2, [r7, r3]
		for (size_t byte = 0; byte < num_bytes; byte++) {
 914:	3301      	adds	r3, #1
 916:	429e      	cmp	r6, r3
 918:	d8fb      	bhi.n	912 <aes_measurement+0xe6>
		START_MEASURE(DGI_GPIO3);
 91a:	2002      	movs	r0, #2
 91c:	4b16      	ldr	r3, [pc, #88]	; (978 <aes_measurement+0x14c>)
 91e:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
 920:	2280      	movs	r2, #128	; 0x80
 922:	0392      	lsls	r2, r2, #14
 924:	23c0      	movs	r3, #192	; 0xc0
 926:	05db      	lsls	r3, r3, #23
 928:	619a      	str	r2, [r3, #24]
		if (_rww_flash_read(&FLASH_0.dev, NVMCTRL_RWW_EEPROM_ADDR, input, num_bytes) != ERR_NONE) {
 92a:	0033      	movs	r3, r6
 92c:	003a      	movs	r2, r7
 92e:	2180      	movs	r1, #128	; 0x80
 930:	03c9      	lsls	r1, r1, #15
 932:	4812      	ldr	r0, [pc, #72]	; (97c <aes_measurement+0x150>)
 934:	4d13      	ldr	r5, [pc, #76]	; (984 <aes_measurement+0x158>)
 936:	47a8      	blx	r5
 938:	2800      	cmp	r0, #0
 93a:	d0b9      	beq.n	8b0 <aes_measurement+0x84>
 93c:	e7fe      	b.n	93c <aes_measurement+0x110>
		
	}
	
	
		// Free the memory
		free(input);
 93e:	0038      	movs	r0, r7
 940:	4b11      	ldr	r3, [pc, #68]	; (988 <aes_measurement+0x15c>)
 942:	4798      	blx	r3

		END_MEASUREMENT;
 944:	200a      	movs	r0, #10
 946:	4b0c      	ldr	r3, [pc, #48]	; (978 <aes_measurement+0x14c>)
 948:	4798      	blx	r3
 94a:	23c0      	movs	r3, #192	; 0xc0
 94c:	05db      	lsls	r3, r3, #23
 94e:	2102      	movs	r1, #2
 950:	2298      	movs	r2, #152	; 0x98
 952:	5099      	str	r1, [r3, r2]
 954:	2280      	movs	r2, #128	; 0x80
 956:	0252      	lsls	r2, r2, #9
 958:	619a      	str	r2, [r3, #24]
 95a:	2280      	movs	r2, #128	; 0x80
 95c:	0352      	lsls	r2, r2, #13
 95e:	619a      	str	r2, [r3, #24]
 960:	2280      	movs	r2, #128	; 0x80
 962:	0392      	lsls	r2, r2, #14
 964:	619a      	str	r2, [r3, #24]
			
	
}
 966:	bc04      	pop	{r2}
 968:	4691      	mov	r9, r2
 96a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 96c:	e7fe      	b.n	96c <aes_measurement+0x140>
 96e:	46c0      	nop			; (mov r8, r8)
 970:	00001770 	.word	0x00001770
 974:	000009ed 	.word	0x000009ed
 978:	00000325 	.word	0x00000325
 97c:	20000094 	.word	0x20000094
 980:	000005fd 	.word	0x000005fd
 984:	000005c5 	.word	0x000005c5
 988:	00000a01 	.word	0x00000a01

0000098c <main>:

int main(void)
{
 98c:	b510      	push	{r4, lr}
	atmel_start_init();
 98e:	4b03      	ldr	r3, [pc, #12]	; (99c <main+0x10>)
 990:	4798      	blx	r3

	aes_measurement();
 992:	4b03      	ldr	r3, [pc, #12]	; (9a0 <main+0x14>)
 994:	4798      	blx	r3
	/*while (true) {
		delay_ms(500);
		gpio_toggle_pin_level(LED0);
	}*/
	
 996:	2000      	movs	r0, #0
 998:	bd10      	pop	{r4, pc}
 99a:	46c0      	nop			; (mov r8, r8)
 99c:	00000115 	.word	0x00000115
 9a0:	0000082d 	.word	0x0000082d

000009a4 <__libc_init_array>:
 9a4:	b570      	push	{r4, r5, r6, lr}
 9a6:	2600      	movs	r6, #0
 9a8:	4d0c      	ldr	r5, [pc, #48]	; (9dc <__libc_init_array+0x38>)
 9aa:	4c0d      	ldr	r4, [pc, #52]	; (9e0 <__libc_init_array+0x3c>)
 9ac:	1b64      	subs	r4, r4, r5
 9ae:	10a4      	asrs	r4, r4, #2
 9b0:	42a6      	cmp	r6, r4
 9b2:	d109      	bne.n	9c8 <__libc_init_array+0x24>
 9b4:	2600      	movs	r6, #0
 9b6:	f000 f935 	bl	c24 <_init>
 9ba:	4d0a      	ldr	r5, [pc, #40]	; (9e4 <__libc_init_array+0x40>)
 9bc:	4c0a      	ldr	r4, [pc, #40]	; (9e8 <__libc_init_array+0x44>)
 9be:	1b64      	subs	r4, r4, r5
 9c0:	10a4      	asrs	r4, r4, #2
 9c2:	42a6      	cmp	r6, r4
 9c4:	d105      	bne.n	9d2 <__libc_init_array+0x2e>
 9c6:	bd70      	pop	{r4, r5, r6, pc}
 9c8:	00b3      	lsls	r3, r6, #2
 9ca:	58eb      	ldr	r3, [r5, r3]
 9cc:	4798      	blx	r3
 9ce:	3601      	adds	r6, #1
 9d0:	e7ee      	b.n	9b0 <__libc_init_array+0xc>
 9d2:	00b3      	lsls	r3, r6, #2
 9d4:	58eb      	ldr	r3, [r5, r3]
 9d6:	4798      	blx	r3
 9d8:	3601      	adds	r6, #1
 9da:	e7f2      	b.n	9c2 <__libc_init_array+0x1e>
 9dc:	00000c30 	.word	0x00000c30
 9e0:	00000c30 	.word	0x00000c30
 9e4:	00000c30 	.word	0x00000c30
 9e8:	00000c34 	.word	0x00000c34

000009ec <malloc>:
 9ec:	b510      	push	{r4, lr}
 9ee:	4b03      	ldr	r3, [pc, #12]	; (9fc <malloc+0x10>)
 9f0:	0001      	movs	r1, r0
 9f2:	6818      	ldr	r0, [r3, #0]
 9f4:	f000 f858 	bl	aa8 <_malloc_r>
 9f8:	bd10      	pop	{r4, pc}
 9fa:	46c0      	nop			; (mov r8, r8)
 9fc:	20000000 	.word	0x20000000

00000a00 <free>:
 a00:	b510      	push	{r4, lr}
 a02:	4b03      	ldr	r3, [pc, #12]	; (a10 <free+0x10>)
 a04:	0001      	movs	r1, r0
 a06:	6818      	ldr	r0, [r3, #0]
 a08:	f000 f804 	bl	a14 <_free_r>
 a0c:	bd10      	pop	{r4, pc}
 a0e:	46c0      	nop			; (mov r8, r8)
 a10:	20000000 	.word	0x20000000

00000a14 <_free_r>:
 a14:	b570      	push	{r4, r5, r6, lr}
 a16:	0005      	movs	r5, r0
 a18:	2900      	cmp	r1, #0
 a1a:	d010      	beq.n	a3e <_free_r+0x2a>
 a1c:	1f0c      	subs	r4, r1, #4
 a1e:	6823      	ldr	r3, [r4, #0]
 a20:	2b00      	cmp	r3, #0
 a22:	da00      	bge.n	a26 <_free_r+0x12>
 a24:	18e4      	adds	r4, r4, r3
 a26:	0028      	movs	r0, r5
 a28:	f000 f8ae 	bl	b88 <__malloc_lock>
 a2c:	4a1d      	ldr	r2, [pc, #116]	; (aa4 <_free_r+0x90>)
 a2e:	6813      	ldr	r3, [r2, #0]
 a30:	2b00      	cmp	r3, #0
 a32:	d105      	bne.n	a40 <_free_r+0x2c>
 a34:	6063      	str	r3, [r4, #4]
 a36:	6014      	str	r4, [r2, #0]
 a38:	0028      	movs	r0, r5
 a3a:	f000 f8a6 	bl	b8a <__malloc_unlock>
 a3e:	bd70      	pop	{r4, r5, r6, pc}
 a40:	42a3      	cmp	r3, r4
 a42:	d909      	bls.n	a58 <_free_r+0x44>
 a44:	6821      	ldr	r1, [r4, #0]
 a46:	1860      	adds	r0, r4, r1
 a48:	4283      	cmp	r3, r0
 a4a:	d1f3      	bne.n	a34 <_free_r+0x20>
 a4c:	6818      	ldr	r0, [r3, #0]
 a4e:	685b      	ldr	r3, [r3, #4]
 a50:	1841      	adds	r1, r0, r1
 a52:	6021      	str	r1, [r4, #0]
 a54:	e7ee      	b.n	a34 <_free_r+0x20>
 a56:	0013      	movs	r3, r2
 a58:	685a      	ldr	r2, [r3, #4]
 a5a:	2a00      	cmp	r2, #0
 a5c:	d001      	beq.n	a62 <_free_r+0x4e>
 a5e:	42a2      	cmp	r2, r4
 a60:	d9f9      	bls.n	a56 <_free_r+0x42>
 a62:	6819      	ldr	r1, [r3, #0]
 a64:	1858      	adds	r0, r3, r1
 a66:	42a0      	cmp	r0, r4
 a68:	d10b      	bne.n	a82 <_free_r+0x6e>
 a6a:	6820      	ldr	r0, [r4, #0]
 a6c:	1809      	adds	r1, r1, r0
 a6e:	1858      	adds	r0, r3, r1
 a70:	6019      	str	r1, [r3, #0]
 a72:	4282      	cmp	r2, r0
 a74:	d1e0      	bne.n	a38 <_free_r+0x24>
 a76:	6810      	ldr	r0, [r2, #0]
 a78:	6852      	ldr	r2, [r2, #4]
 a7a:	1841      	adds	r1, r0, r1
 a7c:	6019      	str	r1, [r3, #0]
 a7e:	605a      	str	r2, [r3, #4]
 a80:	e7da      	b.n	a38 <_free_r+0x24>
 a82:	42a0      	cmp	r0, r4
 a84:	d902      	bls.n	a8c <_free_r+0x78>
 a86:	230c      	movs	r3, #12
 a88:	602b      	str	r3, [r5, #0]
 a8a:	e7d5      	b.n	a38 <_free_r+0x24>
 a8c:	6821      	ldr	r1, [r4, #0]
 a8e:	1860      	adds	r0, r4, r1
 a90:	4282      	cmp	r2, r0
 a92:	d103      	bne.n	a9c <_free_r+0x88>
 a94:	6810      	ldr	r0, [r2, #0]
 a96:	6852      	ldr	r2, [r2, #4]
 a98:	1841      	adds	r1, r0, r1
 a9a:	6021      	str	r1, [r4, #0]
 a9c:	6062      	str	r2, [r4, #4]
 a9e:	605c      	str	r4, [r3, #4]
 aa0:	e7ca      	b.n	a38 <_free_r+0x24>
 aa2:	46c0      	nop			; (mov r8, r8)
 aa4:	2000008c 	.word	0x2000008c

00000aa8 <_malloc_r>:
 aa8:	2303      	movs	r3, #3
 aaa:	b570      	push	{r4, r5, r6, lr}
 aac:	1ccd      	adds	r5, r1, #3
 aae:	439d      	bics	r5, r3
 ab0:	3508      	adds	r5, #8
 ab2:	0006      	movs	r6, r0
 ab4:	2d0c      	cmp	r5, #12
 ab6:	d21e      	bcs.n	af6 <_malloc_r+0x4e>
 ab8:	250c      	movs	r5, #12
 aba:	42a9      	cmp	r1, r5
 abc:	d81d      	bhi.n	afa <_malloc_r+0x52>
 abe:	0030      	movs	r0, r6
 ac0:	f000 f862 	bl	b88 <__malloc_lock>
 ac4:	4a25      	ldr	r2, [pc, #148]	; (b5c <_malloc_r+0xb4>)
 ac6:	6814      	ldr	r4, [r2, #0]
 ac8:	0021      	movs	r1, r4
 aca:	2900      	cmp	r1, #0
 acc:	d119      	bne.n	b02 <_malloc_r+0x5a>
 ace:	4c24      	ldr	r4, [pc, #144]	; (b60 <_malloc_r+0xb8>)
 ad0:	6823      	ldr	r3, [r4, #0]
 ad2:	2b00      	cmp	r3, #0
 ad4:	d103      	bne.n	ade <_malloc_r+0x36>
 ad6:	0030      	movs	r0, r6
 ad8:	f000 f844 	bl	b64 <_sbrk_r>
 adc:	6020      	str	r0, [r4, #0]
 ade:	0029      	movs	r1, r5
 ae0:	0030      	movs	r0, r6
 ae2:	f000 f83f 	bl	b64 <_sbrk_r>
 ae6:	1c43      	adds	r3, r0, #1
 ae8:	d12c      	bne.n	b44 <_malloc_r+0x9c>
 aea:	230c      	movs	r3, #12
 aec:	0030      	movs	r0, r6
 aee:	6033      	str	r3, [r6, #0]
 af0:	f000 f84b 	bl	b8a <__malloc_unlock>
 af4:	e003      	b.n	afe <_malloc_r+0x56>
 af6:	2d00      	cmp	r5, #0
 af8:	dadf      	bge.n	aba <_malloc_r+0x12>
 afa:	230c      	movs	r3, #12
 afc:	6033      	str	r3, [r6, #0]
 afe:	2000      	movs	r0, #0
 b00:	bd70      	pop	{r4, r5, r6, pc}
 b02:	680b      	ldr	r3, [r1, #0]
 b04:	1b5b      	subs	r3, r3, r5
 b06:	d41a      	bmi.n	b3e <_malloc_r+0x96>
 b08:	2b0b      	cmp	r3, #11
 b0a:	d903      	bls.n	b14 <_malloc_r+0x6c>
 b0c:	600b      	str	r3, [r1, #0]
 b0e:	18cc      	adds	r4, r1, r3
 b10:	6025      	str	r5, [r4, #0]
 b12:	e003      	b.n	b1c <_malloc_r+0x74>
 b14:	428c      	cmp	r4, r1
 b16:	d10e      	bne.n	b36 <_malloc_r+0x8e>
 b18:	6863      	ldr	r3, [r4, #4]
 b1a:	6013      	str	r3, [r2, #0]
 b1c:	0030      	movs	r0, r6
 b1e:	f000 f834 	bl	b8a <__malloc_unlock>
 b22:	0020      	movs	r0, r4
 b24:	2207      	movs	r2, #7
 b26:	300b      	adds	r0, #11
 b28:	1d23      	adds	r3, r4, #4
 b2a:	4390      	bics	r0, r2
 b2c:	1ac3      	subs	r3, r0, r3
 b2e:	d0e7      	beq.n	b00 <_malloc_r+0x58>
 b30:	425a      	negs	r2, r3
 b32:	50e2      	str	r2, [r4, r3]
 b34:	e7e4      	b.n	b00 <_malloc_r+0x58>
 b36:	684b      	ldr	r3, [r1, #4]
 b38:	6063      	str	r3, [r4, #4]
 b3a:	000c      	movs	r4, r1
 b3c:	e7ee      	b.n	b1c <_malloc_r+0x74>
 b3e:	000c      	movs	r4, r1
 b40:	6849      	ldr	r1, [r1, #4]
 b42:	e7c2      	b.n	aca <_malloc_r+0x22>
 b44:	2303      	movs	r3, #3
 b46:	1cc4      	adds	r4, r0, #3
 b48:	439c      	bics	r4, r3
 b4a:	42a0      	cmp	r0, r4
 b4c:	d0e0      	beq.n	b10 <_malloc_r+0x68>
 b4e:	1a21      	subs	r1, r4, r0
 b50:	0030      	movs	r0, r6
 b52:	f000 f807 	bl	b64 <_sbrk_r>
 b56:	1c43      	adds	r3, r0, #1
 b58:	d1da      	bne.n	b10 <_malloc_r+0x68>
 b5a:	e7c6      	b.n	aea <_malloc_r+0x42>
 b5c:	2000008c 	.word	0x2000008c
 b60:	20000090 	.word	0x20000090

00000b64 <_sbrk_r>:
 b64:	2300      	movs	r3, #0
 b66:	b570      	push	{r4, r5, r6, lr}
 b68:	4c06      	ldr	r4, [pc, #24]	; (b84 <_sbrk_r+0x20>)
 b6a:	0005      	movs	r5, r0
 b6c:	0008      	movs	r0, r1
 b6e:	6023      	str	r3, [r4, #0]
 b70:	f7ff fc1c 	bl	3ac <_sbrk>
 b74:	1c43      	adds	r3, r0, #1
 b76:	d103      	bne.n	b80 <_sbrk_r+0x1c>
 b78:	6823      	ldr	r3, [r4, #0]
 b7a:	2b00      	cmp	r3, #0
 b7c:	d000      	beq.n	b80 <_sbrk_r+0x1c>
 b7e:	602b      	str	r3, [r5, #0]
 b80:	bd70      	pop	{r4, r5, r6, pc}
 b82:	46c0      	nop			; (mov r8, r8)
 b84:	200000b0 	.word	0x200000b0

00000b88 <__malloc_lock>:
 b88:	4770      	bx	lr

00000b8a <__malloc_unlock>:
 b8a:	4770      	bx	lr
 b8c:	682f2e2e 	.word	0x682f2e2e
 b90:	732f6c61 	.word	0x732f6c61
 b94:	682f6372 	.word	0x682f6372
 b98:	665f6c61 	.word	0x665f6c61
 b9c:	6873616c 	.word	0x6873616c
 ba0:	0000632e 	.word	0x0000632e
 ba4:	682f2e2e 	.word	0x682f2e2e
 ba8:	6e2f6c70 	.word	0x6e2f6c70
 bac:	74636d76 	.word	0x74636d76
 bb0:	682f6c72 	.word	0x682f6c72
 bb4:	6e5f6c70 	.word	0x6e5f6c70
 bb8:	74636d76 	.word	0x74636d76
 bbc:	632e6c72 	.word	0x632e6c72
 bc0:	00000000 	.word	0x00000000

00000bc4 <__sf_fake_stderr>:
	...

00000be4 <__sf_fake_stdin>:
	...

00000c04 <__sf_fake_stdout>:
	...

00000c24 <_init>:
 c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c26:	46c0      	nop			; (mov r8, r8)
 c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c2a:	bc08      	pop	{r3}
 c2c:	469e      	mov	lr, r3
 c2e:	4770      	bx	lr

00000c30 <__init_array_start>:
 c30:	000000dd 	.word	0x000000dd

00000c34 <_fini>:
 c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c36:	46c0      	nop			; (mov r8, r8)
 c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c3a:	bc08      	pop	{r3}
 c3c:	469e      	mov	lr, r3
 c3e:	4770      	bx	lr

00000c40 <__fini_array_start>:
 c40:	000000b5 	.word	0x000000b5
