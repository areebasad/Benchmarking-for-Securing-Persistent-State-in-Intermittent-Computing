
AES-256_WolfSSL_library.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004020  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000084  20000000  00004020  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  00020084  2**0
                  CONTENTS
  3 .bss          00000050  20000084  000040a4  00020084  2**2
                  ALLOC
  4 .stack        00002004  200000d4  000040f4  00020084  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
  7 .debug_info   00010bf5  00000000  00000000  00020105  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002b7c  00000000  00000000  00030cfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00005ea0  00000000  00000000  00033876  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000004d8  00000000  00000000  00039716  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000005e0  00000000  00000000  00039bee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001b626  00000000  00000000  0003a1ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000cbef  00000000  00000000  000557f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0008e739  00000000  00000000  000623e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000d18  00000000  00000000  000f0b1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	d8 20 00 20 2d 01 00 00 29 01 00 00 29 01 00 00     . . -...)...)...
	...
      2c:	29 01 00 00 00 00 00 00 00 00 00 00 29 01 00 00     )...........)...
      3c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      4c:	29 01 00 00 91 05 00 00 29 01 00 00 29 01 00 00     ).......)...)...
      5c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      6c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      7c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      8c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      9c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      ac:	29 01 00 00 00 00 00 00                             ).......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000084 	.word	0x20000084
      d4:	00000000 	.word	0x00000000
      d8:	00004020 	.word	0x00004020

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000088 	.word	0x20000088
     108:	00004020 	.word	0x00004020
     10c:	00004020 	.word	0x00004020
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     114:	b510      	push	{r4, lr}
	system_init();
     116:	4b02      	ldr	r3, [pc, #8]	; (120 <atmel_start_init+0xc>)
     118:	4798      	blx	r3
	
	gpio_init();
     11a:	4b02      	ldr	r3, [pc, #8]	; (124 <atmel_start_init+0x10>)
     11c:	4798      	blx	r3

}
     11e:	bd10      	pop	{r4, pc}
     120:	0000020d 	.word	0x0000020d
     124:	00000259 	.word	0x00000259

00000128 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     128:	e7fe      	b.n	128 <Dummy_Handler>
	...

0000012c <Reset_Handler>:
{
     12c:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     12e:	4a1a      	ldr	r2, [pc, #104]	; (198 <Reset_Handler+0x6c>)
     130:	4b1a      	ldr	r3, [pc, #104]	; (19c <Reset_Handler+0x70>)
     132:	429a      	cmp	r2, r3
     134:	d011      	beq.n	15a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     136:	001a      	movs	r2, r3
     138:	4b19      	ldr	r3, [pc, #100]	; (1a0 <Reset_Handler+0x74>)
     13a:	429a      	cmp	r2, r3
     13c:	d20d      	bcs.n	15a <Reset_Handler+0x2e>
     13e:	4a19      	ldr	r2, [pc, #100]	; (1a4 <Reset_Handler+0x78>)
     140:	3303      	adds	r3, #3
     142:	1a9b      	subs	r3, r3, r2
     144:	089b      	lsrs	r3, r3, #2
     146:	3301      	adds	r3, #1
     148:	009b      	lsls	r3, r3, #2
     14a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     14c:	4813      	ldr	r0, [pc, #76]	; (19c <Reset_Handler+0x70>)
     14e:	4912      	ldr	r1, [pc, #72]	; (198 <Reset_Handler+0x6c>)
     150:	588c      	ldr	r4, [r1, r2]
     152:	5084      	str	r4, [r0, r2]
     154:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     156:	429a      	cmp	r2, r3
     158:	d1fa      	bne.n	150 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     15a:	4a13      	ldr	r2, [pc, #76]	; (1a8 <Reset_Handler+0x7c>)
     15c:	4b13      	ldr	r3, [pc, #76]	; (1ac <Reset_Handler+0x80>)
     15e:	429a      	cmp	r2, r3
     160:	d20a      	bcs.n	178 <Reset_Handler+0x4c>
     162:	43d3      	mvns	r3, r2
     164:	4911      	ldr	r1, [pc, #68]	; (1ac <Reset_Handler+0x80>)
     166:	185b      	adds	r3, r3, r1
     168:	2103      	movs	r1, #3
     16a:	438b      	bics	r3, r1
     16c:	3304      	adds	r3, #4
     16e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     170:	2100      	movs	r1, #0
     172:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     174:	4293      	cmp	r3, r2
     176:	d1fc      	bne.n	172 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     178:	4a0d      	ldr	r2, [pc, #52]	; (1b0 <Reset_Handler+0x84>)
     17a:	21ff      	movs	r1, #255	; 0xff
     17c:	4b0d      	ldr	r3, [pc, #52]	; (1b4 <Reset_Handler+0x88>)
     17e:	438b      	bics	r3, r1
     180:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
     182:	4a0d      	ldr	r2, [pc, #52]	; (1b8 <Reset_Handler+0x8c>)
     184:	6853      	ldr	r3, [r2, #4]
     186:	397f      	subs	r1, #127	; 0x7f
     188:	430b      	orrs	r3, r1
     18a:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     18c:	4b0b      	ldr	r3, [pc, #44]	; (1bc <Reset_Handler+0x90>)
     18e:	4798      	blx	r3
        main();
     190:	4b0b      	ldr	r3, [pc, #44]	; (1c0 <Reset_Handler+0x94>)
     192:	4798      	blx	r3
     194:	e7fe      	b.n	194 <Reset_Handler+0x68>
     196:	46c0      	nop			; (mov r8, r8)
     198:	00004020 	.word	0x00004020
     19c:	20000000 	.word	0x20000000
     1a0:	20000084 	.word	0x20000084
     1a4:	20000004 	.word	0x20000004
     1a8:	20000084 	.word	0x20000084
     1ac:	200000d4 	.word	0x200000d4
     1b0:	e000ed00 	.word	0xe000ed00
     1b4:	00000000 	.word	0x00000000
     1b8:	41004000 	.word	0x41004000
     1bc:	00001c15 	.word	0x00001c15
     1c0:	00000a9d 	.word	0x00000a9d

000001c4 <FLASH_0_CLOCK_init>:
}

static inline void hri_mclk_set_AHBMASK_NVMCTRL_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
     1c4:	4a03      	ldr	r2, [pc, #12]	; (1d4 <FLASH_0_CLOCK_init+0x10>)
     1c6:	6911      	ldr	r1, [r2, #16]
     1c8:	2380      	movs	r3, #128	; 0x80
     1ca:	005b      	lsls	r3, r3, #1
     1cc:	430b      	orrs	r3, r1
     1ce:	6113      	str	r3, [r2, #16]

void FLASH_0_CLOCK_init(void)
{

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}
     1d0:	4770      	bx	lr
     1d2:	46c0      	nop			; (mov r8, r8)
     1d4:	40000400 	.word	0x40000400

000001d8 <FLASH_0_init>:

void FLASH_0_init(void)
{
     1d8:	b510      	push	{r4, lr}
	FLASH_0_CLOCK_init();
     1da:	4b03      	ldr	r3, [pc, #12]	; (1e8 <FLASH_0_init+0x10>)
     1dc:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     1de:	4903      	ldr	r1, [pc, #12]	; (1ec <FLASH_0_init+0x14>)
     1e0:	4803      	ldr	r0, [pc, #12]	; (1f0 <FLASH_0_init+0x18>)
     1e2:	4b04      	ldr	r3, [pc, #16]	; (1f4 <FLASH_0_init+0x1c>)
     1e4:	4798      	blx	r3
}
     1e6:	bd10      	pop	{r4, pc}
     1e8:	000001c5 	.word	0x000001c5
     1ec:	41004000 	.word	0x41004000
     1f0:	200000b4 	.word	0x200000b4
     1f4:	0000035d 	.word	0x0000035d

000001f8 <delay_driver_init>:

void delay_driver_init(void)
{
     1f8:	b510      	push	{r4, lr}
	delay_init(SysTick);
     1fa:	4802      	ldr	r0, [pc, #8]	; (204 <delay_driver_init+0xc>)
     1fc:	4b02      	ldr	r3, [pc, #8]	; (208 <delay_driver_init+0x10>)
     1fe:	4798      	blx	r3
}
     200:	bd10      	pop	{r4, pc}
     202:	46c0      	nop			; (mov r8, r8)
     204:	e000e010 	.word	0xe000e010
     208:	00000311 	.word	0x00000311

0000020c <system_init>:

void system_init(void)
{
     20c:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     20e:	4b0d      	ldr	r3, [pc, #52]	; (244 <system_init+0x38>)
     210:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     212:	23c0      	movs	r3, #192	; 0xc0
     214:	05db      	lsls	r3, r3, #23
     216:	2280      	movs	r2, #128	; 0x80
     218:	00d2      	lsls	r2, r2, #3
     21a:	2194      	movs	r1, #148	; 0x94
     21c:	505a      	str	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     21e:	390c      	subs	r1, #12
     220:	505a      	str	r2, [r3, r1]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     222:	4b09      	ldr	r3, [pc, #36]	; (248 <system_init+0x3c>)
     224:	22a8      	movs	r2, #168	; 0xa8
     226:	4909      	ldr	r1, [pc, #36]	; (24c <system_init+0x40>)
     228:	5099      	str	r1, [r3, r2]
     22a:	21c0      	movs	r1, #192	; 0xc0
     22c:	0609      	lsls	r1, r1, #24
     22e:	5099      	str	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     230:	21ca      	movs	r1, #202	; 0xca
     232:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     234:	2001      	movs	r0, #1
     236:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     238:	545a      	strb	r2, [r3, r1]
	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);

	FLASH_0_init();
     23a:	4b05      	ldr	r3, [pc, #20]	; (250 <system_init+0x44>)
     23c:	4798      	blx	r3

	delay_driver_init();
     23e:	4b05      	ldr	r3, [pc, #20]	; (254 <system_init+0x48>)
     240:	4798      	blx	r3
}
     242:	bd10      	pop	{r4, pc}
     244:	000003d9 	.word	0x000003d9
     248:	40002800 	.word	0x40002800
     24c:	40000400 	.word	0x40000400
     250:	000001d9 	.word	0x000001d9
     254:	000001f9 	.word	0x000001f9

00000258 <gpio_init>:

#include "driver_init.h"
#include "gpio_init.h"

void gpio_init(void)
{
     258:	b5f0      	push	{r4, r5, r6, r7, lr}
     25a:	46c6      	mov	lr, r8
     25c:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     25e:	22c0      	movs	r2, #192	; 0xc0
     260:	05d2      	lsls	r2, r2, #23
     262:	2302      	movs	r3, #2
     264:	2194      	movs	r1, #148	; 0x94
     266:	5053      	str	r3, [r2, r1]
     268:	2180      	movs	r1, #128	; 0x80
     26a:	0249      	lsls	r1, r1, #9
     26c:	6151      	str	r1, [r2, #20]
     26e:	2780      	movs	r7, #128	; 0x80
     270:	037f      	lsls	r7, r7, #13
     272:	6157      	str	r7, [r2, #20]
     274:	2080      	movs	r0, #128	; 0x80
     276:	0380      	lsls	r0, r0, #14
     278:	4680      	mov	r8, r0
     27a:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     27c:	2688      	movs	r6, #136	; 0x88
     27e:	5193      	str	r3, [r2, r6]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     280:	4b1c      	ldr	r3, [pc, #112]	; (2f4 <gpio_init+0x9c>)
     282:	20a8      	movs	r0, #168	; 0xa8
     284:	4d1c      	ldr	r5, [pc, #112]	; (2f8 <gpio_init+0xa0>)
     286:	501d      	str	r5, [r3, r0]
     288:	25c0      	movs	r5, #192	; 0xc0
     28a:	062d      	lsls	r5, r5, #24
     28c:	501d      	str	r5, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     28e:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     290:	2180      	movs	r1, #128	; 0x80
     292:	05c9      	lsls	r1, r1, #23
     294:	6299      	str	r1, [r3, #40]	; 0x28
     296:	4c19      	ldr	r4, [pc, #100]	; (2fc <gpio_init+0xa4>)
     298:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     29a:	6097      	str	r7, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     29c:	6299      	str	r1, [r3, #40]	; 0x28
     29e:	4f18      	ldr	r7, [pc, #96]	; (300 <gpio_init+0xa8>)
     2a0:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     2a2:	4644      	mov	r4, r8
     2a4:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     2a6:	6299      	str	r1, [r3, #40]	; 0x28
     2a8:	4916      	ldr	r1, [pc, #88]	; (304 <gpio_init+0xac>)
     2aa:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2ac:	27c1      	movs	r7, #193	; 0xc1
     2ae:	5ddc      	ldrb	r4, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2b0:	2101      	movs	r1, #1
     2b2:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2b4:	55dc      	strb	r4, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2b6:	3f71      	subs	r7, #113	; 0x71
     2b8:	5ddc      	ldrb	r4, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2ba:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2bc:	55dc      	strb	r4, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2be:	3704      	adds	r7, #4
     2c0:	5ddc      	ldrb	r4, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2c2:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2c4:	55dc      	strb	r4, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2c6:	3701      	adds	r7, #1
     2c8:	5ddc      	ldrb	r4, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2ca:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2cc:	55dc      	strb	r4, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     2ce:	2480      	movs	r4, #128	; 0x80
     2d0:	00e4      	lsls	r4, r4, #3
     2d2:	3743      	adds	r7, #67	; 0x43
     2d4:	51d4      	str	r4, [r2, r7]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     2d6:	5194      	str	r4, [r2, r6]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     2d8:	4a0b      	ldr	r2, [pc, #44]	; (308 <gpio_init+0xb0>)
     2da:	501a      	str	r2, [r3, r0]
     2dc:	501d      	str	r5, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2de:	3022      	adds	r0, #34	; 0x22
     2e0:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2e2:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2e4:	541a      	strb	r2, [r3, r0]
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
#endif

	delay_ms(10);
     2e6:	38c0      	subs	r0, #192	; 0xc0
     2e8:	4b08      	ldr	r3, [pc, #32]	; (30c <gpio_init+0xb4>)
     2ea:	4798      	blx	r3
     2ec:	bc04      	pop	{r2}
     2ee:	4690      	mov	r8, r2
     2f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2f2:	46c0      	nop			; (mov r8, r8)
     2f4:	40002800 	.word	0x40002800
     2f8:	40000002 	.word	0x40000002
     2fc:	c0000001 	.word	0xc0000001
     300:	c0000010 	.word	0xc0000010
     304:	c0000020 	.word	0xc0000020
     308:	40000400 	.word	0x40000400
     30c:	00000325 	.word	0x00000325

00000310 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     310:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
     312:	4b02      	ldr	r3, [pc, #8]	; (31c <delay_init+0xc>)
     314:	6018      	str	r0, [r3, #0]
     316:	4b02      	ldr	r3, [pc, #8]	; (320 <delay_init+0x10>)
     318:	4798      	blx	r3
}
     31a:	bd10      	pop	{r4, pc}
     31c:	200000a0 	.word	0x200000a0
     320:	000007c1 	.word	0x000007c1

00000324 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     324:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     326:	4b04      	ldr	r3, [pc, #16]	; (338 <delay_ms+0x14>)
     328:	681c      	ldr	r4, [r3, #0]
     32a:	4b04      	ldr	r3, [pc, #16]	; (33c <delay_ms+0x18>)
     32c:	4798      	blx	r3
     32e:	0001      	movs	r1, r0
     330:	0020      	movs	r0, r4
     332:	4b03      	ldr	r3, [pc, #12]	; (340 <delay_ms+0x1c>)
     334:	4798      	blx	r3
}
     336:	bd10      	pop	{r4, pc}
     338:	200000a0 	.word	0x200000a0
     33c:	000003d1 	.word	0x000003d1
     340:	000007d5 	.word	0x000007d5

00000344 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
     344:	b510      	push	{r4, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
     346:	6943      	ldr	r3, [r0, #20]
     348:	2b00      	cmp	r3, #0
     34a:	d000      	beq.n	34e <flash_ready+0xa>
		descr->callbacks.cb_ready(descr);
     34c:	4798      	blx	r3
	}
}
     34e:	bd10      	pop	{r4, pc}

00000350 <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
     350:	b510      	push	{r4, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
     352:	6983      	ldr	r3, [r0, #24]
     354:	2b00      	cmp	r3, #0
     356:	d000      	beq.n	35a <flash_error+0xa>
		descr->callbacks.cb_error(descr);
     358:	4798      	blx	r3
	}
}
     35a:	bd10      	pop	{r4, pc}

0000035c <flash_init>:
{
     35c:	b570      	push	{r4, r5, r6, lr}
     35e:	0005      	movs	r5, r0
     360:	000c      	movs	r4, r1
	ASSERT(flash && hw);
     362:	2800      	cmp	r0, #0
     364:	d012      	beq.n	38c <flash_init+0x30>
     366:	0008      	movs	r0, r1
     368:	1e43      	subs	r3, r0, #1
     36a:	4198      	sbcs	r0, r3
     36c:	b2c0      	uxtb	r0, r0
     36e:	2238      	movs	r2, #56	; 0x38
     370:	4907      	ldr	r1, [pc, #28]	; (390 <flash_init+0x34>)
     372:	4b08      	ldr	r3, [pc, #32]	; (394 <flash_init+0x38>)
     374:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
     376:	0021      	movs	r1, r4
     378:	0028      	movs	r0, r5
     37a:	4b07      	ldr	r3, [pc, #28]	; (398 <flash_init+0x3c>)
     37c:	4798      	blx	r3
	if (rc) {
     37e:	2800      	cmp	r0, #0
     380:	d103      	bne.n	38a <flash_init+0x2e>
	flash->dev.flash_cb.ready_cb = flash_ready;
     382:	4b06      	ldr	r3, [pc, #24]	; (39c <flash_init+0x40>)
     384:	602b      	str	r3, [r5, #0]
	flash->dev.flash_cb.error_cb = flash_error;
     386:	4b06      	ldr	r3, [pc, #24]	; (3a0 <flash_init+0x44>)
     388:	606b      	str	r3, [r5, #4]
}
     38a:	bd70      	pop	{r4, r5, r6, pc}
     38c:	2000      	movs	r0, #0
     38e:	e7ee      	b.n	36e <flash_init+0x12>
     390:	00001e20 	.word	0x00001e20
     394:	000003a5 	.word	0x000003a5
     398:	000004e1 	.word	0x000004e1
     39c:	00000345 	.word	0x00000345
     3a0:	00000351 	.word	0x00000351

000003a4 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     3a4:	2800      	cmp	r0, #0
     3a6:	d100      	bne.n	3aa <assert+0x6>
		__asm("BKPT #0");
     3a8:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     3aa:	4770      	bx	lr

000003ac <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     3ac:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     3ae:	4a06      	ldr	r2, [pc, #24]	; (3c8 <_sbrk+0x1c>)
     3b0:	6812      	ldr	r2, [r2, #0]
     3b2:	2a00      	cmp	r2, #0
     3b4:	d004      	beq.n	3c0 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     3b6:	4a04      	ldr	r2, [pc, #16]	; (3c8 <_sbrk+0x1c>)
     3b8:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     3ba:	18c3      	adds	r3, r0, r3
     3bc:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     3be:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     3c0:	4902      	ldr	r1, [pc, #8]	; (3cc <_sbrk+0x20>)
     3c2:	4a01      	ldr	r2, [pc, #4]	; (3c8 <_sbrk+0x1c>)
     3c4:	6011      	str	r1, [r2, #0]
     3c6:	e7f6      	b.n	3b6 <_sbrk+0xa>
     3c8:	200000a4 	.word	0x200000a4
     3cc:	200020d8 	.word	0x200020d8

000003d0 <_get_cycles_for_ms>:
{
	switch (power) {
	case 8:
		return (ms * (freq / 100000)) * 100;
	case 7:
		return (ms * (freq / 10000)) * 10;
     3d0:	23fa      	movs	r3, #250	; 0xfa
     3d2:	011b      	lsls	r3, r3, #4
     3d4:	4358      	muls	r0, r3
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     3d6:	4770      	bx	lr

000003d8 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     3d8:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     3da:	4b09      	ldr	r3, [pc, #36]	; (400 <_init_chip+0x28>)
     3dc:	685a      	ldr	r2, [r3, #4]
     3de:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_set_performance_level(2);
     3e0:	2002      	movs	r0, #2
     3e2:	4b08      	ldr	r3, [pc, #32]	; (404 <_init_chip+0x2c>)
     3e4:	4798      	blx	r3

	_osc32kctrl_init_sources();
     3e6:	4b08      	ldr	r3, [pc, #32]	; (408 <_init_chip+0x30>)
     3e8:	4798      	blx	r3
	_oscctrl_init_sources();
     3ea:	4b08      	ldr	r3, [pc, #32]	; (40c <_init_chip+0x34>)
     3ec:	4798      	blx	r3
	_mclk_init();
     3ee:	4b08      	ldr	r3, [pc, #32]	; (410 <_init_chip+0x38>)
     3f0:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     3f2:	4b08      	ldr	r3, [pc, #32]	; (414 <_init_chip+0x3c>)
     3f4:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     3f6:	20ff      	movs	r0, #255	; 0xff
     3f8:	4b07      	ldr	r3, [pc, #28]	; (418 <_init_chip+0x40>)
     3fa:	4798      	blx	r3
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
     3fc:	bd10      	pop	{r4, pc}
     3fe:	46c0      	nop			; (mov r8, r8)
     400:	41004000 	.word	0x41004000
     404:	00000797 	.word	0x00000797
     408:	00000745 	.word	0x00000745
     40c:	0000075d 	.word	0x0000075d
     410:	00000441 	.word	0x00000441
     414:	00000795 	.word	0x00000795
     418:	0000041d 	.word	0x0000041d

0000041c <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     41c:	07c3      	lsls	r3, r0, #31
     41e:	d507      	bpl.n	430 <_gclk_init_generators_by_fref+0x14>
}

static inline void hri_gclk_write_GENCTRL_reg(const void *const hw, uint8_t index, hri_gclk_genctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENCTRL[index].reg = data;
     420:	4a04      	ldr	r2, [pc, #16]	; (434 <_gclk_init_generators_by_fref+0x18>)
     422:	4b05      	ldr	r3, [pc, #20]	; (438 <_gclk_init_generators_by_fref+0x1c>)
     424:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     426:	0019      	movs	r1, r3
     428:	4a04      	ldr	r2, [pc, #16]	; (43c <_gclk_init_generators_by_fref+0x20>)
     42a:	684b      	ldr	r3, [r1, #4]
     42c:	4213      	tst	r3, r2
     42e:	d1fc      	bne.n	42a <_gclk_init_generators_by_fref+0xe>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
}
     430:	4770      	bx	lr
     432:	46c0      	nop			; (mov r8, r8)
     434:	00010106 	.word	0x00010106
     438:	40001800 	.word	0x40001800
     43c:	000007fd 	.word	0x000007fd

00000440 <_mclk_init>:
	((Mclk *)hw)->BUPDIV.reg = data;
     440:	4b03      	ldr	r3, [pc, #12]	; (450 <_mclk_init+0x10>)
     442:	2208      	movs	r2, #8
     444:	719a      	strb	r2, [r3, #6]
	((Mclk *)hw)->LPDIV.reg = data;
     446:	3a04      	subs	r2, #4
     448:	715a      	strb	r2, [r3, #5]
	((Mclk *)hw)->CPUDIV.reg = data;
     44a:	3a03      	subs	r2, #3
     44c:	711a      	strb	r2, [r3, #4]
{
	void *hw = (void *)MCLK;
	hri_mclk_write_BUPDIV_reg(hw, MCLK_BUPDIV_BUPDIV(CONF_MCLK_BUPDIV));
	hri_mclk_write_LPDIV_reg(hw, MCLK_LPDIV_LPDIV(CONF_MCLK_LPDIV));
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
}
     44e:	4770      	bx	lr
     450:	40000400 	.word	0x40000400

00000454 <_flash_program>:
 *                           write is stored
 * \param[in] size           The size of data to write to a page
 */
static void _flash_program(void *const hw, const uint32_t dst_addr, const uint8_t *buffer, const uint16_t size,
                           uint32_t nvmctrl_cmd)
{
     454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     456:	0004      	movs	r4, r0
     458:	000d      	movs	r5, r1
     45a:	0017      	movs	r7, r2
     45c:	001e      	movs	r6, r3
	ASSERT(!(dst_addr % 2));
     45e:	2301      	movs	r3, #1
     460:	404b      	eors	r3, r1
     462:	2001      	movs	r0, #1
     464:	4018      	ands	r0, r3
     466:	22c5      	movs	r2, #197	; 0xc5
     468:	0052      	lsls	r2, r2, #1
     46a:	4919      	ldr	r1, [pc, #100]	; (4d0 <_flash_program+0x7c>)
     46c:	4b19      	ldr	r3, [pc, #100]	; (4d4 <_flash_program+0x80>)
     46e:	4798      	blx	r3

	uint32_t nvm_address = dst_addr / 2;
     470:	0868      	lsrs	r0, r5, #1
	uint16_t i, data;

	while (!hri_nvmctrl_get_interrupt_READY_bit(hw)) {
     472:	2201      	movs	r2, #1
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
     474:	7d23      	ldrb	r3, [r4, #20]
     476:	4213      	tst	r3, r2
     478:	d0fc      	beq.n	474 <_flash_program+0x20>
	((Nvmctrl *)hw)->CTRLA.reg = data;
     47a:	4b17      	ldr	r3, [pc, #92]	; (4d8 <_flash_program+0x84>)
     47c:	8023      	strh	r3, [r4, #0]
		/* Wait until this module isn't busy */
	}

	hri_nvmctrl_write_CTRLA_reg(hw, NVMCTRL_CTRLA_CMD_PBC | NVMCTRL_CTRLA_CMDEX_KEY);

	while (!hri_nvmctrl_get_interrupt_READY_bit(hw)) {
     47e:	2201      	movs	r2, #1
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
     480:	7d23      	ldrb	r3, [r4, #20]
     482:	4213      	tst	r3, r2
     484:	d0fc      	beq.n	480 <_flash_program+0x2c>
}

static inline void hri_nvmctrl_clear_STATUS_reg(const void *const hw, hri_nvmctrl_status_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->STATUS.reg = mask;
     486:	2320      	movs	r3, #32
     488:	33ff      	adds	r3, #255	; 0xff
     48a:	8323      	strh	r3, [r4, #24]
	}

	/* Clear flags */
	hri_nvmctrl_clear_STATUS_reg(hw, NVMCTRL_STATUS_MASK);

	for (i = 0; i < size; i += 2) {
     48c:	2e00      	cmp	r6, #0
     48e:	d00e      	beq.n	4ae <_flash_program+0x5a>
     490:	3b1f      	subs	r3, #31
     492:	3bff      	subs	r3, #255	; 0xff
     494:	0029      	movs	r1, r5
     496:	4399      	bics	r1, r3
     498:	2300      	movs	r3, #0
		data = buffer[i];
     49a:	5cfd      	ldrb	r5, [r7, r3]
     49c:	b2aa      	uxth	r2, r5
		if (i < NVMCTRL_PAGE_SIZE - 1) {
     49e:	2b3e      	cmp	r3, #62	; 0x3e
     4a0:	d910      	bls.n	4c4 <_flash_program+0x70>
			data |= (buffer[i + 1] << 8);
		}
		NVM_MEMORY[nvm_address++] = data;
     4a2:	800a      	strh	r2, [r1, #0]
	for (i = 0; i < size; i += 2) {
     4a4:	3302      	adds	r3, #2
     4a6:	b29b      	uxth	r3, r3
     4a8:	3102      	adds	r1, #2
     4aa:	429e      	cmp	r6, r3
     4ac:	d8f5      	bhi.n	49a <_flash_program+0x46>
	}

	while (!hri_nvmctrl_get_interrupt_READY_bit(hw)) {
     4ae:	2201      	movs	r2, #1
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
     4b0:	7d23      	ldrb	r3, [r4, #20]
     4b2:	4213      	tst	r3, r2
     4b4:	d0fc      	beq.n	4b0 <_flash_program+0x5c>
	((Nvmctrl *)hw)->ADDR.reg = data;
     4b6:	61e0      	str	r0, [r4, #28]
		/* Wait until this module isn't busy */
	}

	hri_nvmctrl_write_ADDR_reg(hw, dst_addr / 2);
	hri_nvmctrl_write_CTRLA_reg(hw, nvmctrl_cmd | NVMCTRL_CTRLA_CMDEX_KEY);
     4b8:	4b08      	ldr	r3, [pc, #32]	; (4dc <_flash_program+0x88>)
     4ba:	9a06      	ldr	r2, [sp, #24]
     4bc:	4313      	orrs	r3, r2
     4be:	b29b      	uxth	r3, r3
	((Nvmctrl *)hw)->CTRLA.reg = data;
     4c0:	8023      	strh	r3, [r4, #0]
}
     4c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			data |= (buffer[i + 1] << 8);
     4c4:	18fa      	adds	r2, r7, r3
     4c6:	7852      	ldrb	r2, [r2, #1]
     4c8:	0212      	lsls	r2, r2, #8
     4ca:	432a      	orrs	r2, r5
     4cc:	e7e9      	b.n	4a2 <_flash_program+0x4e>
     4ce:	46c0      	nop			; (mov r8, r8)
     4d0:	00001e38 	.word	0x00001e38
     4d4:	000003a5 	.word	0x000003a5
     4d8:	ffffa544 	.word	0xffffa544
     4dc:	ffffa500 	.word	0xffffa500

000004e0 <_flash_init>:
{
     4e0:	b570      	push	{r4, r5, r6, lr}
     4e2:	0005      	movs	r5, r0
     4e4:	000c      	movs	r4, r1
	ASSERT(device && (hw == NVMCTRL));
     4e6:	2800      	cmp	r0, #0
     4e8:	d01d      	beq.n	526 <_flash_init+0x46>
     4ea:	4b10      	ldr	r3, [pc, #64]	; (52c <_flash_init+0x4c>)
     4ec:	18c8      	adds	r0, r1, r3
     4ee:	4243      	negs	r3, r0
     4f0:	4158      	adcs	r0, r3
     4f2:	b2c0      	uxtb	r0, r0
     4f4:	2246      	movs	r2, #70	; 0x46
     4f6:	490e      	ldr	r1, [pc, #56]	; (530 <_flash_init+0x50>)
     4f8:	4b0e      	ldr	r3, [pc, #56]	; (534 <_flash_init+0x54>)
     4fa:	4798      	blx	r3
	device->hw = hw;
     4fc:	612c      	str	r4, [r5, #16]
	tmp = ((Nvmctrl *)hw)->CTRLB.reg;
     4fe:	6862      	ldr	r2, [r4, #4]
	tmp &= mask;
     500:	239e      	movs	r3, #158	; 0x9e
     502:	4013      	ands	r3, r2
	((Nvmctrl *)hw)->CTRLB.reg = data;
     504:	6063      	str	r3, [r4, #4]
	_nvm_dev = device;
     506:	4b0c      	ldr	r3, [pc, #48]	; (538 <_flash_init+0x58>)
     508:	601d      	str	r5, [r3, #0]
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     50a:	4b0c      	ldr	r3, [pc, #48]	; (53c <_flash_init+0x5c>)
     50c:	2210      	movs	r2, #16
     50e:	2180      	movs	r1, #128	; 0x80
     510:	505a      	str	r2, [r3, r1]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     512:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     516:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     51a:	3101      	adds	r1, #1
     51c:	31ff      	adds	r1, #255	; 0xff
     51e:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     520:	601a      	str	r2, [r3, #0]
}
     522:	2000      	movs	r0, #0
     524:	bd70      	pop	{r4, r5, r6, pc}
     526:	2000      	movs	r0, #0
     528:	e7e4      	b.n	4f4 <_flash_init+0x14>
     52a:	46c0      	nop			; (mov r8, r8)
     52c:	beffc000 	.word	0xbeffc000
     530:	00001e38 	.word	0x00001e38
     534:	000003a5 	.word	0x000003a5
     538:	200000a8 	.word	0x200000a8
     53c:	e000e100 	.word	0xe000e100

00000540 <_flash_read>:
{
     540:	b570      	push	{r4, r5, r6, lr}
	uint32_t nvm_address = src_addr / 2;
     542:	084c      	lsrs	r4, r1, #1
	while (!hri_nvmctrl_get_interrupt_READY_bit(device->hw)) {
     544:	6905      	ldr	r5, [r0, #16]
     546:	2601      	movs	r6, #1
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
     548:	7d28      	ldrb	r0, [r5, #20]
     54a:	4230      	tst	r0, r6
     54c:	d0fc      	beq.n	548 <_flash_read+0x8>
	((Nvmctrl *)hw)->STATUS.reg = mask;
     54e:	2020      	movs	r0, #32
     550:	30ff      	adds	r0, #255	; 0xff
     552:	8328      	strh	r0, [r5, #24]
		i = 0;
     554:	2000      	movs	r0, #0
	if (src_addr % 2) {
     556:	07cd      	lsls	r5, r1, #31
     558:	d505      	bpl.n	566 <_flash_read+0x26>
		data      = NVM_MEMORY[nvm_address++];
     55a:	3401      	adds	r4, #1
     55c:	3001      	adds	r0, #1
     55e:	4381      	bics	r1, r0
     560:	8809      	ldrh	r1, [r1, #0]
		buffer[0] = data >> 8;
     562:	0a09      	lsrs	r1, r1, #8
     564:	7011      	strb	r1, [r2, #0]
	while (i < length) {
     566:	4298      	cmp	r0, r3
     568:	d211      	bcs.n	58e <_flash_read+0x4e>
     56a:	1812      	adds	r2, r2, r0
     56c:	0064      	lsls	r4, r4, #1
     56e:	1a24      	subs	r4, r4, r0
		if (i < (length - 1)) {
     570:	1e5d      	subs	r5, r3, #1
     572:	e003      	b.n	57c <_flash_read+0x3c>
		i += 2;
     574:	3002      	adds	r0, #2
     576:	3202      	adds	r2, #2
	while (i < length) {
     578:	4283      	cmp	r3, r0
     57a:	d908      	bls.n	58e <_flash_read+0x4e>
     57c:	1821      	adds	r1, r4, r0
		data      = NVM_MEMORY[nvm_address++];
     57e:	8809      	ldrh	r1, [r1, #0]
     580:	b289      	uxth	r1, r1
		buffer[i] = (data & 0xFF);
     582:	7011      	strb	r1, [r2, #0]
		if (i < (length - 1)) {
     584:	4285      	cmp	r5, r0
     586:	d9f5      	bls.n	574 <_flash_read+0x34>
			buffer[i + 1] = (data >> 8);
     588:	0a09      	lsrs	r1, r1, #8
     58a:	7051      	strb	r1, [r2, #1]
     58c:	e7f2      	b.n	574 <_flash_read+0x34>
}
     58e:	bd70      	pop	{r4, r5, r6, pc}

00000590 <NVMCTRL_Handler>:

/**
 * \internal NVM interrupt handler
 */
void NVMCTRL_Handler(void)
{
     590:	b510      	push	{r4, lr}
	void *const hw = _nvm_dev->hw;
     592:	4b0a      	ldr	r3, [pc, #40]	; (5bc <NVMCTRL_Handler+0x2c>)
     594:	6818      	ldr	r0, [r3, #0]
     596:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
     598:	7d1a      	ldrb	r2, [r3, #20]

	if (hri_nvmctrl_get_interrupt_READY_bit(hw)) {
     59a:	07d2      	lsls	r2, r2, #31
     59c:	d504      	bpl.n	5a8 <NVMCTRL_Handler+0x18>
		if (NULL != _nvm_dev->flash_cb.ready_cb) {
     59e:	6803      	ldr	r3, [r0, #0]
     5a0:	2b00      	cmp	r3, #0
     5a2:	d000      	beq.n	5a6 <NVMCTRL_Handler+0x16>
			_nvm_dev->flash_cb.ready_cb(_nvm_dev);
     5a4:	4798      	blx	r3
		hri_nvmctrl_clear_interrupt_ERROR_bit(hw);
		if (NULL != _nvm_dev->flash_cb.error_cb) {
			_nvm_dev->flash_cb.error_cb(_nvm_dev);
		}
	}
}
     5a6:	bd10      	pop	{r4, pc}
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_ERROR) >> NVMCTRL_INTFLAG_ERROR_Pos;
     5a8:	7d1a      	ldrb	r2, [r3, #20]
	} else if (hri_nvmctrl_get_interrupt_ERROR_bit(hw)) {
     5aa:	0792      	lsls	r2, r2, #30
     5ac:	d5fb      	bpl.n	5a6 <NVMCTRL_Handler+0x16>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_ERROR;
     5ae:	2202      	movs	r2, #2
     5b0:	751a      	strb	r2, [r3, #20]
		if (NULL != _nvm_dev->flash_cb.error_cb) {
     5b2:	6843      	ldr	r3, [r0, #4]
     5b4:	2b00      	cmp	r3, #0
     5b6:	d0f6      	beq.n	5a6 <NVMCTRL_Handler+0x16>
			_nvm_dev->flash_cb.error_cb(_nvm_dev);
     5b8:	4798      	blx	r3
}
     5ba:	e7f4      	b.n	5a6 <NVMCTRL_Handler+0x16>
     5bc:	200000a8 	.word	0x200000a8

000005c0 <_rww_flash_read>:

/**
 * \brief Reads a number of bytes in the internal RWWEE Flash.
 */
int32_t _rww_flash_read(struct _flash_device *const device, const uint32_t src_addr, uint8_t *buffer, uint32_t length)
{
     5c0:	b570      	push	{r4, r5, r6, lr}
	    || (addr > (NVMCTRL_RWW_EEPROM_ADDR + NVMCTRL_PAGE_SIZE * NVMCTRL_RWWEE_PAGES))) {
     5c2:	4c0b      	ldr	r4, [pc, #44]	; (5f0 <_rww_flash_read+0x30>)
     5c4:	190d      	adds	r5, r1, r4
	/* Check if the address is valid */
	if (!_is_valid_rww_flash_address(src_addr) || !_is_valid_rww_flash_address(src_addr + length)) {
     5c6:	2480      	movs	r4, #128	; 0x80
     5c8:	01a4      	lsls	r4, r4, #6
     5ca:	42a5      	cmp	r5, r4
     5cc:	d80a      	bhi.n	5e4 <_rww_flash_read+0x24>
	    || (addr > (NVMCTRL_RWW_EEPROM_ADDR + NVMCTRL_PAGE_SIZE * NVMCTRL_RWWEE_PAGES))) {
     5ce:	4c08      	ldr	r4, [pc, #32]	; (5f0 <_rww_flash_read+0x30>)
     5d0:	191c      	adds	r4, r3, r4
     5d2:	1864      	adds	r4, r4, r1
	if (!_is_valid_rww_flash_address(src_addr) || !_is_valid_rww_flash_address(src_addr + length)) {
     5d4:	2580      	movs	r5, #128	; 0x80
     5d6:	01ad      	lsls	r5, r5, #6
     5d8:	42ac      	cmp	r4, r5
     5da:	d806      	bhi.n	5ea <_rww_flash_read+0x2a>
		return ERR_BAD_ADDRESS;
	}

	_flash_read(device, src_addr, buffer, length);
     5dc:	4c05      	ldr	r4, [pc, #20]	; (5f4 <_rww_flash_read+0x34>)
     5de:	47a0      	blx	r4

	return ERR_NONE;
     5e0:	2000      	movs	r0, #0
}
     5e2:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_BAD_ADDRESS;
     5e4:	200e      	movs	r0, #14
     5e6:	4240      	negs	r0, r0
     5e8:	e7fb      	b.n	5e2 <_rww_flash_read+0x22>
     5ea:	200e      	movs	r0, #14
     5ec:	4240      	negs	r0, r0
     5ee:	e7f8      	b.n	5e2 <_rww_flash_read+0x22>
     5f0:	ffc00000 	.word	0xffc00000
     5f4:	00000541 	.word	0x00000541

000005f8 <_rww_flash_write>:

/**
 * \brief Writes a number of bytes in the internal RWWEE Flash.
 */
int32_t _rww_flash_write(struct _flash_device *const device, const uint32_t dst_addr, uint8_t *buffer, uint32_t length)
{
     5f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     5fa:	46de      	mov	lr, fp
     5fc:	4657      	mov	r7, sl
     5fe:	464e      	mov	r6, r9
     600:	4645      	mov	r5, r8
     602:	b5e0      	push	{r5, r6, r7, lr}
     604:	b0c5      	sub	sp, #276	; 0x114
     606:	4683      	mov	fp, r0
     608:	0016      	movs	r6, r2
     60a:	001d      	movs	r5, r3
	    || (addr > (NVMCTRL_RWW_EEPROM_ADDR + NVMCTRL_PAGE_SIZE * NVMCTRL_RWWEE_PAGES))) {
     60c:	4b49      	ldr	r3, [pc, #292]	; (734 <_rww_flash_write+0x13c>)
     60e:	18ca      	adds	r2, r1, r3
	uint32_t row_start_addr, row_end_addr;
	uint32_t i, j, k;
	uint32_t wr_start_addr = dst_addr;

	/* Check if the address is valid */
	if (!_is_valid_rww_flash_address(dst_addr) || !_is_valid_rww_flash_address(dst_addr + length)) {
     610:	2380      	movs	r3, #128	; 0x80
     612:	019b      	lsls	r3, r3, #6
     614:	429a      	cmp	r2, r3
     616:	d900      	bls.n	61a <_rww_flash_write+0x22>
     618:	e086      	b.n	728 <_rww_flash_write+0x130>
	    || (addr > (NVMCTRL_RWW_EEPROM_ADDR + NVMCTRL_PAGE_SIZE * NVMCTRL_RWWEE_PAGES))) {
     61a:	4b46      	ldr	r3, [pc, #280]	; (734 <_rww_flash_write+0x13c>)
     61c:	18eb      	adds	r3, r5, r3
     61e:	185b      	adds	r3, r3, r1
	if (!_is_valid_rww_flash_address(dst_addr) || !_is_valid_rww_flash_address(dst_addr + length)) {
     620:	2280      	movs	r2, #128	; 0x80
     622:	0192      	lsls	r2, r2, #6
     624:	4293      	cmp	r3, r2
     626:	d900      	bls.n	62a <_rww_flash_write+0x32>
     628:	e081      	b.n	72e <_rww_flash_write+0x136>
     62a:	000c      	movs	r4, r1
     62c:	e02f      	b.n	68e <_rww_flash_write+0x96>
     62e:	46ba      	mov	sl, r7
     630:	4667      	mov	r7, ip
			buffer++;
			length--;
		}

		/* erase row before write */
		_flash_erase_row(device->hw, row_start_addr, NVMCTRL_CTRLA_CMD_RWWEEER);
     632:	465b      	mov	r3, fp
     634:	691a      	ldr	r2, [r3, #16]
	while (!hri_nvmctrl_get_interrupt_READY_bit(hw)) {
     636:	2101      	movs	r1, #1
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
     638:	7d13      	ldrb	r3, [r2, #20]
     63a:	420b      	tst	r3, r1
     63c:	d0fc      	beq.n	638 <_rww_flash_write+0x40>
	((Nvmctrl *)hw)->STATUS.reg = mask;
     63e:	2320      	movs	r3, #32
     640:	33ff      	adds	r3, #255	; 0xff
     642:	8313      	strh	r3, [r2, #24]
	hri_nvmctrl_write_ADDR_reg(hw, dst_addr / 2);
     644:	464b      	mov	r3, r9
     646:	085b      	lsrs	r3, r3, #1
	((Nvmctrl *)hw)->ADDR.reg = data;
     648:	61d3      	str	r3, [r2, #28]
	((Nvmctrl *)hw)->CTRLA.reg = data;
     64a:	4b3b      	ldr	r3, [pc, #236]	; (738 <_rww_flash_write+0x140>)
     64c:	8013      	strh	r3, [r2, #0]

		/* write buffer to flash */
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
			_flash_program(device->hw,
     64e:	464b      	mov	r3, r9
     650:	46a0      	mov	r8, r4
     652:	9703      	str	r7, [sp, #12]
     654:	002a      	movs	r2, r5
     656:	464d      	mov	r5, r9
     658:	46b1      	mov	r9, r6
     65a:	465e      	mov	r6, fp
     65c:	4693      	mov	fp, r2
     65e:	001f      	movs	r7, r3
     660:	1b7a      	subs	r2, r7, r5
     662:	ab04      	add	r3, sp, #16
     664:	469c      	mov	ip, r3
     666:	4462      	add	r2, ip
     668:	231c      	movs	r3, #28
     66a:	9300      	str	r3, [sp, #0]
     66c:	3324      	adds	r3, #36	; 0x24
     66e:	0039      	movs	r1, r7
     670:	6930      	ldr	r0, [r6, #16]
     672:	4c32      	ldr	r4, [pc, #200]	; (73c <_rww_flash_write+0x144>)
     674:	47a0      	blx	r4
     676:	3740      	adds	r7, #64	; 0x40
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
     678:	9b03      	ldr	r3, [sp, #12]
     67a:	42bb      	cmp	r3, r7
     67c:	d1f0      	bne.n	660 <_rww_flash_write+0x68>
     67e:	4644      	mov	r4, r8
     680:	465d      	mov	r5, fp
     682:	46b3      	mov	fp, r6
     684:	464e      	mov	r6, r9
			               tmp_buffer[i],
			               NVMCTRL_PAGE_SIZE,
			               NVMCTRL_CTRLA_CMD_RWWEEWP);
		}

	} while (row_end_addr < (wr_start_addr + length - 1));
     686:	192b      	adds	r3, r5, r4
     688:	3b01      	subs	r3, #1
     68a:	459a      	cmp	sl, r3
     68c:	d244      	bcs.n	718 <_rww_flash_write+0x120>
		row_start_addr = wr_start_addr & ~((NVMCTRL_PAGE_SIZE * NVMCTRL_ROW_PAGES) - 1);
     68e:	23ff      	movs	r3, #255	; 0xff
     690:	0022      	movs	r2, r4
     692:	439a      	bics	r2, r3
     694:	4691      	mov	r9, r2
		row_end_addr   = row_start_addr + NVMCTRL_ROW_PAGES * NVMCTRL_PAGE_SIZE - 1;
     696:	444b      	add	r3, r9
     698:	469a      	mov	sl, r3
     69a:	2380      	movs	r3, #128	; 0x80
     69c:	005b      	lsls	r3, r3, #1
     69e:	444b      	add	r3, r9
     6a0:	4698      	mov	r8, r3
     6a2:	0017      	movs	r7, r2
     6a4:	4642      	mov	r2, r8
     6a6:	9203      	str	r2, [sp, #12]
     6a8:	46a0      	mov	r8, r4
     6aa:	464c      	mov	r4, r9
     6ac:	46b1      	mov	r9, r6
     6ae:	465e      	mov	r6, fp
     6b0:	46ab      	mov	fp, r5
			_rww_flash_read(device, row_start_addr + i * NVMCTRL_PAGE_SIZE, tmp_buffer[i], NVMCTRL_PAGE_SIZE);
     6b2:	1b3a      	subs	r2, r7, r4
     6b4:	ab04      	add	r3, sp, #16
     6b6:	469c      	mov	ip, r3
     6b8:	4462      	add	r2, ip
     6ba:	2340      	movs	r3, #64	; 0x40
     6bc:	0039      	movs	r1, r7
     6be:	0030      	movs	r0, r6
     6c0:	4d1f      	ldr	r5, [pc, #124]	; (740 <_rww_flash_write+0x148>)
     6c2:	47a8      	blx	r5
     6c4:	3740      	adds	r7, #64	; 0x40
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
     6c6:	9b03      	ldr	r3, [sp, #12]
     6c8:	429f      	cmp	r7, r3
     6ca:	d1f2      	bne.n	6b2 <_rww_flash_write+0xba>
     6cc:	465d      	mov	r5, fp
     6ce:	46b3      	mov	fp, r6
     6d0:	464e      	mov	r6, r9
     6d2:	46a1      	mov	r9, r4
     6d4:	4644      	mov	r4, r8
		j = (wr_start_addr - row_start_addr) / NVMCTRL_PAGE_SIZE;
     6d6:	464b      	mov	r3, r9
     6d8:	1ae3      	subs	r3, r4, r3
     6da:	0999      	lsrs	r1, r3, #6
     6dc:	223f      	movs	r2, #63	; 0x3f
     6de:	4013      	ands	r3, r2
		while ((wr_start_addr <= row_end_addr) && (length > 0)) {
     6e0:	4554      	cmp	r4, sl
     6e2:	d8a6      	bhi.n	632 <_rww_flash_write+0x3a>
     6e4:	2d00      	cmp	r5, #0
     6e6:	d0a4      	beq.n	632 <_rww_flash_write+0x3a>
			k                = (k + 1) % NVMCTRL_PAGE_SIZE;
     6e8:	46bc      	mov	ip, r7
     6ea:	4657      	mov	r7, sl
			tmp_buffer[j][k] = *buffer;
     6ec:	018a      	lsls	r2, r1, #6
     6ee:	a804      	add	r0, sp, #16
     6f0:	4680      	mov	r8, r0
     6f2:	4442      	add	r2, r8
     6f4:	7830      	ldrb	r0, [r6, #0]
     6f6:	54d0      	strb	r0, [r2, r3]
			k                = (k + 1) % NVMCTRL_PAGE_SIZE;
     6f8:	3301      	adds	r3, #1
     6fa:	223f      	movs	r2, #63	; 0x3f
     6fc:	4013      	ands	r3, r2
				j++;
     6fe:	425a      	negs	r2, r3
     700:	415a      	adcs	r2, r3
     702:	1889      	adds	r1, r1, r2
			wr_start_addr++;
     704:	3401      	adds	r4, #1
			buffer++;
     706:	3601      	adds	r6, #1
			length--;
     708:	3d01      	subs	r5, #1
		while ((wr_start_addr <= row_end_addr) && (length > 0)) {
     70a:	42a7      	cmp	r7, r4
     70c:	d38f      	bcc.n	62e <_rww_flash_write+0x36>
     70e:	2d00      	cmp	r5, #0
     710:	d1ec      	bne.n	6ec <_rww_flash_write+0xf4>
     712:	46ba      	mov	sl, r7
     714:	4667      	mov	r7, ip
     716:	e78c      	b.n	632 <_rww_flash_write+0x3a>

	return ERR_NONE;
     718:	2000      	movs	r0, #0
}
     71a:	b045      	add	sp, #276	; 0x114
     71c:	bc3c      	pop	{r2, r3, r4, r5}
     71e:	4690      	mov	r8, r2
     720:	4699      	mov	r9, r3
     722:	46a2      	mov	sl, r4
     724:	46ab      	mov	fp, r5
     726:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ERR_BAD_ADDRESS;
     728:	200e      	movs	r0, #14
     72a:	4240      	negs	r0, r0
     72c:	e7f5      	b.n	71a <_rww_flash_write+0x122>
     72e:	200e      	movs	r0, #14
     730:	4240      	negs	r0, r0
     732:	e7f2      	b.n	71a <_rww_flash_write+0x122>
     734:	ffc00000 	.word	0xffc00000
     738:	ffffa51a 	.word	0xffffa51a
     73c:	00000455 	.word	0x00000455
     740:	000005c1 	.word	0x000005c1

00000744 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
     744:	4b04      	ldr	r3, [pc, #16]	; (758 <_osc32kctrl_init_sources+0x14>)
     746:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSC32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSC32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
     748:	21f8      	movs	r1, #248	; 0xf8
     74a:	0149      	lsls	r1, r1, #5
     74c:	400a      	ands	r2, r1
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
     74e:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     750:	2201      	movs	r2, #1
     752:	611a      	str	r2, [r3, #16]
		;
#endif
#endif
	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
     754:	4770      	bx	lr
     756:	46c0      	nop			; (mov r8, r8)
     758:	40001000 	.word	0x40001000

0000075c <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_OSC16MCTRL_reg(const void *const hw, hri_oscctrl_osc16mctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC16MCTRL.reg = data;
     75c:	2282      	movs	r2, #130	; 0x82
     75e:	4b0c      	ldr	r3, [pc, #48]	; (790 <_oscctrl_init_sources+0x34>)
     760:	751a      	strb	r2, [r3, #20]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
     762:	0018      	movs	r0, r3
     764:	2138      	movs	r1, #56	; 0x38
     766:	3a80      	subs	r2, #128	; 0x80
     768:	5c43      	ldrb	r3, [r0, r1]
     76a:	4213      	tst	r3, r2
     76c:	d1fc      	bne.n	768 <_oscctrl_init_sources+0xc>
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC16MRDY) >> OSCCTRL_STATUS_OSC16MRDY_Pos;
     76e:	4908      	ldr	r1, [pc, #32]	; (790 <_oscctrl_init_sources+0x34>)
#endif
#endif

#if CONF_OSC16M_CONFIG == 1
#if CONF_OSC16M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC16MRDY_bit(hw))
     770:	2210      	movs	r2, #16
     772:	68cb      	ldr	r3, [r1, #12]
     774:	421a      	tst	r2, r3
     776:	d0fc      	beq.n	772 <_oscctrl_init_sources+0x16>
	((Oscctrl *)hw)->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND;
     778:	4a05      	ldr	r2, [pc, #20]	; (790 <_oscctrl_init_sources+0x34>)
     77a:	7d13      	ldrb	r3, [r2, #20]
     77c:	2180      	movs	r1, #128	; 0x80
     77e:	430b      	orrs	r3, r1
     780:	7513      	strb	r3, [r2, #20]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
     782:	0010      	movs	r0, r2
     784:	3948      	subs	r1, #72	; 0x48
     786:	220e      	movs	r2, #14
     788:	5c43      	ldrb	r3, [r0, r1]
     78a:	4213      	tst	r3, r2
     78c:	d1fc      	bne.n	788 <_oscctrl_init_sources+0x2c>
#if CONF_OSC16M_ONDEMAND == 1
	hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
     78e:	4770      	bx	lr
     790:	40000c00 	.word	0x40000c00

00000794 <_oscctrl_init_referenced_generators>:
#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
		;
#endif
	(void)hw, (void)tmp;
}
     794:	4770      	bx	lr

00000796 <_set_performance_level>:
}

static inline hri_pm_plcfg_reg_t hri_pm_get_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Pm *)hw)->PLCFG.reg;
     796:	2380      	movs	r3, #128	; 0x80
     798:	05db      	lsls	r3, r3, #23
     79a:	789b      	ldrb	r3, [r3, #2]
/**
 * \brief Set performance level
 */
void _set_performance_level(const uint8_t level)
{
	if (hri_pm_get_PLCFG_PLSEL_bf(PM, PM_PLCFG_PLSEL_Msk) != level) {
     79c:	2203      	movs	r2, #3
     79e:	4013      	ands	r3, r2
     7a0:	4298      	cmp	r0, r3
     7a2:	d00c      	beq.n	7be <_set_performance_level+0x28>
	((Pm *)hw)->INTFLAG.reg = mask;
     7a4:	2280      	movs	r2, #128	; 0x80
     7a6:	05d2      	lsls	r2, r2, #23
     7a8:	23ff      	movs	r3, #255	; 0xff
     7aa:	7193      	strb	r3, [r2, #6]

static inline void hri_pm_write_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t data)
{
	uint8_t tmp;
	PM_CRITICAL_SECTION_ENTER();
	tmp = ((Pm *)hw)->PLCFG.reg;
     7ac:	7893      	ldrb	r3, [r2, #2]
	tmp &= ~PM_PLCFG_PLSEL_Msk;
     7ae:	2103      	movs	r1, #3
     7b0:	438b      	bics	r3, r1
	tmp |= PM_PLCFG_PLSEL(data);
     7b2:	4008      	ands	r0, r1
     7b4:	4318      	orrs	r0, r3
	((Pm *)hw)->PLCFG.reg = tmp;
     7b6:	7090      	strb	r0, [r2, #2]
	return ((Pm *)hw)->INTFLAG.reg;
     7b8:	7993      	ldrb	r3, [r2, #6]
		hri_pm_clear_INTFLAG_reg(PM, 0xFF);
		hri_pm_write_PLCFG_PLSEL_bf(PM, level);
		while (!hri_pm_read_INTFLAG_reg(PM))
     7ba:	2b00      	cmp	r3, #0
     7bc:	d0fc      	beq.n	7b8 <_set_performance_level+0x22>
			;
	}
}
     7be:	4770      	bx	lr

000007c0 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
     7c0:	4b02      	ldr	r3, [pc, #8]	; (7cc <_delay_init+0xc>)
     7c2:	4a03      	ldr	r2, [pc, #12]	; (7d0 <_delay_init+0x10>)
     7c4:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
     7c6:	2205      	movs	r2, #5
     7c8:	601a      	str	r2, [r3, #0]
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
	_system_time_init(hw);
}
     7ca:	4770      	bx	lr
     7cc:	e000e010 	.word	0xe000e010
     7d0:	00ffffff 	.word	0x00ffffff

000007d4 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
     7d4:	b570      	push	{r4, r5, r6, lr}
	(void)hw;
	uint8_t  n   = cycles >> 24;
     7d6:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
     7d8:	1e5e      	subs	r6, r3, #1
     7da:	b2f6      	uxtb	r6, r6
     7dc:	2b00      	cmp	r3, #0
     7de:	d013      	beq.n	808 <_delay_cycles+0x34>
     7e0:	0034      	movs	r4, r6
		SysTick->LOAD = 0xFFFFFF;
     7e2:	4a0e      	ldr	r2, [pc, #56]	; (81c <_delay_cycles+0x48>)
     7e4:	4d0e      	ldr	r5, [pc, #56]	; (820 <_delay_cycles+0x4c>)
		SysTick->VAL  = 0xFFFFFF;
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
     7e6:	2080      	movs	r0, #128	; 0x80
     7e8:	0240      	lsls	r0, r0, #9
		SysTick->LOAD = 0xFFFFFF;
     7ea:	6055      	str	r5, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
     7ec:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
     7ee:	6813      	ldr	r3, [r2, #0]
     7f0:	4203      	tst	r3, r0
     7f2:	d0fc      	beq.n	7ee <_delay_cycles+0x1a>
	while (n--) {
     7f4:	3c01      	subs	r4, #1
     7f6:	b2e4      	uxtb	r4, r4
     7f8:	2cff      	cmp	r4, #255	; 0xff
     7fa:	d1f6      	bne.n	7ea <_delay_cycles+0x16>
     7fc:	0633      	lsls	r3, r6, #24
     7fe:	1af6      	subs	r6, r6, r3
     800:	4b08      	ldr	r3, [pc, #32]	; (824 <_delay_cycles+0x50>)
     802:	469c      	mov	ip, r3
     804:	4461      	add	r1, ip
     806:	1871      	adds	r1, r6, r1
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
     808:	4b04      	ldr	r3, [pc, #16]	; (81c <_delay_cycles+0x48>)
     80a:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
     80c:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
     80e:	0019      	movs	r1, r3
     810:	2280      	movs	r2, #128	; 0x80
     812:	0252      	lsls	r2, r2, #9
     814:	680b      	ldr	r3, [r1, #0]
     816:	4213      	tst	r3, r2
     818:	d0fc      	beq.n	814 <_delay_cycles+0x40>
		;
}
     81a:	bd70      	pop	{r4, r5, r6, pc}
     81c:	e000e010 	.word	0xe000e010
     820:	00ffffff 	.word	0x00ffffff
     824:	ff000001 	.word	0xff000001

00000828 <aes_measurement>:
static uint8_t iv[16] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };
static uint8_t iv2[16] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f }; /*(This is same but needed for decryption. Note: AES Module was not doing decryption without iv2  )*/


void aes_measurement(void)
{
     828:	b5f0      	push	{r4, r5, r6, r7, lr}
     82a:	46de      	mov	lr, fp
     82c:	4657      	mov	r7, sl
     82e:	464e      	mov	r6, r9
     830:	4645      	mov	r5, r8
     832:	b5e0      	push	{r5, r6, r7, lr}
     834:	4c8c      	ldr	r4, [pc, #560]	; (a68 <aes_measurement+0x240>)
     836:	44a5      	add	sp, r4
	Aes enc;
	Aes dec;
	
	
	// Allocate buffer memory
	uint8_t *input = malloc(sizeof(uint8_t) * MAX_NUM_BYTES);
     838:	488c      	ldr	r0, [pc, #560]	; (a6c <aes_measurement+0x244>)
     83a:	4b8d      	ldr	r3, [pc, #564]	; (a70 <aes_measurement+0x248>)
     83c:	4798      	blx	r3
     83e:	0004      	movs	r4, r0
	
	// Allocate buffer memory
	uint8_t *output = malloc(sizeof(uint8_t) * MAX_NUM_BYTES);
	//uint8_t output[MAX_NUM_BYTES];

    delay_ms(10);
     840:	200a      	movs	r0, #10
     842:	4b8c      	ldr	r3, [pc, #560]	; (a74 <aes_measurement+0x24c>)
     844:	4798      	blx	r3
     846:	2720      	movs	r7, #32
     848:	2510      	movs	r5, #16
		/* Read data from flash (Solution 2) */
		//flash_read(&FLASH_0, target_addr, output, num_bytes);
		STOP_MEASURE(DGI_GPIO3);
		
	
		wc_AesSetKey(&dec, key, sizeof(key), iv2, AES_DECRYPTION);
     84a:	4b8b      	ldr	r3, [pc, #556]	; (a78 <aes_measurement+0x250>)
     84c:	3310      	adds	r3, #16
     84e:	9302      	str	r3, [sp, #8]
     850:	4b89      	ldr	r3, [pc, #548]	; (a78 <aes_measurement+0x250>)
     852:	3310      	adds	r3, #16
     854:	9303      	str	r3, [sp, #12]
     856:	46b8      	mov	r8, r7
     858:	e090      	b.n	97c <aes_measurement+0x154>
		wc_AesSetKey(&enc, key, sizeof(key), iv, AES_ENCRYPTION);
     85a:	2300      	movs	r3, #0
     85c:	9300      	str	r3, [sp, #0]
     85e:	4b86      	ldr	r3, [pc, #536]	; (a78 <aes_measurement+0x250>)
     860:	2220      	movs	r2, #32
     862:	4986      	ldr	r1, [pc, #536]	; (a7c <aes_measurement+0x254>)
     864:	a84b      	add	r0, sp, #300	; 0x12c
     866:	4e86      	ldr	r6, [pc, #536]	; (a80 <aes_measurement+0x258>)
     868:	47b0      	blx	r6
		START_MEASURE(DGI_GPIO2);
     86a:	2002      	movs	r0, #2
     86c:	4f81      	ldr	r7, [pc, #516]	; (a74 <aes_measurement+0x24c>)
     86e:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     870:	23c0      	movs	r3, #192	; 0xc0
     872:	05db      	lsls	r3, r3, #23
     874:	469b      	mov	fp, r3
     876:	2380      	movs	r3, #128	; 0x80
     878:	035b      	lsls	r3, r3, #13
     87a:	4699      	mov	r9, r3
     87c:	465a      	mov	r2, fp
     87e:	6193      	str	r3, [r2, #24]
		wc_AesCbcEncrypt(&enc, input, input, num_bytes);
     880:	2300      	movs	r3, #0
     882:	0022      	movs	r2, r4
     884:	0021      	movs	r1, r4
     886:	a84b      	add	r0, sp, #300	; 0x12c
     888:	4e7e      	ldr	r6, [pc, #504]	; (a84 <aes_measurement+0x25c>)
     88a:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     88c:	464b      	mov	r3, r9
     88e:	465a      	mov	r2, fp
     890:	6153      	str	r3, [r2, #20]
		STOP_MEASURE(DGI_GPIO2);
     892:	2002      	movs	r0, #2
     894:	47b8      	blx	r7
		START_MEASURE(DGI_GPIO3);
     896:	2002      	movs	r0, #2
     898:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     89a:	2380      	movs	r3, #128	; 0x80
     89c:	039b      	lsls	r3, r3, #14
     89e:	465a      	mov	r2, fp
     8a0:	6193      	str	r3, [r2, #24]
		if (_rww_flash_write(&FLASH_0.dev, NVMCTRL_RWW_EEPROM_ADDR, input, num_bytes ) != ERR_NONE) {
     8a2:	2300      	movs	r3, #0
     8a4:	0022      	movs	r2, r4
     8a6:	2180      	movs	r1, #128	; 0x80
     8a8:	03c9      	lsls	r1, r1, #15
     8aa:	4877      	ldr	r0, [pc, #476]	; (a88 <aes_measurement+0x260>)
     8ac:	4e77      	ldr	r6, [pc, #476]	; (a8c <aes_measurement+0x264>)
     8ae:	47b0      	blx	r6
     8b0:	2800      	cmp	r0, #0
     8b2:	d000      	beq.n	8b6 <aes_measurement+0x8e>
     8b4:	e0d6      	b.n	a64 <aes_measurement+0x23c>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     8b6:	27c0      	movs	r7, #192	; 0xc0
     8b8:	05ff      	lsls	r7, r7, #23
     8ba:	2380      	movs	r3, #128	; 0x80
     8bc:	039b      	lsls	r3, r3, #14
     8be:	4699      	mov	r9, r3
     8c0:	617b      	str	r3, [r7, #20]
		STOP_MEASURE(DGI_GPIO3);
     8c2:	2002      	movs	r0, #2
     8c4:	4e6b      	ldr	r6, [pc, #428]	; (a74 <aes_measurement+0x24c>)
     8c6:	47b0      	blx	r6
		SLEEP
     8c8:	2002      	movs	r0, #2
     8ca:	47b0      	blx	r6
		START_MEASURE(DGI_GPIO3);
     8cc:	2002      	movs	r0, #2
     8ce:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     8d0:	464b      	mov	r3, r9
     8d2:	61bb      	str	r3, [r7, #24]
		if (_rww_flash_read(&FLASH_0.dev, NVMCTRL_RWW_EEPROM_ADDR, input, num_bytes) != ERR_NONE) {
     8d4:	2300      	movs	r3, #0
     8d6:	0022      	movs	r2, r4
     8d8:	2180      	movs	r1, #128	; 0x80
     8da:	03c9      	lsls	r1, r1, #15
     8dc:	486a      	ldr	r0, [pc, #424]	; (a88 <aes_measurement+0x260>)
     8de:	4e6c      	ldr	r6, [pc, #432]	; (a90 <aes_measurement+0x268>)
     8e0:	47b0      	blx	r6
     8e2:	2800      	cmp	r0, #0
     8e4:	d121      	bne.n	92a <aes_measurement+0x102>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     8e6:	27c0      	movs	r7, #192	; 0xc0
     8e8:	05ff      	lsls	r7, r7, #23
     8ea:	2380      	movs	r3, #128	; 0x80
     8ec:	039b      	lsls	r3, r3, #14
     8ee:	617b      	str	r3, [r7, #20]
		STOP_MEASURE(DGI_GPIO3);
     8f0:	2002      	movs	r0, #2
     8f2:	4b60      	ldr	r3, [pc, #384]	; (a74 <aes_measurement+0x24c>)
     8f4:	469b      	mov	fp, r3
     8f6:	4798      	blx	r3
		wc_AesSetKey(&dec, key, sizeof(key), iv2, AES_DECRYPTION);
     8f8:	2301      	movs	r3, #1
     8fa:	9300      	str	r3, [sp, #0]
     8fc:	9b03      	ldr	r3, [sp, #12]
     8fe:	2220      	movs	r2, #32
     900:	495e      	ldr	r1, [pc, #376]	; (a7c <aes_measurement+0x254>)
     902:	a804      	add	r0, sp, #16
     904:	4e5e      	ldr	r6, [pc, #376]	; (a80 <aes_measurement+0x258>)
     906:	47b0      	blx	r6

		// Start decryption
		START_MEASURE(DGI_GPIO2);
     908:	2002      	movs	r0, #2
     90a:	47d8      	blx	fp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     90c:	2380      	movs	r3, #128	; 0x80
     90e:	035b      	lsls	r3, r3, #13
     910:	4699      	mov	r9, r3
     912:	61bb      	str	r3, [r7, #24]
		/*decrypt*/
		wc_AesCbcDecrypt(&dec, input, input,num_bytes);
     914:	2300      	movs	r3, #0
     916:	0022      	movs	r2, r4
     918:	0021      	movs	r1, r4
     91a:	a804      	add	r0, sp, #16
     91c:	4e5d      	ldr	r6, [pc, #372]	; (a94 <aes_measurement+0x26c>)
     91e:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     920:	464b      	mov	r3, r9
     922:	617b      	str	r3, [r7, #20]
		STOP_MEASURE(DGI_GPIO2);
     924:	2002      	movs	r0, #2
     926:	47d8      	blx	fp
     928:	e024      	b.n	974 <aes_measurement+0x14c>
     92a:	e07d      	b.n	a28 <aes_measurement+0x200>
     92c:	27c0      	movs	r7, #192	; 0xc0
     92e:	05ff      	lsls	r7, r7, #23
     930:	2380      	movs	r3, #128	; 0x80
     932:	039b      	lsls	r3, r3, #14
     934:	617b      	str	r3, [r7, #20]
		STOP_MEASURE(DGI_GPIO3);
     936:	2002      	movs	r0, #2
     938:	4b4e      	ldr	r3, [pc, #312]	; (a74 <aes_measurement+0x24c>)
     93a:	469b      	mov	fp, r3
     93c:	4798      	blx	r3
		wc_AesSetKey(&dec, key, sizeof(key), iv2, AES_DECRYPTION);
     93e:	2301      	movs	r3, #1
     940:	9300      	str	r3, [sp, #0]
     942:	9b02      	ldr	r3, [sp, #8]
     944:	2220      	movs	r2, #32
     946:	494d      	ldr	r1, [pc, #308]	; (a7c <aes_measurement+0x254>)
     948:	a804      	add	r0, sp, #16
     94a:	4e4d      	ldr	r6, [pc, #308]	; (a80 <aes_measurement+0x258>)
     94c:	47b0      	blx	r6
		START_MEASURE(DGI_GPIO2);
     94e:	2002      	movs	r0, #2
     950:	47d8      	blx	fp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     952:	2380      	movs	r3, #128	; 0x80
     954:	035b      	lsls	r3, r3, #13
     956:	4699      	mov	r9, r3
     958:	61bb      	str	r3, [r7, #24]
		wc_AesCbcDecrypt(&dec, input, input,num_bytes);
     95a:	002b      	movs	r3, r5
     95c:	0022      	movs	r2, r4
     95e:	0021      	movs	r1, r4
     960:	a804      	add	r0, sp, #16
     962:	4e4c      	ldr	r6, [pc, #304]	; (a94 <aes_measurement+0x26c>)
     964:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     966:	464b      	mov	r3, r9
     968:	617b      	str	r3, [r7, #20]
		STOP_MEASURE(DGI_GPIO2);
     96a:	2002      	movs	r0, #2
     96c:	47d8      	blx	fp
	for (size_t num_bytes = MIN_NUM_BYTES; num_bytes <= MAX_NUM_BYTES; num_bytes += STEP_SIZE) {
     96e:	4b3f      	ldr	r3, [pc, #252]	; (a6c <aes_measurement+0x244>)
     970:	4598      	cmp	r8, r3
     972:	d85a      	bhi.n	a2a <aes_measurement+0x202>
     974:	3510      	adds	r5, #16
     976:	2310      	movs	r3, #16
     978:	469c      	mov	ip, r3
     97a:	44e0      	add	r8, ip
		for (size_t byte = 0; byte < num_bytes; byte++) {
     97c:	2300      	movs	r3, #0
     97e:	2d00      	cmp	r5, #0
     980:	d100      	bne.n	984 <aes_measurement+0x15c>
     982:	e76a      	b.n	85a <aes_measurement+0x32>
			input[byte] = byte; // 0x00 to write 0's OR 0xFF to write 1's.
     984:	54e3      	strb	r3, [r4, r3]
		for (size_t byte = 0; byte < num_bytes; byte++) {
     986:	3301      	adds	r3, #1
     988:	429d      	cmp	r5, r3
     98a:	d1fb      	bne.n	984 <aes_measurement+0x15c>
		wc_AesSetKey(&enc, key, sizeof(key), iv, AES_ENCRYPTION);
     98c:	2300      	movs	r3, #0
     98e:	9300      	str	r3, [sp, #0]
     990:	4b39      	ldr	r3, [pc, #228]	; (a78 <aes_measurement+0x250>)
     992:	2220      	movs	r2, #32
     994:	4939      	ldr	r1, [pc, #228]	; (a7c <aes_measurement+0x254>)
     996:	a84b      	add	r0, sp, #300	; 0x12c
     998:	4e39      	ldr	r6, [pc, #228]	; (a80 <aes_measurement+0x258>)
     99a:	47b0      	blx	r6
		START_MEASURE(DGI_GPIO2);
     99c:	2002      	movs	r0, #2
     99e:	4f35      	ldr	r7, [pc, #212]	; (a74 <aes_measurement+0x24c>)
     9a0:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     9a2:	23c0      	movs	r3, #192	; 0xc0
     9a4:	05db      	lsls	r3, r3, #23
     9a6:	469b      	mov	fp, r3
     9a8:	2380      	movs	r3, #128	; 0x80
     9aa:	035b      	lsls	r3, r3, #13
     9ac:	4699      	mov	r9, r3
     9ae:	465a      	mov	r2, fp
     9b0:	6193      	str	r3, [r2, #24]
		wc_AesCbcEncrypt(&enc, input, input, num_bytes);
     9b2:	002b      	movs	r3, r5
     9b4:	0022      	movs	r2, r4
     9b6:	0021      	movs	r1, r4
     9b8:	a84b      	add	r0, sp, #300	; 0x12c
     9ba:	4e32      	ldr	r6, [pc, #200]	; (a84 <aes_measurement+0x25c>)
     9bc:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9be:	464b      	mov	r3, r9
     9c0:	465a      	mov	r2, fp
     9c2:	6153      	str	r3, [r2, #20]
		STOP_MEASURE(DGI_GPIO2);
     9c4:	2002      	movs	r0, #2
     9c6:	47b8      	blx	r7
		START_MEASURE(DGI_GPIO3);
     9c8:	2002      	movs	r0, #2
     9ca:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     9cc:	2380      	movs	r3, #128	; 0x80
     9ce:	039b      	lsls	r3, r3, #14
     9d0:	465a      	mov	r2, fp
     9d2:	6193      	str	r3, [r2, #24]
		if (_rww_flash_write(&FLASH_0.dev, NVMCTRL_RWW_EEPROM_ADDR, input, num_bytes ) != ERR_NONE) {
     9d4:	002b      	movs	r3, r5
     9d6:	0022      	movs	r2, r4
     9d8:	2180      	movs	r1, #128	; 0x80
     9da:	03c9      	lsls	r1, r1, #15
     9dc:	482a      	ldr	r0, [pc, #168]	; (a88 <aes_measurement+0x260>)
     9de:	4e2b      	ldr	r6, [pc, #172]	; (a8c <aes_measurement+0x264>)
     9e0:	47b0      	blx	r6
     9e2:	2800      	cmp	r0, #0
     9e4:	d13e      	bne.n	a64 <aes_measurement+0x23c>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9e6:	2280      	movs	r2, #128	; 0x80
     9e8:	0392      	lsls	r2, r2, #14
     9ea:	23c0      	movs	r3, #192	; 0xc0
     9ec:	05db      	lsls	r3, r3, #23
     9ee:	615a      	str	r2, [r3, #20]
		STOP_MEASURE(DGI_GPIO3);
     9f0:	2002      	movs	r0, #2
     9f2:	4e20      	ldr	r6, [pc, #128]	; (a74 <aes_measurement+0x24c>)
     9f4:	47b0      	blx	r6
		SLEEP
     9f6:	2002      	movs	r0, #2
     9f8:	47b0      	blx	r6
     9fa:	2300      	movs	r3, #0
			input[byte] = 0xfe;
     9fc:	22fe      	movs	r2, #254	; 0xfe
     9fe:	54e2      	strb	r2, [r4, r3]
		for (size_t byte = 0; byte < num_bytes; byte++) {
     a00:	3301      	adds	r3, #1
     a02:	429d      	cmp	r5, r3
     a04:	d8fb      	bhi.n	9fe <aes_measurement+0x1d6>
		START_MEASURE(DGI_GPIO3);
     a06:	2002      	movs	r0, #2
     a08:	4b1a      	ldr	r3, [pc, #104]	; (a74 <aes_measurement+0x24c>)
     a0a:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     a0c:	2280      	movs	r2, #128	; 0x80
     a0e:	0392      	lsls	r2, r2, #14
     a10:	23c0      	movs	r3, #192	; 0xc0
     a12:	05db      	lsls	r3, r3, #23
     a14:	619a      	str	r2, [r3, #24]
		if (_rww_flash_read(&FLASH_0.dev, NVMCTRL_RWW_EEPROM_ADDR, input, num_bytes) != ERR_NONE) {
     a16:	002b      	movs	r3, r5
     a18:	0022      	movs	r2, r4
     a1a:	2180      	movs	r1, #128	; 0x80
     a1c:	03c9      	lsls	r1, r1, #15
     a1e:	481a      	ldr	r0, [pc, #104]	; (a88 <aes_measurement+0x260>)
     a20:	4e1b      	ldr	r6, [pc, #108]	; (a90 <aes_measurement+0x268>)
     a22:	47b0      	blx	r6
     a24:	2800      	cmp	r0, #0
     a26:	d081      	beq.n	92c <aes_measurement+0x104>
     a28:	e7fe      	b.n	a28 <aes_measurement+0x200>
		
	}
	
	
		// Free the memory
		free(input);
     a2a:	0020      	movs	r0, r4
     a2c:	4b1a      	ldr	r3, [pc, #104]	; (a98 <aes_measurement+0x270>)
     a2e:	4798      	blx	r3

		END_MEASUREMENT;
     a30:	200a      	movs	r0, #10
     a32:	4b10      	ldr	r3, [pc, #64]	; (a74 <aes_measurement+0x24c>)
     a34:	4798      	blx	r3
     a36:	23c0      	movs	r3, #192	; 0xc0
     a38:	05db      	lsls	r3, r3, #23
     a3a:	2102      	movs	r1, #2
     a3c:	2298      	movs	r2, #152	; 0x98
     a3e:	5099      	str	r1, [r3, r2]
     a40:	2280      	movs	r2, #128	; 0x80
     a42:	0252      	lsls	r2, r2, #9
     a44:	619a      	str	r2, [r3, #24]
     a46:	2280      	movs	r2, #128	; 0x80
     a48:	0352      	lsls	r2, r2, #13
     a4a:	619a      	str	r2, [r3, #24]
     a4c:	2280      	movs	r2, #128	; 0x80
     a4e:	0392      	lsls	r2, r2, #14
     a50:	619a      	str	r2, [r3, #24]
			
	
}
     a52:	2393      	movs	r3, #147	; 0x93
     a54:	009b      	lsls	r3, r3, #2
     a56:	449d      	add	sp, r3
     a58:	bc3c      	pop	{r2, r3, r4, r5}
     a5a:	4690      	mov	r8, r2
     a5c:	4699      	mov	r9, r3
     a5e:	46a2      	mov	sl, r4
     a60:	46ab      	mov	fp, r5
     a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a64:	e7fe      	b.n	a64 <aes_measurement+0x23c>
     a66:	46c0      	nop			; (mov r8, r8)
     a68:	fffffdb4 	.word	0xfffffdb4
     a6c:	00001770 	.word	0x00001770
     a70:	00001c5d 	.word	0x00001c5d
     a74:	00000325 	.word	0x00000325
     a78:	20000000 	.word	0x20000000
     a7c:	00001e58 	.word	0x00001e58
     a80:	00000ae9 	.word	0x00000ae9
     a84:	00001061 	.word	0x00001061
     a88:	200000b4 	.word	0x200000b4
     a8c:	000005f9 	.word	0x000005f9
     a90:	000005c1 	.word	0x000005c1
     a94:	000016b5 	.word	0x000016b5
     a98:	00001c71 	.word	0x00001c71

00000a9c <main>:

int main(void)
{
     a9c:	b510      	push	{r4, lr}
	atmel_start_init();
     a9e:	4b03      	ldr	r3, [pc, #12]	; (aac <main+0x10>)
     aa0:	4798      	blx	r3

	aes_measurement();
     aa2:	4b03      	ldr	r3, [pc, #12]	; (ab0 <main+0x14>)
     aa4:	4798      	blx	r3
	/*while (true) {
		delay_ms(500);
		gpio_toggle_pin_level(LED0);
	}*/
	
     aa6:	2000      	movs	r0, #0
     aa8:	bd10      	pop	{r4, pc}
     aaa:	46c0      	nop			; (mov r8, r8)
     aac:	00000115 	.word	0x00000115
     ab0:	00000829 	.word	0x00000829

00000ab4 <wc_AesSetIV>:
#endif /* wc_AesSetKey block */


/* wc_AesSetIV is shared between software and hardware */
int wc_AesSetIV(Aes* aes, const byte* iv)
{
     ab4:	b510      	push	{r4, lr}
    if (aes == NULL)
     ab6:	2800      	cmp	r0, #0
     ab8:	d00e      	beq.n	ad8 <wc_AesSetIV+0x24>
        return BAD_FUNC_ARG;

    if (iv)
     aba:	2900      	cmp	r1, #0
     abc:	d005      	beq.n	aca <wc_AesSetIV+0x16>
        XMEMCPY(aes->reg, iv, AES_BLOCK_SIZE);
     abe:	30f8      	adds	r0, #248	; 0xf8
     ac0:	2210      	movs	r2, #16
     ac2:	4b07      	ldr	r3, [pc, #28]	; (ae0 <wc_AesSetIV+0x2c>)
     ac4:	4798      	blx	r3
    else
        XMEMSET(aes->reg,  0, AES_BLOCK_SIZE);

    return 0;
     ac6:	2000      	movs	r0, #0
}
     ac8:	bd10      	pop	{r4, pc}
        XMEMSET(aes->reg,  0, AES_BLOCK_SIZE);
     aca:	30f8      	adds	r0, #248	; 0xf8
     acc:	2210      	movs	r2, #16
     ace:	2100      	movs	r1, #0
     ad0:	4b04      	ldr	r3, [pc, #16]	; (ae4 <wc_AesSetIV+0x30>)
     ad2:	4798      	blx	r3
    return 0;
     ad4:	2000      	movs	r0, #0
     ad6:	e7f7      	b.n	ac8 <wc_AesSetIV+0x14>
        return BAD_FUNC_ARG;
     ad8:	20ad      	movs	r0, #173	; 0xad
     ada:	4240      	negs	r0, r0
     adc:	e7f4      	b.n	ac8 <wc_AesSetIV+0x14>
     ade:	46c0      	nop			; (mov r8, r8)
     ae0:	00001c85 	.word	0x00001c85
     ae4:	00001c97 	.word	0x00001c97

00000ae8 <wc_AesSetKey>:
    {
     ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
     aea:	46de      	mov	lr, fp
     aec:	4657      	mov	r7, sl
     aee:	464e      	mov	r6, r9
     af0:	4645      	mov	r5, r8
     af2:	b5e0      	push	{r5, r6, r7, lr}
     af4:	b085      	sub	sp, #20
     af6:	0007      	movs	r7, r0
     af8:	0014      	movs	r4, r2
     afa:	9301      	str	r3, [sp, #4]
        if (aes == NULL ||
     afc:	2800      	cmp	r0, #0
     afe:	d100      	bne.n	b02 <wc_AesSetKey+0x1a>
     b00:	e2a3      	b.n	104a <wc_AesSetKey+0x562>
     b02:	2308      	movs	r3, #8
     b04:	439a      	bics	r2, r3
     b06:	2a10      	cmp	r2, #16
     b08:	d02c      	beq.n	b64 <wc_AesSetKey+0x7c>
                !((keylen == 16) || (keylen == 24) || (keylen == 32))) {
     b0a:	2c20      	cmp	r4, #32
     b0c:	d000      	beq.n	b10 <wc_AesSetKey+0x28>
     b0e:	e29f      	b.n	1050 <wc_AesSetKey+0x568>
        aes->keylen = keylen;
     b10:	23f4      	movs	r3, #244	; 0xf4
     b12:	50c4      	str	r4, [r0, r3]
        aes->rounds = keylen/4 + 6;
     b14:	08a6      	lsrs	r6, r4, #2
     b16:	1db2      	adds	r2, r6, #6
     b18:	3b04      	subs	r3, #4
     b1a:	50c2      	str	r2, [r0, r3]
        word32 *rk = aes->key;
     b1c:	0005      	movs	r5, r0
        XMEMCPY(rk, userKey, keylen);
     b1e:	0022      	movs	r2, r4
     b20:	4bb7      	ldr	r3, [pc, #732]	; (e00 <wc_AesSetKey+0x318>)
     b22:	4798      	blx	r3
     b24:	002a      	movs	r2, r5
     b26:	00b1      	lsls	r1, r6, #2
     b28:	1869      	adds	r1, r5, r1
    /* 5 instructions with rotate instruction, 9 without */
    return (rotrFixed(value, 8U) & 0xff00ff00) |
           (rotlFixed(value, 8U) & 0x00ff00ff);
#else
    /* 6 instructions with rotate instruction, 8 without */
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
     b2a:	4bb6      	ldr	r3, [pc, #728]	; (e04 <wc_AesSetKey+0x31c>)
     b2c:	469c      	mov	ip, r3
     b2e:	4eb6      	ldr	r6, [pc, #728]	; (e08 <wc_AesSetKey+0x320>)
        return (x << y) | (x >> (sizeof(y) * 8 - y));
     b30:	2010      	movs	r0, #16
     b32:	46a9      	mov	r9, r5
     b34:	46a0      	mov	r8, r4
                                    word32 byteCount)
{
    word32 count = byteCount/(word32)sizeof(word32), i;

    for (i = 0; i < count; i++)
        out[i] = ByteReverseWord32(in[i]);
     b36:	6814      	ldr	r4, [r2, #0]
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
     b38:	0a23      	lsrs	r3, r4, #8
     b3a:	4665      	mov	r5, ip
     b3c:	402b      	ands	r3, r5
     b3e:	0224      	lsls	r4, r4, #8
     b40:	4034      	ands	r4, r6
     b42:	4323      	orrs	r3, r4
        return (x << y) | (x >> (sizeof(y) * 8 - y));
     b44:	41c3      	rors	r3, r0
        out[i] = ByteReverseWord32(in[i]);
     b46:	c208      	stmia	r2!, {r3}
    for (i = 0; i < count; i++)
     b48:	428a      	cmp	r2, r1
     b4a:	d1f4      	bne.n	b36 <wc_AesSetKey+0x4e>
     b4c:	464d      	mov	r5, r9
     b4e:	4644      	mov	r4, r8
        switch (keylen) {
     b50:	2c18      	cmp	r4, #24
     b52:	d060      	beq.n	c16 <wc_AesSetKey+0x12e>
     b54:	2c20      	cmp	r4, #32
     b56:	d100      	bne.n	b5a <wc_AesSetKey+0x72>
     b58:	e0bd      	b.n	cd6 <wc_AesSetKey+0x1ee>
     b5a:	2c10      	cmp	r4, #16
     b5c:	d00f      	beq.n	b7e <wc_AesSetKey+0x96>
            return BAD_FUNC_ARG;
     b5e:	20ad      	movs	r0, #173	; 0xad
     b60:	4240      	negs	r0, r0
     b62:	e140      	b.n	de6 <wc_AesSetKey+0x2fe>
        aes->keylen = keylen;
     b64:	23f4      	movs	r3, #244	; 0xf4
     b66:	50c4      	str	r4, [r0, r3]
        aes->rounds = keylen/4 + 6;
     b68:	08a6      	lsrs	r6, r4, #2
     b6a:	1db2      	adds	r2, r6, #6
     b6c:	3b04      	subs	r3, #4
     b6e:	50c2      	str	r2, [r0, r3]
        word32 *rk = aes->key;
     b70:	0005      	movs	r5, r0
        XMEMCPY(rk, userKey, keylen);
     b72:	0022      	movs	r2, r4
     b74:	4ba2      	ldr	r3, [pc, #648]	; (e00 <wc_AesSetKey+0x318>)
     b76:	4798      	blx	r3
     b78:	2e00      	cmp	r6, #0
     b7a:	d1d3      	bne.n	b24 <wc_AesSetKey+0x3c>
     b7c:	e7e8      	b.n	b50 <wc_AesSetKey+0x68>
     b7e:	4ea3      	ldr	r6, [pc, #652]	; (e0c <wc_AesSetKey+0x324>)
     b80:	2390      	movs	r3, #144	; 0x90
     b82:	4699      	mov	r9, r3
     b84:	44a9      	add	r9, r5
        switch (keylen) {
     b86:	0029      	movs	r1, r5
                    (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
     b88:	0034      	movs	r4, r6
     b8a:	20ff      	movs	r0, #255	; 0xff
     b8c:	23ff      	movs	r3, #255	; 0xff
     b8e:	021b      	lsls	r3, r3, #8
     b90:	4698      	mov	r8, r3
                    (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
     b92:	23ff      	movs	r3, #255	; 0xff
     b94:	041b      	lsls	r3, r3, #16
     b96:	469c      	mov	ip, r3
     b98:	464b      	mov	r3, r9
     b9a:	46a9      	mov	r9, r5
     b9c:	46ba      	mov	sl, r7
     b9e:	9300      	str	r3, [sp, #0]
                temp  = rk[3];
     ba0:	68ca      	ldr	r2, [r1, #12]
                    (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
     ba2:	0003      	movs	r3, r0
     ba4:	4013      	ands	r3, r2
     ba6:	009b      	lsls	r3, r3, #2
     ba8:	18e3      	adds	r3, r4, r3
     baa:	6a9f      	ldr	r7, [r3, #40]	; 0x28
     bac:	4643      	mov	r3, r8
     bae:	401f      	ands	r7, r3
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
     bb0:	ce08      	ldmia	r6!, {r3}
     bb2:	680d      	ldr	r5, [r1, #0]
     bb4:	406b      	eors	r3, r5
     bb6:	407b      	eors	r3, r7
     bb8:	0e17      	lsrs	r7, r2, #24
     bba:	3701      	adds	r7, #1
     bbc:	37ff      	adds	r7, #255	; 0xff
     bbe:	00bf      	lsls	r7, r7, #2
     bc0:	19e7      	adds	r7, r4, r7
     bc2:	6abf      	ldr	r7, [r7, #40]	; 0x28
     bc4:	4007      	ands	r7, r0
     bc6:	407b      	eors	r3, r7
                    (Te[2][GETBYTE(temp, 2)] & 0xff000000) ^
     bc8:	0c17      	lsrs	r7, r2, #16
     bca:	4007      	ands	r7, r0
     bcc:	2580      	movs	r5, #128	; 0x80
     bce:	00ad      	lsls	r5, r5, #2
     bd0:	46ab      	mov	fp, r5
     bd2:	445f      	add	r7, fp
     bd4:	00bf      	lsls	r7, r7, #2
     bd6:	19e7      	adds	r7, r4, r7
     bd8:	6abf      	ldr	r7, [r7, #40]	; 0x28
     bda:	0e3f      	lsrs	r7, r7, #24
     bdc:	063f      	lsls	r7, r7, #24
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
     bde:	407b      	eors	r3, r7
                    (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
     be0:	0a17      	lsrs	r7, r2, #8
     be2:	4007      	ands	r7, r0
     be4:	3501      	adds	r5, #1
     be6:	35ff      	adds	r5, #255	; 0xff
     be8:	46ab      	mov	fp, r5
     bea:	445f      	add	r7, fp
     bec:	00bf      	lsls	r7, r7, #2
     bee:	19e7      	adds	r7, r4, r7
     bf0:	6abf      	ldr	r7, [r7, #40]	; 0x28
     bf2:	4665      	mov	r5, ip
     bf4:	402f      	ands	r7, r5
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
     bf6:	407b      	eors	r3, r7
                rk[4] = rk[0] ^
     bf8:	610b      	str	r3, [r1, #16]
                rk[5] = rk[1] ^ rk[4];
     bfa:	684d      	ldr	r5, [r1, #4]
     bfc:	406b      	eors	r3, r5
     bfe:	614b      	str	r3, [r1, #20]
                rk[6] = rk[2] ^ rk[5];
     c00:	688d      	ldr	r5, [r1, #8]
     c02:	406b      	eors	r3, r5
     c04:	618b      	str	r3, [r1, #24]
                rk[7] = rk[3] ^ rk[6];
     c06:	4053      	eors	r3, r2
     c08:	61cb      	str	r3, [r1, #28]
                if (++i == 10)
     c0a:	9b00      	ldr	r3, [sp, #0]
     c0c:	4299      	cmp	r1, r3
     c0e:	d100      	bne.n	c12 <wc_AesSetKey+0x12a>
     c10:	e0e0      	b.n	dd4 <wc_AesSetKey+0x2ec>
                rk += 4;
     c12:	3110      	adds	r1, #16
     c14:	e7c4      	b.n	ba0 <wc_AesSetKey+0xb8>
     c16:	4e7d      	ldr	r6, [pc, #500]	; (e0c <wc_AesSetKey+0x324>)
     c18:	23a8      	movs	r3, #168	; 0xa8
     c1a:	4699      	mov	r9, r3
     c1c:	44a9      	add	r9, r5
        switch (keylen) {
     c1e:	0029      	movs	r1, r5
                    (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
     c20:	0034      	movs	r4, r6
     c22:	20ff      	movs	r0, #255	; 0xff
     c24:	23ff      	movs	r3, #255	; 0xff
     c26:	021b      	lsls	r3, r3, #8
     c28:	4698      	mov	r8, r3
                    (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
     c2a:	23ff      	movs	r3, #255	; 0xff
     c2c:	041b      	lsls	r3, r3, #16
     c2e:	469c      	mov	ip, r3
     c30:	464b      	mov	r3, r9
     c32:	9502      	str	r5, [sp, #8]
     c34:	46bb      	mov	fp, r7
     c36:	9300      	str	r3, [sp, #0]
                temp = rk[ 5];
     c38:	694a      	ldr	r2, [r1, #20]
                    (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
     c3a:	0003      	movs	r3, r0
     c3c:	4013      	ands	r3, r2
     c3e:	009b      	lsls	r3, r3, #2
     c40:	18e3      	adds	r3, r4, r3
     c42:	6a9f      	ldr	r7, [r3, #40]	; 0x28
     c44:	4643      	mov	r3, r8
     c46:	401f      	ands	r7, r3
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
     c48:	ce08      	ldmia	r6!, {r3}
     c4a:	680d      	ldr	r5, [r1, #0]
     c4c:	406b      	eors	r3, r5
     c4e:	407b      	eors	r3, r7
     c50:	0e17      	lsrs	r7, r2, #24
     c52:	1c7d      	adds	r5, r7, #1
     c54:	35ff      	adds	r5, #255	; 0xff
     c56:	00ad      	lsls	r5, r5, #2
     c58:	46aa      	mov	sl, r5
     c5a:	44a2      	add	sl, r4
     c5c:	4655      	mov	r5, sl
     c5e:	6aad      	ldr	r5, [r5, #40]	; 0x28
     c60:	002f      	movs	r7, r5
     c62:	4007      	ands	r7, r0
     c64:	407b      	eors	r3, r7
                    (Te[2][GETBYTE(temp, 2)] & 0xff000000) ^
     c66:	0c15      	lsrs	r5, r2, #16
     c68:	002f      	movs	r7, r5
     c6a:	4007      	ands	r7, r0
     c6c:	46ba      	mov	sl, r7
     c6e:	2580      	movs	r5, #128	; 0x80
     c70:	00ad      	lsls	r5, r5, #2
     c72:	46a9      	mov	r9, r5
     c74:	44ca      	add	sl, r9
     c76:	4655      	mov	r5, sl
     c78:	00ad      	lsls	r5, r5, #2
     c7a:	46aa      	mov	sl, r5
     c7c:	44a2      	add	sl, r4
     c7e:	4655      	mov	r5, sl
     c80:	6aad      	ldr	r5, [r5, #40]	; 0x28
     c82:	0e2d      	lsrs	r5, r5, #24
     c84:	062d      	lsls	r5, r5, #24
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
     c86:	406b      	eors	r3, r5
                    (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
     c88:	0a15      	lsrs	r5, r2, #8
     c8a:	002f      	movs	r7, r5
     c8c:	4007      	ands	r7, r0
     c8e:	46ba      	mov	sl, r7
     c90:	25c0      	movs	r5, #192	; 0xc0
     c92:	00ad      	lsls	r5, r5, #2
     c94:	46a9      	mov	r9, r5
     c96:	44ca      	add	sl, r9
     c98:	4655      	mov	r5, sl
     c9a:	00ad      	lsls	r5, r5, #2
     c9c:	46aa      	mov	sl, r5
     c9e:	44a2      	add	sl, r4
     ca0:	4655      	mov	r5, sl
     ca2:	6aad      	ldr	r5, [r5, #40]	; 0x28
     ca4:	002f      	movs	r7, r5
     ca6:	4665      	mov	r5, ip
     ca8:	402f      	ands	r7, r5
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
     caa:	407b      	eors	r3, r7
                rk[ 6] = rk[ 0] ^
     cac:	618b      	str	r3, [r1, #24]
                rk[ 7] = rk[ 1] ^ rk[ 6];
     cae:	684d      	ldr	r5, [r1, #4]
     cb0:	406b      	eors	r3, r5
     cb2:	61cb      	str	r3, [r1, #28]
                rk[ 8] = rk[ 2] ^ rk[ 7];
     cb4:	688d      	ldr	r5, [r1, #8]
     cb6:	406b      	eors	r3, r5
     cb8:	620b      	str	r3, [r1, #32]
                rk[ 9] = rk[ 3] ^ rk[ 8];
     cba:	68cd      	ldr	r5, [r1, #12]
     cbc:	406b      	eors	r3, r5
     cbe:	624b      	str	r3, [r1, #36]	; 0x24
                if (++i == 8)
     cc0:	9d00      	ldr	r5, [sp, #0]
     cc2:	42a9      	cmp	r1, r5
     cc4:	d100      	bne.n	cc8 <wc_AesSetKey+0x1e0>
     cc6:	e095      	b.n	df4 <wc_AesSetKey+0x30c>
                rk[10] = rk[ 4] ^ rk[ 9];
     cc8:	690d      	ldr	r5, [r1, #16]
     cca:	406b      	eors	r3, r5
     ccc:	628b      	str	r3, [r1, #40]	; 0x28
                rk[11] = rk[ 5] ^ rk[10];
     cce:	4053      	eors	r3, r2
     cd0:	62cb      	str	r3, [r1, #44]	; 0x2c
                rk += 6;
     cd2:	3118      	adds	r1, #24
     cd4:	e7b0      	b.n	c38 <wc_AesSetKey+0x150>
     cd6:	4b4d      	ldr	r3, [pc, #308]	; (e0c <wc_AesSetKey+0x324>)
     cd8:	4699      	mov	r9, r3
     cda:	23c0      	movs	r3, #192	; 0xc0
     cdc:	469c      	mov	ip, r3
     cde:	44ac      	add	ip, r5
     ce0:	4663      	mov	r3, ip
        switch (keylen) {
     ce2:	002c      	movs	r4, r5
                    (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
     ce4:	46cc      	mov	ip, r9
     ce6:	26ff      	movs	r6, #255	; 0xff
     ce8:	22ff      	movs	r2, #255	; 0xff
     cea:	0212      	lsls	r2, r2, #8
     cec:	4693      	mov	fp, r2
                    (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
     cee:	22ff      	movs	r2, #255	; 0xff
     cf0:	0412      	lsls	r2, r2, #16
     cf2:	4692      	mov	sl, r2
                    (Te[3][GETBYTE(temp, 2)] & 0x00ff0000) ^
     cf4:	464a      	mov	r2, r9
     cf6:	46c8      	mov	r8, r9
     cf8:	9502      	str	r5, [sp, #8]
     cfa:	9703      	str	r7, [sp, #12]
     cfc:	001f      	movs	r7, r3
     cfe:	9200      	str	r2, [sp, #0]
                temp = rk[ 7];
     d00:	69e1      	ldr	r1, [r4, #28]
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
     d02:	9a00      	ldr	r2, [sp, #0]
     d04:	ca08      	ldmia	r2!, {r3}
     d06:	9200      	str	r2, [sp, #0]
     d08:	6822      	ldr	r2, [r4, #0]
     d0a:	4053      	eors	r3, r2
                    (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
     d0c:	0032      	movs	r2, r6
     d0e:	400a      	ands	r2, r1
     d10:	0092      	lsls	r2, r2, #2
     d12:	4462      	add	r2, ip
     d14:	6a92      	ldr	r2, [r2, #40]	; 0x28
     d16:	4658      	mov	r0, fp
     d18:	4002      	ands	r2, r0
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
     d1a:	4053      	eors	r3, r2
     d1c:	0e0a      	lsrs	r2, r1, #24
     d1e:	3201      	adds	r2, #1
     d20:	32ff      	adds	r2, #255	; 0xff
     d22:	0092      	lsls	r2, r2, #2
     d24:	4462      	add	r2, ip
     d26:	6a92      	ldr	r2, [r2, #40]	; 0x28
     d28:	4032      	ands	r2, r6
     d2a:	4053      	eors	r3, r2
                    (Te[2][GETBYTE(temp, 2)] & 0xff000000) ^
     d2c:	0c0a      	lsrs	r2, r1, #16
     d2e:	4032      	ands	r2, r6
     d30:	2080      	movs	r0, #128	; 0x80
     d32:	0080      	lsls	r0, r0, #2
     d34:	4681      	mov	r9, r0
     d36:	444a      	add	r2, r9
     d38:	0092      	lsls	r2, r2, #2
     d3a:	4462      	add	r2, ip
     d3c:	6a92      	ldr	r2, [r2, #40]	; 0x28
     d3e:	0e12      	lsrs	r2, r2, #24
     d40:	0612      	lsls	r2, r2, #24
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
     d42:	4053      	eors	r3, r2
                    (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
     d44:	0a0a      	lsrs	r2, r1, #8
     d46:	4032      	ands	r2, r6
     d48:	3001      	adds	r0, #1
     d4a:	30ff      	adds	r0, #255	; 0xff
     d4c:	4681      	mov	r9, r0
     d4e:	444a      	add	r2, r9
     d50:	0092      	lsls	r2, r2, #2
     d52:	4462      	add	r2, ip
     d54:	6a92      	ldr	r2, [r2, #40]	; 0x28
     d56:	4650      	mov	r0, sl
     d58:	4002      	ands	r2, r0
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
     d5a:	4053      	eors	r3, r2
                rk[ 8] = rk[ 0] ^
     d5c:	6223      	str	r3, [r4, #32]
                rk[ 9] = rk[ 1] ^ rk[ 8];
     d5e:	6862      	ldr	r2, [r4, #4]
     d60:	4053      	eors	r3, r2
     d62:	6263      	str	r3, [r4, #36]	; 0x24
                rk[10] = rk[ 2] ^ rk[ 9];
     d64:	68a2      	ldr	r2, [r4, #8]
     d66:	4053      	eors	r3, r2
     d68:	62a3      	str	r3, [r4, #40]	; 0x28
                rk[11] = rk[ 3] ^ rk[10];
     d6a:	68e2      	ldr	r2, [r4, #12]
     d6c:	4053      	eors	r3, r2
     d6e:	62e3      	str	r3, [r4, #44]	; 0x2c
                if (++i == 7)
     d70:	42bc      	cmp	r4, r7
     d72:	d042      	beq.n	dfa <wc_AesSetKey+0x312>
                    (Te[3][GETBYTE(temp, 2)] & 0x00ff0000) ^
     d74:	0c1a      	lsrs	r2, r3, #16
     d76:	4032      	ands	r2, r6
     d78:	444a      	add	r2, r9
     d7a:	0092      	lsls	r2, r2, #2
     d7c:	4442      	add	r2, r8
     d7e:	6a92      	ldr	r2, [r2, #40]	; 0x28
     d80:	4650      	mov	r0, sl
     d82:	4002      	ands	r2, r0
                    (Te[0][GETBYTE(temp, 1)] & 0x0000ff00) ^
     d84:	0a18      	lsrs	r0, r3, #8
     d86:	4030      	ands	r0, r6
     d88:	0080      	lsls	r0, r0, #2
     d8a:	4440      	add	r0, r8
     d8c:	6a80      	ldr	r0, [r0, #40]	; 0x28
     d8e:	465d      	mov	r5, fp
     d90:	4028      	ands	r0, r5
     d92:	4302      	orrs	r2, r0
     d94:	6920      	ldr	r0, [r4, #16]
     d96:	4042      	eors	r2, r0
                    (Te[2][GETBYTE(temp, 3)] & 0xff000000) ^
     d98:	0e18      	lsrs	r0, r3, #24
     d9a:	2580      	movs	r5, #128	; 0x80
     d9c:	00ad      	lsls	r5, r5, #2
     d9e:	46a9      	mov	r9, r5
     da0:	4448      	add	r0, r9
     da2:	0080      	lsls	r0, r0, #2
     da4:	4440      	add	r0, r8
     da6:	6a80      	ldr	r0, [r0, #40]	; 0x28
     da8:	0e00      	lsrs	r0, r0, #24
     daa:	0600      	lsls	r0, r0, #24
                    (Te[1][GETBYTE(temp, 0)] & 0x000000ff);
     dac:	4033      	ands	r3, r6
     dae:	3301      	adds	r3, #1
     db0:	33ff      	adds	r3, #255	; 0xff
     db2:	009b      	lsls	r3, r3, #2
     db4:	4443      	add	r3, r8
     db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     db8:	4033      	ands	r3, r6
                    (Te[0][GETBYTE(temp, 1)] & 0x0000ff00) ^
     dba:	4318      	orrs	r0, r3
     dbc:	4042      	eors	r2, r0
                rk[12] = rk[ 4] ^
     dbe:	6322      	str	r2, [r4, #48]	; 0x30
                rk[13] = rk[ 5] ^ rk[12];
     dc0:	6963      	ldr	r3, [r4, #20]
     dc2:	405a      	eors	r2, r3
     dc4:	6362      	str	r2, [r4, #52]	; 0x34
                rk[14] = rk[ 6] ^ rk[13];
     dc6:	69a3      	ldr	r3, [r4, #24]
     dc8:	405a      	eors	r2, r3
     dca:	63a2      	str	r2, [r4, #56]	; 0x38
                rk[15] = rk[ 7] ^ rk[14];
     dcc:	4051      	eors	r1, r2
     dce:	63e1      	str	r1, [r4, #60]	; 0x3c
                rk += 8;
     dd0:	3420      	adds	r4, #32
     dd2:	e795      	b.n	d00 <wc_AesSetKey+0x218>
     dd4:	464d      	mov	r5, r9
     dd6:	4657      	mov	r7, sl
        if (dir == AES_DECRYPTION) {
     dd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
     dda:	2b01      	cmp	r3, #1
     ddc:	d01a      	beq.n	e14 <wc_AesSetKey+0x32c>
        return wc_AesSetIV(aes, iv);
     dde:	9901      	ldr	r1, [sp, #4]
     de0:	0038      	movs	r0, r7
     de2:	4b0b      	ldr	r3, [pc, #44]	; (e10 <wc_AesSetKey+0x328>)
     de4:	4798      	blx	r3
    }
     de6:	b005      	add	sp, #20
     de8:	bc3c      	pop	{r2, r3, r4, r5}
     dea:	4690      	mov	r8, r2
     dec:	4699      	mov	r9, r3
     dee:	46a2      	mov	sl, r4
     df0:	46ab      	mov	fp, r5
     df2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     df4:	9d02      	ldr	r5, [sp, #8]
     df6:	465f      	mov	r7, fp
     df8:	e7ee      	b.n	dd8 <wc_AesSetKey+0x2f0>
     dfa:	9d02      	ldr	r5, [sp, #8]
     dfc:	9f03      	ldr	r7, [sp, #12]
     dfe:	e7eb      	b.n	dd8 <wc_AesSetKey+0x2f0>
     e00:	00001c85 	.word	0x00001c85
     e04:	00ff00ff 	.word	0x00ff00ff
     e08:	ff00ff00 	.word	0xff00ff00
     e0c:	00001e78 	.word	0x00001e78
     e10:	00000ab5 	.word	0x00000ab5
            for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
     e14:	33ef      	adds	r3, #239	; 0xef
     e16:	58fc      	ldr	r4, [r7, r3]
     e18:	00a4      	lsls	r4, r4, #2
     e1a:	d019      	beq.n	e50 <wc_AesSetKey+0x368>
     e1c:	002a      	movs	r2, r5
     e1e:	00a3      	lsls	r3, r4, #2
     e20:	18eb      	adds	r3, r5, r3
     e22:	2100      	movs	r1, #0
                temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
     e24:	6810      	ldr	r0, [r2, #0]
     e26:	681e      	ldr	r6, [r3, #0]
     e28:	6016      	str	r6, [r2, #0]
     e2a:	6018      	str	r0, [r3, #0]
                temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
     e2c:	6850      	ldr	r0, [r2, #4]
     e2e:	685e      	ldr	r6, [r3, #4]
     e30:	6056      	str	r6, [r2, #4]
     e32:	6058      	str	r0, [r3, #4]
                temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
     e34:	6890      	ldr	r0, [r2, #8]
     e36:	689e      	ldr	r6, [r3, #8]
     e38:	6096      	str	r6, [r2, #8]
     e3a:	6098      	str	r0, [r3, #8]
                temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
     e3c:	68d0      	ldr	r0, [r2, #12]
     e3e:	68de      	ldr	r6, [r3, #12]
     e40:	60d6      	str	r6, [r2, #12]
     e42:	60d8      	str	r0, [r3, #12]
            for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
     e44:	3104      	adds	r1, #4
     e46:	3210      	adds	r2, #16
     e48:	3b10      	subs	r3, #16
     e4a:	1a60      	subs	r0, r4, r1
     e4c:	4281      	cmp	r1, r0
     e4e:	d3e9      	bcc.n	e24 <wc_AesSetKey+0x33c>
            for (i = 1; i < aes->rounds; i++) {
     e50:	23f0      	movs	r3, #240	; 0xf0
     e52:	58fb      	ldr	r3, [r7, r3]
     e54:	2b01      	cmp	r3, #1
     e56:	d9c2      	bls.n	dde <wc_AesSetKey+0x2f6>
     e58:	2401      	movs	r4, #1
                    Td[0][Te[1][GETBYTE(rk[0], 3)] & 0xff] ^
     e5a:	497f      	ldr	r1, [pc, #508]	; (1058 <wc_AesSetKey+0x570>)
     e5c:	4a7f      	ldr	r2, [pc, #508]	; (105c <wc_AesSetKey+0x574>)
     e5e:	23ff      	movs	r3, #255	; 0xff
            for (i = 1; i < aes->rounds; i++) {
     e60:	20f0      	movs	r0, #240	; 0xf0
     e62:	4682      	mov	sl, r0
     e64:	46bc      	mov	ip, r7
     e66:	0027      	movs	r7, r4
                rk += 4;
     e68:	3510      	adds	r5, #16
                    Td[0][Te[1][GETBYTE(rk[0], 3)] & 0xff] ^
     e6a:	6828      	ldr	r0, [r5, #0]
     e6c:	0e04      	lsrs	r4, r0, #24
     e6e:	3401      	adds	r4, #1
     e70:	34ff      	adds	r4, #255	; 0xff
     e72:	00a4      	lsls	r4, r4, #2
     e74:	1914      	adds	r4, r2, r4
     e76:	6aa4      	ldr	r4, [r4, #40]	; 0x28
     e78:	401c      	ands	r4, r3
     e7a:	00a4      	lsls	r4, r4, #2
     e7c:	46a0      	mov	r8, r4
     e7e:	4488      	add	r8, r1
                    Td[3][Te[1][GETBYTE(rk[0], 0)] & 0xff];
     e80:	001c      	movs	r4, r3
     e82:	4004      	ands	r4, r0
     e84:	3401      	adds	r4, #1
     e86:	34ff      	adds	r4, #255	; 0xff
     e88:	00a4      	lsls	r4, r4, #2
     e8a:	1914      	adds	r4, r2, r4
     e8c:	6aa4      	ldr	r4, [r4, #40]	; 0x28
     e8e:	401c      	ands	r4, r3
     e90:	26c0      	movs	r6, #192	; 0xc0
     e92:	00b6      	lsls	r6, r6, #2
     e94:	46b1      	mov	r9, r6
     e96:	444c      	add	r4, r9
     e98:	00a4      	lsls	r4, r4, #2
     e9a:	190c      	adds	r4, r1, r4
                    Td[2][Te[1][GETBYTE(rk[0], 1)] & 0xff] ^
     e9c:	4646      	mov	r6, r8
     e9e:	6ab6      	ldr	r6, [r6, #40]	; 0x28
     ea0:	6aa4      	ldr	r4, [r4, #40]	; 0x28
     ea2:	4066      	eors	r6, r4
                    Td[1][Te[1][GETBYTE(rk[0], 2)] & 0xff] ^
     ea4:	0c04      	lsrs	r4, r0, #16
     ea6:	401c      	ands	r4, r3
     ea8:	3401      	adds	r4, #1
     eaa:	34ff      	adds	r4, #255	; 0xff
     eac:	00a4      	lsls	r4, r4, #2
     eae:	1914      	adds	r4, r2, r4
     eb0:	6aa4      	ldr	r4, [r4, #40]	; 0x28
     eb2:	401c      	ands	r4, r3
     eb4:	3401      	adds	r4, #1
     eb6:	34ff      	adds	r4, #255	; 0xff
     eb8:	00a4      	lsls	r4, r4, #2
     eba:	190c      	adds	r4, r1, r4
                    Td[2][Te[1][GETBYTE(rk[0], 1)] & 0xff] ^
     ebc:	6aa4      	ldr	r4, [r4, #40]	; 0x28
     ebe:	4074      	eors	r4, r6
     ec0:	0a00      	lsrs	r0, r0, #8
     ec2:	4018      	ands	r0, r3
     ec4:	3001      	adds	r0, #1
     ec6:	30ff      	adds	r0, #255	; 0xff
     ec8:	0080      	lsls	r0, r0, #2
     eca:	1810      	adds	r0, r2, r0
     ecc:	6a80      	ldr	r0, [r0, #40]	; 0x28
     ece:	4018      	ands	r0, r3
     ed0:	2680      	movs	r6, #128	; 0x80
     ed2:	00b6      	lsls	r6, r6, #2
     ed4:	46b0      	mov	r8, r6
     ed6:	4440      	add	r0, r8
     ed8:	0080      	lsls	r0, r0, #2
     eda:	1808      	adds	r0, r1, r0
     edc:	6a80      	ldr	r0, [r0, #40]	; 0x28
     ede:	4044      	eors	r4, r0
                rk[0] =
     ee0:	602c      	str	r4, [r5, #0]
                    Td[0][Te[1][GETBYTE(rk[1], 3)] & 0xff] ^
     ee2:	6868      	ldr	r0, [r5, #4]
     ee4:	0e04      	lsrs	r4, r0, #24
     ee6:	3401      	adds	r4, #1
     ee8:	34ff      	adds	r4, #255	; 0xff
     eea:	00a4      	lsls	r4, r4, #2
     eec:	1914      	adds	r4, r2, r4
     eee:	6aa4      	ldr	r4, [r4, #40]	; 0x28
     ef0:	401c      	ands	r4, r3
     ef2:	00a4      	lsls	r4, r4, #2
     ef4:	46a0      	mov	r8, r4
     ef6:	4488      	add	r8, r1
                    Td[3][Te[1][GETBYTE(rk[1], 0)] & 0xff];
     ef8:	001c      	movs	r4, r3
     efa:	4004      	ands	r4, r0
     efc:	3401      	adds	r4, #1
     efe:	34ff      	adds	r4, #255	; 0xff
     f00:	00a4      	lsls	r4, r4, #2
     f02:	1914      	adds	r4, r2, r4
     f04:	6aa4      	ldr	r4, [r4, #40]	; 0x28
     f06:	401c      	ands	r4, r3
     f08:	444c      	add	r4, r9
     f0a:	00a4      	lsls	r4, r4, #2
     f0c:	190c      	adds	r4, r1, r4
                    Td[2][Te[1][GETBYTE(rk[1], 1)] & 0xff] ^
     f0e:	4646      	mov	r6, r8
     f10:	6ab6      	ldr	r6, [r6, #40]	; 0x28
     f12:	6aa4      	ldr	r4, [r4, #40]	; 0x28
     f14:	4066      	eors	r6, r4
                    Td[1][Te[1][GETBYTE(rk[1], 2)] & 0xff] ^
     f16:	0c04      	lsrs	r4, r0, #16
     f18:	401c      	ands	r4, r3
     f1a:	3401      	adds	r4, #1
     f1c:	34ff      	adds	r4, #255	; 0xff
     f1e:	00a4      	lsls	r4, r4, #2
     f20:	1914      	adds	r4, r2, r4
     f22:	6aa4      	ldr	r4, [r4, #40]	; 0x28
     f24:	401c      	ands	r4, r3
     f26:	3401      	adds	r4, #1
     f28:	34ff      	adds	r4, #255	; 0xff
     f2a:	00a4      	lsls	r4, r4, #2
     f2c:	190c      	adds	r4, r1, r4
                    Td[2][Te[1][GETBYTE(rk[1], 1)] & 0xff] ^
     f2e:	6aa4      	ldr	r4, [r4, #40]	; 0x28
     f30:	4074      	eors	r4, r6
     f32:	0a00      	lsrs	r0, r0, #8
     f34:	4018      	ands	r0, r3
     f36:	3001      	adds	r0, #1
     f38:	30ff      	adds	r0, #255	; 0xff
     f3a:	0080      	lsls	r0, r0, #2
     f3c:	1810      	adds	r0, r2, r0
     f3e:	6a80      	ldr	r0, [r0, #40]	; 0x28
     f40:	4018      	ands	r0, r3
     f42:	2680      	movs	r6, #128	; 0x80
     f44:	00b6      	lsls	r6, r6, #2
     f46:	46b0      	mov	r8, r6
     f48:	4440      	add	r0, r8
     f4a:	0080      	lsls	r0, r0, #2
     f4c:	1808      	adds	r0, r1, r0
     f4e:	6a80      	ldr	r0, [r0, #40]	; 0x28
     f50:	4044      	eors	r4, r0
                rk[1] =
     f52:	606c      	str	r4, [r5, #4]
                    Td[0][Te[1][GETBYTE(rk[2], 3)] & 0xff] ^
     f54:	68a8      	ldr	r0, [r5, #8]
     f56:	0e04      	lsrs	r4, r0, #24
     f58:	3401      	adds	r4, #1
     f5a:	34ff      	adds	r4, #255	; 0xff
     f5c:	00a4      	lsls	r4, r4, #2
     f5e:	1914      	adds	r4, r2, r4
     f60:	6aa4      	ldr	r4, [r4, #40]	; 0x28
     f62:	401c      	ands	r4, r3
     f64:	00a4      	lsls	r4, r4, #2
     f66:	46a0      	mov	r8, r4
     f68:	4488      	add	r8, r1
                    Td[3][Te[1][GETBYTE(rk[2], 0)] & 0xff];
     f6a:	001c      	movs	r4, r3
     f6c:	4004      	ands	r4, r0
     f6e:	3401      	adds	r4, #1
     f70:	34ff      	adds	r4, #255	; 0xff
     f72:	00a4      	lsls	r4, r4, #2
     f74:	1914      	adds	r4, r2, r4
     f76:	6aa4      	ldr	r4, [r4, #40]	; 0x28
     f78:	401c      	ands	r4, r3
     f7a:	444c      	add	r4, r9
     f7c:	00a4      	lsls	r4, r4, #2
     f7e:	190c      	adds	r4, r1, r4
                    Td[2][Te[1][GETBYTE(rk[2], 1)] & 0xff] ^
     f80:	4646      	mov	r6, r8
     f82:	6ab6      	ldr	r6, [r6, #40]	; 0x28
     f84:	6aa4      	ldr	r4, [r4, #40]	; 0x28
     f86:	4066      	eors	r6, r4
                    Td[1][Te[1][GETBYTE(rk[2], 2)] & 0xff] ^
     f88:	0c04      	lsrs	r4, r0, #16
     f8a:	401c      	ands	r4, r3
     f8c:	3401      	adds	r4, #1
     f8e:	34ff      	adds	r4, #255	; 0xff
     f90:	00a4      	lsls	r4, r4, #2
     f92:	1914      	adds	r4, r2, r4
     f94:	6aa4      	ldr	r4, [r4, #40]	; 0x28
     f96:	401c      	ands	r4, r3
     f98:	3401      	adds	r4, #1
     f9a:	34ff      	adds	r4, #255	; 0xff
     f9c:	00a4      	lsls	r4, r4, #2
     f9e:	190c      	adds	r4, r1, r4
                    Td[2][Te[1][GETBYTE(rk[2], 1)] & 0xff] ^
     fa0:	6aa4      	ldr	r4, [r4, #40]	; 0x28
     fa2:	4074      	eors	r4, r6
     fa4:	0a00      	lsrs	r0, r0, #8
     fa6:	4018      	ands	r0, r3
     fa8:	3001      	adds	r0, #1
     faa:	30ff      	adds	r0, #255	; 0xff
     fac:	0080      	lsls	r0, r0, #2
     fae:	1810      	adds	r0, r2, r0
     fb0:	6a80      	ldr	r0, [r0, #40]	; 0x28
     fb2:	4018      	ands	r0, r3
     fb4:	2680      	movs	r6, #128	; 0x80
     fb6:	00b6      	lsls	r6, r6, #2
     fb8:	46b0      	mov	r8, r6
     fba:	4440      	add	r0, r8
     fbc:	0080      	lsls	r0, r0, #2
     fbe:	1808      	adds	r0, r1, r0
     fc0:	6a80      	ldr	r0, [r0, #40]	; 0x28
     fc2:	4044      	eors	r4, r0
                rk[2] =
     fc4:	60ac      	str	r4, [r5, #8]
                    Td[0][Te[1][GETBYTE(rk[3], 3)] & 0xff] ^
     fc6:	68e8      	ldr	r0, [r5, #12]
     fc8:	0e04      	lsrs	r4, r0, #24
     fca:	3401      	adds	r4, #1
     fcc:	34ff      	adds	r4, #255	; 0xff
     fce:	00a4      	lsls	r4, r4, #2
     fd0:	1914      	adds	r4, r2, r4
     fd2:	6aa4      	ldr	r4, [r4, #40]	; 0x28
     fd4:	401c      	ands	r4, r3
     fd6:	00a4      	lsls	r4, r4, #2
     fd8:	46a0      	mov	r8, r4
     fda:	4488      	add	r8, r1
                    Td[3][Te[1][GETBYTE(rk[3], 0)] & 0xff];
     fdc:	001c      	movs	r4, r3
     fde:	4004      	ands	r4, r0
     fe0:	3401      	adds	r4, #1
     fe2:	34ff      	adds	r4, #255	; 0xff
     fe4:	00a4      	lsls	r4, r4, #2
     fe6:	1914      	adds	r4, r2, r4
     fe8:	6aa4      	ldr	r4, [r4, #40]	; 0x28
     fea:	401c      	ands	r4, r3
     fec:	444c      	add	r4, r9
     fee:	00a4      	lsls	r4, r4, #2
     ff0:	190c      	adds	r4, r1, r4
                    Td[2][Te[1][GETBYTE(rk[3], 1)] & 0xff] ^
     ff2:	4646      	mov	r6, r8
     ff4:	6ab6      	ldr	r6, [r6, #40]	; 0x28
     ff6:	6aa4      	ldr	r4, [r4, #40]	; 0x28
     ff8:	4066      	eors	r6, r4
                    Td[1][Te[1][GETBYTE(rk[3], 2)] & 0xff] ^
     ffa:	0c04      	lsrs	r4, r0, #16
     ffc:	401c      	ands	r4, r3
     ffe:	3401      	adds	r4, #1
    1000:	34ff      	adds	r4, #255	; 0xff
    1002:	00a4      	lsls	r4, r4, #2
    1004:	1914      	adds	r4, r2, r4
    1006:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    1008:	401c      	ands	r4, r3
    100a:	3401      	adds	r4, #1
    100c:	34ff      	adds	r4, #255	; 0xff
    100e:	00a4      	lsls	r4, r4, #2
    1010:	190c      	adds	r4, r1, r4
                    Td[2][Te[1][GETBYTE(rk[3], 1)] & 0xff] ^
    1012:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    1014:	4074      	eors	r4, r6
    1016:	0a00      	lsrs	r0, r0, #8
    1018:	4018      	ands	r0, r3
    101a:	3001      	adds	r0, #1
    101c:	30ff      	adds	r0, #255	; 0xff
    101e:	0080      	lsls	r0, r0, #2
    1020:	1810      	adds	r0, r2, r0
    1022:	6a80      	ldr	r0, [r0, #40]	; 0x28
    1024:	4018      	ands	r0, r3
    1026:	2680      	movs	r6, #128	; 0x80
    1028:	00b6      	lsls	r6, r6, #2
    102a:	46b0      	mov	r8, r6
    102c:	4440      	add	r0, r8
    102e:	0080      	lsls	r0, r0, #2
    1030:	1808      	adds	r0, r1, r0
    1032:	6a80      	ldr	r0, [r0, #40]	; 0x28
    1034:	4044      	eors	r4, r0
                rk[3] =
    1036:	60ec      	str	r4, [r5, #12]
            for (i = 1; i < aes->rounds; i++) {
    1038:	3701      	adds	r7, #1
    103a:	4660      	mov	r0, ip
    103c:	4654      	mov	r4, sl
    103e:	5900      	ldr	r0, [r0, r4]
    1040:	4287      	cmp	r7, r0
    1042:	d200      	bcs.n	1046 <wc_AesSetKey+0x55e>
    1044:	e710      	b.n	e68 <wc_AesSetKey+0x380>
    1046:	4667      	mov	r7, ip
    1048:	e6c9      	b.n	dde <wc_AesSetKey+0x2f6>
            return BAD_FUNC_ARG;
    104a:	20ad      	movs	r0, #173	; 0xad
    104c:	4240      	negs	r0, r0
    104e:	e6ca      	b.n	de6 <wc_AesSetKey+0x2fe>
    1050:	20ad      	movs	r0, #173	; 0xad
    1052:	4240      	negs	r0, r0
    1054:	e6c7      	b.n	de6 <wc_AesSetKey+0x2fe>
    1056:	46c0      	nop			; (mov r8, r8)
    1058:	00002e78 	.word	0x00002e78
    105c:	00001e78 	.word	0x00001e78

00001060 <wc_AesCbcEncrypt>:

#else

    /* Software AES - CBC Encrypt */
    int wc_AesCbcEncrypt(Aes* aes, byte* out, const byte* in, word32 sz)
    {
    1060:	b5f0      	push	{r4, r5, r6, r7, lr}
    1062:	46de      	mov	lr, fp
    1064:	4657      	mov	r7, sl
    1066:	464e      	mov	r6, r9
    1068:	4645      	mov	r5, r8
    106a:	b5e0      	push	{r5, r6, r7, lr}
    106c:	b093      	sub	sp, #76	; 0x4c
    106e:	9001      	str	r0, [sp, #4]
    1070:	9106      	str	r1, [sp, #24]
    1072:	9202      	str	r2, [sp, #8]
        word32 blocks = (sz / AES_BLOCK_SIZE);
    1074:	091b      	lsrs	r3, r3, #4

        if (aes == NULL || out == NULL || in == NULL) {
    1076:	2800      	cmp	r0, #0
    1078:	d100      	bne.n	107c <wc_AesCbcEncrypt+0x1c>
    107a:	e307      	b.n	168c <wc_AesCbcEncrypt+0x62c>
    107c:	2900      	cmp	r1, #0
    107e:	d100      	bne.n	1082 <wc_AesCbcEncrypt+0x22>
    1080:	e307      	b.n	1692 <wc_AesCbcEncrypt+0x632>
    1082:	2a00      	cmp	r2, #0
    1084:	d100      	bne.n	1088 <wc_AesCbcEncrypt+0x28>
    1086:	e307      	b.n	1698 <wc_AesCbcEncrypt+0x638>

            return 0;
        }
    #endif

        while (blocks--) {
    1088:	1e5a      	subs	r2, r3, #1
    108a:	9205      	str	r2, [sp, #20]
    108c:	2b00      	cmp	r3, #0
    108e:	d100      	bne.n	1092 <wc_AesCbcEncrypt+0x32>
    1090:	e305      	b.n	169e <wc_AesCbcEncrypt+0x63e>
            Te[0][GETBYTE(t0, 3)] ^
    1092:	4eed      	ldr	r6, [pc, #948]	; (1448 <wc_AesCbcEncrypt+0x3e8>)
    1094:	e021      	b.n	10da <wc_AesCbcEncrypt+0x7a>
}


WC_STATIC WC_INLINE void xorbuf(void* buf, const void* mask, word32 count)
{
    if (((wolfssl_word)buf | (wolfssl_word)mask | count) % WOLFSSL_WORD_SIZE == 0)
    1096:	2300      	movs	r3, #0
    1098:	9904      	ldr	r1, [sp, #16]
    109a:	9c02      	ldr	r4, [sp, #8]
    else {
        word32 i;
        byte*       b = (byte*)buf;
        const byte* m = (const byte*)mask;

        for (i = 0; i < count; i++) b[i] ^= m[i];
    109c:	5cca      	ldrb	r2, [r1, r3]
    109e:	5ce0      	ldrb	r0, [r4, r3]
    10a0:	4042      	eors	r2, r0
    10a2:	54ca      	strb	r2, [r1, r3]
    10a4:	3301      	adds	r3, #1
    10a6:	2b10      	cmp	r3, #16
    10a8:	d1f8      	bne.n	109c <wc_AesCbcEncrypt+0x3c>
    word32 r = aes->rounds >> 1;
    10aa:	23f0      	movs	r3, #240	; 0xf0
    10ac:	9a01      	ldr	r2, [sp, #4]
    10ae:	58d4      	ldr	r4, [r2, r3]
    10b0:	0864      	lsrs	r4, r4, #1
    if (r > 7 || r == 0) {
    10b2:	1e63      	subs	r3, r4, #1
    10b4:	2b06      	cmp	r3, #6
    10b6:	d923      	bls.n	1100 <wc_AesCbcEncrypt+0xa0>
            xorbuf((byte*)aes->reg, in, AES_BLOCK_SIZE);
            wc_AesEncrypt(aes, (byte*)aes->reg, (byte*)aes->reg);
            XMEMCPY(out, aes->reg, AES_BLOCK_SIZE);
    10b8:	2210      	movs	r2, #16
    10ba:	9904      	ldr	r1, [sp, #16]
    10bc:	9c06      	ldr	r4, [sp, #24]
    10be:	0020      	movs	r0, r4
    10c0:	4be2      	ldr	r3, [pc, #904]	; (144c <wc_AesCbcEncrypt+0x3ec>)
    10c2:	4798      	blx	r3

            out += AES_BLOCK_SIZE;
    10c4:	0023      	movs	r3, r4
    10c6:	3310      	adds	r3, #16
    10c8:	9306      	str	r3, [sp, #24]
            in  += AES_BLOCK_SIZE;
    10ca:	9b02      	ldr	r3, [sp, #8]
    10cc:	3310      	adds	r3, #16
    10ce:	9302      	str	r3, [sp, #8]
        while (blocks--) {
    10d0:	9b05      	ldr	r3, [sp, #20]
    10d2:	1e5a      	subs	r2, r3, #1
    10d4:	9205      	str	r2, [sp, #20]
    10d6:	d200      	bcs.n	10da <wc_AesCbcEncrypt+0x7a>
    10d8:	e2d0      	b.n	167c <wc_AesCbcEncrypt+0x61c>
            xorbuf((byte*)aes->reg, in, AES_BLOCK_SIZE);
    10da:	9b01      	ldr	r3, [sp, #4]
    10dc:	33f8      	adds	r3, #248	; 0xf8
    10de:	001a      	movs	r2, r3
    10e0:	9304      	str	r3, [sp, #16]
    if (((wolfssl_word)buf | (wolfssl_word)mask | count) % WOLFSSL_WORD_SIZE == 0)
    10e2:	9802      	ldr	r0, [sp, #8]
    10e4:	0003      	movs	r3, r0
    10e6:	4313      	orrs	r3, r2
    10e8:	079b      	lsls	r3, r3, #30
    10ea:	d1d4      	bne.n	1096 <wc_AesCbcEncrypt+0x36>
    10ec:	2300      	movs	r3, #0
    10ee:	0011      	movs	r1, r2
    for (i = 0; i < n; i++) r[i] ^= a[i];
    10f0:	58ca      	ldr	r2, [r1, r3]
    10f2:	58c4      	ldr	r4, [r0, r3]
    10f4:	4062      	eors	r2, r4
    10f6:	50ca      	str	r2, [r1, r3]
    10f8:	3304      	adds	r3, #4
    10fa:	2b10      	cmp	r3, #16
    10fc:	d1f8      	bne.n	10f0 <wc_AesCbcEncrypt+0x90>
    10fe:	e7d4      	b.n	10aa <wc_AesCbcEncrypt+0x4a>
    XMEMCPY(&s0, inBlock,                  sizeof(s0));
    1100:	2204      	movs	r2, #4
    1102:	9904      	ldr	r1, [sp, #16]
    1104:	a80e      	add	r0, sp, #56	; 0x38
    1106:	4bd1      	ldr	r3, [pc, #836]	; (144c <wc_AesCbcEncrypt+0x3ec>)
    1108:	4798      	blx	r3
    XMEMCPY(&s1, inBlock + sizeof(s0),     sizeof(s1));
    110a:	9d01      	ldr	r5, [sp, #4]
    110c:	002b      	movs	r3, r5
    110e:	33fc      	adds	r3, #252	; 0xfc
    1110:	0019      	movs	r1, r3
    1112:	9308      	str	r3, [sp, #32]
    1114:	2204      	movs	r2, #4
    1116:	a80f      	add	r0, sp, #60	; 0x3c
    1118:	4bcc      	ldr	r3, [pc, #816]	; (144c <wc_AesCbcEncrypt+0x3ec>)
    111a:	4798      	blx	r3
    XMEMCPY(&s2, inBlock + 2 * sizeof(s0), sizeof(s2));
    111c:	002b      	movs	r3, r5
    111e:	3301      	adds	r3, #1
    1120:	33ff      	adds	r3, #255	; 0xff
    1122:	9309      	str	r3, [sp, #36]	; 0x24
    1124:	2204      	movs	r2, #4
    1126:	0019      	movs	r1, r3
    1128:	a810      	add	r0, sp, #64	; 0x40
    112a:	4bc8      	ldr	r3, [pc, #800]	; (144c <wc_AesCbcEncrypt+0x3ec>)
    112c:	4798      	blx	r3
    XMEMCPY(&s3, inBlock + 3 * sizeof(s0), sizeof(s3));
    112e:	9501      	str	r5, [sp, #4]
    1130:	1d6a      	adds	r2, r5, #5
    1132:	32ff      	adds	r2, #255	; 0xff
    1134:	0011      	movs	r1, r2
    1136:	920a      	str	r2, [sp, #40]	; 0x28
    1138:	2204      	movs	r2, #4
    113a:	a811      	add	r0, sp, #68	; 0x44
    113c:	4fc3      	ldr	r7, [pc, #780]	; (144c <wc_AesCbcEncrypt+0x3ec>)
    113e:	47b8      	blx	r7
    s0 = ByteReverseWord32(s0);
    1140:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    s1 = ByteReverseWord32(s1);
    1142:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    s2 = ByteReverseWord32(s2);
    1144:	9910      	ldr	r1, [sp, #64]	; 0x40
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
    1146:	0a10      	lsrs	r0, r2, #8
    1148:	4bc1      	ldr	r3, [pc, #772]	; (1450 <wc_AesCbcEncrypt+0x3f0>)
    114a:	4018      	ands	r0, r3
    114c:	0212      	lsls	r2, r2, #8
    114e:	4fc1      	ldr	r7, [pc, #772]	; (1454 <wc_AesCbcEncrypt+0x3f4>)
    1150:	46b9      	mov	r9, r7
    1152:	403a      	ands	r2, r7
    1154:	4302      	orrs	r2, r0
        return (x << y) | (x >> (sizeof(y) * 8 - y));
    1156:	2710      	movs	r7, #16
    1158:	41fa      	rors	r2, r7
    s0 ^= rk[0];
    115a:	9801      	ldr	r0, [sp, #4]
    115c:	6800      	ldr	r0, [r0, #0]
    115e:	4042      	eors	r2, r0
    1160:	4693      	mov	fp, r2
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
    1162:	0a28      	lsrs	r0, r5, #8
    1164:	4018      	ands	r0, r3
    1166:	022d      	lsls	r5, r5, #8
    1168:	464a      	mov	r2, r9
    116a:	4015      	ands	r5, r2
    116c:	4328      	orrs	r0, r5
        return (x << y) | (x >> (sizeof(y) * 8 - y));
    116e:	41f8      	rors	r0, r7
    s1 ^= rk[1];
    1170:	9d01      	ldr	r5, [sp, #4]
    1172:	686a      	ldr	r2, [r5, #4]
    1174:	4050      	eors	r0, r2
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
    1176:	0a0d      	lsrs	r5, r1, #8
    1178:	401d      	ands	r5, r3
    117a:	0209      	lsls	r1, r1, #8
    117c:	464a      	mov	r2, r9
    117e:	4011      	ands	r1, r2
    1180:	430d      	orrs	r5, r1
        return (x << y) | (x >> (sizeof(y) * 8 - y));
    1182:	41fd      	rors	r5, r7
    s2 ^= rk[2];
    1184:	9901      	ldr	r1, [sp, #4]
    1186:	688a      	ldr	r2, [r1, #8]
    1188:	4055      	eors	r5, r2
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
    118a:	9a11      	ldr	r2, [sp, #68]	; 0x44
    118c:	0a11      	lsrs	r1, r2, #8
    118e:	4019      	ands	r1, r3
    1190:	0213      	lsls	r3, r2, #8
    1192:	464a      	mov	r2, r9
    1194:	4013      	ands	r3, r2
    1196:	4319      	orrs	r1, r3
        return (x << y) | (x >> (sizeof(y) * 8 - y));
    1198:	41f9      	rors	r1, r7
    s3 ^= rk[3];
    119a:	9b01      	ldr	r3, [sp, #4]
    119c:	68db      	ldr	r3, [r3, #12]
    119e:	9300      	str	r3, [sp, #0]
    11a0:	404b      	eors	r3, r1
    11a2:	469c      	mov	ip, r3
    11a4:	2104      	movs	r1, #4
    11a6:	465a      	mov	r2, fp
    if (((wolfssl_word)buf | (wolfssl_word)mask | count) % WOLFSSL_WORD_SIZE == 0)
    11a8:	2320      	movs	r3, #32
    11aa:	3b01      	subs	r3, #1
        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
    11ac:	2b00      	cmp	r3, #0
    11ae:	d1fc      	bne.n	11aa <wc_AesCbcEncrypt+0x14a>
    11b0:	3901      	subs	r1, #1
    for (i = 0; i < 4; i++) {
    11b2:	2900      	cmp	r1, #0
    11b4:	d1f8      	bne.n	11a8 <wc_AesCbcEncrypt+0x148>
    11b6:	4693      	mov	fp, r2
    const word32* rk = aes->key;
    11b8:	9901      	ldr	r1, [sp, #4]
    11ba:	468a      	mov	sl, r1
    11bc:	0164      	lsls	r4, r4, #5
    11be:	4454      	add	r4, sl
    11c0:	9407      	str	r4, [sp, #28]
            Te[0][GETBYTE(s0, 3)]  ^
    11c2:	4aa1      	ldr	r2, [pc, #644]	; (1448 <wc_AesCbcEncrypt+0x3e8>)
    11c4:	4691      	mov	r9, r2
            Te[3][GETBYTE(s3, 0)]  ^
    11c6:	27ff      	movs	r7, #255	; 0xff
    11c8:	465a      	mov	r2, fp
    11ca:	9403      	str	r4, [sp, #12]
            Te[0][GETBYTE(s0, 3)]  ^
    11cc:	0e11      	lsrs	r1, r2, #24
    11ce:	0089      	lsls	r1, r1, #2
    11d0:	4449      	add	r1, r9
            Te[3][GETBYTE(s3, 0)]  ^
    11d2:	4663      	mov	r3, ip
    11d4:	403b      	ands	r3, r7
    11d6:	24c0      	movs	r4, #192	; 0xc0
    11d8:	00a4      	lsls	r4, r4, #2
    11da:	46a3      	mov	fp, r4
    11dc:	445b      	add	r3, fp
    11de:	009b      	lsls	r3, r3, #2
    11e0:	444b      	add	r3, r9
        t0 =
    11e2:	6a89      	ldr	r1, [r1, #40]	; 0x28
    11e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    11e6:	4059      	eors	r1, r3
    11e8:	4653      	mov	r3, sl
    11ea:	691b      	ldr	r3, [r3, #16]
    11ec:	4059      	eors	r1, r3
            Te[1][GETBYTE(s1, 2)]  ^
    11ee:	0c03      	lsrs	r3, r0, #16
    11f0:	403b      	ands	r3, r7
    11f2:	3301      	adds	r3, #1
    11f4:	33ff      	adds	r3, #255	; 0xff
    11f6:	009b      	lsls	r3, r3, #2
    11f8:	444b      	add	r3, r9
        t0 =
    11fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    11fc:	4059      	eors	r1, r3
            Te[2][GETBYTE(s2, 1)]  ^
    11fe:	0a2b      	lsrs	r3, r5, #8
    1200:	403b      	ands	r3, r7
    1202:	3c01      	subs	r4, #1
    1204:	3cff      	subs	r4, #255	; 0xff
    1206:	46a3      	mov	fp, r4
    1208:	445b      	add	r3, fp
    120a:	009b      	lsls	r3, r3, #2
    120c:	444b      	add	r3, r9
        t0 =
    120e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1210:	4059      	eors	r1, r3
    1212:	9100      	str	r1, [sp, #0]
            Te[0][GETBYTE(s1, 3)]  ^
    1214:	0e03      	lsrs	r3, r0, #24
    1216:	009b      	lsls	r3, r3, #2
    1218:	444b      	add	r3, r9
            Te[3][GETBYTE(s0, 0)]  ^
    121a:	003c      	movs	r4, r7
    121c:	4014      	ands	r4, r2
    121e:	21c0      	movs	r1, #192	; 0xc0
    1220:	0089      	lsls	r1, r1, #2
    1222:	468b      	mov	fp, r1
    1224:	445c      	add	r4, fp
    1226:	00a4      	lsls	r4, r4, #2
    1228:	444c      	add	r4, r9
        t1 =
    122a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    122c:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    122e:	4063      	eors	r3, r4
    1230:	4651      	mov	r1, sl
    1232:	6949      	ldr	r1, [r1, #20]
    1234:	404b      	eors	r3, r1
            Te[1][GETBYTE(s2, 2)]  ^
    1236:	0c2c      	lsrs	r4, r5, #16
    1238:	403c      	ands	r4, r7
    123a:	3401      	adds	r4, #1
    123c:	34ff      	adds	r4, #255	; 0xff
    123e:	00a4      	lsls	r4, r4, #2
    1240:	444c      	add	r4, r9
        t1 =
    1242:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    1244:	4063      	eors	r3, r4
            Te[2][GETBYTE(s3, 1)]  ^
    1246:	4661      	mov	r1, ip
    1248:	0a0c      	lsrs	r4, r1, #8
    124a:	403c      	ands	r4, r7
    124c:	2180      	movs	r1, #128	; 0x80
    124e:	0089      	lsls	r1, r1, #2
    1250:	468b      	mov	fp, r1
    1252:	445c      	add	r4, fp
    1254:	00a4      	lsls	r4, r4, #2
    1256:	444c      	add	r4, r9
        t1 =
    1258:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    125a:	4063      	eors	r3, r4
            Te[0][GETBYTE(s2, 3)] ^
    125c:	0e2c      	lsrs	r4, r5, #24
    125e:	00a4      	lsls	r4, r4, #2
    1260:	444c      	add	r4, r9
    1262:	46a3      	mov	fp, r4
            Te[3][GETBYTE(s1, 0)]  ^
    1264:	003c      	movs	r4, r7
    1266:	4004      	ands	r4, r0
    1268:	3101      	adds	r1, #1
    126a:	31ff      	adds	r1, #255	; 0xff
    126c:	4688      	mov	r8, r1
    126e:	4444      	add	r4, r8
    1270:	00a4      	lsls	r4, r4, #2
    1272:	444c      	add	r4, r9
        t2 =
    1274:	4659      	mov	r1, fp
    1276:	6a89      	ldr	r1, [r1, #40]	; 0x28
    1278:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    127a:	404c      	eors	r4, r1
    127c:	4651      	mov	r1, sl
    127e:	6989      	ldr	r1, [r1, #24]
    1280:	4061      	eors	r1, r4
    1282:	468b      	mov	fp, r1
            Te[1][GETBYTE(s3, 2)]  ^
    1284:	4661      	mov	r1, ip
    1286:	0c0c      	lsrs	r4, r1, #16
    1288:	403c      	ands	r4, r7
    128a:	3401      	adds	r4, #1
    128c:	34ff      	adds	r4, #255	; 0xff
    128e:	00a4      	lsls	r4, r4, #2
    1290:	444c      	add	r4, r9
        t2 =
    1292:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    1294:	4659      	mov	r1, fp
    1296:	4061      	eors	r1, r4
    1298:	468b      	mov	fp, r1
            Te[2][GETBYTE(s0, 1)]  ^
    129a:	0a14      	lsrs	r4, r2, #8
    129c:	403c      	ands	r4, r7
    129e:	2180      	movs	r1, #128	; 0x80
    12a0:	0089      	lsls	r1, r1, #2
    12a2:	4688      	mov	r8, r1
    12a4:	4444      	add	r4, r8
    12a6:	00a4      	lsls	r4, r4, #2
    12a8:	444c      	add	r4, r9
        t2 =
    12aa:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    12ac:	4659      	mov	r1, fp
    12ae:	404c      	eors	r4, r1
            Te[0][GETBYTE(s3, 3)] ^
    12b0:	4661      	mov	r1, ip
    12b2:	0e09      	lsrs	r1, r1, #24
    12b4:	0089      	lsls	r1, r1, #2
    12b6:	468c      	mov	ip, r1
    12b8:	44cc      	add	ip, r9
            Te[3][GETBYTE(s2, 0)]  ^
    12ba:	403d      	ands	r5, r7
    12bc:	21c0      	movs	r1, #192	; 0xc0
    12be:	0089      	lsls	r1, r1, #2
    12c0:	4688      	mov	r8, r1
    12c2:	4445      	add	r5, r8
    12c4:	00ad      	lsls	r5, r5, #2
    12c6:	444d      	add	r5, r9
        t3 =
    12c8:	4661      	mov	r1, ip
    12ca:	6a89      	ldr	r1, [r1, #40]	; 0x28
    12cc:	6aad      	ldr	r5, [r5, #40]	; 0x28
    12ce:	404d      	eors	r5, r1
    12d0:	4651      	mov	r1, sl
    12d2:	69c9      	ldr	r1, [r1, #28]
    12d4:	4069      	eors	r1, r5
            Te[1][GETBYTE(s0, 2)]  ^
    12d6:	0c15      	lsrs	r5, r2, #16
    12d8:	403d      	ands	r5, r7
    12da:	3501      	adds	r5, #1
    12dc:	35ff      	adds	r5, #255	; 0xff
    12de:	00ad      	lsls	r5, r5, #2
    12e0:	444d      	add	r5, r9
        t3 =
    12e2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    12e4:	404a      	eors	r2, r1
            Te[2][GETBYTE(s1, 1)]  ^
    12e6:	0a00      	lsrs	r0, r0, #8
    12e8:	4038      	ands	r0, r7
    12ea:	2180      	movs	r1, #128	; 0x80
    12ec:	0089      	lsls	r1, r1, #2
    12ee:	468c      	mov	ip, r1
    12f0:	4460      	add	r0, ip
    12f2:	0080      	lsls	r0, r0, #2
    12f4:	4448      	add	r0, r9
        t3 =
    12f6:	6a80      	ldr	r0, [r0, #40]	; 0x28
    12f8:	4042      	eors	r2, r0
    12fa:	4694      	mov	ip, r2
        rk += 8;
    12fc:	2220      	movs	r2, #32
    12fe:	4690      	mov	r8, r2
    1300:	44c2      	add	sl, r8
        if (--r == 0) {
    1302:	9a03      	ldr	r2, [sp, #12]
    1304:	4592      	cmp	sl, r2
    1306:	d100      	bne.n	130a <wc_AesCbcEncrypt+0x2aa>
    1308:	e0a6      	b.n	1458 <wc_AesCbcEncrypt+0x3f8>
            Te[0][GETBYTE(t0, 3)] ^
    130a:	9900      	ldr	r1, [sp, #0]
    130c:	0e0a      	lsrs	r2, r1, #24
    130e:	0092      	lsls	r2, r2, #2
    1310:	18b2      	adds	r2, r6, r2
            Te[3][GETBYTE(t3, 0)] ^
    1312:	4660      	mov	r0, ip
    1314:	4038      	ands	r0, r7
    1316:	21c0      	movs	r1, #192	; 0xc0
    1318:	0089      	lsls	r1, r1, #2
    131a:	4688      	mov	r8, r1
    131c:	4440      	add	r0, r8
    131e:	0080      	lsls	r0, r0, #2
    1320:	1830      	adds	r0, r6, r0
    1322:	6a92      	ldr	r2, [r2, #40]	; 0x28
    1324:	6a80      	ldr	r0, [r0, #40]	; 0x28
    1326:	4042      	eors	r2, r0
    1328:	4651      	mov	r1, sl
    132a:	6809      	ldr	r1, [r1, #0]
    132c:	404a      	eors	r2, r1
            Te[1][GETBYTE(t1, 2)] ^
    132e:	0c18      	lsrs	r0, r3, #16
    1330:	4038      	ands	r0, r7
    1332:	3001      	adds	r0, #1
    1334:	30ff      	adds	r0, #255	; 0xff
    1336:	0080      	lsls	r0, r0, #2
    1338:	1830      	adds	r0, r6, r0
            Te[3][GETBYTE(t3, 0)] ^
    133a:	6a80      	ldr	r0, [r0, #40]	; 0x28
    133c:	4042      	eors	r2, r0
            Te[2][GETBYTE(t2, 1)] ^
    133e:	0a20      	lsrs	r0, r4, #8
    1340:	4038      	ands	r0, r7
    1342:	2180      	movs	r1, #128	; 0x80
    1344:	0089      	lsls	r1, r1, #2
    1346:	4688      	mov	r8, r1
    1348:	4440      	add	r0, r8
    134a:	0080      	lsls	r0, r0, #2
    134c:	1830      	adds	r0, r6, r0
            Te[3][GETBYTE(t3, 0)] ^
    134e:	6a80      	ldr	r0, [r0, #40]	; 0x28
    1350:	4042      	eors	r2, r0
            Te[0][GETBYTE(t1, 3)] ^
    1352:	0e18      	lsrs	r0, r3, #24
    1354:	0080      	lsls	r0, r0, #2
    1356:	1830      	adds	r0, r6, r0
            Te[3][GETBYTE(t0, 0)] ^
    1358:	003d      	movs	r5, r7
    135a:	9900      	ldr	r1, [sp, #0]
    135c:	400d      	ands	r5, r1
    135e:	21c0      	movs	r1, #192	; 0xc0
    1360:	0089      	lsls	r1, r1, #2
    1362:	4688      	mov	r8, r1
    1364:	4445      	add	r5, r8
    1366:	00ad      	lsls	r5, r5, #2
    1368:	1975      	adds	r5, r6, r5
    136a:	6a80      	ldr	r0, [r0, #40]	; 0x28
    136c:	6aad      	ldr	r5, [r5, #40]	; 0x28
    136e:	4068      	eors	r0, r5
    1370:	4651      	mov	r1, sl
    1372:	6849      	ldr	r1, [r1, #4]
    1374:	4048      	eors	r0, r1
            Te[1][GETBYTE(t2, 2)] ^
    1376:	0c25      	lsrs	r5, r4, #16
    1378:	403d      	ands	r5, r7
    137a:	3501      	adds	r5, #1
    137c:	35ff      	adds	r5, #255	; 0xff
    137e:	00ad      	lsls	r5, r5, #2
    1380:	1975      	adds	r5, r6, r5
            Te[3][GETBYTE(t0, 0)] ^
    1382:	6aad      	ldr	r5, [r5, #40]	; 0x28
    1384:	4068      	eors	r0, r5
            Te[2][GETBYTE(t3, 1)] ^
    1386:	4661      	mov	r1, ip
    1388:	0a0d      	lsrs	r5, r1, #8
    138a:	403d      	ands	r5, r7
    138c:	2180      	movs	r1, #128	; 0x80
    138e:	0089      	lsls	r1, r1, #2
    1390:	4688      	mov	r8, r1
    1392:	4445      	add	r5, r8
    1394:	00ad      	lsls	r5, r5, #2
    1396:	1975      	adds	r5, r6, r5
            Te[3][GETBYTE(t0, 0)] ^
    1398:	6aad      	ldr	r5, [r5, #40]	; 0x28
    139a:	4068      	eors	r0, r5
            Te[0][GETBYTE(t2, 3)] ^
    139c:	0e25      	lsrs	r5, r4, #24
    139e:	00ad      	lsls	r5, r5, #2
    13a0:	46ab      	mov	fp, r5
    13a2:	44b3      	add	fp, r6
            Te[3][GETBYTE(t1, 0)] ^
    13a4:	003d      	movs	r5, r7
    13a6:	401d      	ands	r5, r3
    13a8:	3101      	adds	r1, #1
    13aa:	31ff      	adds	r1, #255	; 0xff
    13ac:	4688      	mov	r8, r1
    13ae:	4445      	add	r5, r8
    13b0:	00ad      	lsls	r5, r5, #2
    13b2:	1975      	adds	r5, r6, r5
    13b4:	4659      	mov	r1, fp
    13b6:	6a89      	ldr	r1, [r1, #40]	; 0x28
    13b8:	6aad      	ldr	r5, [r5, #40]	; 0x28
    13ba:	404d      	eors	r5, r1
    13bc:	4651      	mov	r1, sl
    13be:	6889      	ldr	r1, [r1, #8]
    13c0:	4069      	eors	r1, r5
    13c2:	468b      	mov	fp, r1
            Te[1][GETBYTE(t3, 2)] ^
    13c4:	4661      	mov	r1, ip
    13c6:	0c0d      	lsrs	r5, r1, #16
    13c8:	403d      	ands	r5, r7
    13ca:	3501      	adds	r5, #1
    13cc:	35ff      	adds	r5, #255	; 0xff
    13ce:	00ad      	lsls	r5, r5, #2
    13d0:	1975      	adds	r5, r6, r5
            Te[3][GETBYTE(t1, 0)] ^
    13d2:	6aad      	ldr	r5, [r5, #40]	; 0x28
    13d4:	4659      	mov	r1, fp
    13d6:	4069      	eors	r1, r5
    13d8:	468b      	mov	fp, r1
            Te[2][GETBYTE(t0, 1)] ^
    13da:	9900      	ldr	r1, [sp, #0]
    13dc:	0a0d      	lsrs	r5, r1, #8
    13de:	403d      	ands	r5, r7
    13e0:	2180      	movs	r1, #128	; 0x80
    13e2:	0089      	lsls	r1, r1, #2
    13e4:	4688      	mov	r8, r1
    13e6:	4445      	add	r5, r8
    13e8:	00ad      	lsls	r5, r5, #2
    13ea:	1975      	adds	r5, r6, r5
            Te[3][GETBYTE(t1, 0)] ^
    13ec:	6aad      	ldr	r5, [r5, #40]	; 0x28
    13ee:	4659      	mov	r1, fp
    13f0:	404d      	eors	r5, r1
            Te[0][GETBYTE(t3, 3)] ^
    13f2:	4661      	mov	r1, ip
    13f4:	0e09      	lsrs	r1, r1, #24
    13f6:	0089      	lsls	r1, r1, #2
    13f8:	468c      	mov	ip, r1
    13fa:	44b4      	add	ip, r6
            Te[3][GETBYTE(t2, 0)] ^
    13fc:	403c      	ands	r4, r7
    13fe:	21c0      	movs	r1, #192	; 0xc0
    1400:	0089      	lsls	r1, r1, #2
    1402:	4688      	mov	r8, r1
    1404:	4444      	add	r4, r8
    1406:	00a4      	lsls	r4, r4, #2
    1408:	1934      	adds	r4, r6, r4
    140a:	4661      	mov	r1, ip
    140c:	6a89      	ldr	r1, [r1, #40]	; 0x28
    140e:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    1410:	404c      	eors	r4, r1
    1412:	4651      	mov	r1, sl
    1414:	68c9      	ldr	r1, [r1, #12]
    1416:	4061      	eors	r1, r4
    1418:	468c      	mov	ip, r1
            Te[1][GETBYTE(t0, 2)] ^
    141a:	9900      	ldr	r1, [sp, #0]
    141c:	0c0c      	lsrs	r4, r1, #16
    141e:	403c      	ands	r4, r7
    1420:	3401      	adds	r4, #1
    1422:	34ff      	adds	r4, #255	; 0xff
    1424:	00a4      	lsls	r4, r4, #2
    1426:	1934      	adds	r4, r6, r4
            Te[3][GETBYTE(t2, 0)] ^
    1428:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    142a:	4664      	mov	r4, ip
    142c:	4061      	eors	r1, r4
            Te[2][GETBYTE(t1, 1)] ^
    142e:	0a1b      	lsrs	r3, r3, #8
    1430:	403b      	ands	r3, r7
    1432:	2480      	movs	r4, #128	; 0x80
    1434:	00a4      	lsls	r4, r4, #2
    1436:	46a4      	mov	ip, r4
    1438:	4463      	add	r3, ip
    143a:	009b      	lsls	r3, r3, #2
    143c:	18f3      	adds	r3, r6, r3
            Te[3][GETBYTE(t2, 0)] ^
    143e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1440:	4059      	eors	r1, r3
    1442:	468c      	mov	ip, r1
    1444:	e6c2      	b.n	11cc <wc_AesCbcEncrypt+0x16c>
    1446:	46c0      	nop			; (mov r8, r8)
    1448:	00001e78 	.word	0x00001e78
    144c:	00001c85 	.word	0x00001c85
    1450:	00ff00ff 	.word	0x00ff00ff
    1454:	ff00ff00 	.word	0xff00ff00
    1458:	4699      	mov	r9, r3
        (Te[1][GETBYTE(t3, 0)] & 0x000000ff) ^
    145a:	4892      	ldr	r0, [pc, #584]	; (16a4 <wc_AesCbcEncrypt+0x644>)
    145c:	22ff      	movs	r2, #255	; 0xff
    145e:	4665      	mov	r5, ip
    1460:	4015      	ands	r5, r2
    1462:	3501      	adds	r5, #1
    1464:	35ff      	adds	r5, #255	; 0xff
    1466:	00ad      	lsls	r5, r5, #2
    1468:	1945      	adds	r5, r0, r5
    146a:	6aad      	ldr	r5, [r5, #40]	; 0x28
    146c:	4015      	ands	r5, r2
    146e:	9f07      	ldr	r7, [sp, #28]
    1470:	683b      	ldr	r3, [r7, #0]
    1472:	405d      	eors	r5, r3
        (Te[0][GETBYTE(t2, 1)] & 0x0000ff00) ^
    1474:	0a23      	lsrs	r3, r4, #8
    1476:	4013      	ands	r3, r2
    1478:	009b      	lsls	r3, r3, #2
    147a:	4698      	mov	r8, r3
    147c:	4480      	add	r8, r0
    147e:	4643      	mov	r3, r8
    1480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1482:	4698      	mov	r8, r3
    1484:	23ff      	movs	r3, #255	; 0xff
    1486:	021b      	lsls	r3, r3, #8
    1488:	0019      	movs	r1, r3
    148a:	4643      	mov	r3, r8
    148c:	9107      	str	r1, [sp, #28]
    148e:	400b      	ands	r3, r1
        (Te[1][GETBYTE(t3, 0)] & 0x000000ff) ^
    1490:	405d      	eors	r5, r3
        (Te[3][GETBYTE(t1, 2)] & 0x00ff0000) ^
    1492:	464b      	mov	r3, r9
    1494:	9303      	str	r3, [sp, #12]
    1496:	0c1b      	lsrs	r3, r3, #16
    1498:	4013      	ands	r3, r2
    149a:	4698      	mov	r8, r3
    149c:	23c0      	movs	r3, #192	; 0xc0
    149e:	009b      	lsls	r3, r3, #2
    14a0:	4699      	mov	r9, r3
    14a2:	44c8      	add	r8, r9
    14a4:	4643      	mov	r3, r8
    14a6:	009b      	lsls	r3, r3, #2
    14a8:	4698      	mov	r8, r3
    14aa:	4480      	add	r8, r0
    14ac:	4643      	mov	r3, r8
    14ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    14b0:	4699      	mov	r9, r3
    14b2:	23ff      	movs	r3, #255	; 0xff
    14b4:	041b      	lsls	r3, r3, #16
    14b6:	469b      	mov	fp, r3
    14b8:	464b      	mov	r3, r9
    14ba:	4659      	mov	r1, fp
    14bc:	400b      	ands	r3, r1
    14be:	4699      	mov	r9, r3
        (Te[2][GETBYTE(t0, 3)] & 0xff000000) ^
    14c0:	9b00      	ldr	r3, [sp, #0]
    14c2:	0e1b      	lsrs	r3, r3, #24
    14c4:	4698      	mov	r8, r3
    14c6:	2380      	movs	r3, #128	; 0x80
    14c8:	009b      	lsls	r3, r3, #2
    14ca:	469a      	mov	sl, r3
    14cc:	44d0      	add	r8, sl
    14ce:	4643      	mov	r3, r8
    14d0:	009b      	lsls	r3, r3, #2
    14d2:	4698      	mov	r8, r3
    14d4:	4480      	add	r8, r0
    14d6:	4643      	mov	r3, r8
    14d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    14da:	0e1b      	lsrs	r3, r3, #24
    14dc:	061b      	lsls	r3, r3, #24
    14de:	4698      	mov	r8, r3
    14e0:	464b      	mov	r3, r9
    14e2:	4641      	mov	r1, r8
    14e4:	430b      	orrs	r3, r1
        (Te[1][GETBYTE(t3, 0)] & 0x000000ff) ^
    14e6:	406b      	eors	r3, r5
    14e8:	930b      	str	r3, [sp, #44]	; 0x2c
        (Te[1][GETBYTE(t0, 0)] & 0x000000ff) ^
    14ea:	0015      	movs	r5, r2
    14ec:	9b00      	ldr	r3, [sp, #0]
    14ee:	401d      	ands	r5, r3
    14f0:	3501      	adds	r5, #1
    14f2:	35ff      	adds	r5, #255	; 0xff
    14f4:	00ad      	lsls	r5, r5, #2
    14f6:	1945      	adds	r5, r0, r5
    14f8:	6aad      	ldr	r5, [r5, #40]	; 0x28
    14fa:	4015      	ands	r5, r2
    14fc:	6879      	ldr	r1, [r7, #4]
    14fe:	000b      	movs	r3, r1
    1500:	406b      	eors	r3, r5
        (Te[0][GETBYTE(t3, 1)] & 0x0000ff00) ^
    1502:	4661      	mov	r1, ip
    1504:	0a0d      	lsrs	r5, r1, #8
    1506:	4015      	ands	r5, r2
    1508:	00ad      	lsls	r5, r5, #2
    150a:	1945      	adds	r5, r0, r5
    150c:	6aad      	ldr	r5, [r5, #40]	; 0x28
    150e:	9907      	ldr	r1, [sp, #28]
    1510:	400d      	ands	r5, r1
        (Te[1][GETBYTE(t0, 0)] & 0x000000ff) ^
    1512:	405d      	eors	r5, r3
        (Te[3][GETBYTE(t2, 2)] & 0x00ff0000) ^
    1514:	0c21      	lsrs	r1, r4, #16
    1516:	000b      	movs	r3, r1
    1518:	4013      	ands	r3, r2
    151a:	4698      	mov	r8, r3
    151c:	21c0      	movs	r1, #192	; 0xc0
    151e:	0089      	lsls	r1, r1, #2
    1520:	4689      	mov	r9, r1
    1522:	44c8      	add	r8, r9
    1524:	4641      	mov	r1, r8
    1526:	0089      	lsls	r1, r1, #2
    1528:	4688      	mov	r8, r1
    152a:	4480      	add	r8, r0
    152c:	4641      	mov	r1, r8
    152e:	6a89      	ldr	r1, [r1, #40]	; 0x28
    1530:	000b      	movs	r3, r1
    1532:	4659      	mov	r1, fp
    1534:	400b      	ands	r3, r1
        (Te[2][GETBYTE(t1, 3)] & 0xff000000) ^
    1536:	9903      	ldr	r1, [sp, #12]
    1538:	0e09      	lsrs	r1, r1, #24
    153a:	4688      	mov	r8, r1
    153c:	44d0      	add	r8, sl
    153e:	4641      	mov	r1, r8
    1540:	0089      	lsls	r1, r1, #2
    1542:	4688      	mov	r8, r1
    1544:	4480      	add	r8, r0
    1546:	4641      	mov	r1, r8
    1548:	6a89      	ldr	r1, [r1, #40]	; 0x28
    154a:	0e09      	lsrs	r1, r1, #24
    154c:	0609      	lsls	r1, r1, #24
    154e:	430b      	orrs	r3, r1
        (Te[1][GETBYTE(t0, 0)] & 0x000000ff) ^
    1550:	406b      	eors	r3, r5
    1552:	930c      	str	r3, [sp, #48]	; 0x30
        (Te[1][GETBYTE(t1, 0)] & 0x000000ff) ^
    1554:	0015      	movs	r5, r2
    1556:	9903      	ldr	r1, [sp, #12]
    1558:	400d      	ands	r5, r1
    155a:	3501      	adds	r5, #1
    155c:	35ff      	adds	r5, #255	; 0xff
    155e:	00ad      	lsls	r5, r5, #2
    1560:	1945      	adds	r5, r0, r5
    1562:	6aad      	ldr	r5, [r5, #40]	; 0x28
    1564:	4015      	ands	r5, r2
    1566:	68b9      	ldr	r1, [r7, #8]
    1568:	910d      	str	r1, [sp, #52]	; 0x34
    156a:	000b      	movs	r3, r1
    156c:	406b      	eors	r3, r5
    156e:	4698      	mov	r8, r3
        (Te[0][GETBYTE(t0, 1)] & 0x0000ff00) ^
    1570:	9b00      	ldr	r3, [sp, #0]
    1572:	0a1d      	lsrs	r5, r3, #8
    1574:	4015      	ands	r5, r2
    1576:	00ad      	lsls	r5, r5, #2
    1578:	1945      	adds	r5, r0, r5
    157a:	6aad      	ldr	r5, [r5, #40]	; 0x28
    157c:	9907      	ldr	r1, [sp, #28]
    157e:	400d      	ands	r5, r1
        (Te[1][GETBYTE(t1, 0)] & 0x000000ff) ^
    1580:	4641      	mov	r1, r8
    1582:	404d      	eors	r5, r1
        (Te[3][GETBYTE(t3, 2)] & 0x00ff0000) ^
    1584:	4661      	mov	r1, ip
    1586:	0c09      	lsrs	r1, r1, #16
    1588:	000b      	movs	r3, r1
    158a:	4013      	ands	r3, r2
    158c:	4698      	mov	r8, r3
    158e:	21c0      	movs	r1, #192	; 0xc0
    1590:	0089      	lsls	r1, r1, #2
    1592:	4689      	mov	r9, r1
    1594:	44c8      	add	r8, r9
    1596:	4641      	mov	r1, r8
    1598:	0089      	lsls	r1, r1, #2
    159a:	4688      	mov	r8, r1
    159c:	4480      	add	r8, r0
    159e:	4641      	mov	r1, r8
    15a0:	6a89      	ldr	r1, [r1, #40]	; 0x28
    15a2:	000b      	movs	r3, r1
    15a4:	4659      	mov	r1, fp
    15a6:	400b      	ands	r3, r1
        (Te[2][GETBYTE(t2, 3)] & 0xff000000) ^
    15a8:	0e21      	lsrs	r1, r4, #24
    15aa:	4688      	mov	r8, r1
    15ac:	44d0      	add	r8, sl
    15ae:	4641      	mov	r1, r8
    15b0:	0089      	lsls	r1, r1, #2
    15b2:	4688      	mov	r8, r1
    15b4:	4480      	add	r8, r0
    15b6:	4641      	mov	r1, r8
    15b8:	6a89      	ldr	r1, [r1, #40]	; 0x28
    15ba:	0e09      	lsrs	r1, r1, #24
    15bc:	0609      	lsls	r1, r1, #24
    15be:	430b      	orrs	r3, r1
        (Te[1][GETBYTE(t1, 0)] & 0x000000ff) ^
    15c0:	406b      	eors	r3, r5
    15c2:	4699      	mov	r9, r3
        (Te[1][GETBYTE(t2, 0)] & 0x000000ff) ^
    15c4:	4014      	ands	r4, r2
    15c6:	3401      	adds	r4, #1
    15c8:	34ff      	adds	r4, #255	; 0xff
    15ca:	00a4      	lsls	r4, r4, #2
    15cc:	1904      	adds	r4, r0, r4
    15ce:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    15d0:	4014      	ands	r4, r2
    15d2:	68fd      	ldr	r5, [r7, #12]
    15d4:	406c      	eors	r4, r5
        (Te[0][GETBYTE(t1, 1)] & 0x0000ff00) ^
    15d6:	9903      	ldr	r1, [sp, #12]
    15d8:	0a0b      	lsrs	r3, r1, #8
    15da:	4013      	ands	r3, r2
    15dc:	009b      	lsls	r3, r3, #2
    15de:	18c3      	adds	r3, r0, r3
    15e0:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    15e2:	9907      	ldr	r1, [sp, #28]
    15e4:	400d      	ands	r5, r1
        (Te[1][GETBYTE(t2, 0)] & 0x000000ff) ^
    15e6:	4065      	eors	r5, r4
        (Te[3][GETBYTE(t0, 2)] & 0x00ff0000) ^
    15e8:	9b00      	ldr	r3, [sp, #0]
    15ea:	0c19      	lsrs	r1, r3, #16
    15ec:	4011      	ands	r1, r2
    15ee:	22c0      	movs	r2, #192	; 0xc0
    15f0:	0092      	lsls	r2, r2, #2
    15f2:	188b      	adds	r3, r1, r2
    15f4:	009b      	lsls	r3, r3, #2
    15f6:	18c3      	adds	r3, r0, r3
    15f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    15fa:	465a      	mov	r2, fp
    15fc:	4013      	ands	r3, r2
        (Te[2][GETBYTE(t3, 3)] & 0xff000000) ^
    15fe:	4662      	mov	r2, ip
    1600:	0e12      	lsrs	r2, r2, #24
    1602:	4452      	add	r2, sl
    1604:	0092      	lsls	r2, r2, #2
    1606:	1880      	adds	r0, r0, r2
    1608:	6a84      	ldr	r4, [r0, #40]	; 0x28
    160a:	0e24      	lsrs	r4, r4, #24
    160c:	0624      	lsls	r4, r4, #24
    160e:	431c      	orrs	r4, r3
        (Te[1][GETBYTE(t2, 0)] & 0x000000ff) ^
    1610:	406c      	eors	r4, r5
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
    1612:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1614:	0a1a      	lsrs	r2, r3, #8
    1616:	4924      	ldr	r1, [pc, #144]	; (16a8 <wc_AesCbcEncrypt+0x648>)
    1618:	400a      	ands	r2, r1
    161a:	021b      	lsls	r3, r3, #8
    161c:	4823      	ldr	r0, [pc, #140]	; (16ac <wc_AesCbcEncrypt+0x64c>)
    161e:	4003      	ands	r3, r0
    1620:	4313      	orrs	r3, r2
        return (x << y) | (x >> (sizeof(y) * 8 - y));
    1622:	2210      	movs	r2, #16
    1624:	41d3      	rors	r3, r2
    s0 = ByteReverseWord32(s0);
    1626:	930e      	str	r3, [sp, #56]	; 0x38
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
    1628:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    162a:	0a2b      	lsrs	r3, r5, #8
    162c:	400b      	ands	r3, r1
    162e:	022d      	lsls	r5, r5, #8
    1630:	4005      	ands	r5, r0
    1632:	432b      	orrs	r3, r5
        return (x << y) | (x >> (sizeof(y) * 8 - y));
    1634:	41d3      	rors	r3, r2
    s1 = ByteReverseWord32(s1);
    1636:	930f      	str	r3, [sp, #60]	; 0x3c
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
    1638:	464b      	mov	r3, r9
    163a:	0a1b      	lsrs	r3, r3, #8
    163c:	400b      	ands	r3, r1
    163e:	464d      	mov	r5, r9
    1640:	022d      	lsls	r5, r5, #8
    1642:	4005      	ands	r5, r0
    1644:	432b      	orrs	r3, r5
        return (x << y) | (x >> (sizeof(y) * 8 - y));
    1646:	41d3      	rors	r3, r2
    s2 = ByteReverseWord32(s2);
    1648:	9310      	str	r3, [sp, #64]	; 0x40
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
    164a:	0a23      	lsrs	r3, r4, #8
    164c:	4019      	ands	r1, r3
    164e:	0224      	lsls	r4, r4, #8
    1650:	4020      	ands	r0, r4
    1652:	4301      	orrs	r1, r0
        return (x << y) | (x >> (sizeof(y) * 8 - y));
    1654:	41d1      	rors	r1, r2
    s3 = ByteReverseWord32(s3);
    1656:	9111      	str	r1, [sp, #68]	; 0x44
    XMEMCPY(outBlock,                  &s0, sizeof(s0));
    1658:	3a0c      	subs	r2, #12
    165a:	a90e      	add	r1, sp, #56	; 0x38
    165c:	9804      	ldr	r0, [sp, #16]
    165e:	4c14      	ldr	r4, [pc, #80]	; (16b0 <wc_AesCbcEncrypt+0x650>)
    1660:	47a0      	blx	r4
    XMEMCPY(outBlock + sizeof(s0),     &s1, sizeof(s1));
    1662:	2204      	movs	r2, #4
    1664:	a90f      	add	r1, sp, #60	; 0x3c
    1666:	9808      	ldr	r0, [sp, #32]
    1668:	47a0      	blx	r4
    XMEMCPY(outBlock + 2 * sizeof(s0), &s2, sizeof(s2));
    166a:	2204      	movs	r2, #4
    166c:	a910      	add	r1, sp, #64	; 0x40
    166e:	9809      	ldr	r0, [sp, #36]	; 0x24
    1670:	47a0      	blx	r4
    XMEMCPY(outBlock + 3 * sizeof(s0), &s3, sizeof(s3));
    1672:	2204      	movs	r2, #4
    1674:	a911      	add	r1, sp, #68	; 0x44
    1676:	980a      	ldr	r0, [sp, #40]	; 0x28
    1678:	47a0      	blx	r4
    167a:	e51d      	b.n	10b8 <wc_AesCbcEncrypt+0x58>
        }

        return 0;
    167c:	2000      	movs	r0, #0
    }
    167e:	b013      	add	sp, #76	; 0x4c
    1680:	bc3c      	pop	{r2, r3, r4, r5}
    1682:	4690      	mov	r8, r2
    1684:	4699      	mov	r9, r3
    1686:	46a2      	mov	sl, r4
    1688:	46ab      	mov	fp, r5
    168a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return BAD_FUNC_ARG;
    168c:	20ad      	movs	r0, #173	; 0xad
    168e:	4240      	negs	r0, r0
    1690:	e7f5      	b.n	167e <wc_AesCbcEncrypt+0x61e>
    1692:	20ad      	movs	r0, #173	; 0xad
    1694:	4240      	negs	r0, r0
    1696:	e7f2      	b.n	167e <wc_AesCbcEncrypt+0x61e>
    1698:	20ad      	movs	r0, #173	; 0xad
    169a:	4240      	negs	r0, r0
    169c:	e7ef      	b.n	167e <wc_AesCbcEncrypt+0x61e>
        return 0;
    169e:	2000      	movs	r0, #0
    16a0:	e7ed      	b.n	167e <wc_AesCbcEncrypt+0x61e>
    16a2:	46c0      	nop			; (mov r8, r8)
    16a4:	00001e78 	.word	0x00001e78
    16a8:	00ff00ff 	.word	0x00ff00ff
    16ac:	ff00ff00 	.word	0xff00ff00
    16b0:	00001c85 	.word	0x00001c85

000016b4 <wc_AesCbcDecrypt>:

    #ifdef HAVE_AES_DECRYPT
    /* Software AES - CBC Decrypt */
    int wc_AesCbcDecrypt(Aes* aes, byte* out, const byte* in, word32 sz)
    {
    16b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    16b6:	46de      	mov	lr, fp
    16b8:	4657      	mov	r7, sl
    16ba:	464e      	mov	r6, r9
    16bc:	4645      	mov	r5, r8
    16be:	b5e0      	push	{r5, r6, r7, lr}
    16c0:	b08f      	sub	sp, #60	; 0x3c
    16c2:	9001      	str	r0, [sp, #4]
    16c4:	468b      	mov	fp, r1
    16c6:	9204      	str	r2, [sp, #16]
        word32 blocks;

        if (aes == NULL || out == NULL || in == NULL
    16c8:	2800      	cmp	r0, #0
    16ca:	d100      	bne.n	16ce <wc_AesCbcDecrypt+0x1a>
    16cc:	e28e      	b.n	1bec <wc_AesCbcDecrypt+0x538>
    16ce:	4659      	mov	r1, fp
    16d0:	2900      	cmp	r1, #0
    16d2:	d100      	bne.n	16d6 <wc_AesCbcDecrypt+0x22>
    16d4:	e28d      	b.n	1bf2 <wc_AesCbcDecrypt+0x53e>
    16d6:	2a00      	cmp	r2, #0
    16d8:	d100      	bne.n	16dc <wc_AesCbcDecrypt+0x28>
    16da:	e28d      	b.n	1bf8 <wc_AesCbcDecrypt+0x544>
                                       || sz % AES_BLOCK_SIZE != 0) {
    16dc:	220f      	movs	r2, #15
    16de:	401a      	ands	r2, r3
    16e0:	9207      	str	r2, [sp, #28]
    16e2:	d000      	beq.n	16e6 <wc_AesCbcDecrypt+0x32>
    16e4:	e28b      	b.n	1bfe <wc_AesCbcDecrypt+0x54a>
            XMEMCPY(aes->reg, aes->tmp, AES_BLOCK_SIZE);
            return 0;
        }
    #endif

        blocks = sz / AES_BLOCK_SIZE;
    16e6:	091b      	lsrs	r3, r3, #4
        while (blocks--) {
    16e8:	1e5a      	subs	r2, r3, #1
    16ea:	9206      	str	r2, [sp, #24]
    16ec:	2b00      	cmp	r3, #0
    16ee:	d100      	bne.n	16f2 <wc_AesCbcDecrypt+0x3e>
    16f0:	e288      	b.n	1c04 <wc_AesCbcDecrypt+0x550>
            Td[0][GETBYTE(t0, 3)] ^
    16f2:	4cce      	ldr	r4, [pc, #824]	; (1a2c <wc_AesCbcDecrypt+0x378>)
        ((word32)Td4[GETBYTE(t1, 0)]) ^
    16f4:	4bce      	ldr	r3, [pc, #824]	; (1a30 <wc_AesCbcDecrypt+0x37c>)
    16f6:	3328      	adds	r3, #40	; 0x28
    16f8:	9309      	str	r3, [sp, #36]	; 0x24
    16fa:	9102      	str	r1, [sp, #8]
    16fc:	e24d      	b.n	1b9a <wc_AesCbcDecrypt+0x4e6>
    XMEMCPY(&s0, inBlock,                  sizeof(s0));
    16fe:	2204      	movs	r2, #4
    1700:	9905      	ldr	r1, [sp, #20]
    1702:	a80a      	add	r0, sp, #40	; 0x28
    1704:	4bcb      	ldr	r3, [pc, #812]	; (1a34 <wc_AesCbcDecrypt+0x380>)
    1706:	4798      	blx	r3
    XMEMCPY(&s1, inBlock + sizeof(s0),     sizeof(s1));
    1708:	9e01      	ldr	r6, [sp, #4]
    170a:	0031      	movs	r1, r6
    170c:	310d      	adds	r1, #13
    170e:	31ff      	adds	r1, #255	; 0xff
    1710:	2204      	movs	r2, #4
    1712:	a80b      	add	r0, sp, #44	; 0x2c
    1714:	4bc7      	ldr	r3, [pc, #796]	; (1a34 <wc_AesCbcDecrypt+0x380>)
    1716:	4798      	blx	r3
    XMEMCPY(&s2, inBlock + 2 * sizeof(s0), sizeof(s2));
    1718:	0031      	movs	r1, r6
    171a:	3111      	adds	r1, #17
    171c:	31ff      	adds	r1, #255	; 0xff
    171e:	2204      	movs	r2, #4
    1720:	a80c      	add	r0, sp, #48	; 0x30
    1722:	4bc4      	ldr	r3, [pc, #784]	; (1a34 <wc_AesCbcDecrypt+0x380>)
    1724:	4798      	blx	r3
    XMEMCPY(&s3, inBlock + 3 * sizeof(s0), sizeof(s3));
    1726:	9601      	str	r6, [sp, #4]
    1728:	0031      	movs	r1, r6
    172a:	3115      	adds	r1, #21
    172c:	31ff      	adds	r1, #255	; 0xff
    172e:	2204      	movs	r2, #4
    1730:	a80d      	add	r0, sp, #52	; 0x34
    1732:	4bc0      	ldr	r3, [pc, #768]	; (1a34 <wc_AesCbcDecrypt+0x380>)
    1734:	4798      	blx	r3
    s0 = ByteReverseWord32(s0);
    1736:	980a      	ldr	r0, [sp, #40]	; 0x28
    s1 = ByteReverseWord32(s1);
    1738:	990b      	ldr	r1, [sp, #44]	; 0x2c
    s2 = ByteReverseWord32(s2);
    173a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
    173c:	0a06      	lsrs	r6, r0, #8
    173e:	4bbe      	ldr	r3, [pc, #760]	; (1a38 <wc_AesCbcDecrypt+0x384>)
    1740:	401e      	ands	r6, r3
    1742:	0200      	lsls	r0, r0, #8
    1744:	4fbd      	ldr	r7, [pc, #756]	; (1a3c <wc_AesCbcDecrypt+0x388>)
    1746:	46b9      	mov	r9, r7
    1748:	4038      	ands	r0, r7
    174a:	4306      	orrs	r6, r0
        return (x << y) | (x >> (sizeof(y) * 8 - y));
    174c:	2710      	movs	r7, #16
    174e:	41fe      	rors	r6, r7
    s0 ^= rk[0];
    1750:	9801      	ldr	r0, [sp, #4]
    1752:	6800      	ldr	r0, [r0, #0]
    1754:	4046      	eors	r6, r0
    1756:	9600      	str	r6, [sp, #0]
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
    1758:	0a08      	lsrs	r0, r1, #8
    175a:	4018      	ands	r0, r3
    175c:	0209      	lsls	r1, r1, #8
    175e:	464e      	mov	r6, r9
    1760:	4031      	ands	r1, r6
    1762:	4308      	orrs	r0, r1
        return (x << y) | (x >> (sizeof(y) * 8 - y));
    1764:	41f8      	rors	r0, r7
    s1 ^= rk[1];
    1766:	9901      	ldr	r1, [sp, #4]
    1768:	684e      	ldr	r6, [r1, #4]
    176a:	4070      	eors	r0, r6
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
    176c:	0a11      	lsrs	r1, r2, #8
    176e:	4019      	ands	r1, r3
    1770:	0212      	lsls	r2, r2, #8
    1772:	464e      	mov	r6, r9
    1774:	4032      	ands	r2, r6
    1776:	4311      	orrs	r1, r2
        return (x << y) | (x >> (sizeof(y) * 8 - y));
    1778:	41f9      	rors	r1, r7
    s2 ^= rk[2];
    177a:	9a01      	ldr	r2, [sp, #4]
    177c:	6896      	ldr	r6, [r2, #8]
    177e:	4071      	eors	r1, r6
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
    1780:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    1782:	0a32      	lsrs	r2, r6, #8
    1784:	401a      	ands	r2, r3
    1786:	0233      	lsls	r3, r6, #8
    1788:	464e      	mov	r6, r9
    178a:	4033      	ands	r3, r6
    178c:	431a      	orrs	r2, r3
        return (x << y) | (x >> (sizeof(y) * 8 - y));
    178e:	41fa      	rors	r2, r7
    s3 ^= rk[3];
    1790:	9b01      	ldr	r3, [sp, #4]
    1792:	68db      	ldr	r3, [r3, #12]
    1794:	9303      	str	r3, [sp, #12]
    1796:	4053      	eors	r3, r2
    1798:	4698      	mov	r8, r3
    179a:	2204      	movs	r2, #4
    179c:	9e00      	ldr	r6, [sp, #0]
    {
    179e:	2320      	movs	r3, #32
    17a0:	3b01      	subs	r3, #1
        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
    17a2:	2b00      	cmp	r3, #0
    17a4:	d1fc      	bne.n	17a0 <wc_AesCbcDecrypt+0xec>
    17a6:	3a01      	subs	r2, #1
    for (i = 0; i < 4; i++) {
    17a8:	2a00      	cmp	r2, #0
    17aa:	d1f8      	bne.n	179e <wc_AesCbcDecrypt+0xea>
    17ac:	9600      	str	r6, [sp, #0]
    const word32* rk = aes->key;
    17ae:	9a01      	ldr	r2, [sp, #4]
    17b0:	4693      	mov	fp, r2
    17b2:	016d      	lsls	r5, r5, #5
    17b4:	445d      	add	r5, fp
    17b6:	9508      	str	r5, [sp, #32]
            Td[0][GETBYTE(s0, 3)] ^
    17b8:	4b9c      	ldr	r3, [pc, #624]	; (1a2c <wc_AesCbcDecrypt+0x378>)
    17ba:	469a      	mov	sl, r3
            Td[3][GETBYTE(s1, 0)] ^
    17bc:	27ff      	movs	r7, #255	; 0xff
    17be:	4643      	mov	r3, r8
    17c0:	9503      	str	r5, [sp, #12]
            Td[0][GETBYTE(s0, 3)] ^
    17c2:	9e00      	ldr	r6, [sp, #0]
    17c4:	0e32      	lsrs	r2, r6, #24
    17c6:	0092      	lsls	r2, r2, #2
    17c8:	4452      	add	r2, sl
            Td[3][GETBYTE(s1, 0)] ^
    17ca:	003d      	movs	r5, r7
    17cc:	4005      	ands	r5, r0
    17ce:	26c0      	movs	r6, #192	; 0xc0
    17d0:	00b6      	lsls	r6, r6, #2
    17d2:	46b4      	mov	ip, r6
    17d4:	4465      	add	r5, ip
    17d6:	00ad      	lsls	r5, r5, #2
    17d8:	4455      	add	r5, sl
        t0 =
    17da:	6a92      	ldr	r2, [r2, #40]	; 0x28
    17dc:	6aad      	ldr	r5, [r5, #40]	; 0x28
    17de:	406a      	eors	r2, r5
    17e0:	465d      	mov	r5, fp
    17e2:	692d      	ldr	r5, [r5, #16]
    17e4:	406a      	eors	r2, r5
            Td[1][GETBYTE(s3, 2)] ^
    17e6:	0c1d      	lsrs	r5, r3, #16
    17e8:	403d      	ands	r5, r7
    17ea:	3501      	adds	r5, #1
    17ec:	35ff      	adds	r5, #255	; 0xff
    17ee:	00ad      	lsls	r5, r5, #2
    17f0:	4455      	add	r5, sl
        t0 =
    17f2:	6aad      	ldr	r5, [r5, #40]	; 0x28
    17f4:	406a      	eors	r2, r5
            Td[2][GETBYTE(s2, 1)] ^
    17f6:	0a0d      	lsrs	r5, r1, #8
    17f8:	403d      	ands	r5, r7
    17fa:	3e01      	subs	r6, #1
    17fc:	3eff      	subs	r6, #255	; 0xff
    17fe:	46b4      	mov	ip, r6
    1800:	4465      	add	r5, ip
    1802:	00ad      	lsls	r5, r5, #2
    1804:	4455      	add	r5, sl
        t0 =
    1806:	6aad      	ldr	r5, [r5, #40]	; 0x28
    1808:	406a      	eors	r2, r5
            Td[0][GETBYTE(s1, 3)] ^
    180a:	0e05      	lsrs	r5, r0, #24
    180c:	00ad      	lsls	r5, r5, #2
    180e:	4455      	add	r5, sl
    1810:	46ac      	mov	ip, r5
            Td[3][GETBYTE(s2, 0)] ^
    1812:	003d      	movs	r5, r7
    1814:	400d      	ands	r5, r1
    1816:	3601      	adds	r6, #1
    1818:	36ff      	adds	r6, #255	; 0xff
    181a:	46b1      	mov	r9, r6
    181c:	444d      	add	r5, r9
    181e:	00ad      	lsls	r5, r5, #2
    1820:	4455      	add	r5, sl
        t1 =
    1822:	4666      	mov	r6, ip
    1824:	6ab6      	ldr	r6, [r6, #40]	; 0x28
    1826:	6aad      	ldr	r5, [r5, #40]	; 0x28
    1828:	4075      	eors	r5, r6
    182a:	465e      	mov	r6, fp
    182c:	6976      	ldr	r6, [r6, #20]
    182e:	406e      	eors	r6, r5
    1830:	46b4      	mov	ip, r6
            Td[1][GETBYTE(s0, 2)] ^
    1832:	9e00      	ldr	r6, [sp, #0]
    1834:	0c35      	lsrs	r5, r6, #16
    1836:	403d      	ands	r5, r7
    1838:	3501      	adds	r5, #1
    183a:	35ff      	adds	r5, #255	; 0xff
    183c:	00ad      	lsls	r5, r5, #2
    183e:	4455      	add	r5, sl
        t1 =
    1840:	6aad      	ldr	r5, [r5, #40]	; 0x28
    1842:	4666      	mov	r6, ip
    1844:	406e      	eors	r6, r5
    1846:	46b4      	mov	ip, r6
            Td[2][GETBYTE(s3, 1)] ^
    1848:	0a1d      	lsrs	r5, r3, #8
    184a:	403d      	ands	r5, r7
    184c:	2680      	movs	r6, #128	; 0x80
    184e:	00b6      	lsls	r6, r6, #2
    1850:	46b1      	mov	r9, r6
    1852:	444d      	add	r5, r9
    1854:	00ad      	lsls	r5, r5, #2
    1856:	4455      	add	r5, sl
        t1 =
    1858:	6aad      	ldr	r5, [r5, #40]	; 0x28
    185a:	4666      	mov	r6, ip
    185c:	406e      	eors	r6, r5
    185e:	46b4      	mov	ip, r6
            Td[0][GETBYTE(s2, 3)] ^
    1860:	0e0d      	lsrs	r5, r1, #24
    1862:	00ad      	lsls	r5, r5, #2
    1864:	4455      	add	r5, sl
    1866:	46a9      	mov	r9, r5
            Td[3][GETBYTE(s3, 0)] ^
    1868:	003d      	movs	r5, r7
    186a:	401d      	ands	r5, r3
    186c:	26c0      	movs	r6, #192	; 0xc0
    186e:	00b6      	lsls	r6, r6, #2
    1870:	46b0      	mov	r8, r6
    1872:	4445      	add	r5, r8
    1874:	00ad      	lsls	r5, r5, #2
    1876:	4455      	add	r5, sl
        t2 =
    1878:	464e      	mov	r6, r9
    187a:	6ab6      	ldr	r6, [r6, #40]	; 0x28
    187c:	6aad      	ldr	r5, [r5, #40]	; 0x28
    187e:	4075      	eors	r5, r6
    1880:	465e      	mov	r6, fp
    1882:	69b6      	ldr	r6, [r6, #24]
    1884:	406e      	eors	r6, r5
            Td[1][GETBYTE(s1, 2)] ^
    1886:	0c05      	lsrs	r5, r0, #16
    1888:	403d      	ands	r5, r7
    188a:	3501      	adds	r5, #1
    188c:	35ff      	adds	r5, #255	; 0xff
    188e:	00ad      	lsls	r5, r5, #2
    1890:	4455      	add	r5, sl
        t2 =
    1892:	6aad      	ldr	r5, [r5, #40]	; 0x28
    1894:	406e      	eors	r6, r5
    1896:	46b1      	mov	r9, r6
            Td[2][GETBYTE(s0, 1)] ^
    1898:	9e00      	ldr	r6, [sp, #0]
    189a:	0a35      	lsrs	r5, r6, #8
    189c:	403d      	ands	r5, r7
    189e:	2680      	movs	r6, #128	; 0x80
    18a0:	00b6      	lsls	r6, r6, #2
    18a2:	46b0      	mov	r8, r6
    18a4:	4445      	add	r5, r8
    18a6:	00ad      	lsls	r5, r5, #2
    18a8:	4455      	add	r5, sl
        t2 =
    18aa:	6aad      	ldr	r5, [r5, #40]	; 0x28
    18ac:	464e      	mov	r6, r9
    18ae:	4075      	eors	r5, r6
            Td[0][GETBYTE(s3, 3)] ^
    18b0:	0e1b      	lsrs	r3, r3, #24
    18b2:	009b      	lsls	r3, r3, #2
    18b4:	4453      	add	r3, sl
    18b6:	4699      	mov	r9, r3
            Td[3][GETBYTE(s0, 0)] ^
    18b8:	9e00      	ldr	r6, [sp, #0]
    18ba:	403e      	ands	r6, r7
    18bc:	23c0      	movs	r3, #192	; 0xc0
    18be:	009b      	lsls	r3, r3, #2
    18c0:	18f3      	adds	r3, r6, r3
    18c2:	009b      	lsls	r3, r3, #2
    18c4:	4453      	add	r3, sl
        t3 =
    18c6:	464e      	mov	r6, r9
    18c8:	6ab6      	ldr	r6, [r6, #40]	; 0x28
    18ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    18cc:	405e      	eors	r6, r3
    18ce:	465b      	mov	r3, fp
    18d0:	69db      	ldr	r3, [r3, #28]
    18d2:	405e      	eors	r6, r3
            Td[1][GETBYTE(s2, 2)] ^
    18d4:	0c0b      	lsrs	r3, r1, #16
    18d6:	403b      	ands	r3, r7
    18d8:	3301      	adds	r3, #1
    18da:	33ff      	adds	r3, #255	; 0xff
    18dc:	009b      	lsls	r3, r3, #2
    18de:	4453      	add	r3, sl
        t3 =
    18e0:	6a99      	ldr	r1, [r3, #40]	; 0x28
    18e2:	4071      	eors	r1, r6
            Td[2][GETBYTE(s1, 1)] ^
    18e4:	0a03      	lsrs	r3, r0, #8
    18e6:	403b      	ands	r3, r7
    18e8:	4443      	add	r3, r8
    18ea:	009b      	lsls	r3, r3, #2
    18ec:	4453      	add	r3, sl
        t3 =
    18ee:	6a98      	ldr	r0, [r3, #40]	; 0x28
    18f0:	4048      	eors	r0, r1
        rk += 8;
    18f2:	2320      	movs	r3, #32
    18f4:	4698      	mov	r8, r3
    18f6:	44c3      	add	fp, r8
        if (--r == 0) {
    18f8:	9b03      	ldr	r3, [sp, #12]
    18fa:	459b      	cmp	fp, r3
    18fc:	d100      	bne.n	1900 <wc_AesCbcDecrypt+0x24c>
    18fe:	e09f      	b.n	1a40 <wc_AesCbcDecrypt+0x38c>
            Td[0][GETBYTE(t0, 3)] ^
    1900:	0e11      	lsrs	r1, r2, #24
    1902:	0089      	lsls	r1, r1, #2
    1904:	1861      	adds	r1, r4, r1
            Td[3][GETBYTE(t1, 0)] ^
    1906:	4663      	mov	r3, ip
    1908:	403b      	ands	r3, r7
    190a:	26c0      	movs	r6, #192	; 0xc0
    190c:	00b6      	lsls	r6, r6, #2
    190e:	46b0      	mov	r8, r6
    1910:	4443      	add	r3, r8
    1912:	009b      	lsls	r3, r3, #2
    1914:	18e3      	adds	r3, r4, r3
    1916:	6a8e      	ldr	r6, [r1, #40]	; 0x28
    1918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    191a:	405e      	eors	r6, r3
    191c:	465b      	mov	r3, fp
    191e:	681b      	ldr	r3, [r3, #0]
    1920:	405e      	eors	r6, r3
            Td[1][GETBYTE(t3, 2)] ^
    1922:	0c03      	lsrs	r3, r0, #16
    1924:	403b      	ands	r3, r7
    1926:	3301      	adds	r3, #1
    1928:	33ff      	adds	r3, #255	; 0xff
    192a:	009b      	lsls	r3, r3, #2
    192c:	18e3      	adds	r3, r4, r3
            Td[3][GETBYTE(t1, 0)] ^
    192e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1930:	405e      	eors	r6, r3
            Td[2][GETBYTE(t2, 1)] ^
    1932:	0a2b      	lsrs	r3, r5, #8
    1934:	403b      	ands	r3, r7
    1936:	2180      	movs	r1, #128	; 0x80
    1938:	0089      	lsls	r1, r1, #2
    193a:	4688      	mov	r8, r1
    193c:	4443      	add	r3, r8
    193e:	009b      	lsls	r3, r3, #2
    1940:	18e3      	adds	r3, r4, r3
            Td[3][GETBYTE(t1, 0)] ^
    1942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1944:	405e      	eors	r6, r3
    1946:	9600      	str	r6, [sp, #0]
            Td[0][GETBYTE(t3, 3)] ^
    1948:	0e03      	lsrs	r3, r0, #24
    194a:	009b      	lsls	r3, r3, #2
    194c:	18e3      	adds	r3, r4, r3
            Td[3][GETBYTE(t0, 0)] ^
    194e:	0039      	movs	r1, r7
    1950:	4011      	ands	r1, r2
    1952:	26c0      	movs	r6, #192	; 0xc0
    1954:	00b6      	lsls	r6, r6, #2
    1956:	46b0      	mov	r8, r6
    1958:	4441      	add	r1, r8
    195a:	0089      	lsls	r1, r1, #2
    195c:	1861      	adds	r1, r4, r1
    195e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1960:	6a89      	ldr	r1, [r1, #40]	; 0x28
    1962:	404b      	eors	r3, r1
    1964:	4659      	mov	r1, fp
    1966:	68c9      	ldr	r1, [r1, #12]
    1968:	404b      	eors	r3, r1
            Td[1][GETBYTE(t2, 2)] ^
    196a:	0c29      	lsrs	r1, r5, #16
    196c:	4039      	ands	r1, r7
    196e:	3101      	adds	r1, #1
    1970:	31ff      	adds	r1, #255	; 0xff
    1972:	0089      	lsls	r1, r1, #2
    1974:	1861      	adds	r1, r4, r1
            Td[3][GETBYTE(t0, 0)] ^
    1976:	6a89      	ldr	r1, [r1, #40]	; 0x28
    1978:	404b      	eors	r3, r1
            Td[2][GETBYTE(t1, 1)] ^
    197a:	4661      	mov	r1, ip
    197c:	0a09      	lsrs	r1, r1, #8
    197e:	4039      	ands	r1, r7
    1980:	3e01      	subs	r6, #1
    1982:	3eff      	subs	r6, #255	; 0xff
    1984:	46b0      	mov	r8, r6
    1986:	4441      	add	r1, r8
    1988:	0089      	lsls	r1, r1, #2
    198a:	1861      	adds	r1, r4, r1
            Td[3][GETBYTE(t0, 0)] ^
    198c:	6a89      	ldr	r1, [r1, #40]	; 0x28
    198e:	404b      	eors	r3, r1
            Td[0][GETBYTE(t2, 3)] ^
    1990:	0e29      	lsrs	r1, r5, #24
    1992:	0089      	lsls	r1, r1, #2
    1994:	4689      	mov	r9, r1
    1996:	44a1      	add	r9, r4
            Td[3][GETBYTE(t3, 0)] ^
    1998:	0039      	movs	r1, r7
    199a:	4001      	ands	r1, r0
    199c:	3601      	adds	r6, #1
    199e:	36ff      	adds	r6, #255	; 0xff
    19a0:	46b0      	mov	r8, r6
    19a2:	4441      	add	r1, r8
    19a4:	0089      	lsls	r1, r1, #2
    19a6:	1861      	adds	r1, r4, r1
    19a8:	464e      	mov	r6, r9
    19aa:	6ab6      	ldr	r6, [r6, #40]	; 0x28
    19ac:	6a89      	ldr	r1, [r1, #40]	; 0x28
    19ae:	4071      	eors	r1, r6
    19b0:	465e      	mov	r6, fp
    19b2:	68b6      	ldr	r6, [r6, #8]
    19b4:	404e      	eors	r6, r1
            Td[1][GETBYTE(t1, 2)] ^
    19b6:	4661      	mov	r1, ip
    19b8:	0c09      	lsrs	r1, r1, #16
    19ba:	4039      	ands	r1, r7
    19bc:	3101      	adds	r1, #1
    19be:	31ff      	adds	r1, #255	; 0xff
    19c0:	0089      	lsls	r1, r1, #2
    19c2:	1861      	adds	r1, r4, r1
            Td[3][GETBYTE(t3, 0)] ^
    19c4:	6a89      	ldr	r1, [r1, #40]	; 0x28
    19c6:	404e      	eors	r6, r1
    19c8:	46b1      	mov	r9, r6
            Td[2][GETBYTE(t0, 1)] ^
    19ca:	0a11      	lsrs	r1, r2, #8
    19cc:	4039      	ands	r1, r7
    19ce:	2680      	movs	r6, #128	; 0x80
    19d0:	00b6      	lsls	r6, r6, #2
    19d2:	46b0      	mov	r8, r6
    19d4:	4441      	add	r1, r8
    19d6:	0089      	lsls	r1, r1, #2
    19d8:	1861      	adds	r1, r4, r1
            Td[3][GETBYTE(t3, 0)] ^
    19da:	6a89      	ldr	r1, [r1, #40]	; 0x28
    19dc:	464e      	mov	r6, r9
    19de:	4071      	eors	r1, r6
            Td[0][GETBYTE(t1, 3)] ^
    19e0:	4666      	mov	r6, ip
    19e2:	0e36      	lsrs	r6, r6, #24
    19e4:	00b6      	lsls	r6, r6, #2
    19e6:	46b4      	mov	ip, r6
    19e8:	44a4      	add	ip, r4
            Td[3][GETBYTE(t2, 0)] ^
    19ea:	403d      	ands	r5, r7
    19ec:	26c0      	movs	r6, #192	; 0xc0
    19ee:	00b6      	lsls	r6, r6, #2
    19f0:	46b0      	mov	r8, r6
    19f2:	4445      	add	r5, r8
    19f4:	00ad      	lsls	r5, r5, #2
    19f6:	1965      	adds	r5, r4, r5
    19f8:	4666      	mov	r6, ip
    19fa:	6ab6      	ldr	r6, [r6, #40]	; 0x28
    19fc:	6aad      	ldr	r5, [r5, #40]	; 0x28
    19fe:	4075      	eors	r5, r6
    1a00:	465e      	mov	r6, fp
    1a02:	6876      	ldr	r6, [r6, #4]
    1a04:	4075      	eors	r5, r6
            Td[1][GETBYTE(t0, 2)] ^
    1a06:	0c12      	lsrs	r2, r2, #16
    1a08:	403a      	ands	r2, r7
    1a0a:	3201      	adds	r2, #1
    1a0c:	32ff      	adds	r2, #255	; 0xff
    1a0e:	0092      	lsls	r2, r2, #2
    1a10:	18a2      	adds	r2, r4, r2
            Td[3][GETBYTE(t2, 0)] ^
    1a12:	6a92      	ldr	r2, [r2, #40]	; 0x28
    1a14:	4055      	eors	r5, r2
            Td[2][GETBYTE(t3, 1)] ^
    1a16:	0a02      	lsrs	r2, r0, #8
    1a18:	403a      	ands	r2, r7
    1a1a:	2080      	movs	r0, #128	; 0x80
    1a1c:	0080      	lsls	r0, r0, #2
    1a1e:	4684      	mov	ip, r0
    1a20:	4462      	add	r2, ip
    1a22:	0092      	lsls	r2, r2, #2
    1a24:	18a2      	adds	r2, r4, r2
            Td[3][GETBYTE(t2, 0)] ^
    1a26:	6a90      	ldr	r0, [r2, #40]	; 0x28
    1a28:	4068      	eors	r0, r5
    1a2a:	e6ca      	b.n	17c2 <wc_AesCbcDecrypt+0x10e>
    1a2c:	00002e78 	.word	0x00002e78
    1a30:	00003e78 	.word	0x00003e78
    1a34:	00001c85 	.word	0x00001c85
    1a38:	00ff00ff 	.word	0x00ff00ff
    1a3c:	ff00ff00 	.word	0xff00ff00
    1a40:	4692      	mov	sl, r2
    1a42:	0003      	movs	r3, r0
        ((word32)Td4[GETBYTE(t1, 0)]) ^
    1a44:	20ff      	movs	r0, #255	; 0xff
    1a46:	4661      	mov	r1, ip
    1a48:	4001      	ands	r1, r0
    1a4a:	9f09      	ldr	r7, [sp, #36]	; 0x24
    1a4c:	5c7e      	ldrb	r6, [r7, r1]
    1a4e:	9a08      	ldr	r2, [sp, #32]
    1a50:	6811      	ldr	r1, [r2, #0]
    1a52:	404e      	eors	r6, r1
        ((word32)Td4[GETBYTE(t0, 3)] << 24) ^
    1a54:	4651      	mov	r1, sl
    1a56:	0e09      	lsrs	r1, r1, #24
    1a58:	5c79      	ldrb	r1, [r7, r1]
    1a5a:	0609      	lsls	r1, r1, #24
        ((word32)Td4[GETBYTE(t1, 0)]) ^
    1a5c:	4071      	eors	r1, r6
        ((word32)Td4[GETBYTE(t3, 2)] << 16) ^
    1a5e:	0c1e      	lsrs	r6, r3, #16
    1a60:	4006      	ands	r6, r0
    1a62:	5dbe      	ldrb	r6, [r7, r6]
    1a64:	0436      	lsls	r6, r6, #16
        ((word32)Td4[GETBYTE(t1, 0)]) ^
    1a66:	4071      	eors	r1, r6
        ((word32)Td4[GETBYTE(t2, 1)] <<  8) ^
    1a68:	0a2e      	lsrs	r6, r5, #8
    1a6a:	4006      	ands	r6, r0
    1a6c:	5dbe      	ldrb	r6, [r7, r6]
    1a6e:	0236      	lsls	r6, r6, #8
        ((word32)Td4[GETBYTE(t1, 0)]) ^
    1a70:	4071      	eors	r1, r6
    1a72:	468b      	mov	fp, r1
        ((word32)Td4[GETBYTE(t2, 0)]) ^
    1a74:	0006      	movs	r6, r0
    1a76:	402e      	ands	r6, r5
    1a78:	5dbe      	ldrb	r6, [r7, r6]
    1a7a:	0011      	movs	r1, r2
    1a7c:	6852      	ldr	r2, [r2, #4]
    1a7e:	4072      	eors	r2, r6
    1a80:	4691      	mov	r9, r2
        ((word32)Td4[GETBYTE(t1, 3)] << 24) ^
    1a82:	4662      	mov	r2, ip
    1a84:	0e16      	lsrs	r6, r2, #24
    1a86:	5dbe      	ldrb	r6, [r7, r6]
    1a88:	0636      	lsls	r6, r6, #24
        ((word32)Td4[GETBYTE(t2, 0)]) ^
    1a8a:	464a      	mov	r2, r9
    1a8c:	4056      	eors	r6, r2
        ((word32)Td4[GETBYTE(t0, 2)] << 16) ^
    1a8e:	4652      	mov	r2, sl
    1a90:	0c12      	lsrs	r2, r2, #16
    1a92:	4002      	ands	r2, r0
    1a94:	5cba      	ldrb	r2, [r7, r2]
    1a96:	0412      	lsls	r2, r2, #16
        ((word32)Td4[GETBYTE(t2, 0)]) ^
    1a98:	4056      	eors	r6, r2
        ((word32)Td4[GETBYTE(t3, 1)] <<  8) ^
    1a9a:	0a1a      	lsrs	r2, r3, #8
    1a9c:	4002      	ands	r2, r0
    1a9e:	5cba      	ldrb	r2, [r7, r2]
    1aa0:	0212      	lsls	r2, r2, #8
        ((word32)Td4[GETBYTE(t2, 0)]) ^
    1aa2:	4072      	eors	r2, r6
    1aa4:	4691      	mov	r9, r2
        ((word32)Td4[GETBYTE(t3, 0)]) ^
    1aa6:	0006      	movs	r6, r0
    1aa8:	401e      	ands	r6, r3
    1aaa:	5dbe      	ldrb	r6, [r7, r6]
    1aac:	688a      	ldr	r2, [r1, #8]
    1aae:	9200      	str	r2, [sp, #0]
    1ab0:	4072      	eors	r2, r6
        ((word32)Td4[GETBYTE(t2, 3)] << 24) ^
    1ab2:	0e2e      	lsrs	r6, r5, #24
    1ab4:	5dbe      	ldrb	r6, [r7, r6]
    1ab6:	0636      	lsls	r6, r6, #24
        ((word32)Td4[GETBYTE(t3, 0)]) ^
    1ab8:	4056      	eors	r6, r2
        ((word32)Td4[GETBYTE(t1, 2)] << 16) ^
    1aba:	4662      	mov	r2, ip
    1abc:	0c12      	lsrs	r2, r2, #16
    1abe:	4002      	ands	r2, r0
    1ac0:	5cba      	ldrb	r2, [r7, r2]
    1ac2:	0412      	lsls	r2, r2, #16
        ((word32)Td4[GETBYTE(t3, 0)]) ^
    1ac4:	4072      	eors	r2, r6
    1ac6:	4690      	mov	r8, r2
        ((word32)Td4[GETBYTE(t0, 1)] <<  8) ^
    1ac8:	4652      	mov	r2, sl
    1aca:	0a16      	lsrs	r6, r2, #8
    1acc:	4006      	ands	r6, r0
    1ace:	5dbe      	ldrb	r6, [r7, r6]
    1ad0:	0236      	lsls	r6, r6, #8
        ((word32)Td4[GETBYTE(t3, 0)]) ^
    1ad2:	4642      	mov	r2, r8
    1ad4:	4056      	eors	r6, r2
        ((word32)Td4[GETBYTE(t0, 0)]) ^
    1ad6:	4652      	mov	r2, sl
    1ad8:	4002      	ands	r2, r0
    1ada:	5cba      	ldrb	r2, [r7, r2]
    1adc:	68c9      	ldr	r1, [r1, #12]
    1ade:	404a      	eors	r2, r1
        ((word32)Td4[GETBYTE(t3, 3)] << 24) ^
    1ae0:	0e1b      	lsrs	r3, r3, #24
    1ae2:	5cfb      	ldrb	r3, [r7, r3]
    1ae4:	061b      	lsls	r3, r3, #24
        ((word32)Td4[GETBYTE(t0, 0)]) ^
    1ae6:	405a      	eors	r2, r3
        ((word32)Td4[GETBYTE(t2, 2)] << 16) ^
    1ae8:	0c2d      	lsrs	r5, r5, #16
    1aea:	4005      	ands	r5, r0
    1aec:	5d7b      	ldrb	r3, [r7, r5]
    1aee:	041b      	lsls	r3, r3, #16
        ((word32)Td4[GETBYTE(t0, 0)]) ^
    1af0:	405a      	eors	r2, r3
        ((word32)Td4[GETBYTE(t1, 1)] <<  8) ^
    1af2:	4663      	mov	r3, ip
    1af4:	0a1b      	lsrs	r3, r3, #8
    1af6:	4018      	ands	r0, r3
    1af8:	5c3b      	ldrb	r3, [r7, r0]
    1afa:	021b      	lsls	r3, r3, #8
        ((word32)Td4[GETBYTE(t0, 0)]) ^
    1afc:	405a      	eors	r2, r3
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
    1afe:	465b      	mov	r3, fp
    1b00:	0a18      	lsrs	r0, r3, #8
    1b02:	4d41      	ldr	r5, [pc, #260]	; (1c08 <wc_AesCbcDecrypt+0x554>)
    1b04:	4028      	ands	r0, r5
    1b06:	021b      	lsls	r3, r3, #8
    1b08:	4940      	ldr	r1, [pc, #256]	; (1c0c <wc_AesCbcDecrypt+0x558>)
    1b0a:	400b      	ands	r3, r1
    1b0c:	4303      	orrs	r3, r0
        return (x << y) | (x >> (sizeof(y) * 8 - y));
    1b0e:	2010      	movs	r0, #16
    1b10:	41c3      	rors	r3, r0
    s0 = ByteReverseWord32(s0);
    1b12:	930a      	str	r3, [sp, #40]	; 0x28
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
    1b14:	464b      	mov	r3, r9
    1b16:	0a1b      	lsrs	r3, r3, #8
    1b18:	402b      	ands	r3, r5
    1b1a:	464f      	mov	r7, r9
    1b1c:	023f      	lsls	r7, r7, #8
    1b1e:	400f      	ands	r7, r1
    1b20:	433b      	orrs	r3, r7
        return (x << y) | (x >> (sizeof(y) * 8 - y));
    1b22:	41c3      	rors	r3, r0
    s1 = ByteReverseWord32(s1);
    1b24:	930b      	str	r3, [sp, #44]	; 0x2c
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
    1b26:	0a33      	lsrs	r3, r6, #8
    1b28:	402b      	ands	r3, r5
    1b2a:	0236      	lsls	r6, r6, #8
    1b2c:	400e      	ands	r6, r1
    1b2e:	4333      	orrs	r3, r6
        return (x << y) | (x >> (sizeof(y) * 8 - y));
    1b30:	41c3      	rors	r3, r0
    s2 = ByteReverseWord32(s2);
    1b32:	930c      	str	r3, [sp, #48]	; 0x30
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
    1b34:	0a13      	lsrs	r3, r2, #8
    1b36:	401d      	ands	r5, r3
    1b38:	0212      	lsls	r2, r2, #8
    1b3a:	4011      	ands	r1, r2
    1b3c:	4329      	orrs	r1, r5
        return (x << y) | (x >> (sizeof(y) * 8 - y));
    1b3e:	41c1      	rors	r1, r0
    s3 = ByteReverseWord32(s3);
    1b40:	910d      	str	r1, [sp, #52]	; 0x34
    XMEMCPY(outBlock,                  &s0, sizeof(s0));
    1b42:	2204      	movs	r2, #4
    1b44:	a90a      	add	r1, sp, #40	; 0x28
    1b46:	9e02      	ldr	r6, [sp, #8]
    1b48:	0030      	movs	r0, r6
    1b4a:	4d31      	ldr	r5, [pc, #196]	; (1c10 <wc_AesCbcDecrypt+0x55c>)
    1b4c:	47a8      	blx	r5
    XMEMCPY(outBlock + sizeof(s0),     &s1, sizeof(s1));
    1b4e:	1d30      	adds	r0, r6, #4
    1b50:	2204      	movs	r2, #4
    1b52:	a90b      	add	r1, sp, #44	; 0x2c
    1b54:	47a8      	blx	r5
    XMEMCPY(outBlock + 2 * sizeof(s0), &s2, sizeof(s2));
    1b56:	0030      	movs	r0, r6
    1b58:	3008      	adds	r0, #8
    1b5a:	2204      	movs	r2, #4
    1b5c:	a90c      	add	r1, sp, #48	; 0x30
    1b5e:	47a8      	blx	r5
    XMEMCPY(outBlock + 3 * sizeof(s0), &s3, sizeof(s3));
    1b60:	0030      	movs	r0, r6
    1b62:	300c      	adds	r0, #12
    1b64:	2204      	movs	r2, #4
    1b66:	a90d      	add	r1, sp, #52	; 0x34
    1b68:	47a8      	blx	r5
    1b6a:	e027      	b.n	1bbc <wc_AesCbcDecrypt+0x508>
    if (((wolfssl_word)buf | (wolfssl_word)mask | count) % WOLFSSL_WORD_SIZE == 0)
    1b6c:	9b07      	ldr	r3, [sp, #28]
    1b6e:	9902      	ldr	r1, [sp, #8]
        for (i = 0; i < count; i++) b[i] ^= m[i];
    1b70:	5cca      	ldrb	r2, [r1, r3]
    1b72:	5cc5      	ldrb	r5, [r0, r3]
    1b74:	406a      	eors	r2, r5
    1b76:	54ca      	strb	r2, [r1, r3]
    1b78:	3301      	adds	r3, #1
    1b7a:	2b10      	cmp	r3, #16
    1b7c:	d1f8      	bne.n	1b70 <wc_AesCbcDecrypt+0x4bc>
            XMEMCPY(aes->tmp, in, AES_BLOCK_SIZE);
            wc_AesDecrypt(aes, (byte*)aes->tmp, out);
            xorbuf(out, (byte*)aes->reg, AES_BLOCK_SIZE);
            /* store iv for next call */
            XMEMCPY(aes->reg, aes->tmp, AES_BLOCK_SIZE);
    1b7e:	2210      	movs	r2, #16
    1b80:	9905      	ldr	r1, [sp, #20]
    1b82:	4b23      	ldr	r3, [pc, #140]	; (1c10 <wc_AesCbcDecrypt+0x55c>)
    1b84:	4798      	blx	r3

            out += AES_BLOCK_SIZE;
    1b86:	9b02      	ldr	r3, [sp, #8]
    1b88:	3310      	adds	r3, #16
    1b8a:	9302      	str	r3, [sp, #8]
            in  += AES_BLOCK_SIZE;
    1b8c:	9b04      	ldr	r3, [sp, #16]
    1b8e:	3310      	adds	r3, #16
    1b90:	9304      	str	r3, [sp, #16]
        while (blocks--) {
    1b92:	9b06      	ldr	r3, [sp, #24]
    1b94:	1e5a      	subs	r2, r3, #1
    1b96:	9206      	str	r2, [sp, #24]
    1b98:	d320      	bcc.n	1bdc <wc_AesCbcDecrypt+0x528>
            XMEMCPY(aes->tmp, in, AES_BLOCK_SIZE);
    1b9a:	9d01      	ldr	r5, [sp, #4]
    1b9c:	002b      	movs	r3, r5
    1b9e:	3309      	adds	r3, #9
    1ba0:	33ff      	adds	r3, #255	; 0xff
    1ba2:	0018      	movs	r0, r3
    1ba4:	9305      	str	r3, [sp, #20]
    1ba6:	2210      	movs	r2, #16
    1ba8:	9904      	ldr	r1, [sp, #16]
    1baa:	4b19      	ldr	r3, [pc, #100]	; (1c10 <wc_AesCbcDecrypt+0x55c>)
    1bac:	4798      	blx	r3
    word32 r = aes->rounds >> 1;
    1bae:	23f0      	movs	r3, #240	; 0xf0
    1bb0:	58ed      	ldr	r5, [r5, r3]
    1bb2:	086d      	lsrs	r5, r5, #1
    if (r > 7 || r == 0) {
    1bb4:	1e6b      	subs	r3, r5, #1
    1bb6:	2b06      	cmp	r3, #6
    1bb8:	d800      	bhi.n	1bbc <wc_AesCbcDecrypt+0x508>
    1bba:	e5a0      	b.n	16fe <wc_AesCbcDecrypt+0x4a>
            xorbuf(out, (byte*)aes->reg, AES_BLOCK_SIZE);
    1bbc:	9801      	ldr	r0, [sp, #4]
    1bbe:	30f8      	adds	r0, #248	; 0xf8
    if (((wolfssl_word)buf | (wolfssl_word)mask | count) % WOLFSSL_WORD_SIZE == 0)
    1bc0:	9902      	ldr	r1, [sp, #8]
    1bc2:	000b      	movs	r3, r1
    1bc4:	4303      	orrs	r3, r0
    1bc6:	079b      	lsls	r3, r3, #30
    1bc8:	d1d0      	bne.n	1b6c <wc_AesCbcDecrypt+0x4b8>
    1bca:	2300      	movs	r3, #0
    for (i = 0; i < n; i++) r[i] ^= a[i];
    1bcc:	58ca      	ldr	r2, [r1, r3]
    1bce:	58c5      	ldr	r5, [r0, r3]
    1bd0:	406a      	eors	r2, r5
    1bd2:	50ca      	str	r2, [r1, r3]
    1bd4:	3304      	adds	r3, #4
    1bd6:	2b10      	cmp	r3, #16
    1bd8:	d1f8      	bne.n	1bcc <wc_AesCbcDecrypt+0x518>
    1bda:	e7d0      	b.n	1b7e <wc_AesCbcDecrypt+0x4ca>
        }

        return 0;
    1bdc:	2000      	movs	r0, #0
    }
    1bde:	b00f      	add	sp, #60	; 0x3c
    1be0:	bc3c      	pop	{r2, r3, r4, r5}
    1be2:	4690      	mov	r8, r2
    1be4:	4699      	mov	r9, r3
    1be6:	46a2      	mov	sl, r4
    1be8:	46ab      	mov	fp, r5
    1bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return BAD_FUNC_ARG;
    1bec:	20ad      	movs	r0, #173	; 0xad
    1bee:	4240      	negs	r0, r0
    1bf0:	e7f5      	b.n	1bde <wc_AesCbcDecrypt+0x52a>
    1bf2:	20ad      	movs	r0, #173	; 0xad
    1bf4:	4240      	negs	r0, r0
    1bf6:	e7f2      	b.n	1bde <wc_AesCbcDecrypt+0x52a>
    1bf8:	20ad      	movs	r0, #173	; 0xad
    1bfa:	4240      	negs	r0, r0
    1bfc:	e7ef      	b.n	1bde <wc_AesCbcDecrypt+0x52a>
    1bfe:	20ad      	movs	r0, #173	; 0xad
    1c00:	4240      	negs	r0, r0
    1c02:	e7ec      	b.n	1bde <wc_AesCbcDecrypt+0x52a>
        return 0;
    1c04:	2000      	movs	r0, #0
    1c06:	e7ea      	b.n	1bde <wc_AesCbcDecrypt+0x52a>
    1c08:	00ff00ff 	.word	0x00ff00ff
    1c0c:	ff00ff00 	.word	0xff00ff00
    1c10:	00001c85 	.word	0x00001c85

00001c14 <__libc_init_array>:
    1c14:	b570      	push	{r4, r5, r6, lr}
    1c16:	2600      	movs	r6, #0
    1c18:	4d0c      	ldr	r5, [pc, #48]	; (1c4c <__libc_init_array+0x38>)
    1c1a:	4c0d      	ldr	r4, [pc, #52]	; (1c50 <__libc_init_array+0x3c>)
    1c1c:	1b64      	subs	r4, r4, r5
    1c1e:	10a4      	asrs	r4, r4, #2
    1c20:	42a6      	cmp	r6, r4
    1c22:	d109      	bne.n	1c38 <__libc_init_array+0x24>
    1c24:	2600      	movs	r6, #0
    1c26:	f002 f9eb 	bl	4000 <_init>
    1c2a:	4d0a      	ldr	r5, [pc, #40]	; (1c54 <__libc_init_array+0x40>)
    1c2c:	4c0a      	ldr	r4, [pc, #40]	; (1c58 <__libc_init_array+0x44>)
    1c2e:	1b64      	subs	r4, r4, r5
    1c30:	10a4      	asrs	r4, r4, #2
    1c32:	42a6      	cmp	r6, r4
    1c34:	d105      	bne.n	1c42 <__libc_init_array+0x2e>
    1c36:	bd70      	pop	{r4, r5, r6, pc}
    1c38:	00b3      	lsls	r3, r6, #2
    1c3a:	58eb      	ldr	r3, [r5, r3]
    1c3c:	4798      	blx	r3
    1c3e:	3601      	adds	r6, #1
    1c40:	e7ee      	b.n	1c20 <__libc_init_array+0xc>
    1c42:	00b3      	lsls	r3, r6, #2
    1c44:	58eb      	ldr	r3, [r5, r3]
    1c46:	4798      	blx	r3
    1c48:	3601      	adds	r6, #1
    1c4a:	e7f2      	b.n	1c32 <__libc_init_array+0x1e>
    1c4c:	0000400c 	.word	0x0000400c
    1c50:	0000400c 	.word	0x0000400c
    1c54:	0000400c 	.word	0x0000400c
    1c58:	00004010 	.word	0x00004010

00001c5c <malloc>:
    1c5c:	b510      	push	{r4, lr}
    1c5e:	4b03      	ldr	r3, [pc, #12]	; (1c6c <malloc+0x10>)
    1c60:	0001      	movs	r1, r0
    1c62:	6818      	ldr	r0, [r3, #0]
    1c64:	f000 f86a 	bl	1d3c <_malloc_r>
    1c68:	bd10      	pop	{r4, pc}
    1c6a:	46c0      	nop			; (mov r8, r8)
    1c6c:	20000020 	.word	0x20000020

00001c70 <free>:
    1c70:	b510      	push	{r4, lr}
    1c72:	4b03      	ldr	r3, [pc, #12]	; (1c80 <free+0x10>)
    1c74:	0001      	movs	r1, r0
    1c76:	6818      	ldr	r0, [r3, #0]
    1c78:	f000 f816 	bl	1ca8 <_free_r>
    1c7c:	bd10      	pop	{r4, pc}
    1c7e:	46c0      	nop			; (mov r8, r8)
    1c80:	20000020 	.word	0x20000020

00001c84 <memcpy>:
    1c84:	2300      	movs	r3, #0
    1c86:	b510      	push	{r4, lr}
    1c88:	429a      	cmp	r2, r3
    1c8a:	d100      	bne.n	1c8e <memcpy+0xa>
    1c8c:	bd10      	pop	{r4, pc}
    1c8e:	5ccc      	ldrb	r4, [r1, r3]
    1c90:	54c4      	strb	r4, [r0, r3]
    1c92:	3301      	adds	r3, #1
    1c94:	e7f8      	b.n	1c88 <memcpy+0x4>

00001c96 <memset>:
    1c96:	0003      	movs	r3, r0
    1c98:	1882      	adds	r2, r0, r2
    1c9a:	4293      	cmp	r3, r2
    1c9c:	d100      	bne.n	1ca0 <memset+0xa>
    1c9e:	4770      	bx	lr
    1ca0:	7019      	strb	r1, [r3, #0]
    1ca2:	3301      	adds	r3, #1
    1ca4:	e7f9      	b.n	1c9a <memset+0x4>
	...

00001ca8 <_free_r>:
    1ca8:	b570      	push	{r4, r5, r6, lr}
    1caa:	0005      	movs	r5, r0
    1cac:	2900      	cmp	r1, #0
    1cae:	d010      	beq.n	1cd2 <_free_r+0x2a>
    1cb0:	1f0c      	subs	r4, r1, #4
    1cb2:	6823      	ldr	r3, [r4, #0]
    1cb4:	2b00      	cmp	r3, #0
    1cb6:	da00      	bge.n	1cba <_free_r+0x12>
    1cb8:	18e4      	adds	r4, r4, r3
    1cba:	0028      	movs	r0, r5
    1cbc:	f000 f8ae 	bl	1e1c <__malloc_lock>
    1cc0:	4a1d      	ldr	r2, [pc, #116]	; (1d38 <_free_r+0x90>)
    1cc2:	6813      	ldr	r3, [r2, #0]
    1cc4:	2b00      	cmp	r3, #0
    1cc6:	d105      	bne.n	1cd4 <_free_r+0x2c>
    1cc8:	6063      	str	r3, [r4, #4]
    1cca:	6014      	str	r4, [r2, #0]
    1ccc:	0028      	movs	r0, r5
    1cce:	f000 f8a6 	bl	1e1e <__malloc_unlock>
    1cd2:	bd70      	pop	{r4, r5, r6, pc}
    1cd4:	42a3      	cmp	r3, r4
    1cd6:	d909      	bls.n	1cec <_free_r+0x44>
    1cd8:	6821      	ldr	r1, [r4, #0]
    1cda:	1860      	adds	r0, r4, r1
    1cdc:	4283      	cmp	r3, r0
    1cde:	d1f3      	bne.n	1cc8 <_free_r+0x20>
    1ce0:	6818      	ldr	r0, [r3, #0]
    1ce2:	685b      	ldr	r3, [r3, #4]
    1ce4:	1841      	adds	r1, r0, r1
    1ce6:	6021      	str	r1, [r4, #0]
    1ce8:	e7ee      	b.n	1cc8 <_free_r+0x20>
    1cea:	0013      	movs	r3, r2
    1cec:	685a      	ldr	r2, [r3, #4]
    1cee:	2a00      	cmp	r2, #0
    1cf0:	d001      	beq.n	1cf6 <_free_r+0x4e>
    1cf2:	42a2      	cmp	r2, r4
    1cf4:	d9f9      	bls.n	1cea <_free_r+0x42>
    1cf6:	6819      	ldr	r1, [r3, #0]
    1cf8:	1858      	adds	r0, r3, r1
    1cfa:	42a0      	cmp	r0, r4
    1cfc:	d10b      	bne.n	1d16 <_free_r+0x6e>
    1cfe:	6820      	ldr	r0, [r4, #0]
    1d00:	1809      	adds	r1, r1, r0
    1d02:	1858      	adds	r0, r3, r1
    1d04:	6019      	str	r1, [r3, #0]
    1d06:	4282      	cmp	r2, r0
    1d08:	d1e0      	bne.n	1ccc <_free_r+0x24>
    1d0a:	6810      	ldr	r0, [r2, #0]
    1d0c:	6852      	ldr	r2, [r2, #4]
    1d0e:	1841      	adds	r1, r0, r1
    1d10:	6019      	str	r1, [r3, #0]
    1d12:	605a      	str	r2, [r3, #4]
    1d14:	e7da      	b.n	1ccc <_free_r+0x24>
    1d16:	42a0      	cmp	r0, r4
    1d18:	d902      	bls.n	1d20 <_free_r+0x78>
    1d1a:	230c      	movs	r3, #12
    1d1c:	602b      	str	r3, [r5, #0]
    1d1e:	e7d5      	b.n	1ccc <_free_r+0x24>
    1d20:	6821      	ldr	r1, [r4, #0]
    1d22:	1860      	adds	r0, r4, r1
    1d24:	4282      	cmp	r2, r0
    1d26:	d103      	bne.n	1d30 <_free_r+0x88>
    1d28:	6810      	ldr	r0, [r2, #0]
    1d2a:	6852      	ldr	r2, [r2, #4]
    1d2c:	1841      	adds	r1, r0, r1
    1d2e:	6021      	str	r1, [r4, #0]
    1d30:	6062      	str	r2, [r4, #4]
    1d32:	605c      	str	r4, [r3, #4]
    1d34:	e7ca      	b.n	1ccc <_free_r+0x24>
    1d36:	46c0      	nop			; (mov r8, r8)
    1d38:	200000ac 	.word	0x200000ac

00001d3c <_malloc_r>:
    1d3c:	2303      	movs	r3, #3
    1d3e:	b570      	push	{r4, r5, r6, lr}
    1d40:	1ccd      	adds	r5, r1, #3
    1d42:	439d      	bics	r5, r3
    1d44:	3508      	adds	r5, #8
    1d46:	0006      	movs	r6, r0
    1d48:	2d0c      	cmp	r5, #12
    1d4a:	d21e      	bcs.n	1d8a <_malloc_r+0x4e>
    1d4c:	250c      	movs	r5, #12
    1d4e:	42a9      	cmp	r1, r5
    1d50:	d81d      	bhi.n	1d8e <_malloc_r+0x52>
    1d52:	0030      	movs	r0, r6
    1d54:	f000 f862 	bl	1e1c <__malloc_lock>
    1d58:	4a25      	ldr	r2, [pc, #148]	; (1df0 <_malloc_r+0xb4>)
    1d5a:	6814      	ldr	r4, [r2, #0]
    1d5c:	0021      	movs	r1, r4
    1d5e:	2900      	cmp	r1, #0
    1d60:	d119      	bne.n	1d96 <_malloc_r+0x5a>
    1d62:	4c24      	ldr	r4, [pc, #144]	; (1df4 <_malloc_r+0xb8>)
    1d64:	6823      	ldr	r3, [r4, #0]
    1d66:	2b00      	cmp	r3, #0
    1d68:	d103      	bne.n	1d72 <_malloc_r+0x36>
    1d6a:	0030      	movs	r0, r6
    1d6c:	f000 f844 	bl	1df8 <_sbrk_r>
    1d70:	6020      	str	r0, [r4, #0]
    1d72:	0029      	movs	r1, r5
    1d74:	0030      	movs	r0, r6
    1d76:	f000 f83f 	bl	1df8 <_sbrk_r>
    1d7a:	1c43      	adds	r3, r0, #1
    1d7c:	d12c      	bne.n	1dd8 <_malloc_r+0x9c>
    1d7e:	230c      	movs	r3, #12
    1d80:	0030      	movs	r0, r6
    1d82:	6033      	str	r3, [r6, #0]
    1d84:	f000 f84b 	bl	1e1e <__malloc_unlock>
    1d88:	e003      	b.n	1d92 <_malloc_r+0x56>
    1d8a:	2d00      	cmp	r5, #0
    1d8c:	dadf      	bge.n	1d4e <_malloc_r+0x12>
    1d8e:	230c      	movs	r3, #12
    1d90:	6033      	str	r3, [r6, #0]
    1d92:	2000      	movs	r0, #0
    1d94:	bd70      	pop	{r4, r5, r6, pc}
    1d96:	680b      	ldr	r3, [r1, #0]
    1d98:	1b5b      	subs	r3, r3, r5
    1d9a:	d41a      	bmi.n	1dd2 <_malloc_r+0x96>
    1d9c:	2b0b      	cmp	r3, #11
    1d9e:	d903      	bls.n	1da8 <_malloc_r+0x6c>
    1da0:	600b      	str	r3, [r1, #0]
    1da2:	18cc      	adds	r4, r1, r3
    1da4:	6025      	str	r5, [r4, #0]
    1da6:	e003      	b.n	1db0 <_malloc_r+0x74>
    1da8:	428c      	cmp	r4, r1
    1daa:	d10e      	bne.n	1dca <_malloc_r+0x8e>
    1dac:	6863      	ldr	r3, [r4, #4]
    1dae:	6013      	str	r3, [r2, #0]
    1db0:	0030      	movs	r0, r6
    1db2:	f000 f834 	bl	1e1e <__malloc_unlock>
    1db6:	0020      	movs	r0, r4
    1db8:	2207      	movs	r2, #7
    1dba:	300b      	adds	r0, #11
    1dbc:	1d23      	adds	r3, r4, #4
    1dbe:	4390      	bics	r0, r2
    1dc0:	1ac3      	subs	r3, r0, r3
    1dc2:	d0e7      	beq.n	1d94 <_malloc_r+0x58>
    1dc4:	425a      	negs	r2, r3
    1dc6:	50e2      	str	r2, [r4, r3]
    1dc8:	e7e4      	b.n	1d94 <_malloc_r+0x58>
    1dca:	684b      	ldr	r3, [r1, #4]
    1dcc:	6063      	str	r3, [r4, #4]
    1dce:	000c      	movs	r4, r1
    1dd0:	e7ee      	b.n	1db0 <_malloc_r+0x74>
    1dd2:	000c      	movs	r4, r1
    1dd4:	6849      	ldr	r1, [r1, #4]
    1dd6:	e7c2      	b.n	1d5e <_malloc_r+0x22>
    1dd8:	2303      	movs	r3, #3
    1dda:	1cc4      	adds	r4, r0, #3
    1ddc:	439c      	bics	r4, r3
    1dde:	42a0      	cmp	r0, r4
    1de0:	d0e0      	beq.n	1da4 <_malloc_r+0x68>
    1de2:	1a21      	subs	r1, r4, r0
    1de4:	0030      	movs	r0, r6
    1de6:	f000 f807 	bl	1df8 <_sbrk_r>
    1dea:	1c43      	adds	r3, r0, #1
    1dec:	d1da      	bne.n	1da4 <_malloc_r+0x68>
    1dee:	e7c6      	b.n	1d7e <_malloc_r+0x42>
    1df0:	200000ac 	.word	0x200000ac
    1df4:	200000b0 	.word	0x200000b0

00001df8 <_sbrk_r>:
    1df8:	2300      	movs	r3, #0
    1dfa:	b570      	push	{r4, r5, r6, lr}
    1dfc:	4c06      	ldr	r4, [pc, #24]	; (1e18 <_sbrk_r+0x20>)
    1dfe:	0005      	movs	r5, r0
    1e00:	0008      	movs	r0, r1
    1e02:	6023      	str	r3, [r4, #0]
    1e04:	f7fe fad2 	bl	3ac <_sbrk>
    1e08:	1c43      	adds	r3, r0, #1
    1e0a:	d103      	bne.n	1e14 <_sbrk_r+0x1c>
    1e0c:	6823      	ldr	r3, [r4, #0]
    1e0e:	2b00      	cmp	r3, #0
    1e10:	d000      	beq.n	1e14 <_sbrk_r+0x1c>
    1e12:	602b      	str	r3, [r5, #0]
    1e14:	bd70      	pop	{r4, r5, r6, pc}
    1e16:	46c0      	nop			; (mov r8, r8)
    1e18:	200000d0 	.word	0x200000d0

00001e1c <__malloc_lock>:
    1e1c:	4770      	bx	lr

00001e1e <__malloc_unlock>:
    1e1e:	4770      	bx	lr
    1e20:	682f2e2e 	.word	0x682f2e2e
    1e24:	732f6c61 	.word	0x732f6c61
    1e28:	682f6372 	.word	0x682f6372
    1e2c:	665f6c61 	.word	0x665f6c61
    1e30:	6873616c 	.word	0x6873616c
    1e34:	0000632e 	.word	0x0000632e
    1e38:	682f2e2e 	.word	0x682f2e2e
    1e3c:	6e2f6c70 	.word	0x6e2f6c70
    1e40:	74636d76 	.word	0x74636d76
    1e44:	682f6c72 	.word	0x682f6c72
    1e48:	6e5f6c70 	.word	0x6e5f6c70
    1e4c:	74636d76 	.word	0x74636d76
    1e50:	632e6c72 	.word	0x632e6c72
    1e54:	00000000 	.word	0x00000000

00001e58 <key>:
    1e58:	10eb3d60 be71ca15 f0ae732b 81777d85     `=....q.+s...}w.
    1e68:	072c351f d708613b a310982d f4df1409     .5,.;a..-.......

00001e78 <rcon>:
    1e78:	01000000 02000000 04000000 08000000     ................
    1e88:	10000000 20000000 40000000 80000000     ....... ...@....
    1e98:	1b000000 36000000                       .......6

00001ea0 <Te>:
    1ea0:	c66363a5 f87c7c84 ee777799 f67b7b8d     .cc..||..ww..{{.
    1eb0:	fff2f20d d66b6bbd de6f6fb1 91c5c554     .....kk..oo.T...
    1ec0:	60303050 02010103 ce6767a9 562b2b7d     P00`.....gg.}++V
    1ed0:	e7fefe19 b5d7d762 4dababe6 ec76769a     ....b......M.vv.
    1ee0:	8fcaca45 1f82829d 89c9c940 fa7d7d87     E.......@....}}.
    1ef0:	effafa15 b25959eb 8e4747c9 fbf0f00b     .....YY..GG.....
    1f00:	41adadec b3d4d467 5fa2a2fd 45afafea     ...Ag......_...E
    1f10:	239c9cbf 53a4a4f7 e4727296 9bc0c05b     ...#...S.rr.[...
    1f20:	75b7b7c2 e1fdfd1c 3d9393ae 4c26266a     ...u.......=j&&L
    1f30:	6c36365a 7e3f3f41 f5f7f702 83cccc4f     Z66lA??~....O...
    1f40:	6834345c 51a5a5f4 d1e5e534 f9f1f108     \44h...Q4.......
    1f50:	e2717193 abd8d873 62313153 2a15153f     .qq.s...S11b?..*
    1f60:	0804040c 95c7c752 46232365 9dc3c35e     ....R...e##F^...
    1f70:	30181828 379696a1 0a05050f 2f9a9ab5     (..0...7......./
    1f80:	0e070709 24121236 1b80809b dfe2e23d     ....6..$....=...
    1f90:	cdebeb26 4e272769 7fb2b2cd ea75759f     &...i''N.....uu.
    1fa0:	1209091b 1d83839e 582c2c74 341a1a2e     ........t,,X...4
    1fb0:	361b1b2d dc6e6eb2 b45a5aee 5ba0a0fb     -..6.nn..ZZ....[
    1fc0:	a45252f6 763b3b4d b7d6d661 7db3b3ce     .RR.M;;va......}
    1fd0:	5229297b dde3e33e 5e2f2f71 13848497     {))R>...q//^....
    1fe0:	a65353f5 b9d1d168 00000000 c1eded2c     .SS.h.......,...
    1ff0:	40202060 e3fcfc1f 79b1b1c8 b65b5bed     `  @.......y.[[.
    2000:	d46a6abe 8dcbcb46 67bebed9 7239394b     .jj.F......gK99r
    2010:	944a4ade 984c4cd4 b05858e8 85cfcf4a     .JJ..LL..XX.J...
    2020:	bbd0d06b c5efef2a 4faaaae5 edfbfb16     k...*......O....
    2030:	864343c5 9a4d4dd7 66333355 11858594     .CC..MM.U33f....
    2040:	8a4545cf e9f9f910 04020206 fe7f7f81     .EE.............
    2050:	a05050f0 783c3c44 259f9fba 4ba8a8e3     .PP.D<<x...%...K
    2060:	a25151f3 5da3a3fe 804040c0 058f8f8a     .QQ....].@@.....
    2070:	3f9292ad 219d9dbc 70383848 f1f5f504     ...?...!H88p....
    2080:	63bcbcdf 77b6b6c1 afdada75 42212163     ...c...wu...c!!B
    2090:	20101030 e5ffff1a fdf3f30e bfd2d26d     0.. ........m...
    20a0:	81cdcd4c 180c0c14 26131335 c3ecec2f     L.......5..&/...
    20b0:	be5f5fe1 359797a2 884444cc 2e171739     .__....5.DD.9...
    20c0:	93c4c457 55a7a7f2 fc7e7e82 7a3d3d47     W......U.~~.G==z
    20d0:	c86464ac ba5d5de7 3219192b e6737395     .dd..]].+..2.ss.
    20e0:	c06060a0 19818198 9e4f4fd1 a3dcdc7f     .``......OO.....
    20f0:	44222266 542a2a7e 3b9090ab 0b888883     f""D~**T...;....
    2100:	8c4646ca c7eeee29 6bb8b8d3 2814143c     .FF.)......k<..(
    2110:	a7dede79 bc5e5ee2 160b0b1d addbdb76     y....^^.....v...
    2120:	dbe0e03b 64323256 743a3a4e 140a0a1e     ;...V22dN::t....
    2130:	924949db 0c06060a 4824246c b85c5ce4     .II.....l$$H.\\.
    2140:	9fc2c25d bdd3d36e 43acacef c46262a6     ]...n......C.bb.
    2150:	399191a8 319595a4 d3e4e437 f279798b     ...9...17....yy.
    2160:	d5e7e732 8bc8c843 6e373759 da6d6db7     2...C...Y77n.mm.
    2170:	018d8d8c b1d5d564 9c4e4ed2 49a9a9e0     ....d....NN....I
    2180:	d86c6cb4 ac5656fa f3f4f407 cfeaea25     .ll..VV.....%...
    2190:	ca6565af f47a7a8e 47aeaee9 10080818     .ee..zz....G....
    21a0:	6fbabad5 f0787888 4a25256f 5c2e2e72     ...o.xx.o%%Jr..\
    21b0:	381c1c24 57a6a6f1 73b4b4c7 97c6c651     $..8...W...sQ...
    21c0:	cbe8e823 a1dddd7c e874749c 3e1f1f21     #...|....tt.!..>
    21d0:	964b4bdd 61bdbddc 0d8b8b86 0f8a8a85     .KK....a........
    21e0:	e0707090 7c3e3e42 71b5b5c4 cc6666aa     .pp.B>>|...q.ff.
    21f0:	904848d8 06030305 f7f6f601 1c0e0e12     .HH.............
    2200:	c26161a3 6a35355f ae5757f9 69b9b9d0     .aa._55j.WW....i
    2210:	17868691 99c1c158 3a1d1d27 279e9eb9     ....X...'..:...'
    2220:	d9e1e138 ebf8f813 2b9898b3 22111133     8..........+3.."
    2230:	d26969bb a9d9d970 078e8e89 339494a7     .ii.p..........3
    2240:	2d9b9bb6 3c1e1e22 15878792 c9e9e920     ...-"..<.... ...
    2250:	87cece49 aa5555ff 50282878 a5dfdf7a     I....UU.x((Pz...
    2260:	038c8c8f 59a1a1f8 09898980 1a0d0d17     .......Y........
    2270:	65bfbfda d7e6e631 844242c6 d06868b8     ...e1....BB..hh.
    2280:	824141c3 299999b0 5a2d2d77 1e0f0f11     .AA....)w--Z....
    2290:	7bb0b0cb a85454fc 6dbbbbd6 2c16163a     ...{.TT....m:..,
    22a0:	a5c66363 84f87c7c 99ee7777 8df67b7b     cc..||..ww..{{..
    22b0:	0dfff2f2 bdd66b6b b1de6f6f 5491c5c5     ....kk..oo.....T
    22c0:	50603030 03020101 a9ce6767 7d562b2b     00`P....gg..++V}
    22d0:	19e7fefe 62b5d7d7 e64dabab 9aec7676     .......b..M.vv..
    22e0:	458fcaca 9d1f8282 4089c9c9 87fa7d7d     ...E.......@}}..
    22f0:	15effafa ebb25959 c98e4747 0bfbf0f0     ....YY..GG......
    2300:	ec41adad 67b3d4d4 fd5fa2a2 ea45afaf     ..A....g.._...E.
    2310:	bf239c9c f753a4a4 96e47272 5b9bc0c0     ..#...S.rr.....[
    2320:	c275b7b7 1ce1fdfd ae3d9393 6a4c2626     ..u.......=.&&Lj
    2330:	5a6c3636 417e3f3f 02f5f7f7 4f83cccc     66lZ??~A.......O
    2340:	5c683434 f451a5a5 34d1e5e5 08f9f1f1     44h\..Q....4....
    2350:	93e27171 73abd8d8 53623131 3f2a1515     qq.....s11bS..*?
    2360:	0c080404 5295c7c7 65462323 5e9dc3c3     .......R##Fe...^
    2370:	28301818 a1379696 0f0a0505 b52f9a9a     ..0(..7......./.
    2380:	090e0707 36241212 9b1b8080 3ddfe2e2     ......$6.......=
    2390:	26cdebeb 694e2727 cd7fb2b2 9fea7575     ...&''Ni....uu..
    23a0:	1b120909 9e1d8383 74582c2c 2e341a1a     ........,,Xt..4.
    23b0:	2d361b1b b2dc6e6e eeb45a5a fb5ba0a0     ..6-nn..ZZ....[.
    23c0:	f6a45252 4d763b3b 61b7d6d6 ce7db3b3     RR..;;vM...a..}.
    23d0:	7b522929 3edde3e3 715e2f2f 97138484     ))R{...>//^q....
    23e0:	f5a65353 68b9d1d1 00000000 2cc1eded     SS.....h.......,
    23f0:	60402020 1fe3fcfc c879b1b1 edb65b5b       @`......y.[[..
    2400:	bed46a6a 468dcbcb d967bebe 4b723939     jj.....F..g.99rK
    2410:	de944a4a d4984c4c e8b05858 4a85cfcf     JJ..LL..XX.....J
    2420:	6bbbd0d0 2ac5efef e54faaaa 16edfbfb     ...k...*..O.....
    2430:	c5864343 d79a4d4d 55663333 94118585     CC..MM..33fU....
    2440:	cf8a4545 10e9f9f9 06040202 81fe7f7f     EE..............
    2450:	f0a05050 44783c3c ba259f9f e34ba8a8     PP..<<xD..%...K.
    2460:	f3a25151 fe5da3a3 c0804040 8a058f8f     QQ....].@@......
    2470:	ad3f9292 bc219d9d 48703838 04f1f5f5     ..?...!.88pH....
    2480:	df63bcbc c177b6b6 75afdada 63422121     ..c...w....u!!Bc
    2490:	30201010 1ae5ffff 0efdf3f3 6dbfd2d2     .. 0...........m
    24a0:	4c81cdcd 14180c0c 35261313 2fc3ecec     ...L......&5.../
    24b0:	e1be5f5f a2359797 cc884444 392e1717     __....5.DD.....9
    24c0:	5793c4c4 f255a7a7 82fc7e7e 477a3d3d     ...W..U.~~..==zG
    24d0:	acc86464 e7ba5d5d 2b321919 95e67373     dd..]]....2+ss..
    24e0:	a0c06060 98198181 d19e4f4f 7fa3dcdc     ``......OO......
    24f0:	66442222 7e542a2a ab3b9090 830b8888     ""Df**T~..;.....
    2500:	ca8c4646 29c7eeee d36bb8b8 3c281414     FF.....)..k...(<
    2510:	79a7dede e2bc5e5e 1d160b0b 76addbdb     ...y^^.........v
    2520:	3bdbe0e0 56643232 4e743a3a 1e140a0a     ...;22dV::tN....
    2530:	db924949 0a0c0606 6c482424 e4b85c5c     II......$$Hl\\..
    2540:	5d9fc2c2 6ebdd3d3 ef43acac a6c46262     ...]...n..C.bb..
    2550:	a8399191 a4319595 37d3e4e4 8bf27979     ..9...1....7yy..
    2560:	32d5e7e7 438bc8c8 596e3737 b7da6d6d     ...2...C77nYmm..
    2570:	8c018d8d 64b1d5d5 d29c4e4e e049a9a9     .......dNN....I.
    2580:	b4d86c6c faac5656 07f3f4f4 25cfeaea     ll..VV.........%
    2590:	afca6565 8ef47a7a e947aeae 18100808     ee..zz....G.....
    25a0:	d56fbaba 88f07878 6f4a2525 725c2e2e     ..o.xx..%%Jo..\r
    25b0:	24381c1c f157a6a6 c773b4b4 5197c6c6     ..8$..W...s....Q
    25c0:	23cbe8e8 7ca1dddd 9ce87474 213e1f1f     ...#...|tt....>!
    25d0:	dd964b4b dc61bdbd 860d8b8b 850f8a8a     KK....a.........
    25e0:	90e07070 427c3e3e c471b5b5 aacc6666     pp..>>|B..q.ff..
    25f0:	d8904848 05060303 01f7f6f6 121c0e0e     HH..............
    2600:	a3c26161 5f6a3535 f9ae5757 d069b9b9     aa..55j_WW....i.
    2610:	91178686 5899c1c1 273a1d1d b9279e9e     .......X..:'..'.
    2620:	38d9e1e1 13ebf8f8 b32b9898 33221111     ...8......+..."3
    2630:	bbd26969 70a9d9d9 89078e8e a7339494     ii.....p......3.
    2640:	b62d9b9b 223c1e1e 92158787 20c9e9e9     ..-...<"....... 
    2650:	4987cece ffaa5555 78502828 7aa5dfdf     ...IUU..((Px...z
    2660:	8f038c8c f859a1a1 80098989 171a0d0d     ......Y.........
    2670:	da65bfbf 31d7e6e6 c6844242 b8d06868     ..e....1BB..hh..
    2680:	c3824141 b0299999 775a2d2d 111e0f0f     AA....).--Zw....
    2690:	cb7bb0b0 fca85454 d66dbbbb 3a2c1616     ..{.TT....m...,:
    26a0:	63a5c663 7c84f87c 7799ee77 7b8df67b     c..c|..|w..w{..{
    26b0:	f20dfff2 6bbdd66b 6fb1de6f c55491c5     ....k..ko..o..T.
    26c0:	30506030 01030201 67a9ce67 2b7d562b     0`P0....g..g+V}+
    26d0:	fe19e7fe d762b5d7 abe64dab 769aec76     ......b..M..v..v
    26e0:	ca458fca 829d1f82 c94089c9 7d87fa7d     ..E.......@.}..}
    26f0:	fa15effa 59ebb259 47c98e47 f00bfbf0     ....Y..YG..G....
    2700:	adec41ad d467b3d4 a2fd5fa2 afea45af     .A....g.._...E..
    2710:	9cbf239c a4f753a4 7296e472 c05b9bc0     .#...S..r..r..[.
    2720:	b7c275b7 fd1ce1fd 93ae3d93 266a4c26     .u.......=..&Lj&
    2730:	365a6c36 3f417e3f f702f5f7 cc4f83cc     6lZ6?~A?......O.
    2740:	345c6834 a5f451a5 e534d1e5 f108f9f1     4h\4.Q....4.....
    2750:	7193e271 d873abd8 31536231 153f2a15     q..q..s.1bS1.*?.
    2760:	040c0804 c75295c7 23654623 c35e9dc3     ......R.#Fe#..^.
    2770:	18283018 96a13796 050f0a05 9ab52f9a     .0(..7......./..
    2780:	07090e07 12362412 809b1b80 e23ddfe2     .....$6.......=.
    2790:	eb26cdeb 27694e27 b2cd7fb2 759fea75     ..&.'Ni'....u..u
    27a0:	091b1209 839e1d83 2c74582c 1a2e341a     ........,Xt,.4..
    27b0:	1b2d361b 6eb2dc6e 5aeeb45a a0fb5ba0     .6-.n..nZ..Z.[..
    27c0:	52f6a452 3b4d763b d661b7d6 b3ce7db3     R..R;vM;..a..}..
    27d0:	297b5229 e33edde3 2f715e2f 84971384     )R{)..>./^q/....
    27e0:	53f5a653 d168b9d1 00000000 ed2cc1ed     S..S..h.......,.
    27f0:	20604020 fc1fe3fc b1c879b1 5bedb65b      @` .....y..[..[
    2800:	6abed46a cb468dcb bed967be 394b7239     j..j..F..g..9rK9
    2810:	4ade944a 4cd4984c 58e8b058 cf4a85cf     J..JL..LX..X..J.
    2820:	d06bbbd0 ef2ac5ef aae54faa fb16edfb     ..k...*..O......
    2830:	43c58643 4dd79a4d 33556633 85941185     C..CM..M3fU3....
    2840:	45cf8a45 f910e9f9 02060402 7f81fe7f     E..E............
    2850:	50f0a050 3c44783c 9fba259f a8e34ba8     P..P<xD<.%...K..
    2860:	51f3a251 a3fe5da3 40c08040 8f8a058f     Q..Q.]..@..@....
    2870:	92ad3f92 9dbc219d 38487038 f504f1f5     .?...!..8pH8....
    2880:	bcdf63bc b6c177b6 da75afda 21634221     .c...w....u.!Bc!
    2890:	10302010 ff1ae5ff f30efdf3 d26dbfd2     . 0...........m.
    28a0:	cd4c81cd 0c14180c 13352613 ec2fc3ec     ..L......&5.../.
    28b0:	5fe1be5f 97a23597 44cc8844 17392e17     _.._.5..D..D..9.
    28c0:	c45793c4 a7f255a7 7e82fc7e 3d477a3d     ..W..U..~..~=zG=
    28d0:	64acc864 5de7ba5d 192b3219 7395e673     d..d]..].2+.s..s
    28e0:	60a0c060 81981981 4fd19e4f dc7fa3dc     `..`....O..O....
    28f0:	22664422 2a7e542a 90ab3b90 88830b88     "Df"*T~*.;......
    2900:	46ca8c46 ee29c7ee b8d36bb8 143c2814     F..F..)..k...(<.
    2910:	de79a7de 5ee2bc5e 0b1d160b db76addb     ..y.^..^......v.
    2920:	e03bdbe0 32566432 3a4e743a 0a1e140a     ..;.2dV2:tN:....
    2930:	49db9249 060a0c06 246c4824 5ce4b85c     I..I....$Hl$\..\
    2940:	c25d9fc2 d36ebdd3 acef43ac 62a6c462     ..]...n..C..b..b
    2950:	91a83991 95a43195 e437d3e4 798bf279     .9...1....7.y..y
    2960:	e732d5e7 c8438bc8 37596e37 6db7da6d     ..2...C.7nY7m..m
    2970:	8d8c018d d564b1d5 4ed29c4e a9e049a9     ......d.N..N.I..
    2980:	6cb4d86c 56faac56 f407f3f4 ea25cfea     l..lV..V......%.
    2990:	65afca65 7a8ef47a aee947ae 08181008     e..ez..z.G......
    29a0:	bad56fba 7888f078 256f4a25 2e725c2e     .o..x..x%Jo%.\r.
    29b0:	1c24381c a6f157a6 b4c773b4 c65197c6     .8$..W...s....Q.
    29c0:	e823cbe8 dd7ca1dd 749ce874 1f213e1f     ..#...|.t..t.>!.
    29d0:	4bdd964b bddc61bd 8b860d8b 8a850f8a     K..K.a..........
    29e0:	7090e070 3e427c3e b5c471b5 66aacc66     p..p>|B>.q..f..f
    29f0:	48d89048 03050603 f601f7f6 0e121c0e     H..H............
    2a00:	61a3c261 355f6a35 57f9ae57 b9d069b9     a..a5j_5W..W.i..
    2a10:	86911786 c15899c1 1d273a1d 9eb9279e     ......X..:'..'..
    2a20:	e138d9e1 f813ebf8 98b32b98 11332211     ..8......+..."3.
    2a30:	69bbd269 d970a9d9 8e89078e 94a73394     i..i..p......3..
    2a40:	9bb62d9b 1e223c1e 87921587 e920c9e9     .-...<"....... .
    2a50:	ce4987ce 55ffaa55 28785028 df7aa5df     ..I.U..U(Px(..z.
    2a60:	8c8f038c a1f859a1 89800989 0d171a0d     .....Y..........
    2a70:	bfda65bf e631d7e6 42c68442 68b8d068     .e....1.B..Bh..h
    2a80:	41c38241 99b02999 2d775a2d 0f111e0f     A..A.)..-Zw-....
    2a90:	b0cb7bb0 54fca854 bbd66dbb 163a2c16     .{..T..T.m...,:.
    2aa0:	6363a5c6 7c7c84f8 777799ee 7b7b8df6     ..cc..||..ww..{{
    2ab0:	f2f20dff 6b6bbdd6 6f6fb1de c5c55491     ......kk..oo.T..
    2ac0:	30305060 01010302 6767a9ce 2b2b7d56     `P00......ggV}++
    2ad0:	fefe19e7 d7d762b5 ababe64d 76769aec     .....b..M.....vv
    2ae0:	caca458f 82829d1f c9c94089 7d7d87fa     .E.......@....}}
    2af0:	fafa15ef 5959ebb2 4747c98e f0f00bfb     ......YY..GG....
    2b00:	adadec41 d4d467b3 a2a2fd5f afafea45     A....g.._...E...
    2b10:	9c9cbf23 a4a4f753 727296e4 c0c05b9b     #...S.....rr.[..
    2b20:	b7b7c275 fdfd1ce1 9393ae3d 26266a4c     u.......=...Lj&&
    2b30:	36365a6c 3f3f417e f7f702f5 cccc4f83     lZ66~A??.....O..
    2b40:	34345c68 a5a5f451 e5e534d1 f1f108f9     h\44Q....4......
    2b50:	717193e2 d8d873ab 31315362 15153f2a     ..qq.s..bS11*?..
    2b60:	04040c08 c7c75295 23236546 c3c35e9d     .....R..Fe##.^..
    2b70:	18182830 9696a137 05050f0a 9a9ab52f     0(..7......./...
    2b80:	0707090e 12123624 80809b1b e2e23ddf     ....$6.......=..
    2b90:	ebeb26cd 2727694e b2b2cd7f 75759fea     .&..Ni''......uu
    2ba0:	09091b12 83839e1d 2c2c7458 1a1a2e34     ........Xt,,4...
    2bb0:	1b1b2d36 6e6eb2dc 5a5aeeb4 a0a0fb5b     6-....nn..ZZ[...
    2bc0:	5252f6a4 3b3b4d76 d6d661b7 b3b3ce7d     ..RRvM;;.a..}...
    2bd0:	29297b52 e3e33edd 2f2f715e 84849713     R{)).>..^q//....
    2be0:	5353f5a6 d1d168b9 00000000 eded2cc1     ..SS.h.......,..
    2bf0:	20206040 fcfc1fe3 b1b1c879 5b5bedb6     @`  ....y.....[[
    2c00:	6a6abed4 cbcb468d bebed967 39394b72     ..jj.F..g...rK99
    2c10:	4a4ade94 4c4cd498 5858e8b0 cfcf4a85     ..JJ..LL..XX.J..
    2c20:	d0d06bbb efef2ac5 aaaae54f fbfb16ed     .k...*..O.......
    2c30:	4343c586 4d4dd79a 33335566 85859411     ..CC..MMfU33....
    2c40:	4545cf8a f9f910e9 02020604 7f7f81fe     ..EE............
    2c50:	5050f0a0 3c3c4478 9f9fba25 a8a8e34b     ..PPxD<<%...K...
    2c60:	5151f3a2 a3a3fe5d 4040c080 8f8f8a05     ..QQ].....@@....
    2c70:	9292ad3f 9d9dbc21 38384870 f5f504f1     ?...!...pH88....
    2c80:	bcbcdf63 b6b6c177 dada75af 21216342     c...w....u..Bc!!
    2c90:	10103020 ffff1ae5 f3f30efd d2d26dbf      0...........m..
    2ca0:	cdcd4c81 0c0c1418 13133526 ecec2fc3     .L......&5.../..
    2cb0:	5f5fe1be 9797a235 4444cc88 1717392e     ..__5.....DD.9..
    2cc0:	c4c45793 a7a7f255 7e7e82fc 3d3d477a     .W..U.....~~zG==
    2cd0:	6464acc8 5d5de7ba 19192b32 737395e6     ..dd..]]2+....ss
    2ce0:	6060a0c0 81819819 4f4fd19e dcdc7fa3     ..``......OO....
    2cf0:	22226644 2a2a7e54 9090ab3b 8888830b     Df""T~**;.......
    2d00:	4646ca8c eeee29c7 b8b8d36b 14143c28     ..FF.)..k...(<..
    2d10:	dede79a7 5e5ee2bc 0b0b1d16 dbdb76ad     .y....^^.....v..
    2d20:	e0e03bdb 32325664 3a3a4e74 0a0a1e14     .;..dV22tN::....
    2d30:	4949db92 06060a0c 24246c48 5c5ce4b8     ..II....Hl$$..\\
    2d40:	c2c25d9f d3d36ebd acacef43 6262a6c4     .]...n..C.....bb
    2d50:	9191a839 9595a431 e4e437d3 79798bf2     9...1....7....yy
    2d60:	e7e732d5 c8c8438b 3737596e 6d6db7da     .2...C..nY77..mm
    2d70:	8d8d8c01 d5d564b1 4e4ed29c a9a9e049     .....d....NNI...
    2d80:	6c6cb4d8 5656faac f4f407f3 eaea25cf     ..ll..VV.....%..
    2d90:	6565afca 7a7a8ef4 aeaee947 08081810     ..ee..zzG.......
    2da0:	babad56f 787888f0 25256f4a 2e2e725c     o.....xxJo%%\r..
    2db0:	1c1c2438 a6a6f157 b4b4c773 c6c65197     8$..W...s....Q..
    2dc0:	e8e823cb dddd7ca1 74749ce8 1f1f213e     .#...|....tt>!..
    2dd0:	4b4bdd96 bdbddc61 8b8b860d 8a8a850f     ..KKa...........
    2de0:	707090e0 3e3e427c b5b5c471 6666aacc     ..pp|B>>q.....ff
    2df0:	4848d890 03030506 f6f601f7 0e0e121c     ..HH............
    2e00:	6161a3c2 35355f6a 5757f9ae b9b9d069     ..aaj_55..WWi...
    2e10:	86869117 c1c15899 1d1d273a 9e9eb927     .....X..:'..'...
    2e20:	e1e138d9 f8f813eb 9898b32b 11113322     .8......+..."3..
    2e30:	6969bbd2 d9d970a9 8e8e8907 9494a733     ..ii.p......3...
    2e40:	9b9bb62d 1e1e223c 87879215 e9e920c9     -...<"....... ..
    2e50:	cece4987 5555ffaa 28287850 dfdf7aa5     .I....UUPx((.z..
    2e60:	8c8c8f03 a1a1f859 89898009 0d0d171a     ....Y...........
    2e70:	bfbfda65 e6e631d7 4242c684 6868b8d0     e....1....BB..hh
    2e80:	4141c382 9999b029 2d2d775a 0f0f111e     ..AA)...Zw--....
    2e90:	b0b0cb7b 5454fca8 bbbbd66d 16163a2c     {.....TTm...,:..

00002ea0 <Td>:
    2ea0:	51f4a750 7e416553 1a17a4c3 3a275e96     P..QSeA~.....^':
    2eb0:	3bab6bcb 1f9d45f1 acfa58ab 4be30393     .k.;.E...X.....K
    2ec0:	2030fa55 ad766df6 88cc7691 f5024c25     U.0 .mv..v..%L..
    2ed0:	4fe5d7fc c52acbd7 26354480 b562a38f     ...O..*..D5&..b.
    2ee0:	deb15a49 25ba1b67 45ea0e98 5dfec0e1     IZ..g..%...E...]
    2ef0:	c32f7502 814cf012 8d4697a3 6bd3f9c6     .u/...L...F....k
    2f00:	038f5fe7 15929c95 bf6d7aeb 955259da     ._.......zm..YR.
    2f10:	d4be832d 587421d3 49e06929 8ec9c844     -....!tX)i.ID...
    2f20:	75c2896a f48e7978 99583e6b 27b971dd     j..uxy..k>X..q.'
    2f30:	bee14fb6 f088ad17 c920ac66 7dce3ab4     .O......f. ..:.}
    2f40:	63df4a18 e51a3182 97513360 62537f45     .J.c.1..`3Q.E.Sb
    2f50:	b16477e0 bb6bae84 fe81a01c f9082b94     .wd...k......+..
    2f60:	70486858 8f45fd19 94de6c87 527bf8b7     XhHp..E..l....{R
    2f70:	ab73d323 724b02e2 e31f8f57 6655ab2a     #.s...KrW...*.Uf
    2f80:	b2eb2807 2fb5c203 86c57b9a d33708a5     .(...../.{....7.
    2f90:	302887f2 23bfa5b2 02036aba ed16825c     ..(0...#.j..\...
    2fa0:	8acf1c2b a779b492 f307f2f0 4e69e2a1     +.....y.......iN
    2fb0:	65daf4cd 0605bed5 d134621f c4a6fe8a     ...e.....b4.....
    2fc0:	342e539d a2f355a0 058ae132 a4f6eb75     .S.4.U..2...u...
    2fd0:	0b83ec39 4060efaa 5e719f06 bd6e1051     9.....`@..q^Q.n.
    2fe0:	3e218af9 96dd063d dd3e05ae 4de6bd46     ..!>=.....>.F..M
    2ff0:	91548db5 71c45d05 0406d46f 605015ff     ..T..].qo.....P`
    3000:	1998fb24 d6bde997 894043cc 67d99e77     $........C@.w..g
    3010:	b0e842bd 07898b88 e7195b38 79c8eedb     .B......8[.....y
    3020:	a17c0a47 7c420fe9 f8841ec9 00000000     G.|...B|........
    3030:	09808683 322bed48 1e1170ac 6c5a724e     ....H.+2.p..NrZl
    3040:	fd0efffb 0f853856 3daed51e 362d3927     ....V8.....='9-6
    3050:	0a0fd964 685ca621 9b5b54d1 24362e3a     d...!.\h.T[.:.6$
    3060:	0c0a67b1 9357e70f b4ee96d2 1b9b919e     .g....W.........
    3070:	80c0c54f 61dc20a2 5a774b69 1c121a16     O.... .aiKwZ....
    3080:	e293ba0a c0a02ae5 3c22e043 121b171d     .....*..C."<....
    3090:	0e090d0b f28bc7ad 2db6a8b9 141ea9c8     ...........-....
    30a0:	57f11985 af75074c ee99ddbb a37f60fd     ...WL.u......`..
    30b0:	f701269f 5c72f5bc 44663bc5 5bfb7e34     .&....r\.;fD4~.[
    30c0:	8b432976 cb23c6dc b6edfc68 b8e4f163     v)C...#.h...c...
    30d0:	d731dcca 42638510 13972240 84c61120     ..1...cB@".. ...
    30e0:	854a247d d2bb3df8 aef93211 c729a16d     }$J..=...2..m.).
    30f0:	1d9e2f4b dcb230f3 0d8652ec 77c1e3d0     K/...0...R.....w
    3100:	2bb3166c a970b999 119448fa 47e96422     l..+..p..H.."d.G
    3110:	a8fc8cc4 a0f03f1a 567d2cd8 223390ef     .....?...,}V..3"
    3120:	87494ec7 d938d1c1 8ccaa2fe 98d40b36     .NI...8.....6...
    3130:	a6f581cf a57ade28 dab78e26 3fadbfa4     ....(.z.&......?
    3140:	2c3a9de4 5078920d 6a5fcc9b 547e4662     ..:,..xP.._jbF~T
    3150:	f68d13c2 90d8b8e8 2e39f75e 82c3aff5     ........^.9.....
    3160:	9f5d80be 69d0937c 6fd52da9 cf2512b3     ..].|..i.-.o..%.
    3170:	c8ac993b 10187da7 e89c636e db3bbb7b     ;....}..nc..{.;.
    3180:	cd267809 6e5918f4 ec9ab701 834f9aa8     .x&...Yn......O.
    3190:	e6956e65 aaffe67e 21bccf08 ef15e8e6     en..~......!....
    31a0:	bae79bd9 4a6f36ce ea9f09d4 29b07cd6     .....6oJ.....|.)
    31b0:	31a4b2af 2a3f2331 c6a59430 35a266c0     ...11#?*0....f.5
    31c0:	744ebc37 fc82caa6 e090d0b0 33a7d815     7.Nt...........3
    31d0:	f104984a 41ecdaf7 7fcd500e 1791f62f     J......A.P../...
    31e0:	764dd68d 43efb04d ccaa4d54 e49604df     ..MvM..CTM......
    31f0:	9ed1b5e3 4c6a881b c12c1fb8 4665517f     ......jL..,..QeF
    3200:	9d5eea04 018c355d fa877473 fb0b412e     ..^.]5..st...A..
    3210:	b3671d5a 92dbd252 e9105633 6dd64713     Z.g.R...3V...G.m
    3220:	9ad7618c 37a10c7a 59f8148e eb133c89     .a..z..7...Y.<..
    3230:	cea927ee b761c935 e11ce5ed 7a47b13c     .'..5.a.....<.Gz
    3240:	9cd2df59 55f2733f 1814ce79 73c737bf     Y...?s.Uy....7.s
    3250:	53f7cdea 5ffdaa5b df3d6f14 7844db86     ...S[.._.o=...Dx
    3260:	caaff381 b968c43e 3824342c c2a3405f     ....>.h.,4$8_@..
    3270:	161dc372 bce2250c 283c498b ff0d9541     r....%...I<(A...
    3280:	39a80171 080cb3de d8b4e49c 6456c190     q..9..........Vd
    3290:	7bcb8461 d532b670 486c5c74 d0b85742     a..{p.2.t\lHBW..
    32a0:	5051f4a7 537e4165 c31a17a4 963a275e     ..QPeA~S....^':.
    32b0:	cb3bab6b f11f9d45 abacfa58 934be303     k.;.E...X.....K.
    32c0:	552030fa f6ad766d 9188cc76 25f5024c     .0 Umv..v...L..%
    32d0:	fc4fe5d7 d7c52acb 80263544 8fb562a3     ..O..*..D5&..b..
    32e0:	49deb15a 6725ba1b 9845ea0e e15dfec0     Z..I..%g..E...].
    32f0:	02c32f75 12814cf0 a38d4697 c66bd3f9     u/...L...F....k.
    3300:	e7038f5f 9515929c ebbf6d7a da955259     _.......zm..YR..
    3310:	2dd4be83 d3587421 2949e069 448ec9c8     ...-!tX.i.I)...D
    3320:	6a75c289 78f48e79 6b99583e dd27b971     ..ujy..x>X.kq.'.
    3330:	b6bee14f 17f088ad 66c920ac b47dce3a     O........ .f:.}.
    3340:	1863df4a 82e51a31 60975133 4562537f     J.c.1...3Q.`.SbE
    3350:	e0b16477 84bb6bae 1cfe81a0 94f9082b     wd...k......+...
    3360:	58704868 198f45fd 8794de6c b7527bf8     hHpX.E..l....{R.
    3370:	23ab73d3 e2724b02 57e31f8f 2a6655ab     .s.#.Kr....W.Uf*
    3380:	07b2eb28 032fb5c2 9a86c57b a5d33708     (...../.{....7..
    3390:	f2302887 b223bfa5 ba02036a 5ced1682     .(0...#.j......\
    33a0:	2b8acf1c 92a779b4 f0f307f2 a14e69e2     ...+.y.......iN.
    33b0:	cd65daf4 d50605be 1fd13462 8ac4a6fe     ..e.....b4......
    33c0:	9d342e53 a0a2f355 32058ae1 75a4f6eb     S.4.U......2...u
    33d0:	390b83ec aa4060ef 065e719f 51bd6e10     ...9.`@..q^..n.Q
    33e0:	f93e218a 3d96dd06 aedd3e05 464de6bd     .!>....=.>....MF
    33f0:	b591548d 0571c45d 6f0406d4 ff605015     .T..].q....o.P`.
    3400:	241998fb 97d6bde9 cc894043 7767d99e     ...$....C@....gw
    3410:	bdb0e842 8807898b 38e7195b db79c8ee     B.......[..8..y.
    3420:	47a17c0a e97c420f c9f8841e 00000000     .|.G.B|.........
    3430:	83098086 48322bed ac1e1170 4e6c5a72     .....+2Hp...rZlN
    3440:	fbfd0eff 560f8538 1e3daed5 27362d39     ....8..V..=.9-6'
    3450:	640a0fd9 21685ca6 d19b5b54 3a24362e     ...d.\h!T[...6$:
    3460:	b10c0a67 0f9357e7 d2b4ee96 9e1b9b91     g....W..........
    3470:	4f80c0c5 a261dc20 695a774b 161c121a     ...O .a.KwZi....
    3480:	0ae293ba e5c0a02a 433c22e0 1d121b17     ....*...."<C....
    3490:	0b0e090d adf28bc7 b92db6a8 c8141ea9     ..........-.....
    34a0:	8557f119 4caf7507 bbee99dd fda37f60     ..W..u.L....`...
    34b0:	9ff70126 bc5c72f5 c544663b 345bfb7e     &....r\.;fD.~.[4
    34c0:	768b4329 dccb23c6 68b6edfc 63b8e4f1     )C.v.#.....h...c
    34d0:	cad731dc 10426385 40139722 2084c611     .1...cB."..@... 
    34e0:	7d854a24 f8d2bb3d 11aef932 6dc729a1     $J.}=...2....).m
    34f0:	4b1d9e2f f3dcb230 ec0d8652 d077c1e3     /..K0...R.....w.
    3500:	6c2bb316 99a970b9 fa119448 2247e964     ..+l.p..H...d.G"
    3510:	c4a8fc8c 1aa0f03f d8567d2c ef223390     ....?...,}V..3".
    3520:	c787494e c1d938d1 fe8ccaa2 3698d40b     NI...8.........6
    3530:	cfa6f581 28a57ade 26dab78e a43fadbf     .....z.(...&..?.
    3540:	e42c3a9d 0d507892 9b6a5fcc 62547e46     .:,..xP.._j.F~Tb
    3550:	c2f68d13 e890d8b8 5e2e39f7 f582c3af     .........9.^....
    3560:	be9f5d80 7c69d093 a96fd52d b3cf2512     .]....i|-.o..%..
    3570:	3bc8ac99 a710187d 6ee89c63 7bdb3bbb     ...;}...c..n.;.{
    3580:	09cd2678 f46e5918 01ec9ab7 a8834f9a     x&...Yn......O..
    3590:	65e6956e 7eaaffe6 0821bccf e6ef15e8     n..e...~..!.....
    35a0:	d9bae79b ce4a6f36 d4ea9f09 d629b07c     ....6oJ.....|.).
    35b0:	af31a4b2 312a3f23 30c6a594 c035a266     ..1.#?*1...0f.5.
    35c0:	37744ebc a6fc82ca b0e090d0 1533a7d8     .Nt7..........3.
    35d0:	4af10498 f741ecda 0e7fcd50 2f1791f6     ...J..A.P....../
    35e0:	8d764dd6 4d43efb0 54ccaa4d dfe49604     .Mv...CMM..T....
    35f0:	e39ed1b5 1b4c6a88 b8c12c1f 7f466551     .....jL..,..QeF.
    3600:	049d5eea 5d018c35 73fa8774 2efb0b41     .^..5..]t..sA...
    3610:	5ab3671d 5292dbd2 33e91056 136dd647     .g.Z...RV..3G.m.
    3620:	8c9ad761 7a37a10c 8e59f814 89eb133c     a.....7z..Y.<...
    3630:	eecea927 35b761c9 ede11ce5 3c7a47b1     '....a.5.....Gz<
    3640:	599cd2df 3f55f273 791814ce bf73c737     ...Ys.U?...y7.s.
    3650:	ea53f7cd 5b5ffdaa 14df3d6f 867844db     ..S..._[o=...Dx.
    3660:	81caaff3 3eb968c4 2c382434 5fc2a340     .....h.>4$8,@.._
    3670:	72161dc3 0cbce225 8b283c49 41ff0d95     ...r%...I<(....A
    3680:	7139a801 de080cb3 9cd8b4e4 906456c1     ..9q.........Vd.
    3690:	617bcb84 70d532b6 74486c5c 42d0b857     ..{a.2.p\lHtW..B
    36a0:	a75051f4 65537e41 a4c31a17 5e963a27     .QP.A~Se....':.^
    36b0:	6bcb3bab 45f11f9d 58abacfa 03934be3     .;.k...E...X.K..
    36c0:	fa552030 6df6ad76 769188cc 4c25f502     0 U.v..m...v..%L
    36d0:	d7fc4fe5 cbd7c52a 44802635 a38fb562     .O..*...5&.Db...
    36e0:	5a49deb1 1b6725ba 0e9845ea c0e15dfe     ..IZ.%g..E...]..
    36f0:	7502c32f f012814c 97a38d46 f9c66bd3     /..uL...F....k..
    3700:	5fe7038f 9c951592 7aebbf6d 59da9552     ..._....m..zR..Y
    3710:	832dd4be 21d35874 692949e0 c8448ec9     ..-.tX.!.I)i..D.
    3720:	896a75c2 7978f48e 3e6b9958 71dd27b9     .uj...xyX.k>.'.q
    3730:	4fb6bee1 ad17f088 ac66c920 3ab47dce     ...O.... .f..}.:
    3740:	4a1863df 3182e51a 33609751 7f456253     .c.J...1Q.`3SbE.
    3750:	77e0b164 ae84bb6b a01cfe81 2b94f908     d..wk..........+
    3760:	68587048 fd198f45 6c8794de f8b7527b     HpXhE......l{R..
    3770:	d323ab73 02e2724b 8f57e31f ab2a6655     s.#.Kr....W.Uf*.
    3780:	2807b2eb c2032fb5 7b9a86c5 08a5d337     ...(./.....{7...
    3790:	87f23028 a5b223bf 6aba0203 825ced16     (0...#.....j..\.
    37a0:	1c2b8acf b492a779 f2f0f307 e2a14e69     ..+.y.......iN..
    37b0:	f4cd65da bed50605 621fd134 fe8ac4a6     .e......4..b....
    37c0:	539d342e 55a0a2f3 e132058a eb75a4f6     .4.S...U..2...u.
    37d0:	ec390b83 efaa4060 9f065e71 1051bd6e     ..9.`@..q^..n.Q.
    37e0:	8af93e21 063d96dd 05aedd3e bd464de6     !>....=.>....MF.
    37f0:	8db59154 5d0571c4 d46f0406 15ff6050     T....q.]..o.P`..
    3800:	fb241998 e997d6bd 43cc8940 9e7767d9     ..$.....@..C.gw.
    3810:	42bdb0e8 8b880789 5b38e719 eedb79c8     ...B......8[.y..
    3820:	0a47a17c 0fe97c42 1ec9f884 00000000     |.G.B|..........
    3830:	86830980 ed48322b 70ac1e11 724e6c5a     ....+2H....pZlNr
    3840:	fffbfd0e 38560f85 d51e3dae 3927362d     ......V8.=..-6'9
    3850:	d9640a0f a621685c 54d19b5b 2e3a2436     ..d.\h!.[..T6$:.
    3860:	67b10c0a e70f9357 96d2b4ee 919e1b9b     ...gW...........
    3870:	c54f80c0 20a261dc 4b695a77 1a161c12     ..O..a. wZiK....
    3880:	ba0ae293 2ae5c0a0 e0433c22 171d121b     .......*"<C.....
    3890:	0d0b0e09 c7adf28b a8b92db6 a9c8141e     .........-......
    38a0:	198557f1 074caf75 ddbbee99 60fda37f     .W..u.L........`
    38b0:	269ff701 f5bc5c72 3bc54466 7e345bfb     ...&r\..fD.;.[4~
    38c0:	29768b43 c6dccb23 fc68b6ed f163b8e4     C.v)#.....h...c.
    38d0:	dccad731 85104263 22401397 112084c6     1...cB....@".. .
    38e0:	247d854a 3df8d2bb 3211aef9 a16dc729     J.}$...=...2).m.
    38f0:	2f4b1d9e 30f3dcb2 52ec0d86 e3d077c1     ..K/...0...R.w..
    3900:	166c2bb3 b999a970 48fa1194 642247e9     .+l.p......H.G"d
    3910:	8cc4a8fc 3f1aa0f0 2cd8567d 90ef2233     .......?}V.,3"..
    3920:	4ec78749 d1c1d938 a2fe8cca 0b3698d4     I..N8.........6.
    3930:	81cfa6f5 de28a57a 8e26dab7 bfa43fad     ....z.(...&..?..
    3940:	9de42c3a 920d5078 cc9b6a5f 4662547e     :,..xP.._j..~TbF
    3950:	13c2f68d b8e890d8 f75e2e39 aff582c3     ........9.^.....
    3960:	80be9f5d 937c69d0 2da96fd5 12b3cf25     ]....i|..o.-%...
    3970:	993bc8ac 7da71018 636ee89c bb7bdb3b     ..;....}..nc;.{.
    3980:	7809cd26 18f46e59 b701ec9a 9aa8834f     &..xYn......O...
    3990:	6e65e695 e67eaaff cf0821bc e8e6ef15     ..en..~..!......
    39a0:	9bd9bae7 36ce4a6f 09d4ea9f 7cd629b0     ....oJ.6.....).|
    39b0:	b2af31a4 23312a3f 9430c6a5 66c035a2     .1..?*1#..0..5.f
    39c0:	bc37744e caa6fc82 d0b0e090 d81533a7     Nt7..........3..
    39d0:	984af104 daf741ec 500e7fcd f62f1791     ..J..A.....P../.
    39e0:	d68d764d b04d43ef 4d54ccaa 04dfe496     Mv...CM...TM....
    39f0:	b5e39ed1 881b4c6a 1fb8c12c 517f4665     ....jL..,...eF.Q
    3a00:	ea049d5e 355d018c 7473fa87 412efb0b     ^.....]5..st...A
    3a10:	1d5ab367 d25292db 5633e910 47136dd6     g.Z...R...3V.m.G
    3a20:	618c9ad7 0c7a37a1 148e59f8 3c89eb13     ...a.7z..Y.....<
    3a30:	27eecea9 c935b761 e5ede11c b13c7a47     ...'a.5.....Gz<.
    3a40:	df599cd2 733f55f2 ce791814 37bf73c7     ..Y..U?s..y..s.7
    3a50:	cdea53f7 aa5b5ffd 6f14df3d db867844     .S..._[.=..oDx..
    3a60:	f381caaf c43eb968 342c3824 405fc2a3     ....h.>.$8,4.._@
    3a70:	c372161d 250cbce2 498b283c 9541ff0d     ..r....%<(.I..A.
    3a80:	017139a8 b3de080c e49cd8b4 c1906456     .9q.........Vd..
    3a90:	84617bcb b670d532 5c74486c 5742d0b8     .{a.2.p.lHt\..BW
    3aa0:	f4a75051 4165537e 17a4c31a 275e963a     QP..~SeA....:.^'
    3ab0:	ab6bcb3b 9d45f11f fa58abac e303934b     ;.k...E...X.K...
    3ac0:	30fa5520 766df6ad cc769188 024c25f5      U.0..mv..v..%L.
    3ad0:	e5d7fc4f 2acbd7c5 35448026 62a38fb5     O......*&.D5...b
    3ae0:	b15a49de ba1b6725 ea0e9845 fec0e15d     .IZ.%g..E...]...
    3af0:	2f7502c3 4cf01281 4697a38d d3f9c66b     ..u/...L...Fk...
    3b00:	8f5fe703 929c9515 6d7aebbf 5259da95     .._.......zm..YR
    3b10:	be832dd4 7421d358 e0692949 c9c8448e     .-..X.!tI)i..D..
    3b20:	c2896a75 8e7978f4 583e6b99 b971dd27     uj...xy..k>X'.q.
    3b30:	e14fb6be 88ad17f0 20ac66c9 ce3ab47d     ..O......f. }.:.
    3b40:	df4a1863 1a3182e5 51336097 537f4562     c.J...1..`3QbE.S
    3b50:	6477e0b1 6bae84bb 81a01cfe 082b94f9     ..wd...k......+.
    3b60:	48685870 45fd198f de6c8794 7bf8b752     pXhH...E..l.R..{
    3b70:	73d323ab 4b02e272 1f8f57e3 55ab2a66     .#.sr..K.W..f*.U
    3b80:	eb2807b2 b5c2032f c57b9a86 3708a5d3     ..(./.....{....7
    3b90:	2887f230 bfa5b223 036aba02 16825ced     0..(#.....j..\..
    3ba0:	cf1c2b8a 79b492a7 07f2f0f3 69e2a14e     .+.....y....N..i
    3bb0:	daf4cd65 05bed506 34621fd1 a6fe8ac4     e.........b4....
    3bc0:	2e539d34 f355a0a2 8ae13205 f6eb75a4     4.S...U..2...u..
    3bd0:	83ec390b 60efaa40 719f065e 6e1051bd     .9..@..`^..q.Q.n
    3be0:	218af93e dd063d96 3e05aedd e6bd464d     >..!.=.....>MF..
    3bf0:	548db591 c45d0571 06d46f04 5015ff60     ...Tq.]..o..`..P
    3c00:	98fb2419 bde997d6 4043cc89 d99e7767     .$........C@gw..
    3c10:	e842bdb0 898b8807 195b38e7 c8eedb79     ..B......8[.y...
    3c20:	7c0a47a1 420fe97c 841ec9f8 00000000     .G.||..B........
    3c30:	80868309 2bed4832 1170ac1e 5a724e6c     ....2H.+..p.lNrZ
    3c40:	0efffbfd 8538560f aed51e3d 2d392736     .....V8.=...6'9-
    3c50:	0fd9640a 5ca62168 5b54d19b 362e3a24     .d..h!.\..T[$:.6
    3c60:	0a67b10c 57e70f93 ee96d2b4 9b919e1b     ..g....W........
    3c70:	c0c54f80 dc20a261 774b695a 121a161c     .O..a. .ZiKw....
    3c80:	93ba0ae2 a02ae5c0 22e0433c 1b171d12     ......*.<C."....
    3c90:	090d0b0e 8bc7adf2 b6a8b92d 1ea9c814     ........-.......
    3ca0:	f1198557 75074caf 99ddbbee 7f60fda3     W....L.u......`.
    3cb0:	01269ff7 72f5bc5c 663bc544 fb7e345b     ..&.\..rD.;f[4~.
    3cc0:	4329768b 23c6dccb edfc68b6 e4f163b8     .v)C...#.h...c..
    3cd0:	31dccad7 63851042 97224013 c6112084     ...1B..c.@".. ..
    3ce0:	4a247d85 bb3df8d2 f93211ae 29a16dc7     .}$J..=...2..m.)
    3cf0:	9e2f4b1d b230f3dc 8652ec0d c1e3d077     .K/...0...R.w...
    3d00:	b3166c2b 70b999a9 9448fa11 e9642247     +l.....p..H.G"d.
    3d10:	fc8cc4a8 f03f1aa0 7d2cd856 3390ef22     ......?.V.,}"..3
    3d20:	494ec787 38d1c1d9 caa2fe8c d40b3698     ..NI...8.....6..
    3d30:	f581cfa6 7ade28a5 b78e26da adbfa43f     .....(.z.&..?...
    3d40:	3a9de42c 78920d50 5fcc9b6a 7e466254     ,..:P..xj.._TbF~
    3d50:	8d13c2f6 d8b8e890 39f75e2e c3aff582     .........^.9....
    3d60:	5d80be9f d0937c69 d52da96f 2512b3cf     ...]i|..o.-....%
    3d70:	ac993bc8 187da710 9c636ee8 3bbb7bdb     .;....}..nc..{.;
    3d80:	267809cd 5918f46e 9ab701ec 4f9aa883     ..x&n..Y.......O
    3d90:	956e65e6 ffe67eaa bccf0821 15e8e6ef     .en..~..!.......
    3da0:	e79bd9ba 6f36ce4a 9f09d4ea b07cd629     ....J.6o....).|.
    3db0:	a4b2af31 3f23312a a59430c6 a266c035     1...*1#?.0..5.f.
    3dc0:	4ebc3774 82caa6fc 90d0b0e0 a7d81533     t7.N........3...
    3dd0:	04984af1 ecdaf741 cd500e7f 91f62f17     .J..A.....P../..
    3de0:	4dd68d76 efb04d43 aa4d54cc 9604dfe4     v..MCM...TM.....
    3df0:	d1b5e39e 6a881b4c 2c1fb8c1 65517f46     ....L..j...,F.Qe
    3e00:	5eea049d 8c355d01 877473fa 0b412efb     ...^.]5..st...A.
    3e10:	671d5ab3 dbd25292 105633e9 d647136d     .Z.g.R...3V.m.G.
    3e20:	d7618c9a a10c7a37 f8148e59 133c89eb     ..a.7z..Y.....<.
    3e30:	a927eece 61c935b7 1ce5ede1 47b13c7a     ..'..5.a....z<.G
    3e40:	d2df599c f2733f55 14ce7918 c737bf73     .Y..U?s..y..s.7.
    3e50:	f7cdea53 fdaa5b5f 3d6f14df 44db8678     S..._[....o=x..D
    3e60:	aff381ca 68c43eb9 24342c38 a3405fc2     .....>.h8,4$._@.
    3e70:	1dc37216 e2250cbc 3c498b28 0d9541ff     .r....%.(.I<.A..
    3e80:	a8017139 0cb3de08 b4e49cd8 56c19064     9q..........d..V
    3e90:	cb84617b 32b670d5 6c5c7448 b85742d0     {a...p.2Ht\l.BW.

00003ea0 <Td4>:
    3ea0:	d56a0952 38a53630 9ea340bf fbd7f381     R.j.06.8.@......
    3eb0:	8239e37c 87ff2f9b 44438e34 cbe9dec4     |.9../..4.CD....
    3ec0:	32947b54 3d23c2a6 0b954cee 4ec3fa42     T{.2..#=.L..B..N
    3ed0:	66a12e08 b224d928 49a25b76 25d18b6d     ...f(.$.v[.Im..%
    3ee0:	64f6f872 16986886 cc5ca4d4 92b6655d     r..d.h....\.]e..
    3ef0:	5048706c dab9edfd 5746155e 849d8da7     lpHP....^.FW....
    3f00:	00abd890 0ad3bc8c 0558e4f7 0645b3b8     ..........X...E.
    3f10:	8f1e2cd0 020f3fca 03bdafc1 6b8a1301     .,...?.........k
    3f20:	4111913a eadc674f cecff297 73e6b4f0     :..AOg.........s
    3f30:	2274ac96 8535ade7 e837f9e2 6edf751c     ..t"..5...7..u.n
    3f40:	711af147 89c5291d 0e62b76f 1bbe18aa     G..q.)..o.b.....
    3f50:	4b3e56fc 2079d2c6 fec0db9a f45acd78     .V>K..y ....x.Z.
    3f60:	33a8dd1f 31c70788 591012b1 5fec8027     ...3...1...Y'.._
    3f70:	a97f5160 0d4ab519 9f7ae52d ef9cc993     `Q....J.-.z.....
    3f80:	4d3be0a0 b0f52aae 3cbbebc8 61995383     ..;M.*.....<.S.a
    3f90:	7e042b17 26d677ba 631469e1 7d0c2155     .+.~.w.&.i.cU!.}

00003fa0 <__sf_fake_stderr>:
	...

00003fc0 <__sf_fake_stdin>:
	...

00003fe0 <__sf_fake_stdout>:
	...

00004000 <_init>:
    4000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4002:	46c0      	nop			; (mov r8, r8)
    4004:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4006:	bc08      	pop	{r3}
    4008:	469e      	mov	lr, r3
    400a:	4770      	bx	lr

0000400c <__init_array_start>:
    400c:	000000dd 	.word	0x000000dd

00004010 <_fini>:
    4010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4012:	46c0      	nop			; (mov r8, r8)
    4014:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4016:	bc08      	pop	{r3}
    4018:	469e      	mov	lr, r3
    401a:	4770      	bx	lr

0000401c <__fini_array_start>:
    401c:	000000b5 	.word	0x000000b5
