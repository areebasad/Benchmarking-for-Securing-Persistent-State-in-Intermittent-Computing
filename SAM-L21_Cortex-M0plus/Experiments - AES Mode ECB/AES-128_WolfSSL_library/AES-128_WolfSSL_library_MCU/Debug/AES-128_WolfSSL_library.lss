
AES-128_WolfSSL_library.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003d80  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000084  20000000  00003d80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  00020084  2**0
                  CONTENTS
  3 .bss          00000050  20000084  00003e04  00020084  2**2
                  ALLOC
  4 .stack        00002004  200000d4  00003e54  00020084  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
  7 .debug_info   00010c07  00000000  00000000  00020105  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002b87  00000000  00000000  00030d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00005ed0  00000000  00000000  00033893  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000508  00000000  00000000  00039763  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000570  00000000  00000000  00039c6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001b76e  00000000  00000000  0003a1db  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000cd19  00000000  00000000  00055949  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0008e777  00000000  00000000  00062662  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000da8  00000000  00000000  000f0ddc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	d8 20 00 20 2d 01 00 00 29 01 00 00 29 01 00 00     . . -...)...)...
	...
      2c:	29 01 00 00 00 00 00 00 00 00 00 00 29 01 00 00     )...........)...
      3c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      4c:	29 01 00 00 91 05 00 00 29 01 00 00 29 01 00 00     ).......)...)...
      5c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      6c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      7c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      8c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      9c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      ac:	29 01 00 00 00 00 00 00                             ).......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000084 	.word	0x20000084
      d4:	00000000 	.word	0x00000000
      d8:	00003d80 	.word	0x00003d80

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000088 	.word	0x20000088
     108:	00003d80 	.word	0x00003d80
     10c:	00003d80 	.word	0x00003d80
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     114:	b510      	push	{r4, lr}
	system_init();
     116:	4b02      	ldr	r3, [pc, #8]	; (120 <atmel_start_init+0xc>)
     118:	4798      	blx	r3
	
	gpio_init();
     11a:	4b02      	ldr	r3, [pc, #8]	; (124 <atmel_start_init+0x10>)
     11c:	4798      	blx	r3

}
     11e:	bd10      	pop	{r4, pc}
     120:	0000020d 	.word	0x0000020d
     124:	00000259 	.word	0x00000259

00000128 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     128:	e7fe      	b.n	128 <Dummy_Handler>
	...

0000012c <Reset_Handler>:
{
     12c:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     12e:	4a1a      	ldr	r2, [pc, #104]	; (198 <Reset_Handler+0x6c>)
     130:	4b1a      	ldr	r3, [pc, #104]	; (19c <Reset_Handler+0x70>)
     132:	429a      	cmp	r2, r3
     134:	d011      	beq.n	15a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     136:	001a      	movs	r2, r3
     138:	4b19      	ldr	r3, [pc, #100]	; (1a0 <Reset_Handler+0x74>)
     13a:	429a      	cmp	r2, r3
     13c:	d20d      	bcs.n	15a <Reset_Handler+0x2e>
     13e:	4a19      	ldr	r2, [pc, #100]	; (1a4 <Reset_Handler+0x78>)
     140:	3303      	adds	r3, #3
     142:	1a9b      	subs	r3, r3, r2
     144:	089b      	lsrs	r3, r3, #2
     146:	3301      	adds	r3, #1
     148:	009b      	lsls	r3, r3, #2
     14a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     14c:	4813      	ldr	r0, [pc, #76]	; (19c <Reset_Handler+0x70>)
     14e:	4912      	ldr	r1, [pc, #72]	; (198 <Reset_Handler+0x6c>)
     150:	588c      	ldr	r4, [r1, r2]
     152:	5084      	str	r4, [r0, r2]
     154:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     156:	429a      	cmp	r2, r3
     158:	d1fa      	bne.n	150 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     15a:	4a13      	ldr	r2, [pc, #76]	; (1a8 <Reset_Handler+0x7c>)
     15c:	4b13      	ldr	r3, [pc, #76]	; (1ac <Reset_Handler+0x80>)
     15e:	429a      	cmp	r2, r3
     160:	d20a      	bcs.n	178 <Reset_Handler+0x4c>
     162:	43d3      	mvns	r3, r2
     164:	4911      	ldr	r1, [pc, #68]	; (1ac <Reset_Handler+0x80>)
     166:	185b      	adds	r3, r3, r1
     168:	2103      	movs	r1, #3
     16a:	438b      	bics	r3, r1
     16c:	3304      	adds	r3, #4
     16e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     170:	2100      	movs	r1, #0
     172:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     174:	4293      	cmp	r3, r2
     176:	d1fc      	bne.n	172 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     178:	4a0d      	ldr	r2, [pc, #52]	; (1b0 <Reset_Handler+0x84>)
     17a:	21ff      	movs	r1, #255	; 0xff
     17c:	4b0d      	ldr	r3, [pc, #52]	; (1b4 <Reset_Handler+0x88>)
     17e:	438b      	bics	r3, r1
     180:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
     182:	4a0d      	ldr	r2, [pc, #52]	; (1b8 <Reset_Handler+0x8c>)
     184:	6853      	ldr	r3, [r2, #4]
     186:	397f      	subs	r1, #127	; 0x7f
     188:	430b      	orrs	r3, r1
     18a:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     18c:	4b0b      	ldr	r3, [pc, #44]	; (1bc <Reset_Handler+0x90>)
     18e:	4798      	blx	r3
        main();
     190:	4b0b      	ldr	r3, [pc, #44]	; (1c0 <Reset_Handler+0x94>)
     192:	4798      	blx	r3
     194:	e7fe      	b.n	194 <Reset_Handler+0x68>
     196:	46c0      	nop			; (mov r8, r8)
     198:	00003d80 	.word	0x00003d80
     19c:	20000000 	.word	0x20000000
     1a0:	20000084 	.word	0x20000084
     1a4:	20000004 	.word	0x20000004
     1a8:	20000084 	.word	0x20000084
     1ac:	200000d4 	.word	0x200000d4
     1b0:	e000ed00 	.word	0xe000ed00
     1b4:	00000000 	.word	0x00000000
     1b8:	41004000 	.word	0x41004000
     1bc:	00001a0d 	.word	0x00001a0d
     1c0:	00000a3d 	.word	0x00000a3d

000001c4 <FLASH_0_CLOCK_init>:
}

static inline void hri_mclk_set_AHBMASK_NVMCTRL_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
     1c4:	4a03      	ldr	r2, [pc, #12]	; (1d4 <FLASH_0_CLOCK_init+0x10>)
     1c6:	6911      	ldr	r1, [r2, #16]
     1c8:	2380      	movs	r3, #128	; 0x80
     1ca:	005b      	lsls	r3, r3, #1
     1cc:	430b      	orrs	r3, r1
     1ce:	6113      	str	r3, [r2, #16]

void FLASH_0_CLOCK_init(void)
{

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}
     1d0:	4770      	bx	lr
     1d2:	46c0      	nop			; (mov r8, r8)
     1d4:	40000400 	.word	0x40000400

000001d8 <FLASH_0_init>:

void FLASH_0_init(void)
{
     1d8:	b510      	push	{r4, lr}
	FLASH_0_CLOCK_init();
     1da:	4b03      	ldr	r3, [pc, #12]	; (1e8 <FLASH_0_init+0x10>)
     1dc:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     1de:	4903      	ldr	r1, [pc, #12]	; (1ec <FLASH_0_init+0x14>)
     1e0:	4803      	ldr	r0, [pc, #12]	; (1f0 <FLASH_0_init+0x18>)
     1e2:	4b04      	ldr	r3, [pc, #16]	; (1f4 <FLASH_0_init+0x1c>)
     1e4:	4798      	blx	r3
}
     1e6:	bd10      	pop	{r4, pc}
     1e8:	000001c5 	.word	0x000001c5
     1ec:	41004000 	.word	0x41004000
     1f0:	200000b4 	.word	0x200000b4
     1f4:	0000035d 	.word	0x0000035d

000001f8 <delay_driver_init>:

void delay_driver_init(void)
{
     1f8:	b510      	push	{r4, lr}
	delay_init(SysTick);
     1fa:	4802      	ldr	r0, [pc, #8]	; (204 <delay_driver_init+0xc>)
     1fc:	4b02      	ldr	r3, [pc, #8]	; (208 <delay_driver_init+0x10>)
     1fe:	4798      	blx	r3
}
     200:	bd10      	pop	{r4, pc}
     202:	46c0      	nop			; (mov r8, r8)
     204:	e000e010 	.word	0xe000e010
     208:	00000311 	.word	0x00000311

0000020c <system_init>:

void system_init(void)
{
     20c:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     20e:	4b0d      	ldr	r3, [pc, #52]	; (244 <system_init+0x38>)
     210:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     212:	23c0      	movs	r3, #192	; 0xc0
     214:	05db      	lsls	r3, r3, #23
     216:	2280      	movs	r2, #128	; 0x80
     218:	00d2      	lsls	r2, r2, #3
     21a:	2194      	movs	r1, #148	; 0x94
     21c:	505a      	str	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     21e:	390c      	subs	r1, #12
     220:	505a      	str	r2, [r3, r1]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     222:	4b09      	ldr	r3, [pc, #36]	; (248 <system_init+0x3c>)
     224:	22a8      	movs	r2, #168	; 0xa8
     226:	4909      	ldr	r1, [pc, #36]	; (24c <system_init+0x40>)
     228:	5099      	str	r1, [r3, r2]
     22a:	21c0      	movs	r1, #192	; 0xc0
     22c:	0609      	lsls	r1, r1, #24
     22e:	5099      	str	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     230:	21ca      	movs	r1, #202	; 0xca
     232:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     234:	2001      	movs	r0, #1
     236:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     238:	545a      	strb	r2, [r3, r1]
	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);

	FLASH_0_init();
     23a:	4b05      	ldr	r3, [pc, #20]	; (250 <system_init+0x44>)
     23c:	4798      	blx	r3

	delay_driver_init();
     23e:	4b05      	ldr	r3, [pc, #20]	; (254 <system_init+0x48>)
     240:	4798      	blx	r3
}
     242:	bd10      	pop	{r4, pc}
     244:	000003d9 	.word	0x000003d9
     248:	40002800 	.word	0x40002800
     24c:	40000400 	.word	0x40000400
     250:	000001d9 	.word	0x000001d9
     254:	000001f9 	.word	0x000001f9

00000258 <gpio_init>:

#include "driver_init.h"
#include "gpio_init.h"

void gpio_init(void)
{
     258:	b5f0      	push	{r4, r5, r6, r7, lr}
     25a:	46c6      	mov	lr, r8
     25c:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     25e:	22c0      	movs	r2, #192	; 0xc0
     260:	05d2      	lsls	r2, r2, #23
     262:	2302      	movs	r3, #2
     264:	2194      	movs	r1, #148	; 0x94
     266:	5053      	str	r3, [r2, r1]
     268:	2180      	movs	r1, #128	; 0x80
     26a:	0249      	lsls	r1, r1, #9
     26c:	6151      	str	r1, [r2, #20]
     26e:	2780      	movs	r7, #128	; 0x80
     270:	037f      	lsls	r7, r7, #13
     272:	6157      	str	r7, [r2, #20]
     274:	2080      	movs	r0, #128	; 0x80
     276:	0380      	lsls	r0, r0, #14
     278:	4680      	mov	r8, r0
     27a:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     27c:	2688      	movs	r6, #136	; 0x88
     27e:	5193      	str	r3, [r2, r6]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     280:	4b1c      	ldr	r3, [pc, #112]	; (2f4 <gpio_init+0x9c>)
     282:	20a8      	movs	r0, #168	; 0xa8
     284:	4d1c      	ldr	r5, [pc, #112]	; (2f8 <gpio_init+0xa0>)
     286:	501d      	str	r5, [r3, r0]
     288:	25c0      	movs	r5, #192	; 0xc0
     28a:	062d      	lsls	r5, r5, #24
     28c:	501d      	str	r5, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     28e:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     290:	2180      	movs	r1, #128	; 0x80
     292:	05c9      	lsls	r1, r1, #23
     294:	6299      	str	r1, [r3, #40]	; 0x28
     296:	4c19      	ldr	r4, [pc, #100]	; (2fc <gpio_init+0xa4>)
     298:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     29a:	6097      	str	r7, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     29c:	6299      	str	r1, [r3, #40]	; 0x28
     29e:	4f18      	ldr	r7, [pc, #96]	; (300 <gpio_init+0xa8>)
     2a0:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     2a2:	4644      	mov	r4, r8
     2a4:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     2a6:	6299      	str	r1, [r3, #40]	; 0x28
     2a8:	4916      	ldr	r1, [pc, #88]	; (304 <gpio_init+0xac>)
     2aa:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2ac:	27c1      	movs	r7, #193	; 0xc1
     2ae:	5ddc      	ldrb	r4, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2b0:	2101      	movs	r1, #1
     2b2:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2b4:	55dc      	strb	r4, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2b6:	3f71      	subs	r7, #113	; 0x71
     2b8:	5ddc      	ldrb	r4, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2ba:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2bc:	55dc      	strb	r4, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2be:	3704      	adds	r7, #4
     2c0:	5ddc      	ldrb	r4, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2c2:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2c4:	55dc      	strb	r4, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2c6:	3701      	adds	r7, #1
     2c8:	5ddc      	ldrb	r4, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2ca:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2cc:	55dc      	strb	r4, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     2ce:	2480      	movs	r4, #128	; 0x80
     2d0:	00e4      	lsls	r4, r4, #3
     2d2:	3743      	adds	r7, #67	; 0x43
     2d4:	51d4      	str	r4, [r2, r7]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     2d6:	5194      	str	r4, [r2, r6]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     2d8:	4a0b      	ldr	r2, [pc, #44]	; (308 <gpio_init+0xb0>)
     2da:	501a      	str	r2, [r3, r0]
     2dc:	501d      	str	r5, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2de:	3022      	adds	r0, #34	; 0x22
     2e0:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2e2:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2e4:	541a      	strb	r2, [r3, r0]
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
#endif

	delay_ms(10);
     2e6:	38c0      	subs	r0, #192	; 0xc0
     2e8:	4b08      	ldr	r3, [pc, #32]	; (30c <gpio_init+0xb4>)
     2ea:	4798      	blx	r3
     2ec:	bc04      	pop	{r2}
     2ee:	4690      	mov	r8, r2
     2f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2f2:	46c0      	nop			; (mov r8, r8)
     2f4:	40002800 	.word	0x40002800
     2f8:	40000002 	.word	0x40000002
     2fc:	c0000001 	.word	0xc0000001
     300:	c0000010 	.word	0xc0000010
     304:	c0000020 	.word	0xc0000020
     308:	40000400 	.word	0x40000400
     30c:	00000325 	.word	0x00000325

00000310 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     310:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
     312:	4b02      	ldr	r3, [pc, #8]	; (31c <delay_init+0xc>)
     314:	6018      	str	r0, [r3, #0]
     316:	4b02      	ldr	r3, [pc, #8]	; (320 <delay_init+0x10>)
     318:	4798      	blx	r3
}
     31a:	bd10      	pop	{r4, pc}
     31c:	200000a0 	.word	0x200000a0
     320:	000007c1 	.word	0x000007c1

00000324 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     324:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     326:	4b04      	ldr	r3, [pc, #16]	; (338 <delay_ms+0x14>)
     328:	681c      	ldr	r4, [r3, #0]
     32a:	4b04      	ldr	r3, [pc, #16]	; (33c <delay_ms+0x18>)
     32c:	4798      	blx	r3
     32e:	0001      	movs	r1, r0
     330:	0020      	movs	r0, r4
     332:	4b03      	ldr	r3, [pc, #12]	; (340 <delay_ms+0x1c>)
     334:	4798      	blx	r3
}
     336:	bd10      	pop	{r4, pc}
     338:	200000a0 	.word	0x200000a0
     33c:	000003d1 	.word	0x000003d1
     340:	000007d5 	.word	0x000007d5

00000344 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
     344:	b510      	push	{r4, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
     346:	6943      	ldr	r3, [r0, #20]
     348:	2b00      	cmp	r3, #0
     34a:	d000      	beq.n	34e <flash_ready+0xa>
		descr->callbacks.cb_ready(descr);
     34c:	4798      	blx	r3
	}
}
     34e:	bd10      	pop	{r4, pc}

00000350 <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
     350:	b510      	push	{r4, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
     352:	6983      	ldr	r3, [r0, #24]
     354:	2b00      	cmp	r3, #0
     356:	d000      	beq.n	35a <flash_error+0xa>
		descr->callbacks.cb_error(descr);
     358:	4798      	blx	r3
	}
}
     35a:	bd10      	pop	{r4, pc}

0000035c <flash_init>:
{
     35c:	b570      	push	{r4, r5, r6, lr}
     35e:	0005      	movs	r5, r0
     360:	000c      	movs	r4, r1
	ASSERT(flash && hw);
     362:	2800      	cmp	r0, #0
     364:	d012      	beq.n	38c <flash_init+0x30>
     366:	0008      	movs	r0, r1
     368:	1e43      	subs	r3, r0, #1
     36a:	4198      	sbcs	r0, r3
     36c:	b2c0      	uxtb	r0, r0
     36e:	2238      	movs	r2, #56	; 0x38
     370:	4907      	ldr	r1, [pc, #28]	; (390 <flash_init+0x34>)
     372:	4b08      	ldr	r3, [pc, #32]	; (394 <flash_init+0x38>)
     374:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
     376:	0021      	movs	r1, r4
     378:	0028      	movs	r0, r5
     37a:	4b07      	ldr	r3, [pc, #28]	; (398 <flash_init+0x3c>)
     37c:	4798      	blx	r3
	if (rc) {
     37e:	2800      	cmp	r0, #0
     380:	d103      	bne.n	38a <flash_init+0x2e>
	flash->dev.flash_cb.ready_cb = flash_ready;
     382:	4b06      	ldr	r3, [pc, #24]	; (39c <flash_init+0x40>)
     384:	602b      	str	r3, [r5, #0]
	flash->dev.flash_cb.error_cb = flash_error;
     386:	4b06      	ldr	r3, [pc, #24]	; (3a0 <flash_init+0x44>)
     388:	606b      	str	r3, [r5, #4]
}
     38a:	bd70      	pop	{r4, r5, r6, pc}
     38c:	2000      	movs	r0, #0
     38e:	e7ee      	b.n	36e <flash_init+0x12>
     390:	00001b70 	.word	0x00001b70
     394:	000003a5 	.word	0x000003a5
     398:	000004e1 	.word	0x000004e1
     39c:	00000345 	.word	0x00000345
     3a0:	00000351 	.word	0x00000351

000003a4 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     3a4:	2800      	cmp	r0, #0
     3a6:	d100      	bne.n	3aa <assert+0x6>
		__asm("BKPT #0");
     3a8:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     3aa:	4770      	bx	lr

000003ac <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     3ac:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     3ae:	4a06      	ldr	r2, [pc, #24]	; (3c8 <_sbrk+0x1c>)
     3b0:	6812      	ldr	r2, [r2, #0]
     3b2:	2a00      	cmp	r2, #0
     3b4:	d004      	beq.n	3c0 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     3b6:	4a04      	ldr	r2, [pc, #16]	; (3c8 <_sbrk+0x1c>)
     3b8:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     3ba:	18c3      	adds	r3, r0, r3
     3bc:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     3be:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     3c0:	4902      	ldr	r1, [pc, #8]	; (3cc <_sbrk+0x20>)
     3c2:	4a01      	ldr	r2, [pc, #4]	; (3c8 <_sbrk+0x1c>)
     3c4:	6011      	str	r1, [r2, #0]
     3c6:	e7f6      	b.n	3b6 <_sbrk+0xa>
     3c8:	200000a4 	.word	0x200000a4
     3cc:	200020d8 	.word	0x200020d8

000003d0 <_get_cycles_for_ms>:
{
	switch (power) {
	case 8:
		return (ms * (freq / 100000)) * 100;
	case 7:
		return (ms * (freq / 10000)) * 10;
     3d0:	23fa      	movs	r3, #250	; 0xfa
     3d2:	011b      	lsls	r3, r3, #4
     3d4:	4358      	muls	r0, r3
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     3d6:	4770      	bx	lr

000003d8 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     3d8:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     3da:	4b09      	ldr	r3, [pc, #36]	; (400 <_init_chip+0x28>)
     3dc:	685a      	ldr	r2, [r3, #4]
     3de:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_set_performance_level(2);
     3e0:	2002      	movs	r0, #2
     3e2:	4b08      	ldr	r3, [pc, #32]	; (404 <_init_chip+0x2c>)
     3e4:	4798      	blx	r3

	_osc32kctrl_init_sources();
     3e6:	4b08      	ldr	r3, [pc, #32]	; (408 <_init_chip+0x30>)
     3e8:	4798      	blx	r3
	_oscctrl_init_sources();
     3ea:	4b08      	ldr	r3, [pc, #32]	; (40c <_init_chip+0x34>)
     3ec:	4798      	blx	r3
	_mclk_init();
     3ee:	4b08      	ldr	r3, [pc, #32]	; (410 <_init_chip+0x38>)
     3f0:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     3f2:	4b08      	ldr	r3, [pc, #32]	; (414 <_init_chip+0x3c>)
     3f4:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     3f6:	20ff      	movs	r0, #255	; 0xff
     3f8:	4b07      	ldr	r3, [pc, #28]	; (418 <_init_chip+0x40>)
     3fa:	4798      	blx	r3
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
     3fc:	bd10      	pop	{r4, pc}
     3fe:	46c0      	nop			; (mov r8, r8)
     400:	41004000 	.word	0x41004000
     404:	00000797 	.word	0x00000797
     408:	00000745 	.word	0x00000745
     40c:	0000075d 	.word	0x0000075d
     410:	00000441 	.word	0x00000441
     414:	00000795 	.word	0x00000795
     418:	0000041d 	.word	0x0000041d

0000041c <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     41c:	07c3      	lsls	r3, r0, #31
     41e:	d507      	bpl.n	430 <_gclk_init_generators_by_fref+0x14>
}

static inline void hri_gclk_write_GENCTRL_reg(const void *const hw, uint8_t index, hri_gclk_genctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENCTRL[index].reg = data;
     420:	4a04      	ldr	r2, [pc, #16]	; (434 <_gclk_init_generators_by_fref+0x18>)
     422:	4b05      	ldr	r3, [pc, #20]	; (438 <_gclk_init_generators_by_fref+0x1c>)
     424:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     426:	0019      	movs	r1, r3
     428:	4a04      	ldr	r2, [pc, #16]	; (43c <_gclk_init_generators_by_fref+0x20>)
     42a:	684b      	ldr	r3, [r1, #4]
     42c:	4213      	tst	r3, r2
     42e:	d1fc      	bne.n	42a <_gclk_init_generators_by_fref+0xe>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
}
     430:	4770      	bx	lr
     432:	46c0      	nop			; (mov r8, r8)
     434:	00010106 	.word	0x00010106
     438:	40001800 	.word	0x40001800
     43c:	000007fd 	.word	0x000007fd

00000440 <_mclk_init>:
	((Mclk *)hw)->BUPDIV.reg = data;
     440:	4b03      	ldr	r3, [pc, #12]	; (450 <_mclk_init+0x10>)
     442:	2208      	movs	r2, #8
     444:	719a      	strb	r2, [r3, #6]
	((Mclk *)hw)->LPDIV.reg = data;
     446:	3a04      	subs	r2, #4
     448:	715a      	strb	r2, [r3, #5]
	((Mclk *)hw)->CPUDIV.reg = data;
     44a:	3a03      	subs	r2, #3
     44c:	711a      	strb	r2, [r3, #4]
{
	void *hw = (void *)MCLK;
	hri_mclk_write_BUPDIV_reg(hw, MCLK_BUPDIV_BUPDIV(CONF_MCLK_BUPDIV));
	hri_mclk_write_LPDIV_reg(hw, MCLK_LPDIV_LPDIV(CONF_MCLK_LPDIV));
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
}
     44e:	4770      	bx	lr
     450:	40000400 	.word	0x40000400

00000454 <_flash_program>:
 *                           write is stored
 * \param[in] size           The size of data to write to a page
 */
static void _flash_program(void *const hw, const uint32_t dst_addr, const uint8_t *buffer, const uint16_t size,
                           uint32_t nvmctrl_cmd)
{
     454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     456:	0004      	movs	r4, r0
     458:	000d      	movs	r5, r1
     45a:	0017      	movs	r7, r2
     45c:	001e      	movs	r6, r3
	ASSERT(!(dst_addr % 2));
     45e:	2301      	movs	r3, #1
     460:	404b      	eors	r3, r1
     462:	2001      	movs	r0, #1
     464:	4018      	ands	r0, r3
     466:	22c5      	movs	r2, #197	; 0xc5
     468:	0052      	lsls	r2, r2, #1
     46a:	4919      	ldr	r1, [pc, #100]	; (4d0 <_flash_program+0x7c>)
     46c:	4b19      	ldr	r3, [pc, #100]	; (4d4 <_flash_program+0x80>)
     46e:	4798      	blx	r3

	uint32_t nvm_address = dst_addr / 2;
     470:	0868      	lsrs	r0, r5, #1
	uint16_t i, data;

	while (!hri_nvmctrl_get_interrupt_READY_bit(hw)) {
     472:	2201      	movs	r2, #1
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
     474:	7d23      	ldrb	r3, [r4, #20]
     476:	4213      	tst	r3, r2
     478:	d0fc      	beq.n	474 <_flash_program+0x20>
	((Nvmctrl *)hw)->CTRLA.reg = data;
     47a:	4b17      	ldr	r3, [pc, #92]	; (4d8 <_flash_program+0x84>)
     47c:	8023      	strh	r3, [r4, #0]
		/* Wait until this module isn't busy */
	}

	hri_nvmctrl_write_CTRLA_reg(hw, NVMCTRL_CTRLA_CMD_PBC | NVMCTRL_CTRLA_CMDEX_KEY);

	while (!hri_nvmctrl_get_interrupt_READY_bit(hw)) {
     47e:	2201      	movs	r2, #1
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
     480:	7d23      	ldrb	r3, [r4, #20]
     482:	4213      	tst	r3, r2
     484:	d0fc      	beq.n	480 <_flash_program+0x2c>
}

static inline void hri_nvmctrl_clear_STATUS_reg(const void *const hw, hri_nvmctrl_status_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->STATUS.reg = mask;
     486:	2320      	movs	r3, #32
     488:	33ff      	adds	r3, #255	; 0xff
     48a:	8323      	strh	r3, [r4, #24]
	}

	/* Clear flags */
	hri_nvmctrl_clear_STATUS_reg(hw, NVMCTRL_STATUS_MASK);

	for (i = 0; i < size; i += 2) {
     48c:	2e00      	cmp	r6, #0
     48e:	d00e      	beq.n	4ae <_flash_program+0x5a>
     490:	3b1f      	subs	r3, #31
     492:	3bff      	subs	r3, #255	; 0xff
     494:	0029      	movs	r1, r5
     496:	4399      	bics	r1, r3
     498:	2300      	movs	r3, #0
		data = buffer[i];
     49a:	5cfd      	ldrb	r5, [r7, r3]
     49c:	b2aa      	uxth	r2, r5
		if (i < NVMCTRL_PAGE_SIZE - 1) {
     49e:	2b3e      	cmp	r3, #62	; 0x3e
     4a0:	d910      	bls.n	4c4 <_flash_program+0x70>
			data |= (buffer[i + 1] << 8);
		}
		NVM_MEMORY[nvm_address++] = data;
     4a2:	800a      	strh	r2, [r1, #0]
	for (i = 0; i < size; i += 2) {
     4a4:	3302      	adds	r3, #2
     4a6:	b29b      	uxth	r3, r3
     4a8:	3102      	adds	r1, #2
     4aa:	429e      	cmp	r6, r3
     4ac:	d8f5      	bhi.n	49a <_flash_program+0x46>
	}

	while (!hri_nvmctrl_get_interrupt_READY_bit(hw)) {
     4ae:	2201      	movs	r2, #1
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
     4b0:	7d23      	ldrb	r3, [r4, #20]
     4b2:	4213      	tst	r3, r2
     4b4:	d0fc      	beq.n	4b0 <_flash_program+0x5c>
	((Nvmctrl *)hw)->ADDR.reg = data;
     4b6:	61e0      	str	r0, [r4, #28]
		/* Wait until this module isn't busy */
	}

	hri_nvmctrl_write_ADDR_reg(hw, dst_addr / 2);
	hri_nvmctrl_write_CTRLA_reg(hw, nvmctrl_cmd | NVMCTRL_CTRLA_CMDEX_KEY);
     4b8:	4b08      	ldr	r3, [pc, #32]	; (4dc <_flash_program+0x88>)
     4ba:	9a06      	ldr	r2, [sp, #24]
     4bc:	4313      	orrs	r3, r2
     4be:	b29b      	uxth	r3, r3
	((Nvmctrl *)hw)->CTRLA.reg = data;
     4c0:	8023      	strh	r3, [r4, #0]
}
     4c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			data |= (buffer[i + 1] << 8);
     4c4:	18fa      	adds	r2, r7, r3
     4c6:	7852      	ldrb	r2, [r2, #1]
     4c8:	0212      	lsls	r2, r2, #8
     4ca:	432a      	orrs	r2, r5
     4cc:	e7e9      	b.n	4a2 <_flash_program+0x4e>
     4ce:	46c0      	nop			; (mov r8, r8)
     4d0:	00001b88 	.word	0x00001b88
     4d4:	000003a5 	.word	0x000003a5
     4d8:	ffffa544 	.word	0xffffa544
     4dc:	ffffa500 	.word	0xffffa500

000004e0 <_flash_init>:
{
     4e0:	b570      	push	{r4, r5, r6, lr}
     4e2:	0005      	movs	r5, r0
     4e4:	000c      	movs	r4, r1
	ASSERT(device && (hw == NVMCTRL));
     4e6:	2800      	cmp	r0, #0
     4e8:	d01d      	beq.n	526 <_flash_init+0x46>
     4ea:	4b10      	ldr	r3, [pc, #64]	; (52c <_flash_init+0x4c>)
     4ec:	18c8      	adds	r0, r1, r3
     4ee:	4243      	negs	r3, r0
     4f0:	4158      	adcs	r0, r3
     4f2:	b2c0      	uxtb	r0, r0
     4f4:	2246      	movs	r2, #70	; 0x46
     4f6:	490e      	ldr	r1, [pc, #56]	; (530 <_flash_init+0x50>)
     4f8:	4b0e      	ldr	r3, [pc, #56]	; (534 <_flash_init+0x54>)
     4fa:	4798      	blx	r3
	device->hw = hw;
     4fc:	612c      	str	r4, [r5, #16]
	tmp = ((Nvmctrl *)hw)->CTRLB.reg;
     4fe:	6862      	ldr	r2, [r4, #4]
	tmp &= mask;
     500:	239e      	movs	r3, #158	; 0x9e
     502:	4013      	ands	r3, r2
	((Nvmctrl *)hw)->CTRLB.reg = data;
     504:	6063      	str	r3, [r4, #4]
	_nvm_dev = device;
     506:	4b0c      	ldr	r3, [pc, #48]	; (538 <_flash_init+0x58>)
     508:	601d      	str	r5, [r3, #0]
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     50a:	4b0c      	ldr	r3, [pc, #48]	; (53c <_flash_init+0x5c>)
     50c:	2210      	movs	r2, #16
     50e:	2180      	movs	r1, #128	; 0x80
     510:	505a      	str	r2, [r3, r1]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     512:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     516:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     51a:	3101      	adds	r1, #1
     51c:	31ff      	adds	r1, #255	; 0xff
     51e:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     520:	601a      	str	r2, [r3, #0]
}
     522:	2000      	movs	r0, #0
     524:	bd70      	pop	{r4, r5, r6, pc}
     526:	2000      	movs	r0, #0
     528:	e7e4      	b.n	4f4 <_flash_init+0x14>
     52a:	46c0      	nop			; (mov r8, r8)
     52c:	beffc000 	.word	0xbeffc000
     530:	00001b88 	.word	0x00001b88
     534:	000003a5 	.word	0x000003a5
     538:	200000a8 	.word	0x200000a8
     53c:	e000e100 	.word	0xe000e100

00000540 <_flash_read>:
{
     540:	b570      	push	{r4, r5, r6, lr}
	uint32_t nvm_address = src_addr / 2;
     542:	084c      	lsrs	r4, r1, #1
	while (!hri_nvmctrl_get_interrupt_READY_bit(device->hw)) {
     544:	6905      	ldr	r5, [r0, #16]
     546:	2601      	movs	r6, #1
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
     548:	7d28      	ldrb	r0, [r5, #20]
     54a:	4230      	tst	r0, r6
     54c:	d0fc      	beq.n	548 <_flash_read+0x8>
	((Nvmctrl *)hw)->STATUS.reg = mask;
     54e:	2020      	movs	r0, #32
     550:	30ff      	adds	r0, #255	; 0xff
     552:	8328      	strh	r0, [r5, #24]
		i = 0;
     554:	2000      	movs	r0, #0
	if (src_addr % 2) {
     556:	07cd      	lsls	r5, r1, #31
     558:	d505      	bpl.n	566 <_flash_read+0x26>
		data      = NVM_MEMORY[nvm_address++];
     55a:	3401      	adds	r4, #1
     55c:	3001      	adds	r0, #1
     55e:	4381      	bics	r1, r0
     560:	8809      	ldrh	r1, [r1, #0]
		buffer[0] = data >> 8;
     562:	0a09      	lsrs	r1, r1, #8
     564:	7011      	strb	r1, [r2, #0]
	while (i < length) {
     566:	4298      	cmp	r0, r3
     568:	d211      	bcs.n	58e <_flash_read+0x4e>
     56a:	1812      	adds	r2, r2, r0
     56c:	0064      	lsls	r4, r4, #1
     56e:	1a24      	subs	r4, r4, r0
		if (i < (length - 1)) {
     570:	1e5d      	subs	r5, r3, #1
     572:	e003      	b.n	57c <_flash_read+0x3c>
		i += 2;
     574:	3002      	adds	r0, #2
     576:	3202      	adds	r2, #2
	while (i < length) {
     578:	4283      	cmp	r3, r0
     57a:	d908      	bls.n	58e <_flash_read+0x4e>
     57c:	1821      	adds	r1, r4, r0
		data      = NVM_MEMORY[nvm_address++];
     57e:	8809      	ldrh	r1, [r1, #0]
     580:	b289      	uxth	r1, r1
		buffer[i] = (data & 0xFF);
     582:	7011      	strb	r1, [r2, #0]
		if (i < (length - 1)) {
     584:	4285      	cmp	r5, r0
     586:	d9f5      	bls.n	574 <_flash_read+0x34>
			buffer[i + 1] = (data >> 8);
     588:	0a09      	lsrs	r1, r1, #8
     58a:	7051      	strb	r1, [r2, #1]
     58c:	e7f2      	b.n	574 <_flash_read+0x34>
}
     58e:	bd70      	pop	{r4, r5, r6, pc}

00000590 <NVMCTRL_Handler>:

/**
 * \internal NVM interrupt handler
 */
void NVMCTRL_Handler(void)
{
     590:	b510      	push	{r4, lr}
	void *const hw = _nvm_dev->hw;
     592:	4b0a      	ldr	r3, [pc, #40]	; (5bc <NVMCTRL_Handler+0x2c>)
     594:	6818      	ldr	r0, [r3, #0]
     596:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
     598:	7d1a      	ldrb	r2, [r3, #20]

	if (hri_nvmctrl_get_interrupt_READY_bit(hw)) {
     59a:	07d2      	lsls	r2, r2, #31
     59c:	d504      	bpl.n	5a8 <NVMCTRL_Handler+0x18>
		if (NULL != _nvm_dev->flash_cb.ready_cb) {
     59e:	6803      	ldr	r3, [r0, #0]
     5a0:	2b00      	cmp	r3, #0
     5a2:	d000      	beq.n	5a6 <NVMCTRL_Handler+0x16>
			_nvm_dev->flash_cb.ready_cb(_nvm_dev);
     5a4:	4798      	blx	r3
		hri_nvmctrl_clear_interrupt_ERROR_bit(hw);
		if (NULL != _nvm_dev->flash_cb.error_cb) {
			_nvm_dev->flash_cb.error_cb(_nvm_dev);
		}
	}
}
     5a6:	bd10      	pop	{r4, pc}
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_ERROR) >> NVMCTRL_INTFLAG_ERROR_Pos;
     5a8:	7d1a      	ldrb	r2, [r3, #20]
	} else if (hri_nvmctrl_get_interrupt_ERROR_bit(hw)) {
     5aa:	0792      	lsls	r2, r2, #30
     5ac:	d5fb      	bpl.n	5a6 <NVMCTRL_Handler+0x16>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_ERROR;
     5ae:	2202      	movs	r2, #2
     5b0:	751a      	strb	r2, [r3, #20]
		if (NULL != _nvm_dev->flash_cb.error_cb) {
     5b2:	6843      	ldr	r3, [r0, #4]
     5b4:	2b00      	cmp	r3, #0
     5b6:	d0f6      	beq.n	5a6 <NVMCTRL_Handler+0x16>
			_nvm_dev->flash_cb.error_cb(_nvm_dev);
     5b8:	4798      	blx	r3
}
     5ba:	e7f4      	b.n	5a6 <NVMCTRL_Handler+0x16>
     5bc:	200000a8 	.word	0x200000a8

000005c0 <_rww_flash_read>:

/**
 * \brief Reads a number of bytes in the internal RWWEE Flash.
 */
int32_t _rww_flash_read(struct _flash_device *const device, const uint32_t src_addr, uint8_t *buffer, uint32_t length)
{
     5c0:	b570      	push	{r4, r5, r6, lr}
	    || (addr > (NVMCTRL_RWW_EEPROM_ADDR + NVMCTRL_PAGE_SIZE * NVMCTRL_RWWEE_PAGES))) {
     5c2:	4c0b      	ldr	r4, [pc, #44]	; (5f0 <_rww_flash_read+0x30>)
     5c4:	190d      	adds	r5, r1, r4
	/* Check if the address is valid */
	if (!_is_valid_rww_flash_address(src_addr) || !_is_valid_rww_flash_address(src_addr + length)) {
     5c6:	2480      	movs	r4, #128	; 0x80
     5c8:	01a4      	lsls	r4, r4, #6
     5ca:	42a5      	cmp	r5, r4
     5cc:	d80a      	bhi.n	5e4 <_rww_flash_read+0x24>
	    || (addr > (NVMCTRL_RWW_EEPROM_ADDR + NVMCTRL_PAGE_SIZE * NVMCTRL_RWWEE_PAGES))) {
     5ce:	4c08      	ldr	r4, [pc, #32]	; (5f0 <_rww_flash_read+0x30>)
     5d0:	191c      	adds	r4, r3, r4
     5d2:	1864      	adds	r4, r4, r1
	if (!_is_valid_rww_flash_address(src_addr) || !_is_valid_rww_flash_address(src_addr + length)) {
     5d4:	2580      	movs	r5, #128	; 0x80
     5d6:	01ad      	lsls	r5, r5, #6
     5d8:	42ac      	cmp	r4, r5
     5da:	d806      	bhi.n	5ea <_rww_flash_read+0x2a>
		return ERR_BAD_ADDRESS;
	}

	_flash_read(device, src_addr, buffer, length);
     5dc:	4c05      	ldr	r4, [pc, #20]	; (5f4 <_rww_flash_read+0x34>)
     5de:	47a0      	blx	r4

	return ERR_NONE;
     5e0:	2000      	movs	r0, #0
}
     5e2:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_BAD_ADDRESS;
     5e4:	200e      	movs	r0, #14
     5e6:	4240      	negs	r0, r0
     5e8:	e7fb      	b.n	5e2 <_rww_flash_read+0x22>
     5ea:	200e      	movs	r0, #14
     5ec:	4240      	negs	r0, r0
     5ee:	e7f8      	b.n	5e2 <_rww_flash_read+0x22>
     5f0:	ffc00000 	.word	0xffc00000
     5f4:	00000541 	.word	0x00000541

000005f8 <_rww_flash_write>:

/**
 * \brief Writes a number of bytes in the internal RWWEE Flash.
 */
int32_t _rww_flash_write(struct _flash_device *const device, const uint32_t dst_addr, uint8_t *buffer, uint32_t length)
{
     5f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     5fa:	46de      	mov	lr, fp
     5fc:	4657      	mov	r7, sl
     5fe:	464e      	mov	r6, r9
     600:	4645      	mov	r5, r8
     602:	b5e0      	push	{r5, r6, r7, lr}
     604:	b0c5      	sub	sp, #276	; 0x114
     606:	4683      	mov	fp, r0
     608:	0016      	movs	r6, r2
     60a:	001d      	movs	r5, r3
	    || (addr > (NVMCTRL_RWW_EEPROM_ADDR + NVMCTRL_PAGE_SIZE * NVMCTRL_RWWEE_PAGES))) {
     60c:	4b49      	ldr	r3, [pc, #292]	; (734 <_rww_flash_write+0x13c>)
     60e:	18ca      	adds	r2, r1, r3
	uint32_t row_start_addr, row_end_addr;
	uint32_t i, j, k;
	uint32_t wr_start_addr = dst_addr;

	/* Check if the address is valid */
	if (!_is_valid_rww_flash_address(dst_addr) || !_is_valid_rww_flash_address(dst_addr + length)) {
     610:	2380      	movs	r3, #128	; 0x80
     612:	019b      	lsls	r3, r3, #6
     614:	429a      	cmp	r2, r3
     616:	d900      	bls.n	61a <_rww_flash_write+0x22>
     618:	e086      	b.n	728 <_rww_flash_write+0x130>
	    || (addr > (NVMCTRL_RWW_EEPROM_ADDR + NVMCTRL_PAGE_SIZE * NVMCTRL_RWWEE_PAGES))) {
     61a:	4b46      	ldr	r3, [pc, #280]	; (734 <_rww_flash_write+0x13c>)
     61c:	18eb      	adds	r3, r5, r3
     61e:	185b      	adds	r3, r3, r1
	if (!_is_valid_rww_flash_address(dst_addr) || !_is_valid_rww_flash_address(dst_addr + length)) {
     620:	2280      	movs	r2, #128	; 0x80
     622:	0192      	lsls	r2, r2, #6
     624:	4293      	cmp	r3, r2
     626:	d900      	bls.n	62a <_rww_flash_write+0x32>
     628:	e081      	b.n	72e <_rww_flash_write+0x136>
     62a:	000c      	movs	r4, r1
     62c:	e02f      	b.n	68e <_rww_flash_write+0x96>
     62e:	46ba      	mov	sl, r7
     630:	4667      	mov	r7, ip
			buffer++;
			length--;
		}

		/* erase row before write */
		_flash_erase_row(device->hw, row_start_addr, NVMCTRL_CTRLA_CMD_RWWEEER);
     632:	465b      	mov	r3, fp
     634:	691a      	ldr	r2, [r3, #16]
	while (!hri_nvmctrl_get_interrupt_READY_bit(hw)) {
     636:	2101      	movs	r1, #1
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
     638:	7d13      	ldrb	r3, [r2, #20]
     63a:	420b      	tst	r3, r1
     63c:	d0fc      	beq.n	638 <_rww_flash_write+0x40>
	((Nvmctrl *)hw)->STATUS.reg = mask;
     63e:	2320      	movs	r3, #32
     640:	33ff      	adds	r3, #255	; 0xff
     642:	8313      	strh	r3, [r2, #24]
	hri_nvmctrl_write_ADDR_reg(hw, dst_addr / 2);
     644:	464b      	mov	r3, r9
     646:	085b      	lsrs	r3, r3, #1
	((Nvmctrl *)hw)->ADDR.reg = data;
     648:	61d3      	str	r3, [r2, #28]
	((Nvmctrl *)hw)->CTRLA.reg = data;
     64a:	4b3b      	ldr	r3, [pc, #236]	; (738 <_rww_flash_write+0x140>)
     64c:	8013      	strh	r3, [r2, #0]

		/* write buffer to flash */
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
			_flash_program(device->hw,
     64e:	464b      	mov	r3, r9
     650:	46a0      	mov	r8, r4
     652:	9703      	str	r7, [sp, #12]
     654:	002a      	movs	r2, r5
     656:	464d      	mov	r5, r9
     658:	46b1      	mov	r9, r6
     65a:	465e      	mov	r6, fp
     65c:	4693      	mov	fp, r2
     65e:	001f      	movs	r7, r3
     660:	1b7a      	subs	r2, r7, r5
     662:	ab04      	add	r3, sp, #16
     664:	469c      	mov	ip, r3
     666:	4462      	add	r2, ip
     668:	231c      	movs	r3, #28
     66a:	9300      	str	r3, [sp, #0]
     66c:	3324      	adds	r3, #36	; 0x24
     66e:	0039      	movs	r1, r7
     670:	6930      	ldr	r0, [r6, #16]
     672:	4c32      	ldr	r4, [pc, #200]	; (73c <_rww_flash_write+0x144>)
     674:	47a0      	blx	r4
     676:	3740      	adds	r7, #64	; 0x40
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
     678:	9b03      	ldr	r3, [sp, #12]
     67a:	42bb      	cmp	r3, r7
     67c:	d1f0      	bne.n	660 <_rww_flash_write+0x68>
     67e:	4644      	mov	r4, r8
     680:	465d      	mov	r5, fp
     682:	46b3      	mov	fp, r6
     684:	464e      	mov	r6, r9
			               tmp_buffer[i],
			               NVMCTRL_PAGE_SIZE,
			               NVMCTRL_CTRLA_CMD_RWWEEWP);
		}

	} while (row_end_addr < (wr_start_addr + length - 1));
     686:	192b      	adds	r3, r5, r4
     688:	3b01      	subs	r3, #1
     68a:	459a      	cmp	sl, r3
     68c:	d244      	bcs.n	718 <_rww_flash_write+0x120>
		row_start_addr = wr_start_addr & ~((NVMCTRL_PAGE_SIZE * NVMCTRL_ROW_PAGES) - 1);
     68e:	23ff      	movs	r3, #255	; 0xff
     690:	0022      	movs	r2, r4
     692:	439a      	bics	r2, r3
     694:	4691      	mov	r9, r2
		row_end_addr   = row_start_addr + NVMCTRL_ROW_PAGES * NVMCTRL_PAGE_SIZE - 1;
     696:	444b      	add	r3, r9
     698:	469a      	mov	sl, r3
     69a:	2380      	movs	r3, #128	; 0x80
     69c:	005b      	lsls	r3, r3, #1
     69e:	444b      	add	r3, r9
     6a0:	4698      	mov	r8, r3
     6a2:	0017      	movs	r7, r2
     6a4:	4642      	mov	r2, r8
     6a6:	9203      	str	r2, [sp, #12]
     6a8:	46a0      	mov	r8, r4
     6aa:	464c      	mov	r4, r9
     6ac:	46b1      	mov	r9, r6
     6ae:	465e      	mov	r6, fp
     6b0:	46ab      	mov	fp, r5
			_rww_flash_read(device, row_start_addr + i * NVMCTRL_PAGE_SIZE, tmp_buffer[i], NVMCTRL_PAGE_SIZE);
     6b2:	1b3a      	subs	r2, r7, r4
     6b4:	ab04      	add	r3, sp, #16
     6b6:	469c      	mov	ip, r3
     6b8:	4462      	add	r2, ip
     6ba:	2340      	movs	r3, #64	; 0x40
     6bc:	0039      	movs	r1, r7
     6be:	0030      	movs	r0, r6
     6c0:	4d1f      	ldr	r5, [pc, #124]	; (740 <_rww_flash_write+0x148>)
     6c2:	47a8      	blx	r5
     6c4:	3740      	adds	r7, #64	; 0x40
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
     6c6:	9b03      	ldr	r3, [sp, #12]
     6c8:	429f      	cmp	r7, r3
     6ca:	d1f2      	bne.n	6b2 <_rww_flash_write+0xba>
     6cc:	465d      	mov	r5, fp
     6ce:	46b3      	mov	fp, r6
     6d0:	464e      	mov	r6, r9
     6d2:	46a1      	mov	r9, r4
     6d4:	4644      	mov	r4, r8
		j = (wr_start_addr - row_start_addr) / NVMCTRL_PAGE_SIZE;
     6d6:	464b      	mov	r3, r9
     6d8:	1ae3      	subs	r3, r4, r3
     6da:	0999      	lsrs	r1, r3, #6
     6dc:	223f      	movs	r2, #63	; 0x3f
     6de:	4013      	ands	r3, r2
		while ((wr_start_addr <= row_end_addr) && (length > 0)) {
     6e0:	4554      	cmp	r4, sl
     6e2:	d8a6      	bhi.n	632 <_rww_flash_write+0x3a>
     6e4:	2d00      	cmp	r5, #0
     6e6:	d0a4      	beq.n	632 <_rww_flash_write+0x3a>
			k                = (k + 1) % NVMCTRL_PAGE_SIZE;
     6e8:	46bc      	mov	ip, r7
     6ea:	4657      	mov	r7, sl
			tmp_buffer[j][k] = *buffer;
     6ec:	018a      	lsls	r2, r1, #6
     6ee:	a804      	add	r0, sp, #16
     6f0:	4680      	mov	r8, r0
     6f2:	4442      	add	r2, r8
     6f4:	7830      	ldrb	r0, [r6, #0]
     6f6:	54d0      	strb	r0, [r2, r3]
			k                = (k + 1) % NVMCTRL_PAGE_SIZE;
     6f8:	3301      	adds	r3, #1
     6fa:	223f      	movs	r2, #63	; 0x3f
     6fc:	4013      	ands	r3, r2
				j++;
     6fe:	425a      	negs	r2, r3
     700:	415a      	adcs	r2, r3
     702:	1889      	adds	r1, r1, r2
			wr_start_addr++;
     704:	3401      	adds	r4, #1
			buffer++;
     706:	3601      	adds	r6, #1
			length--;
     708:	3d01      	subs	r5, #1
		while ((wr_start_addr <= row_end_addr) && (length > 0)) {
     70a:	42a7      	cmp	r7, r4
     70c:	d38f      	bcc.n	62e <_rww_flash_write+0x36>
     70e:	2d00      	cmp	r5, #0
     710:	d1ec      	bne.n	6ec <_rww_flash_write+0xf4>
     712:	46ba      	mov	sl, r7
     714:	4667      	mov	r7, ip
     716:	e78c      	b.n	632 <_rww_flash_write+0x3a>

	return ERR_NONE;
     718:	2000      	movs	r0, #0
}
     71a:	b045      	add	sp, #276	; 0x114
     71c:	bc3c      	pop	{r2, r3, r4, r5}
     71e:	4690      	mov	r8, r2
     720:	4699      	mov	r9, r3
     722:	46a2      	mov	sl, r4
     724:	46ab      	mov	fp, r5
     726:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ERR_BAD_ADDRESS;
     728:	200e      	movs	r0, #14
     72a:	4240      	negs	r0, r0
     72c:	e7f5      	b.n	71a <_rww_flash_write+0x122>
     72e:	200e      	movs	r0, #14
     730:	4240      	negs	r0, r0
     732:	e7f2      	b.n	71a <_rww_flash_write+0x122>
     734:	ffc00000 	.word	0xffc00000
     738:	ffffa51a 	.word	0xffffa51a
     73c:	00000455 	.word	0x00000455
     740:	000005c1 	.word	0x000005c1

00000744 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
     744:	4b04      	ldr	r3, [pc, #16]	; (758 <_osc32kctrl_init_sources+0x14>)
     746:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSC32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSC32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
     748:	21f8      	movs	r1, #248	; 0xf8
     74a:	0149      	lsls	r1, r1, #5
     74c:	400a      	ands	r2, r1
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
     74e:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     750:	2201      	movs	r2, #1
     752:	611a      	str	r2, [r3, #16]
		;
#endif
#endif
	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
     754:	4770      	bx	lr
     756:	46c0      	nop			; (mov r8, r8)
     758:	40001000 	.word	0x40001000

0000075c <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_OSC16MCTRL_reg(const void *const hw, hri_oscctrl_osc16mctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC16MCTRL.reg = data;
     75c:	2282      	movs	r2, #130	; 0x82
     75e:	4b0c      	ldr	r3, [pc, #48]	; (790 <_oscctrl_init_sources+0x34>)
     760:	751a      	strb	r2, [r3, #20]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
     762:	0018      	movs	r0, r3
     764:	2138      	movs	r1, #56	; 0x38
     766:	3a80      	subs	r2, #128	; 0x80
     768:	5c43      	ldrb	r3, [r0, r1]
     76a:	4213      	tst	r3, r2
     76c:	d1fc      	bne.n	768 <_oscctrl_init_sources+0xc>
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC16MRDY) >> OSCCTRL_STATUS_OSC16MRDY_Pos;
     76e:	4908      	ldr	r1, [pc, #32]	; (790 <_oscctrl_init_sources+0x34>)
#endif
#endif

#if CONF_OSC16M_CONFIG == 1
#if CONF_OSC16M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC16MRDY_bit(hw))
     770:	2210      	movs	r2, #16
     772:	68cb      	ldr	r3, [r1, #12]
     774:	421a      	tst	r2, r3
     776:	d0fc      	beq.n	772 <_oscctrl_init_sources+0x16>
	((Oscctrl *)hw)->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND;
     778:	4a05      	ldr	r2, [pc, #20]	; (790 <_oscctrl_init_sources+0x34>)
     77a:	7d13      	ldrb	r3, [r2, #20]
     77c:	2180      	movs	r1, #128	; 0x80
     77e:	430b      	orrs	r3, r1
     780:	7513      	strb	r3, [r2, #20]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
     782:	0010      	movs	r0, r2
     784:	3948      	subs	r1, #72	; 0x48
     786:	220e      	movs	r2, #14
     788:	5c43      	ldrb	r3, [r0, r1]
     78a:	4213      	tst	r3, r2
     78c:	d1fc      	bne.n	788 <_oscctrl_init_sources+0x2c>
#if CONF_OSC16M_ONDEMAND == 1
	hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
     78e:	4770      	bx	lr
     790:	40000c00 	.word	0x40000c00

00000794 <_oscctrl_init_referenced_generators>:
#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
		;
#endif
	(void)hw, (void)tmp;
}
     794:	4770      	bx	lr

00000796 <_set_performance_level>:
}

static inline hri_pm_plcfg_reg_t hri_pm_get_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Pm *)hw)->PLCFG.reg;
     796:	2380      	movs	r3, #128	; 0x80
     798:	05db      	lsls	r3, r3, #23
     79a:	789b      	ldrb	r3, [r3, #2]
/**
 * \brief Set performance level
 */
void _set_performance_level(const uint8_t level)
{
	if (hri_pm_get_PLCFG_PLSEL_bf(PM, PM_PLCFG_PLSEL_Msk) != level) {
     79c:	2203      	movs	r2, #3
     79e:	4013      	ands	r3, r2
     7a0:	4298      	cmp	r0, r3
     7a2:	d00c      	beq.n	7be <_set_performance_level+0x28>
	((Pm *)hw)->INTFLAG.reg = mask;
     7a4:	2280      	movs	r2, #128	; 0x80
     7a6:	05d2      	lsls	r2, r2, #23
     7a8:	23ff      	movs	r3, #255	; 0xff
     7aa:	7193      	strb	r3, [r2, #6]

static inline void hri_pm_write_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t data)
{
	uint8_t tmp;
	PM_CRITICAL_SECTION_ENTER();
	tmp = ((Pm *)hw)->PLCFG.reg;
     7ac:	7893      	ldrb	r3, [r2, #2]
	tmp &= ~PM_PLCFG_PLSEL_Msk;
     7ae:	2103      	movs	r1, #3
     7b0:	438b      	bics	r3, r1
	tmp |= PM_PLCFG_PLSEL(data);
     7b2:	4008      	ands	r0, r1
     7b4:	4318      	orrs	r0, r3
	((Pm *)hw)->PLCFG.reg = tmp;
     7b6:	7090      	strb	r0, [r2, #2]
	return ((Pm *)hw)->INTFLAG.reg;
     7b8:	7993      	ldrb	r3, [r2, #6]
		hri_pm_clear_INTFLAG_reg(PM, 0xFF);
		hri_pm_write_PLCFG_PLSEL_bf(PM, level);
		while (!hri_pm_read_INTFLAG_reg(PM))
     7ba:	2b00      	cmp	r3, #0
     7bc:	d0fc      	beq.n	7b8 <_set_performance_level+0x22>
			;
	}
}
     7be:	4770      	bx	lr

000007c0 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
     7c0:	4b02      	ldr	r3, [pc, #8]	; (7cc <_delay_init+0xc>)
     7c2:	4a03      	ldr	r2, [pc, #12]	; (7d0 <_delay_init+0x10>)
     7c4:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
     7c6:	2205      	movs	r2, #5
     7c8:	601a      	str	r2, [r3, #0]
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
	_system_time_init(hw);
}
     7ca:	4770      	bx	lr
     7cc:	e000e010 	.word	0xe000e010
     7d0:	00ffffff 	.word	0x00ffffff

000007d4 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
     7d4:	b570      	push	{r4, r5, r6, lr}
	(void)hw;
	uint8_t  n   = cycles >> 24;
     7d6:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
     7d8:	1e5e      	subs	r6, r3, #1
     7da:	b2f6      	uxtb	r6, r6
     7dc:	2b00      	cmp	r3, #0
     7de:	d013      	beq.n	808 <_delay_cycles+0x34>
     7e0:	0034      	movs	r4, r6
		SysTick->LOAD = 0xFFFFFF;
     7e2:	4a0e      	ldr	r2, [pc, #56]	; (81c <_delay_cycles+0x48>)
     7e4:	4d0e      	ldr	r5, [pc, #56]	; (820 <_delay_cycles+0x4c>)
		SysTick->VAL  = 0xFFFFFF;
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
     7e6:	2080      	movs	r0, #128	; 0x80
     7e8:	0240      	lsls	r0, r0, #9
		SysTick->LOAD = 0xFFFFFF;
     7ea:	6055      	str	r5, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
     7ec:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
     7ee:	6813      	ldr	r3, [r2, #0]
     7f0:	4203      	tst	r3, r0
     7f2:	d0fc      	beq.n	7ee <_delay_cycles+0x1a>
	while (n--) {
     7f4:	3c01      	subs	r4, #1
     7f6:	b2e4      	uxtb	r4, r4
     7f8:	2cff      	cmp	r4, #255	; 0xff
     7fa:	d1f6      	bne.n	7ea <_delay_cycles+0x16>
     7fc:	0633      	lsls	r3, r6, #24
     7fe:	1af6      	subs	r6, r6, r3
     800:	4b08      	ldr	r3, [pc, #32]	; (824 <_delay_cycles+0x50>)
     802:	469c      	mov	ip, r3
     804:	4461      	add	r1, ip
     806:	1871      	adds	r1, r6, r1
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
     808:	4b04      	ldr	r3, [pc, #16]	; (81c <_delay_cycles+0x48>)
     80a:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
     80c:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
     80e:	0019      	movs	r1, r3
     810:	2280      	movs	r2, #128	; 0x80
     812:	0252      	lsls	r2, r2, #9
     814:	680b      	ldr	r3, [r1, #0]
     816:	4213      	tst	r3, r2
     818:	d0fc      	beq.n	814 <_delay_cycles+0x40>
		;
}
     81a:	bd70      	pop	{r4, r5, r6, pc}
     81c:	e000e010 	.word	0xe000e010
     820:	00ffffff 	.word	0x00ffffff
     824:	ff000001 	.word	0xff000001

00000828 <aes_measurement>:
static uint8_t iv2[16] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f }; /*(This is same but needed for decryption. Note: AES Module was not doing decryption without iv2  )*/



void aes_measurement(void)
{
     828:	b5f0      	push	{r4, r5, r6, r7, lr}
     82a:	46d6      	mov	lr, sl
     82c:	464f      	mov	r7, r9
     82e:	4646      	mov	r6, r8
     830:	b5c0      	push	{r6, r7, lr}
     832:	4c76      	ldr	r4, [pc, #472]	; (a0c <aes_measurement+0x1e4>)
     834:	44a5      	add	sp, r4

	Aes enc;
	Aes dec;
		
	// Allocate buffer memory
	uint8_t *input = malloc(sizeof(uint8_t) * MAX_NUM_BYTES);
     836:	4876      	ldr	r0, [pc, #472]	; (a10 <aes_measurement+0x1e8>)
     838:	4b76      	ldr	r3, [pc, #472]	; (a14 <aes_measurement+0x1ec>)
     83a:	4798      	blx	r3
     83c:	4680      	mov	r8, r0
	
	// Allocate buffer memory
	//uint8_t *output = malloc(sizeof(uint8_t) * MAX_NUM_BYTES);
	//uint8_t output[MAX_NUM_BYTES];

    delay_ms(10);
     83e:	200a      	movs	r0, #10
     840:	4b75      	ldr	r3, [pc, #468]	; (a18 <aes_measurement+0x1f0>)
     842:	4798      	blx	r3

	for (size_t num_bytes = MIN_NUM_BYTES; num_bytes <= MAX_NUM_BYTES; num_bytes += STEP_SIZE) {
     844:	2710      	movs	r7, #16
		/* Read data from flash (Solution 2) */
		//flash_read(&FLASH_0, target_addr, output, num_bytes);
		STOP_MEASURE(DGI_GPIO3);
		
	
		wc_AesSetKey(&dec, key_128, sizeof(key_128), iv2, AES_DECRYPTION);
     846:	4b75      	ldr	r3, [pc, #468]	; (a1c <aes_measurement+0x1f4>)
     848:	3310      	adds	r3, #16
     84a:	9303      	str	r3, [sp, #12]
     84c:	e016      	b.n	87c <aes_measurement+0x54>
     84e:	e7fe      	b.n	84e <aes_measurement+0x26>

		// Start decryption
		START_MEASURE(DGI_GPIO2);
		/*decrypt*/
		for (size_t count = 0;  count < num_bytes/STEP_SIZE; count++) {
			wc_AesDecryptDirect(&dec, input + (count*STEP_SIZE),input + (count*STEP_SIZE));
     850:	0022      	movs	r2, r4
     852:	0021      	movs	r1, r4
     854:	a804      	add	r0, sp, #16
     856:	47d0      	blx	sl
		for (size_t count = 0;  count < num_bytes/STEP_SIZE; count++) {
     858:	3601      	adds	r6, #1
     85a:	3410      	adds	r4, #16
     85c:	42ae      	cmp	r6, r5
     85e:	d1f7      	bne.n	850 <aes_measurement+0x28>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     860:	2280      	movs	r2, #128	; 0x80
     862:	0352      	lsls	r2, r2, #13
     864:	23c0      	movs	r3, #192	; 0xc0
     866:	05db      	lsls	r3, r3, #23
     868:	615a      	str	r2, [r3, #20]
		}
		//wc_AesCbcDecrypt(&dec, input, input,num_bytes);
		STOP_MEASURE(DGI_GPIO2);
     86a:	2002      	movs	r0, #2
     86c:	4b6a      	ldr	r3, [pc, #424]	; (a18 <aes_measurement+0x1f0>)
     86e:	4798      	blx	r3
	for (size_t num_bytes = MIN_NUM_BYTES; num_bytes <= MAX_NUM_BYTES; num_bytes += STEP_SIZE) {
     870:	3710      	adds	r7, #16
     872:	23bc      	movs	r3, #188	; 0xbc
     874:	015b      	lsls	r3, r3, #5
     876:	429f      	cmp	r7, r3
     878:	d100      	bne.n	87c <aes_measurement+0x54>
     87a:	e07f      	b.n	97c <aes_measurement+0x154>
		for (size_t byte = 0; byte < num_bytes; byte++) {
     87c:	2300      	movs	r3, #0
     87e:	2f00      	cmp	r7, #0
     880:	d100      	bne.n	884 <aes_measurement+0x5c>
     882:	e094      	b.n	9ae <aes_measurement+0x186>
			input[byte] = byte; // 0x00 to write 0's OR 0xFF to write 1's.
     884:	4642      	mov	r2, r8
     886:	54d3      	strb	r3, [r2, r3]
		for (size_t byte = 0; byte < num_bytes; byte++) {
     888:	3301      	adds	r3, #1
     88a:	42bb      	cmp	r3, r7
     88c:	d1fa      	bne.n	884 <aes_measurement+0x5c>
		wc_AesSetKey(&enc, key_128, sizeof(key_128), iv, AES_ENCRYPTION);
     88e:	2300      	movs	r3, #0
     890:	9300      	str	r3, [sp, #0]
     892:	4b62      	ldr	r3, [pc, #392]	; (a1c <aes_measurement+0x1f4>)
     894:	2210      	movs	r2, #16
     896:	4962      	ldr	r1, [pc, #392]	; (a20 <aes_measurement+0x1f8>)
     898:	a84b      	add	r0, sp, #300	; 0x12c
     89a:	4c62      	ldr	r4, [pc, #392]	; (a24 <aes_measurement+0x1fc>)
     89c:	47a0      	blx	r4
		START_MEASURE(DGI_GPIO2);
     89e:	2002      	movs	r0, #2
     8a0:	4b5d      	ldr	r3, [pc, #372]	; (a18 <aes_measurement+0x1f0>)
     8a2:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     8a4:	2280      	movs	r2, #128	; 0x80
     8a6:	0352      	lsls	r2, r2, #13
     8a8:	23c0      	movs	r3, #192	; 0xc0
     8aa:	05db      	lsls	r3, r3, #23
     8ac:	619a      	str	r2, [r3, #24]
		for (size_t count = 0;  count < num_bytes/STEP_SIZE; count++) {
     8ae:	093d      	lsrs	r5, r7, #4
     8b0:	d00b      	beq.n	8ca <aes_measurement+0xa2>
     8b2:	4644      	mov	r4, r8
     8b4:	2600      	movs	r6, #0
				wc_AesEncryptDirect(&enc, input + (count*STEP_SIZE),input + (count*STEP_SIZE));
     8b6:	4b5c      	ldr	r3, [pc, #368]	; (a28 <aes_measurement+0x200>)
     8b8:	469a      	mov	sl, r3
     8ba:	0022      	movs	r2, r4
     8bc:	0021      	movs	r1, r4
     8be:	a84b      	add	r0, sp, #300	; 0x12c
     8c0:	47d0      	blx	sl
		for (size_t count = 0;  count < num_bytes/STEP_SIZE; count++) {
     8c2:	3601      	adds	r6, #1
     8c4:	3410      	adds	r4, #16
     8c6:	42ae      	cmp	r6, r5
     8c8:	d1f7      	bne.n	8ba <aes_measurement+0x92>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     8ca:	24c0      	movs	r4, #192	; 0xc0
     8cc:	05e4      	lsls	r4, r4, #23
     8ce:	2380      	movs	r3, #128	; 0x80
     8d0:	035b      	lsls	r3, r3, #13
     8d2:	6163      	str	r3, [r4, #20]
		STOP_MEASURE(DGI_GPIO2);
     8d4:	2002      	movs	r0, #2
     8d6:	4e50      	ldr	r6, [pc, #320]	; (a18 <aes_measurement+0x1f0>)
     8d8:	47b0      	blx	r6
		START_MEASURE(DGI_GPIO3);
     8da:	2002      	movs	r0, #2
     8dc:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     8de:	2380      	movs	r3, #128	; 0x80
     8e0:	039b      	lsls	r3, r3, #14
     8e2:	61a3      	str	r3, [r4, #24]
		if (_rww_flash_write(&FLASH_0.dev, NVMCTRL_RWW_EEPROM_ADDR, input, num_bytes ) != ERR_NONE) {
     8e4:	003b      	movs	r3, r7
     8e6:	4642      	mov	r2, r8
     8e8:	2180      	movs	r1, #128	; 0x80
     8ea:	03c9      	lsls	r1, r1, #15
     8ec:	484f      	ldr	r0, [pc, #316]	; (a2c <aes_measurement+0x204>)
     8ee:	4c50      	ldr	r4, [pc, #320]	; (a30 <aes_measurement+0x208>)
     8f0:	47a0      	blx	r4
     8f2:	2800      	cmp	r0, #0
     8f4:	d000      	beq.n	8f8 <aes_measurement+0xd0>
     8f6:	e088      	b.n	a0a <aes_measurement+0x1e2>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     8f8:	2280      	movs	r2, #128	; 0x80
     8fa:	0392      	lsls	r2, r2, #14
     8fc:	23c0      	movs	r3, #192	; 0xc0
     8fe:	05db      	lsls	r3, r3, #23
     900:	615a      	str	r2, [r3, #20]
		STOP_MEASURE(DGI_GPIO3);
     902:	2002      	movs	r0, #2
     904:	4c44      	ldr	r4, [pc, #272]	; (a18 <aes_measurement+0x1f0>)
     906:	47a0      	blx	r4
		SLEEP
     908:	2002      	movs	r0, #2
     90a:	47a0      	blx	r4
     90c:	4643      	mov	r3, r8
     90e:	19d9      	adds	r1, r3, r7
			input[byte] = 0xfe;
     910:	22fe      	movs	r2, #254	; 0xfe
     912:	701a      	strb	r2, [r3, #0]
     914:	3301      	adds	r3, #1
		for (size_t byte = 0; byte < num_bytes; byte++) {
     916:	428b      	cmp	r3, r1
     918:	d1fb      	bne.n	912 <aes_measurement+0xea>
		START_MEASURE(DGI_GPIO3);
     91a:	2002      	movs	r0, #2
     91c:	4b3e      	ldr	r3, [pc, #248]	; (a18 <aes_measurement+0x1f0>)
     91e:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     920:	2280      	movs	r2, #128	; 0x80
     922:	0392      	lsls	r2, r2, #14
     924:	23c0      	movs	r3, #192	; 0xc0
     926:	05db      	lsls	r3, r3, #23
     928:	619a      	str	r2, [r3, #24]
		if (_rww_flash_read(&FLASH_0.dev, NVMCTRL_RWW_EEPROM_ADDR, input, num_bytes) != ERR_NONE) {
     92a:	003b      	movs	r3, r7
     92c:	4642      	mov	r2, r8
     92e:	2180      	movs	r1, #128	; 0x80
     930:	03c9      	lsls	r1, r1, #15
     932:	483e      	ldr	r0, [pc, #248]	; (a2c <aes_measurement+0x204>)
     934:	4c3f      	ldr	r4, [pc, #252]	; (a34 <aes_measurement+0x20c>)
     936:	47a0      	blx	r4
     938:	2800      	cmp	r0, #0
     93a:	d188      	bne.n	84e <aes_measurement+0x26>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     93c:	23c0      	movs	r3, #192	; 0xc0
     93e:	05db      	lsls	r3, r3, #23
     940:	4699      	mov	r9, r3
     942:	2380      	movs	r3, #128	; 0x80
     944:	039b      	lsls	r3, r3, #14
     946:	464a      	mov	r2, r9
     948:	6153      	str	r3, [r2, #20]
		STOP_MEASURE(DGI_GPIO3);
     94a:	2002      	movs	r0, #2
     94c:	4e32      	ldr	r6, [pc, #200]	; (a18 <aes_measurement+0x1f0>)
     94e:	47b0      	blx	r6
		wc_AesSetKey(&dec, key_128, sizeof(key_128), iv2, AES_DECRYPTION);
     950:	2301      	movs	r3, #1
     952:	9300      	str	r3, [sp, #0]
     954:	9b03      	ldr	r3, [sp, #12]
     956:	2210      	movs	r2, #16
     958:	4931      	ldr	r1, [pc, #196]	; (a20 <aes_measurement+0x1f8>)
     95a:	a804      	add	r0, sp, #16
     95c:	4c31      	ldr	r4, [pc, #196]	; (a24 <aes_measurement+0x1fc>)
     95e:	47a0      	blx	r4
		START_MEASURE(DGI_GPIO2);
     960:	2002      	movs	r0, #2
     962:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     964:	2380      	movs	r3, #128	; 0x80
     966:	035b      	lsls	r3, r3, #13
     968:	464a      	mov	r2, r9
     96a:	6193      	str	r3, [r2, #24]
		for (size_t count = 0;  count < num_bytes/STEP_SIZE; count++) {
     96c:	2d00      	cmp	r5, #0
     96e:	d100      	bne.n	972 <aes_measurement+0x14a>
     970:	e776      	b.n	860 <aes_measurement+0x38>
     972:	4644      	mov	r4, r8
     974:	2600      	movs	r6, #0
			wc_AesDecryptDirect(&dec, input + (count*STEP_SIZE),input + (count*STEP_SIZE));
     976:	4b30      	ldr	r3, [pc, #192]	; (a38 <aes_measurement+0x210>)
     978:	469a      	mov	sl, r3
     97a:	e769      	b.n	850 <aes_measurement+0x28>
	}
	
		// Free the memory
		//free(input);

		END_MEASUREMENT;
     97c:	200a      	movs	r0, #10
     97e:	4b26      	ldr	r3, [pc, #152]	; (a18 <aes_measurement+0x1f0>)
     980:	4798      	blx	r3
     982:	23c0      	movs	r3, #192	; 0xc0
     984:	05db      	lsls	r3, r3, #23
     986:	2102      	movs	r1, #2
     988:	2298      	movs	r2, #152	; 0x98
     98a:	5099      	str	r1, [r3, r2]
     98c:	2280      	movs	r2, #128	; 0x80
     98e:	0252      	lsls	r2, r2, #9
     990:	619a      	str	r2, [r3, #24]
     992:	2280      	movs	r2, #128	; 0x80
     994:	0352      	lsls	r2, r2, #13
     996:	619a      	str	r2, [r3, #24]
     998:	2280      	movs	r2, #128	; 0x80
     99a:	0392      	lsls	r2, r2, #14
     99c:	619a      	str	r2, [r3, #24]
			
}
     99e:	2392      	movs	r3, #146	; 0x92
     9a0:	009b      	lsls	r3, r3, #2
     9a2:	449d      	add	sp, r3
     9a4:	bc1c      	pop	{r2, r3, r4}
     9a6:	4690      	mov	r8, r2
     9a8:	4699      	mov	r9, r3
     9aa:	46a2      	mov	sl, r4
     9ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		wc_AesSetKey(&enc, key_128, sizeof(key_128), iv, AES_ENCRYPTION);
     9ae:	2300      	movs	r3, #0
     9b0:	9300      	str	r3, [sp, #0]
     9b2:	4b1a      	ldr	r3, [pc, #104]	; (a1c <aes_measurement+0x1f4>)
     9b4:	2210      	movs	r2, #16
     9b6:	491a      	ldr	r1, [pc, #104]	; (a20 <aes_measurement+0x1f8>)
     9b8:	a84b      	add	r0, sp, #300	; 0x12c
     9ba:	4c1a      	ldr	r4, [pc, #104]	; (a24 <aes_measurement+0x1fc>)
     9bc:	47a0      	blx	r4
		START_MEASURE(DGI_GPIO2);
     9be:	2002      	movs	r0, #2
     9c0:	4e15      	ldr	r6, [pc, #84]	; (a18 <aes_measurement+0x1f0>)
     9c2:	47b0      	blx	r6
     9c4:	24c0      	movs	r4, #192	; 0xc0
     9c6:	05e4      	lsls	r4, r4, #23
     9c8:	2380      	movs	r3, #128	; 0x80
     9ca:	035b      	lsls	r3, r3, #13
     9cc:	61a3      	str	r3, [r4, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9ce:	6163      	str	r3, [r4, #20]
		STOP_MEASURE(DGI_GPIO2);
     9d0:	2002      	movs	r0, #2
     9d2:	47b0      	blx	r6
		START_MEASURE(DGI_GPIO3);
     9d4:	2002      	movs	r0, #2
     9d6:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     9d8:	2380      	movs	r3, #128	; 0x80
     9da:	039b      	lsls	r3, r3, #14
     9dc:	61a3      	str	r3, [r4, #24]
		if (_rww_flash_write(&FLASH_0.dev, NVMCTRL_RWW_EEPROM_ADDR, input, num_bytes ) != ERR_NONE) {
     9de:	003b      	movs	r3, r7
     9e0:	4642      	mov	r2, r8
     9e2:	2180      	movs	r1, #128	; 0x80
     9e4:	03c9      	lsls	r1, r1, #15
     9e6:	4811      	ldr	r0, [pc, #68]	; (a2c <aes_measurement+0x204>)
     9e8:	4c11      	ldr	r4, [pc, #68]	; (a30 <aes_measurement+0x208>)
     9ea:	47a0      	blx	r4
     9ec:	2800      	cmp	r0, #0
     9ee:	d10b      	bne.n	a08 <aes_measurement+0x1e0>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9f0:	2280      	movs	r2, #128	; 0x80
     9f2:	0392      	lsls	r2, r2, #14
     9f4:	23c0      	movs	r3, #192	; 0xc0
     9f6:	05db      	lsls	r3, r3, #23
     9f8:	615a      	str	r2, [r3, #20]
		STOP_MEASURE(DGI_GPIO3);
     9fa:	2002      	movs	r0, #2
     9fc:	4c06      	ldr	r4, [pc, #24]	; (a18 <aes_measurement+0x1f0>)
     9fe:	47a0      	blx	r4
		SLEEP
     a00:	2002      	movs	r0, #2
     a02:	47a0      	blx	r4
		for (size_t count = 0;  count < num_bytes/STEP_SIZE; count++) {
     a04:	003d      	movs	r5, r7
     a06:	e788      	b.n	91a <aes_measurement+0xf2>
     a08:	e7ff      	b.n	a0a <aes_measurement+0x1e2>
     a0a:	e7fe      	b.n	a0a <aes_measurement+0x1e2>
     a0c:	fffffdb8 	.word	0xfffffdb8
     a10:	00001770 	.word	0x00001770
     a14:	00001a55 	.word	0x00001a55
     a18:	00000325 	.word	0x00000325
     a1c:	20000000 	.word	0x20000000
     a20:	00001ba8 	.word	0x00001ba8
     a24:	000019a5 	.word	0x000019a5
     a28:	000019e5 	.word	0x000019e5
     a2c:	200000b4 	.word	0x200000b4
     a30:	000005f9 	.word	0x000005f9
     a34:	000005c1 	.word	0x000005c1
     a38:	000019f9 	.word	0x000019f9

00000a3c <main>:

int main(void)
{
     a3c:	b510      	push	{r4, lr}
	atmel_start_init();
     a3e:	4b03      	ldr	r3, [pc, #12]	; (a4c <main+0x10>)
     a40:	4798      	blx	r3

	aes_measurement();
     a42:	4b03      	ldr	r3, [pc, #12]	; (a50 <main+0x14>)
     a44:	4798      	blx	r3
	/*while (true) {
		delay_ms(500);
		gpio_toggle_pin_level(LED0);
	}*/
	
     a46:	2000      	movs	r0, #0
     a48:	bd10      	pop	{r4, pc}
     a4a:	46c0      	nop			; (mov r8, r8)
     a4c:	00000115 	.word	0x00000115
     a50:	00000829 	.word	0x00000829

00000a54 <wc_AesEncrypt>:
    return x;
}

/* Software AES - ECB Encrypt */
static void wc_AesEncrypt(Aes* aes, const byte* inBlock, byte* outBlock)
{
     a54:	b5f0      	push	{r4, r5, r6, r7, lr}
     a56:	46de      	mov	lr, fp
     a58:	4657      	mov	r7, sl
     a5a:	464e      	mov	r6, r9
     a5c:	4645      	mov	r5, r8
     a5e:	b5e0      	push	{r5, r6, r7, lr}
     a60:	b089      	sub	sp, #36	; 0x24
     a62:	4681      	mov	r9, r0
     a64:	000c      	movs	r4, r1
     a66:	9203      	str	r2, [sp, #12]
    word32 s0, s1, s2, s3;
    word32 t0, t1, t2, t3;
    word32 r = aes->rounds >> 1;
     a68:	23f0      	movs	r3, #240	; 0xf0
     a6a:	58c3      	ldr	r3, [r0, r3]
     a6c:	085b      	lsrs	r3, r3, #1
     a6e:	4698      	mov	r8, r3
    const word32* rk = aes->key;

    if (r > 7 || r == 0) {
     a70:	3b01      	subs	r3, #1
     a72:	2b06      	cmp	r3, #6
     a74:	d906      	bls.n	a84 <wc_AesEncrypt+0x30>
    XMEMCPY(outBlock,                  &s0, sizeof(s0));
    XMEMCPY(outBlock + sizeof(s0),     &s1, sizeof(s1));
    XMEMCPY(outBlock + 2 * sizeof(s0), &s2, sizeof(s2));
    XMEMCPY(outBlock + 3 * sizeof(s0), &s3, sizeof(s3));

}
     a76:	b009      	add	sp, #36	; 0x24
     a78:	bc3c      	pop	{r2, r3, r4, r5}
     a7a:	4690      	mov	r8, r2
     a7c:	4699      	mov	r9, r3
     a7e:	46a2      	mov	sl, r4
     a80:	46ab      	mov	fp, r5
     a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    XMEMCPY(&s0, inBlock,                  sizeof(s0));
     a84:	2204      	movs	r2, #4
     a86:	a807      	add	r0, sp, #28
     a88:	4dcc      	ldr	r5, [pc, #816]	; (dbc <wc_AesEncrypt+0x368>)
     a8a:	47a8      	blx	r5
    XMEMCPY(&s1, inBlock + sizeof(s0),     sizeof(s1));
     a8c:	1d21      	adds	r1, r4, #4
     a8e:	2204      	movs	r2, #4
     a90:	a806      	add	r0, sp, #24
     a92:	47a8      	blx	r5
    XMEMCPY(&s2, inBlock + 2 * sizeof(s0), sizeof(s2));
     a94:	0021      	movs	r1, r4
     a96:	3108      	adds	r1, #8
     a98:	2204      	movs	r2, #4
     a9a:	a805      	add	r0, sp, #20
     a9c:	47a8      	blx	r5
    XMEMCPY(&s3, inBlock + 3 * sizeof(s0), sizeof(s3));
     a9e:	0021      	movs	r1, r4
     aa0:	310c      	adds	r1, #12
     aa2:	2204      	movs	r2, #4
     aa4:	a804      	add	r0, sp, #16
     aa6:	47a8      	blx	r5
    s0 = ByteReverseWord32(s0);
     aa8:	9807      	ldr	r0, [sp, #28]
    s1 = ByteReverseWord32(s1);
     aaa:	9906      	ldr	r1, [sp, #24]
    s2 = ByteReverseWord32(s2);
     aac:	9a05      	ldr	r2, [sp, #20]
    /* 5 instructions with rotate instruction, 9 without */
    return (rotrFixed(value, 8U) & 0xff00ff00) |
           (rotlFixed(value, 8U) & 0x00ff00ff);
#else
    /* 6 instructions with rotate instruction, 8 without */
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
     aae:	0a06      	lsrs	r6, r0, #8
     ab0:	4bc3      	ldr	r3, [pc, #780]	; (dc0 <wc_AesEncrypt+0x36c>)
     ab2:	469c      	mov	ip, r3
     ab4:	401e      	ands	r6, r3
     ab6:	0200      	lsls	r0, r0, #8
     ab8:	4bc2      	ldr	r3, [pc, #776]	; (dc4 <wc_AesEncrypt+0x370>)
     aba:	4018      	ands	r0, r3
     abc:	4306      	orrs	r6, r0
        return (x << y) | (x >> (sizeof(y) * 8 - y));
     abe:	2510      	movs	r5, #16
     ac0:	41ee      	rors	r6, r5
    s0 ^= rk[0];
     ac2:	4648      	mov	r0, r9
     ac4:	6800      	ldr	r0, [r0, #0]
     ac6:	4046      	eors	r6, r0
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
     ac8:	0a0f      	lsrs	r7, r1, #8
     aca:	4660      	mov	r0, ip
     acc:	4007      	ands	r7, r0
     ace:	0209      	lsls	r1, r1, #8
     ad0:	4019      	ands	r1, r3
     ad2:	430f      	orrs	r7, r1
        return (x << y) | (x >> (sizeof(y) * 8 - y));
     ad4:	41ef      	rors	r7, r5
    s1 ^= rk[1];
     ad6:	4649      	mov	r1, r9
     ad8:	6849      	ldr	r1, [r1, #4]
     ada:	404f      	eors	r7, r1
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
     adc:	0a10      	lsrs	r0, r2, #8
     ade:	4661      	mov	r1, ip
     ae0:	4008      	ands	r0, r1
     ae2:	0212      	lsls	r2, r2, #8
     ae4:	401a      	ands	r2, r3
     ae6:	4310      	orrs	r0, r2
        return (x << y) | (x >> (sizeof(y) * 8 - y));
     ae8:	41e8      	rors	r0, r5
    s2 ^= rk[2];
     aea:	464a      	mov	r2, r9
     aec:	6892      	ldr	r2, [r2, #8]
     aee:	4050      	eors	r0, r2
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
     af0:	9a04      	ldr	r2, [sp, #16]
     af2:	0214      	lsls	r4, r2, #8
     af4:	401c      	ands	r4, r3
     af6:	0a13      	lsrs	r3, r2, #8
     af8:	400b      	ands	r3, r1
     afa:	431c      	orrs	r4, r3
        return (x << y) | (x >> (sizeof(y) * 8 - y));
     afc:	41ec      	rors	r4, r5
    s3 ^= rk[3];
     afe:	464b      	mov	r3, r9
     b00:	68db      	ldr	r3, [r3, #12]
     b02:	405c      	eors	r4, r3
     b04:	2204      	movs	r2, #4
{
     b06:	2320      	movs	r3, #32
     b08:	3b01      	subs	r3, #1
        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
     b0a:	2b00      	cmp	r3, #0
     b0c:	d1fc      	bne.n	b08 <wc_AesEncrypt+0xb4>
     b0e:	3a01      	subs	r2, #1
    for (i = 0; i < 4; i++) {
     b10:	2a00      	cmp	r2, #0
     b12:	d1f8      	bne.n	b06 <wc_AesEncrypt+0xb2>
    const word32* rk = aes->key;
     b14:	464d      	mov	r5, r9
     b16:	4643      	mov	r3, r8
     b18:	015b      	lsls	r3, r3, #5
     b1a:	444b      	add	r3, r9
     b1c:	469a      	mov	sl, r3
            Te[0][GETBYTE(s0, 3)]  ^
     b1e:	4baa      	ldr	r3, [pc, #680]	; (dc8 <wc_AesEncrypt+0x374>)
     b20:	4698      	mov	r8, r3
            Te[3][GETBYTE(s3, 0)]  ^
     b22:	23ff      	movs	r3, #255	; 0xff
     b24:	469c      	mov	ip, r3
            Te[0][GETBYTE(t0, 3)] ^
     b26:	46c1      	mov	r9, r8
     b28:	4653      	mov	r3, sl
     b2a:	9302      	str	r3, [sp, #8]
            Te[0][GETBYTE(s0, 3)]  ^
     b2c:	0e32      	lsrs	r2, r6, #24
     b2e:	0092      	lsls	r2, r2, #2
            Te[3][GETBYTE(s3, 0)]  ^
     b30:	4663      	mov	r3, ip
     b32:	4023      	ands	r3, r4
     b34:	21c0      	movs	r1, #192	; 0xc0
     b36:	0089      	lsls	r1, r1, #2
     b38:	468b      	mov	fp, r1
     b3a:	445b      	add	r3, fp
     b3c:	009b      	lsls	r3, r3, #2
        t0 =
     b3e:	4641      	mov	r1, r8
     b40:	5852      	ldr	r2, [r2, r1]
     b42:	585b      	ldr	r3, [r3, r1]
     b44:	405a      	eors	r2, r3
     b46:	692b      	ldr	r3, [r5, #16]
     b48:	405a      	eors	r2, r3
            Te[1][GETBYTE(s1, 2)]  ^
     b4a:	0c3b      	lsrs	r3, r7, #16
     b4c:	4661      	mov	r1, ip
     b4e:	400b      	ands	r3, r1
     b50:	3301      	adds	r3, #1
     b52:	33ff      	adds	r3, #255	; 0xff
     b54:	009b      	lsls	r3, r3, #2
        t0 =
     b56:	4641      	mov	r1, r8
     b58:	585b      	ldr	r3, [r3, r1]
     b5a:	405a      	eors	r2, r3
            Te[2][GETBYTE(s2, 1)]  ^
     b5c:	0a03      	lsrs	r3, r0, #8
     b5e:	4661      	mov	r1, ip
     b60:	400b      	ands	r3, r1
     b62:	2180      	movs	r1, #128	; 0x80
     b64:	0089      	lsls	r1, r1, #2
     b66:	468b      	mov	fp, r1
     b68:	445b      	add	r3, fp
     b6a:	009b      	lsls	r3, r3, #2
        t0 =
     b6c:	4641      	mov	r1, r8
     b6e:	585b      	ldr	r3, [r3, r1]
     b70:	405a      	eors	r2, r3
     b72:	9200      	str	r2, [sp, #0]
            Te[0][GETBYTE(s1, 3)]  ^
     b74:	0e3b      	lsrs	r3, r7, #24
     b76:	009b      	lsls	r3, r3, #2
            Te[3][GETBYTE(s0, 0)]  ^
     b78:	4661      	mov	r1, ip
     b7a:	4031      	ands	r1, r6
     b7c:	22c0      	movs	r2, #192	; 0xc0
     b7e:	0092      	lsls	r2, r2, #2
     b80:	4693      	mov	fp, r2
     b82:	4459      	add	r1, fp
     b84:	0089      	lsls	r1, r1, #2
        t1 =
     b86:	4642      	mov	r2, r8
     b88:	589b      	ldr	r3, [r3, r2]
     b8a:	5889      	ldr	r1, [r1, r2]
     b8c:	404b      	eors	r3, r1
     b8e:	696a      	ldr	r2, [r5, #20]
     b90:	4053      	eors	r3, r2
            Te[1][GETBYTE(s2, 2)]  ^
     b92:	0c01      	lsrs	r1, r0, #16
     b94:	4662      	mov	r2, ip
     b96:	4011      	ands	r1, r2
     b98:	3101      	adds	r1, #1
     b9a:	31ff      	adds	r1, #255	; 0xff
     b9c:	0089      	lsls	r1, r1, #2
        t1 =
     b9e:	4642      	mov	r2, r8
     ba0:	5889      	ldr	r1, [r1, r2]
     ba2:	404b      	eors	r3, r1
            Te[2][GETBYTE(s3, 1)]  ^
     ba4:	0a21      	lsrs	r1, r4, #8
     ba6:	4662      	mov	r2, ip
     ba8:	4011      	ands	r1, r2
     baa:	2280      	movs	r2, #128	; 0x80
     bac:	0092      	lsls	r2, r2, #2
     bae:	4693      	mov	fp, r2
     bb0:	4459      	add	r1, fp
     bb2:	0089      	lsls	r1, r1, #2
        t1 =
     bb4:	4642      	mov	r2, r8
     bb6:	5889      	ldr	r1, [r1, r2]
     bb8:	404b      	eors	r3, r1
     bba:	9301      	str	r3, [sp, #4]
            Te[0][GETBYTE(s2, 3)] ^
     bbc:	0e01      	lsrs	r1, r0, #24
     bbe:	008a      	lsls	r2, r1, #2
     bc0:	4693      	mov	fp, r2
            Te[3][GETBYTE(s1, 0)]  ^
     bc2:	4661      	mov	r1, ip
     bc4:	4039      	ands	r1, r7
     bc6:	22c0      	movs	r2, #192	; 0xc0
     bc8:	0092      	lsls	r2, r2, #2
     bca:	4692      	mov	sl, r2
     bcc:	4451      	add	r1, sl
     bce:	0089      	lsls	r1, r1, #2
        t2 =
     bd0:	4642      	mov	r2, r8
     bd2:	465b      	mov	r3, fp
     bd4:	589b      	ldr	r3, [r3, r2]
     bd6:	469b      	mov	fp, r3
     bd8:	5889      	ldr	r1, [r1, r2]
     bda:	465b      	mov	r3, fp
     bdc:	4059      	eors	r1, r3
     bde:	69ab      	ldr	r3, [r5, #24]
     be0:	4059      	eors	r1, r3
            Te[1][GETBYTE(s3, 2)]  ^
     be2:	0c23      	lsrs	r3, r4, #16
     be4:	001a      	movs	r2, r3
     be6:	4663      	mov	r3, ip
     be8:	401a      	ands	r2, r3
     bea:	4693      	mov	fp, r2
     bec:	2380      	movs	r3, #128	; 0x80
     bee:	005b      	lsls	r3, r3, #1
     bf0:	469a      	mov	sl, r3
     bf2:	44d3      	add	fp, sl
     bf4:	465b      	mov	r3, fp
     bf6:	009b      	lsls	r3, r3, #2
     bf8:	469b      	mov	fp, r3
        t2 =
     bfa:	4643      	mov	r3, r8
     bfc:	465a      	mov	r2, fp
     bfe:	58d3      	ldr	r3, [r2, r3]
     c00:	4059      	eors	r1, r3
            Te[2][GETBYTE(s0, 1)]  ^
     c02:	0a33      	lsrs	r3, r6, #8
     c04:	001a      	movs	r2, r3
     c06:	4663      	mov	r3, ip
     c08:	401a      	ands	r2, r3
     c0a:	4693      	mov	fp, r2
     c0c:	2380      	movs	r3, #128	; 0x80
     c0e:	009b      	lsls	r3, r3, #2
     c10:	469a      	mov	sl, r3
     c12:	44d3      	add	fp, sl
     c14:	465b      	mov	r3, fp
     c16:	009b      	lsls	r3, r3, #2
     c18:	469b      	mov	fp, r3
        t2 =
     c1a:	4643      	mov	r3, r8
     c1c:	465a      	mov	r2, fp
     c1e:	58d3      	ldr	r3, [r2, r3]
     c20:	4059      	eors	r1, r3
            Te[0][GETBYTE(s3, 3)] ^
     c22:	0e24      	lsrs	r4, r4, #24
     c24:	00a4      	lsls	r4, r4, #2
            Te[3][GETBYTE(s2, 0)]  ^
     c26:	4663      	mov	r3, ip
     c28:	4018      	ands	r0, r3
     c2a:	23c0      	movs	r3, #192	; 0xc0
     c2c:	009b      	lsls	r3, r3, #2
     c2e:	469a      	mov	sl, r3
     c30:	4450      	add	r0, sl
     c32:	0080      	lsls	r0, r0, #2
        t3 =
     c34:	4643      	mov	r3, r8
     c36:	58e4      	ldr	r4, [r4, r3]
     c38:	58c0      	ldr	r0, [r0, r3]
     c3a:	4044      	eors	r4, r0
     c3c:	69eb      	ldr	r3, [r5, #28]
     c3e:	405c      	eors	r4, r3
            Te[1][GETBYTE(s0, 2)]  ^
     c40:	0c36      	lsrs	r6, r6, #16
     c42:	4663      	mov	r3, ip
     c44:	401e      	ands	r6, r3
     c46:	3601      	adds	r6, #1
     c48:	36ff      	adds	r6, #255	; 0xff
     c4a:	00b6      	lsls	r6, r6, #2
        t3 =
     c4c:	4643      	mov	r3, r8
     c4e:	58f0      	ldr	r0, [r6, r3]
     c50:	4044      	eors	r4, r0
            Te[2][GETBYTE(s1, 1)]  ^
     c52:	0a3f      	lsrs	r7, r7, #8
     c54:	4663      	mov	r3, ip
     c56:	401f      	ands	r7, r3
     c58:	2380      	movs	r3, #128	; 0x80
     c5a:	009b      	lsls	r3, r3, #2
     c5c:	469a      	mov	sl, r3
     c5e:	4457      	add	r7, sl
     c60:	00bf      	lsls	r7, r7, #2
        t3 =
     c62:	4643      	mov	r3, r8
     c64:	58f8      	ldr	r0, [r7, r3]
     c66:	4044      	eors	r4, r0
        rk += 8;
     c68:	3520      	adds	r5, #32
        if (--r == 0) {
     c6a:	9e02      	ldr	r6, [sp, #8]
     c6c:	42ae      	cmp	r6, r5
     c6e:	d100      	bne.n	c72 <wc_AesEncrypt+0x21e>
     c70:	e0ac      	b.n	dcc <wc_AesEncrypt+0x378>
            Te[0][GETBYTE(t0, 3)] ^
     c72:	9800      	ldr	r0, [sp, #0]
     c74:	0e06      	lsrs	r6, r0, #24
     c76:	00b6      	lsls	r6, r6, #2
            Te[3][GETBYTE(t3, 0)] ^
     c78:	4660      	mov	r0, ip
     c7a:	4020      	ands	r0, r4
     c7c:	23c0      	movs	r3, #192	; 0xc0
     c7e:	009b      	lsls	r3, r3, #2
     c80:	469a      	mov	sl, r3
     c82:	4450      	add	r0, sl
     c84:	0080      	lsls	r0, r0, #2
     c86:	464b      	mov	r3, r9
     c88:	58f6      	ldr	r6, [r6, r3]
     c8a:	58c0      	ldr	r0, [r0, r3]
     c8c:	4046      	eors	r6, r0
     c8e:	682b      	ldr	r3, [r5, #0]
     c90:	405e      	eors	r6, r3
            Te[1][GETBYTE(t1, 2)] ^
     c92:	9a01      	ldr	r2, [sp, #4]
     c94:	0c10      	lsrs	r0, r2, #16
     c96:	4663      	mov	r3, ip
     c98:	4018      	ands	r0, r3
     c9a:	3001      	adds	r0, #1
     c9c:	30ff      	adds	r0, #255	; 0xff
     c9e:	0080      	lsls	r0, r0, #2
            Te[3][GETBYTE(t3, 0)] ^
     ca0:	464b      	mov	r3, r9
     ca2:	58c0      	ldr	r0, [r0, r3]
     ca4:	4046      	eors	r6, r0
            Te[2][GETBYTE(t2, 1)] ^
     ca6:	0a08      	lsrs	r0, r1, #8
     ca8:	4663      	mov	r3, ip
     caa:	4018      	ands	r0, r3
     cac:	2380      	movs	r3, #128	; 0x80
     cae:	009b      	lsls	r3, r3, #2
     cb0:	469a      	mov	sl, r3
     cb2:	4450      	add	r0, sl
     cb4:	0080      	lsls	r0, r0, #2
            Te[3][GETBYTE(t3, 0)] ^
     cb6:	464b      	mov	r3, r9
     cb8:	58c0      	ldr	r0, [r0, r3]
     cba:	4046      	eors	r6, r0
            Te[0][GETBYTE(t1, 3)] ^
     cbc:	0e17      	lsrs	r7, r2, #24
     cbe:	00bf      	lsls	r7, r7, #2
            Te[3][GETBYTE(t0, 0)] ^
     cc0:	4660      	mov	r0, ip
     cc2:	9b00      	ldr	r3, [sp, #0]
     cc4:	4018      	ands	r0, r3
     cc6:	23c0      	movs	r3, #192	; 0xc0
     cc8:	009b      	lsls	r3, r3, #2
     cca:	469a      	mov	sl, r3
     ccc:	4450      	add	r0, sl
     cce:	0080      	lsls	r0, r0, #2
     cd0:	464b      	mov	r3, r9
     cd2:	58ff      	ldr	r7, [r7, r3]
     cd4:	58c0      	ldr	r0, [r0, r3]
     cd6:	4047      	eors	r7, r0
     cd8:	686b      	ldr	r3, [r5, #4]
     cda:	405f      	eors	r7, r3
            Te[1][GETBYTE(t2, 2)] ^
     cdc:	0c08      	lsrs	r0, r1, #16
     cde:	4663      	mov	r3, ip
     ce0:	4018      	ands	r0, r3
     ce2:	3001      	adds	r0, #1
     ce4:	30ff      	adds	r0, #255	; 0xff
     ce6:	0080      	lsls	r0, r0, #2
            Te[3][GETBYTE(t0, 0)] ^
     ce8:	464b      	mov	r3, r9
     cea:	58c0      	ldr	r0, [r0, r3]
     cec:	4047      	eors	r7, r0
            Te[2][GETBYTE(t3, 1)] ^
     cee:	0a20      	lsrs	r0, r4, #8
     cf0:	4663      	mov	r3, ip
     cf2:	4018      	ands	r0, r3
     cf4:	2380      	movs	r3, #128	; 0x80
     cf6:	009b      	lsls	r3, r3, #2
     cf8:	469a      	mov	sl, r3
     cfa:	4450      	add	r0, sl
     cfc:	0080      	lsls	r0, r0, #2
            Te[3][GETBYTE(t0, 0)] ^
     cfe:	464b      	mov	r3, r9
     d00:	58c0      	ldr	r0, [r0, r3]
     d02:	4047      	eors	r7, r0
            Te[0][GETBYTE(t2, 3)] ^
     d04:	0e08      	lsrs	r0, r1, #24
     d06:	0083      	lsls	r3, r0, #2
     d08:	469b      	mov	fp, r3
            Te[3][GETBYTE(t1, 0)] ^
     d0a:	4660      	mov	r0, ip
     d0c:	4010      	ands	r0, r2
     d0e:	23c0      	movs	r3, #192	; 0xc0
     d10:	009b      	lsls	r3, r3, #2
     d12:	469a      	mov	sl, r3
     d14:	4450      	add	r0, sl
     d16:	0080      	lsls	r0, r0, #2
     d18:	464b      	mov	r3, r9
     d1a:	465a      	mov	r2, fp
     d1c:	58d3      	ldr	r3, [r2, r3]
     d1e:	469b      	mov	fp, r3
     d20:	464b      	mov	r3, r9
     d22:	58c0      	ldr	r0, [r0, r3]
     d24:	465b      	mov	r3, fp
     d26:	4058      	eors	r0, r3
     d28:	68ab      	ldr	r3, [r5, #8]
     d2a:	4058      	eors	r0, r3
            Te[1][GETBYTE(t3, 2)] ^
     d2c:	0c23      	lsrs	r3, r4, #16
     d2e:	001a      	movs	r2, r3
     d30:	4663      	mov	r3, ip
     d32:	401a      	ands	r2, r3
     d34:	4693      	mov	fp, r2
     d36:	2380      	movs	r3, #128	; 0x80
     d38:	005b      	lsls	r3, r3, #1
     d3a:	469a      	mov	sl, r3
     d3c:	44d3      	add	fp, sl
     d3e:	465b      	mov	r3, fp
     d40:	009b      	lsls	r3, r3, #2
     d42:	469b      	mov	fp, r3
            Te[3][GETBYTE(t1, 0)] ^
     d44:	464b      	mov	r3, r9
     d46:	465a      	mov	r2, fp
     d48:	58d3      	ldr	r3, [r2, r3]
     d4a:	4058      	eors	r0, r3
            Te[2][GETBYTE(t0, 1)] ^
     d4c:	9a00      	ldr	r2, [sp, #0]
     d4e:	0a13      	lsrs	r3, r2, #8
     d50:	001a      	movs	r2, r3
     d52:	4663      	mov	r3, ip
     d54:	401a      	ands	r2, r3
     d56:	4693      	mov	fp, r2
     d58:	2380      	movs	r3, #128	; 0x80
     d5a:	009b      	lsls	r3, r3, #2
     d5c:	469a      	mov	sl, r3
     d5e:	44d3      	add	fp, sl
     d60:	465b      	mov	r3, fp
     d62:	009b      	lsls	r3, r3, #2
     d64:	469b      	mov	fp, r3
            Te[3][GETBYTE(t1, 0)] ^
     d66:	464b      	mov	r3, r9
     d68:	465a      	mov	r2, fp
     d6a:	58d3      	ldr	r3, [r2, r3]
     d6c:	4058      	eors	r0, r3
            Te[0][GETBYTE(t3, 3)] ^
     d6e:	0e24      	lsrs	r4, r4, #24
     d70:	00a4      	lsls	r4, r4, #2
            Te[3][GETBYTE(t2, 0)] ^
     d72:	4663      	mov	r3, ip
     d74:	4019      	ands	r1, r3
     d76:	23c0      	movs	r3, #192	; 0xc0
     d78:	009b      	lsls	r3, r3, #2
     d7a:	469a      	mov	sl, r3
     d7c:	4451      	add	r1, sl
     d7e:	0089      	lsls	r1, r1, #2
     d80:	464b      	mov	r3, r9
     d82:	58e4      	ldr	r4, [r4, r3]
     d84:	58c9      	ldr	r1, [r1, r3]
     d86:	404c      	eors	r4, r1
     d88:	68eb      	ldr	r3, [r5, #12]
     d8a:	405c      	eors	r4, r3
            Te[1][GETBYTE(t0, 2)] ^
     d8c:	9900      	ldr	r1, [sp, #0]
     d8e:	0c0a      	lsrs	r2, r1, #16
     d90:	4663      	mov	r3, ip
     d92:	401a      	ands	r2, r3
     d94:	3201      	adds	r2, #1
     d96:	32ff      	adds	r2, #255	; 0xff
     d98:	0092      	lsls	r2, r2, #2
            Te[3][GETBYTE(t2, 0)] ^
     d9a:	464b      	mov	r3, r9
     d9c:	58d2      	ldr	r2, [r2, r3]
     d9e:	4054      	eors	r4, r2
            Te[2][GETBYTE(t1, 1)] ^
     da0:	9b01      	ldr	r3, [sp, #4]
     da2:	0a1b      	lsrs	r3, r3, #8
     da4:	4662      	mov	r2, ip
     da6:	4013      	ands	r3, r2
     da8:	2280      	movs	r2, #128	; 0x80
     daa:	0092      	lsls	r2, r2, #2
     dac:	4692      	mov	sl, r2
     dae:	4453      	add	r3, sl
     db0:	009b      	lsls	r3, r3, #2
            Te[3][GETBYTE(t2, 0)] ^
     db2:	464a      	mov	r2, r9
     db4:	589b      	ldr	r3, [r3, r2]
     db6:	405c      	eors	r4, r3
        t0 =
     db8:	e6b8      	b.n	b2c <wc_AesEncrypt+0xd8>
     dba:	46c0      	nop			; (mov r8, r8)
     dbc:	00001a69 	.word	0x00001a69
     dc0:	00ff00ff 	.word	0x00ff00ff
     dc4:	ff00ff00 	.word	0xff00ff00
     dc8:	00001bd8 	.word	0x00001bd8
     dcc:	9a00      	ldr	r2, [sp, #0]
        (Te[1][GETBYTE(t3, 0)] & 0x000000ff) ^
     dce:	4e82      	ldr	r6, [pc, #520]	; (fd8 <wc_AesEncrypt+0x584>)
     dd0:	20ff      	movs	r0, #255	; 0xff
     dd2:	0007      	movs	r7, r0
     dd4:	4027      	ands	r7, r4
     dd6:	3701      	adds	r7, #1
     dd8:	37ff      	adds	r7, #255	; 0xff
     dda:	00bf      	lsls	r7, r7, #2
     ddc:	59bf      	ldr	r7, [r7, r6]
     dde:	4007      	ands	r7, r0
     de0:	682b      	ldr	r3, [r5, #0]
     de2:	405f      	eors	r7, r3
        (Te[0][GETBYTE(t2, 1)] & 0x0000ff00) ^
     de4:	9100      	str	r1, [sp, #0]
     de6:	0a0b      	lsrs	r3, r1, #8
     de8:	4003      	ands	r3, r0
     dea:	009b      	lsls	r3, r3, #2
     dec:	599b      	ldr	r3, [r3, r6]
     dee:	469c      	mov	ip, r3
     df0:	23ff      	movs	r3, #255	; 0xff
     df2:	021b      	lsls	r3, r3, #8
     df4:	469b      	mov	fp, r3
     df6:	4663      	mov	r3, ip
     df8:	4659      	mov	r1, fp
     dfa:	400b      	ands	r3, r1
        (Te[1][GETBYTE(t3, 0)] & 0x000000ff) ^
     dfc:	405f      	eors	r7, r3
        (Te[3][GETBYTE(t1, 2)] & 0x00ff0000) ^
     dfe:	9b01      	ldr	r3, [sp, #4]
     e00:	0c1b      	lsrs	r3, r3, #16
     e02:	4003      	ands	r3, r0
     e04:	469c      	mov	ip, r3
     e06:	23c0      	movs	r3, #192	; 0xc0
     e08:	009b      	lsls	r3, r3, #2
     e0a:	4698      	mov	r8, r3
     e0c:	44c4      	add	ip, r8
     e0e:	4663      	mov	r3, ip
     e10:	009b      	lsls	r3, r3, #2
     e12:	599b      	ldr	r3, [r3, r6]
     e14:	469c      	mov	ip, r3
     e16:	23ff      	movs	r3, #255	; 0xff
     e18:	041b      	lsls	r3, r3, #16
     e1a:	469a      	mov	sl, r3
     e1c:	4663      	mov	r3, ip
     e1e:	4651      	mov	r1, sl
     e20:	400b      	ands	r3, r1
     e22:	469c      	mov	ip, r3
        (Te[2][GETBYTE(t0, 3)] & 0xff000000) ^
     e24:	0e13      	lsrs	r3, r2, #24
     e26:	4698      	mov	r8, r3
     e28:	2380      	movs	r3, #128	; 0x80
     e2a:	009b      	lsls	r3, r3, #2
     e2c:	4699      	mov	r9, r3
     e2e:	44c8      	add	r8, r9
     e30:	4643      	mov	r3, r8
     e32:	009b      	lsls	r3, r3, #2
     e34:	599b      	ldr	r3, [r3, r6]
     e36:	0e1b      	lsrs	r3, r3, #24
     e38:	061b      	lsls	r3, r3, #24
     e3a:	4698      	mov	r8, r3
     e3c:	4663      	mov	r3, ip
     e3e:	4641      	mov	r1, r8
     e40:	430b      	orrs	r3, r1
        (Te[1][GETBYTE(t3, 0)] & 0x000000ff) ^
     e42:	407b      	eors	r3, r7
     e44:	9302      	str	r3, [sp, #8]
        (Te[1][GETBYTE(t0, 0)] & 0x000000ff) ^
     e46:	0007      	movs	r7, r0
     e48:	4017      	ands	r7, r2
     e4a:	3701      	adds	r7, #1
     e4c:	37ff      	adds	r7, #255	; 0xff
     e4e:	00bf      	lsls	r7, r7, #2
     e50:	59bf      	ldr	r7, [r7, r6]
     e52:	4007      	ands	r7, r0
     e54:	6869      	ldr	r1, [r5, #4]
     e56:	404f      	eors	r7, r1
        (Te[0][GETBYTE(t3, 1)] & 0x0000ff00) ^
     e58:	0a21      	lsrs	r1, r4, #8
     e5a:	000b      	movs	r3, r1
     e5c:	4003      	ands	r3, r0
     e5e:	0099      	lsls	r1, r3, #2
     e60:	5989      	ldr	r1, [r1, r6]
     e62:	000b      	movs	r3, r1
     e64:	4659      	mov	r1, fp
     e66:	400b      	ands	r3, r1
        (Te[1][GETBYTE(t0, 0)] & 0x000000ff) ^
     e68:	405f      	eors	r7, r3
        (Te[3][GETBYTE(t2, 2)] & 0x00ff0000) ^
     e6a:	9900      	ldr	r1, [sp, #0]
     e6c:	0c09      	lsrs	r1, r1, #16
     e6e:	000b      	movs	r3, r1
     e70:	4003      	ands	r3, r0
     e72:	469c      	mov	ip, r3
     e74:	21c0      	movs	r1, #192	; 0xc0
     e76:	0089      	lsls	r1, r1, #2
     e78:	4688      	mov	r8, r1
     e7a:	44c4      	add	ip, r8
     e7c:	4661      	mov	r1, ip
     e7e:	0089      	lsls	r1, r1, #2
     e80:	5989      	ldr	r1, [r1, r6]
     e82:	000b      	movs	r3, r1
     e84:	4651      	mov	r1, sl
     e86:	400b      	ands	r3, r1
     e88:	469c      	mov	ip, r3
        (Te[2][GETBYTE(t1, 3)] & 0xff000000) ^
     e8a:	9b01      	ldr	r3, [sp, #4]
     e8c:	0e19      	lsrs	r1, r3, #24
     e8e:	4688      	mov	r8, r1
     e90:	44c8      	add	r8, r9
     e92:	4641      	mov	r1, r8
     e94:	0089      	lsls	r1, r1, #2
     e96:	5989      	ldr	r1, [r1, r6]
     e98:	0e09      	lsrs	r1, r1, #24
     e9a:	0609      	lsls	r1, r1, #24
     e9c:	4663      	mov	r3, ip
     e9e:	430b      	orrs	r3, r1
        (Te[1][GETBYTE(t0, 0)] & 0x000000ff) ^
     ea0:	405f      	eors	r7, r3
        (Te[1][GETBYTE(t1, 0)] & 0x000000ff) ^
     ea2:	0003      	movs	r3, r0
     ea4:	9901      	ldr	r1, [sp, #4]
     ea6:	400b      	ands	r3, r1
     ea8:	469c      	mov	ip, r3
     eaa:	2180      	movs	r1, #128	; 0x80
     eac:	0049      	lsls	r1, r1, #1
     eae:	4688      	mov	r8, r1
     eb0:	44c4      	add	ip, r8
     eb2:	4661      	mov	r1, ip
     eb4:	0089      	lsls	r1, r1, #2
     eb6:	5989      	ldr	r1, [r1, r6]
     eb8:	000b      	movs	r3, r1
     eba:	4003      	ands	r3, r0
     ebc:	68a9      	ldr	r1, [r5, #8]
     ebe:	404b      	eors	r3, r1
     ec0:	4698      	mov	r8, r3
        (Te[0][GETBYTE(t0, 1)] & 0x0000ff00) ^
     ec2:	0a11      	lsrs	r1, r2, #8
     ec4:	000b      	movs	r3, r1
     ec6:	4003      	ands	r3, r0
     ec8:	0099      	lsls	r1, r3, #2
     eca:	5989      	ldr	r1, [r1, r6]
     ecc:	000b      	movs	r3, r1
     ece:	4659      	mov	r1, fp
     ed0:	400b      	ands	r3, r1
     ed2:	469c      	mov	ip, r3
        (Te[1][GETBYTE(t1, 0)] & 0x000000ff) ^
     ed4:	4643      	mov	r3, r8
     ed6:	4661      	mov	r1, ip
     ed8:	404b      	eors	r3, r1
     eda:	4698      	mov	r8, r3
        (Te[3][GETBYTE(t3, 2)] & 0x00ff0000) ^
     edc:	0c21      	lsrs	r1, r4, #16
     ede:	000b      	movs	r3, r1
     ee0:	4003      	ands	r3, r0
     ee2:	469c      	mov	ip, r3
     ee4:	21c0      	movs	r1, #192	; 0xc0
     ee6:	0089      	lsls	r1, r1, #2
     ee8:	4689      	mov	r9, r1
     eea:	44cc      	add	ip, r9
     eec:	4661      	mov	r1, ip
     eee:	0089      	lsls	r1, r1, #2
     ef0:	5989      	ldr	r1, [r1, r6]
     ef2:	000b      	movs	r3, r1
     ef4:	4651      	mov	r1, sl
     ef6:	400b      	ands	r3, r1
        (Te[2][GETBYTE(t2, 3)] & 0xff000000) ^
     ef8:	9900      	ldr	r1, [sp, #0]
     efa:	0e09      	lsrs	r1, r1, #24
     efc:	4689      	mov	r9, r1
     efe:	2180      	movs	r1, #128	; 0x80
     f00:	0089      	lsls	r1, r1, #2
     f02:	468c      	mov	ip, r1
     f04:	44e1      	add	r9, ip
     f06:	4649      	mov	r1, r9
     f08:	0089      	lsls	r1, r1, #2
     f0a:	5989      	ldr	r1, [r1, r6]
     f0c:	0e09      	lsrs	r1, r1, #24
     f0e:	0609      	lsls	r1, r1, #24
     f10:	430b      	orrs	r3, r1
     f12:	469c      	mov	ip, r3
        (Te[1][GETBYTE(t1, 0)] & 0x000000ff) ^
     f14:	4643      	mov	r3, r8
     f16:	4661      	mov	r1, ip
     f18:	404b      	eors	r3, r1
     f1a:	469c      	mov	ip, r3
        (Te[1][GETBYTE(t2, 0)] & 0x000000ff) ^
     f1c:	9900      	ldr	r1, [sp, #0]
     f1e:	4001      	ands	r1, r0
     f20:	3101      	adds	r1, #1
     f22:	31ff      	adds	r1, #255	; 0xff
     f24:	0089      	lsls	r1, r1, #2
     f26:	5989      	ldr	r1, [r1, r6]
     f28:	4001      	ands	r1, r0
     f2a:	68ed      	ldr	r5, [r5, #12]
     f2c:	4069      	eors	r1, r5
        (Te[0][GETBYTE(t1, 1)] & 0x0000ff00) ^
     f2e:	9b01      	ldr	r3, [sp, #4]
     f30:	0a1b      	lsrs	r3, r3, #8
     f32:	4003      	ands	r3, r0
     f34:	009b      	lsls	r3, r3, #2
     f36:	599b      	ldr	r3, [r3, r6]
     f38:	465d      	mov	r5, fp
     f3a:	402b      	ands	r3, r5
        (Te[1][GETBYTE(t2, 0)] & 0x000000ff) ^
     f3c:	4059      	eors	r1, r3
        (Te[3][GETBYTE(t0, 2)] & 0x00ff0000) ^
     f3e:	0c12      	lsrs	r2, r2, #16
     f40:	4002      	ands	r2, r0
     f42:	20c0      	movs	r0, #192	; 0xc0
     f44:	0080      	lsls	r0, r0, #2
     f46:	4680      	mov	r8, r0
     f48:	4442      	add	r2, r8
     f4a:	0092      	lsls	r2, r2, #2
     f4c:	5993      	ldr	r3, [r2, r6]
     f4e:	4650      	mov	r0, sl
     f50:	4003      	ands	r3, r0
        (Te[2][GETBYTE(t3, 3)] & 0xff000000) ^
     f52:	0e24      	lsrs	r4, r4, #24
     f54:	2080      	movs	r0, #128	; 0x80
     f56:	0080      	lsls	r0, r0, #2
     f58:	4680      	mov	r8, r0
     f5a:	4444      	add	r4, r8
     f5c:	00a4      	lsls	r4, r4, #2
     f5e:	59a2      	ldr	r2, [r4, r6]
     f60:	0e12      	lsrs	r2, r2, #24
     f62:	0612      	lsls	r2, r2, #24
     f64:	4313      	orrs	r3, r2
        (Te[1][GETBYTE(t2, 0)] & 0x000000ff) ^
     f66:	4059      	eors	r1, r3
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
     f68:	9a02      	ldr	r2, [sp, #8]
     f6a:	0a13      	lsrs	r3, r2, #8
     f6c:	4d1b      	ldr	r5, [pc, #108]	; (fdc <wc_AesEncrypt+0x588>)
     f6e:	402b      	ands	r3, r5
     f70:	0212      	lsls	r2, r2, #8
     f72:	4c1b      	ldr	r4, [pc, #108]	; (fe0 <wc_AesEncrypt+0x58c>)
     f74:	4022      	ands	r2, r4
     f76:	4313      	orrs	r3, r2
        return (x << y) | (x >> (sizeof(y) * 8 - y));
     f78:	38f1      	subs	r0, #241	; 0xf1
     f7a:	38ff      	subs	r0, #255	; 0xff
     f7c:	41c3      	rors	r3, r0
    s0 = ByteReverseWord32(s0);
     f7e:	9307      	str	r3, [sp, #28]
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
     f80:	0a3b      	lsrs	r3, r7, #8
     f82:	402b      	ands	r3, r5
     f84:	023f      	lsls	r7, r7, #8
     f86:	4027      	ands	r7, r4
     f88:	433b      	orrs	r3, r7
        return (x << y) | (x >> (sizeof(y) * 8 - y));
     f8a:	41c3      	rors	r3, r0
    s1 = ByteReverseWord32(s1);
     f8c:	9306      	str	r3, [sp, #24]
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
     f8e:	4663      	mov	r3, ip
     f90:	0a1a      	lsrs	r2, r3, #8
     f92:	402a      	ands	r2, r5
     f94:	021b      	lsls	r3, r3, #8
     f96:	4023      	ands	r3, r4
     f98:	431a      	orrs	r2, r3
        return (x << y) | (x >> (sizeof(y) * 8 - y));
     f9a:	41c2      	rors	r2, r0
    s2 = ByteReverseWord32(s2);
     f9c:	9205      	str	r2, [sp, #20]
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
     f9e:	0a0b      	lsrs	r3, r1, #8
     fa0:	402b      	ands	r3, r5
     fa2:	0209      	lsls	r1, r1, #8
     fa4:	400c      	ands	r4, r1
     fa6:	4323      	orrs	r3, r4
        return (x << y) | (x >> (sizeof(y) * 8 - y));
     fa8:	41c3      	rors	r3, r0
    s3 = ByteReverseWord32(s3);
     faa:	9304      	str	r3, [sp, #16]
    XMEMCPY(outBlock,                  &s0, sizeof(s0));
     fac:	2204      	movs	r2, #4
     fae:	a907      	add	r1, sp, #28
     fb0:	9d03      	ldr	r5, [sp, #12]
     fb2:	0028      	movs	r0, r5
     fb4:	4c0b      	ldr	r4, [pc, #44]	; (fe4 <wc_AesEncrypt+0x590>)
     fb6:	47a0      	blx	r4
    XMEMCPY(outBlock + sizeof(s0),     &s1, sizeof(s1));
     fb8:	1d28      	adds	r0, r5, #4
     fba:	2204      	movs	r2, #4
     fbc:	a906      	add	r1, sp, #24
     fbe:	47a0      	blx	r4
    XMEMCPY(outBlock + 2 * sizeof(s0), &s2, sizeof(s2));
     fc0:	0028      	movs	r0, r5
     fc2:	3008      	adds	r0, #8
     fc4:	2204      	movs	r2, #4
     fc6:	a905      	add	r1, sp, #20
     fc8:	47a0      	blx	r4
    XMEMCPY(outBlock + 3 * sizeof(s0), &s3, sizeof(s3));
     fca:	0028      	movs	r0, r5
     fcc:	300c      	adds	r0, #12
     fce:	2204      	movs	r2, #4
     fd0:	a904      	add	r1, sp, #16
     fd2:	47a0      	blx	r4
     fd4:	e54f      	b.n	a76 <wc_AesEncrypt+0x22>
     fd6:	46c0      	nop			; (mov r8, r8)
     fd8:	00001bd8 	.word	0x00001bd8
     fdc:	00ff00ff 	.word	0x00ff00ff
     fe0:	ff00ff00 	.word	0xff00ff00
     fe4:	00001a69 	.word	0x00001a69

00000fe8 <wc_AesDecrypt>:
    return x;
}

/* Software AES - ECB Decrypt */
static void wc_AesDecrypt(Aes* aes, const byte* inBlock, byte* outBlock)
{
     fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
     fea:	46de      	mov	lr, fp
     fec:	4657      	mov	r7, sl
     fee:	464e      	mov	r6, r9
     ff0:	4645      	mov	r5, r8
     ff2:	b5e0      	push	{r5, r6, r7, lr}
     ff4:	b089      	sub	sp, #36	; 0x24
     ff6:	4682      	mov	sl, r0
     ff8:	000c      	movs	r4, r1
     ffa:	9203      	str	r2, [sp, #12]
    word32 s0, s1, s2, s3;
    word32 t0, t1, t2, t3;
    word32 r = aes->rounds >> 1;
     ffc:	23f0      	movs	r3, #240	; 0xf0
     ffe:	58c5      	ldr	r5, [r0, r3]
    1000:	086d      	lsrs	r5, r5, #1

    const word32* rk = aes->key;
    if (r > 7 || r == 0) {
    1002:	1e6b      	subs	r3, r5, #1
    1004:	2b06      	cmp	r3, #6
    1006:	d906      	bls.n	1016 <wc_AesDecrypt+0x2e>

    XMEMCPY(outBlock,                  &s0, sizeof(s0));
    XMEMCPY(outBlock + sizeof(s0),     &s1, sizeof(s1));
    XMEMCPY(outBlock + 2 * sizeof(s0), &s2, sizeof(s2));
    XMEMCPY(outBlock + 3 * sizeof(s0), &s3, sizeof(s3));
}
    1008:	b009      	add	sp, #36	; 0x24
    100a:	bc3c      	pop	{r2, r3, r4, r5}
    100c:	4690      	mov	r8, r2
    100e:	4699      	mov	r9, r3
    1010:	46a2      	mov	sl, r4
    1012:	46ab      	mov	fp, r5
    1014:	bdf0      	pop	{r4, r5, r6, r7, pc}
    XMEMCPY(&s0, inBlock,                  sizeof(s0));
    1016:	2204      	movs	r2, #4
    1018:	a807      	add	r0, sp, #28
    101a:	4ec7      	ldr	r6, [pc, #796]	; (1338 <wc_AesDecrypt+0x350>)
    101c:	47b0      	blx	r6
    XMEMCPY(&s1, inBlock + sizeof(s0),     sizeof(s1));
    101e:	1d21      	adds	r1, r4, #4
    1020:	2204      	movs	r2, #4
    1022:	a806      	add	r0, sp, #24
    1024:	47b0      	blx	r6
    XMEMCPY(&s2, inBlock + 2 * sizeof(s0), sizeof(s2));
    1026:	0021      	movs	r1, r4
    1028:	3108      	adds	r1, #8
    102a:	2204      	movs	r2, #4
    102c:	a805      	add	r0, sp, #20
    102e:	47b0      	blx	r6
    XMEMCPY(&s3, inBlock + 3 * sizeof(s0), sizeof(s3));
    1030:	0021      	movs	r1, r4
    1032:	310c      	adds	r1, #12
    1034:	2204      	movs	r2, #4
    1036:	a804      	add	r0, sp, #16
    1038:	47b0      	blx	r6
    s0 = ByteReverseWord32(s0);
    103a:	9807      	ldr	r0, [sp, #28]
    s1 = ByteReverseWord32(s1);
    103c:	9906      	ldr	r1, [sp, #24]
    s2 = ByteReverseWord32(s2);
    103e:	9a05      	ldr	r2, [sp, #20]
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
    1040:	0a06      	lsrs	r6, r0, #8
    1042:	4bbe      	ldr	r3, [pc, #760]	; (133c <wc_AesDecrypt+0x354>)
    1044:	469c      	mov	ip, r3
    1046:	401e      	ands	r6, r3
    1048:	0200      	lsls	r0, r0, #8
    104a:	4bbd      	ldr	r3, [pc, #756]	; (1340 <wc_AesDecrypt+0x358>)
    104c:	4018      	ands	r0, r3
    104e:	4306      	orrs	r6, r0
        return (x << y) | (x >> (sizeof(y) * 8 - y));
    1050:	2010      	movs	r0, #16
    1052:	41c6      	rors	r6, r0
    s0 ^= rk[0];
    1054:	4654      	mov	r4, sl
    1056:	6824      	ldr	r4, [r4, #0]
    1058:	4066      	eors	r6, r4
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
    105a:	0a0c      	lsrs	r4, r1, #8
    105c:	4667      	mov	r7, ip
    105e:	403c      	ands	r4, r7
    1060:	0209      	lsls	r1, r1, #8
    1062:	4019      	ands	r1, r3
    1064:	430c      	orrs	r4, r1
        return (x << y) | (x >> (sizeof(y) * 8 - y));
    1066:	41c4      	rors	r4, r0
    s1 ^= rk[1];
    1068:	4651      	mov	r1, sl
    106a:	6849      	ldr	r1, [r1, #4]
    106c:	404c      	eors	r4, r1
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
    106e:	0a11      	lsrs	r1, r2, #8
    1070:	4039      	ands	r1, r7
    1072:	0212      	lsls	r2, r2, #8
    1074:	401a      	ands	r2, r3
    1076:	4311      	orrs	r1, r2
        return (x << y) | (x >> (sizeof(y) * 8 - y));
    1078:	41c1      	rors	r1, r0
    s2 ^= rk[2];
    107a:	4652      	mov	r2, sl
    107c:	6892      	ldr	r2, [r2, #8]
    107e:	4051      	eors	r1, r2
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
    1080:	9a04      	ldr	r2, [sp, #16]
    1082:	0217      	lsls	r7, r2, #8
    1084:	401f      	ands	r7, r3
    1086:	0a13      	lsrs	r3, r2, #8
    1088:	4662      	mov	r2, ip
    108a:	4013      	ands	r3, r2
    108c:	431f      	orrs	r7, r3
        return (x << y) | (x >> (sizeof(y) * 8 - y));
    108e:	41c7      	rors	r7, r0
    s3 ^= rk[3];
    1090:	4653      	mov	r3, sl
    1092:	68db      	ldr	r3, [r3, #12]
    1094:	405f      	eors	r7, r3
    1096:	2204      	movs	r2, #4
{
    1098:	2320      	movs	r3, #32
    109a:	3b01      	subs	r3, #1
        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
    109c:	2b00      	cmp	r3, #0
    109e:	d1fc      	bne.n	109a <wc_AesDecrypt+0xb2>
    10a0:	3a01      	subs	r2, #1
    for (i = 0; i < 4; i++) {
    10a2:	2a00      	cmp	r2, #0
    10a4:	d1f8      	bne.n	1098 <wc_AesDecrypt+0xb0>
    const word32* rk = aes->key;
    10a6:	46d1      	mov	r9, sl
    10a8:	016d      	lsls	r5, r5, #5
    10aa:	44aa      	add	sl, r5
            Td[0][GETBYTE(s0, 3)] ^
    10ac:	4ba5      	ldr	r3, [pc, #660]	; (1344 <wc_AesDecrypt+0x35c>)
    10ae:	469c      	mov	ip, r3
            Td[3][GETBYTE(s1, 0)] ^
    10b0:	20ff      	movs	r0, #255	; 0xff
            Td[0][GETBYTE(t0, 3)] ^
    10b2:	4698      	mov	r8, r3
    10b4:	4653      	mov	r3, sl
    10b6:	9302      	str	r3, [sp, #8]
            Td[0][GETBYTE(s0, 3)] ^
    10b8:	0e32      	lsrs	r2, r6, #24
    10ba:	0092      	lsls	r2, r2, #2
            Td[3][GETBYTE(s1, 0)] ^
    10bc:	0003      	movs	r3, r0
    10be:	4023      	ands	r3, r4
    10c0:	25c0      	movs	r5, #192	; 0xc0
    10c2:	00ad      	lsls	r5, r5, #2
    10c4:	46ab      	mov	fp, r5
    10c6:	445b      	add	r3, fp
    10c8:	009b      	lsls	r3, r3, #2
        t0 =
    10ca:	4665      	mov	r5, ip
    10cc:	5955      	ldr	r5, [r2, r5]
    10ce:	4662      	mov	r2, ip
    10d0:	589b      	ldr	r3, [r3, r2]
    10d2:	405d      	eors	r5, r3
    10d4:	464b      	mov	r3, r9
    10d6:	691b      	ldr	r3, [r3, #16]
    10d8:	405d      	eors	r5, r3
            Td[1][GETBYTE(s3, 2)] ^
    10da:	0c3b      	lsrs	r3, r7, #16
    10dc:	4003      	ands	r3, r0
    10de:	3301      	adds	r3, #1
    10e0:	33ff      	adds	r3, #255	; 0xff
    10e2:	009b      	lsls	r3, r3, #2
        t0 =
    10e4:	589b      	ldr	r3, [r3, r2]
    10e6:	405d      	eors	r5, r3
            Td[2][GETBYTE(s2, 1)] ^
    10e8:	0a0b      	lsrs	r3, r1, #8
    10ea:	4003      	ands	r3, r0
    10ec:	2280      	movs	r2, #128	; 0x80
    10ee:	0092      	lsls	r2, r2, #2
    10f0:	4693      	mov	fp, r2
    10f2:	445b      	add	r3, fp
    10f4:	009b      	lsls	r3, r3, #2
        t0 =
    10f6:	4662      	mov	r2, ip
    10f8:	589b      	ldr	r3, [r3, r2]
    10fa:	405d      	eors	r5, r3
    10fc:	9500      	str	r5, [sp, #0]
            Td[0][GETBYTE(s1, 3)] ^
    10fe:	0e22      	lsrs	r2, r4, #24
    1100:	0092      	lsls	r2, r2, #2
            Td[3][GETBYTE(s2, 0)] ^
    1102:	0003      	movs	r3, r0
    1104:	400b      	ands	r3, r1
    1106:	25c0      	movs	r5, #192	; 0xc0
    1108:	00ad      	lsls	r5, r5, #2
    110a:	46ab      	mov	fp, r5
    110c:	445b      	add	r3, fp
    110e:	009b      	lsls	r3, r3, #2
        t1 =
    1110:	4665      	mov	r5, ip
    1112:	5952      	ldr	r2, [r2, r5]
    1114:	595b      	ldr	r3, [r3, r5]
    1116:	405a      	eors	r2, r3
    1118:	464b      	mov	r3, r9
    111a:	695b      	ldr	r3, [r3, #20]
    111c:	405a      	eors	r2, r3
            Td[1][GETBYTE(s0, 2)] ^
    111e:	0c33      	lsrs	r3, r6, #16
    1120:	4003      	ands	r3, r0
    1122:	3301      	adds	r3, #1
    1124:	33ff      	adds	r3, #255	; 0xff
    1126:	009b      	lsls	r3, r3, #2
        t1 =
    1128:	595b      	ldr	r3, [r3, r5]
    112a:	405a      	eors	r2, r3
            Td[2][GETBYTE(s3, 1)] ^
    112c:	0a3b      	lsrs	r3, r7, #8
    112e:	4003      	ands	r3, r0
    1130:	2580      	movs	r5, #128	; 0x80
    1132:	00ad      	lsls	r5, r5, #2
    1134:	46ab      	mov	fp, r5
    1136:	445b      	add	r3, fp
    1138:	009b      	lsls	r3, r3, #2
        t1 =
    113a:	4665      	mov	r5, ip
    113c:	595b      	ldr	r3, [r3, r5]
    113e:	405a      	eors	r2, r3
    1140:	9201      	str	r2, [sp, #4]
            Td[0][GETBYTE(s2, 3)] ^
    1142:	0e0b      	lsrs	r3, r1, #24
    1144:	009b      	lsls	r3, r3, #2
    1146:	469b      	mov	fp, r3
            Td[3][GETBYTE(s3, 0)] ^
    1148:	0003      	movs	r3, r0
    114a:	403b      	ands	r3, r7
    114c:	25c0      	movs	r5, #192	; 0xc0
    114e:	00ad      	lsls	r5, r5, #2
    1150:	46aa      	mov	sl, r5
    1152:	4453      	add	r3, sl
    1154:	009b      	lsls	r3, r3, #2
        t2 =
    1156:	4665      	mov	r5, ip
    1158:	465a      	mov	r2, fp
    115a:	5952      	ldr	r2, [r2, r5]
    115c:	4693      	mov	fp, r2
    115e:	595b      	ldr	r3, [r3, r5]
    1160:	465a      	mov	r2, fp
    1162:	4053      	eors	r3, r2
    1164:	464a      	mov	r2, r9
    1166:	6992      	ldr	r2, [r2, #24]
    1168:	4053      	eors	r3, r2
            Td[1][GETBYTE(s1, 2)] ^
    116a:	0c22      	lsrs	r2, r4, #16
    116c:	0015      	movs	r5, r2
    116e:	4005      	ands	r5, r0
    1170:	46ab      	mov	fp, r5
    1172:	2280      	movs	r2, #128	; 0x80
    1174:	0052      	lsls	r2, r2, #1
    1176:	4692      	mov	sl, r2
    1178:	44d3      	add	fp, sl
    117a:	465a      	mov	r2, fp
    117c:	0092      	lsls	r2, r2, #2
    117e:	4693      	mov	fp, r2
        t2 =
    1180:	4662      	mov	r2, ip
    1182:	465d      	mov	r5, fp
    1184:	58aa      	ldr	r2, [r5, r2]
    1186:	4053      	eors	r3, r2
            Td[2][GETBYTE(s0, 1)] ^
    1188:	0a32      	lsrs	r2, r6, #8
    118a:	0015      	movs	r5, r2
    118c:	4005      	ands	r5, r0
    118e:	46ab      	mov	fp, r5
    1190:	2280      	movs	r2, #128	; 0x80
    1192:	0092      	lsls	r2, r2, #2
    1194:	4692      	mov	sl, r2
    1196:	44d3      	add	fp, sl
    1198:	465a      	mov	r2, fp
    119a:	0092      	lsls	r2, r2, #2
    119c:	4693      	mov	fp, r2
        t2 =
    119e:	4662      	mov	r2, ip
    11a0:	465d      	mov	r5, fp
    11a2:	58aa      	ldr	r2, [r5, r2]
    11a4:	4053      	eors	r3, r2
            Td[0][GETBYTE(s3, 3)] ^
    11a6:	0e3f      	lsrs	r7, r7, #24
    11a8:	00bf      	lsls	r7, r7, #2
            Td[3][GETBYTE(s0, 0)] ^
    11aa:	4006      	ands	r6, r0
    11ac:	22c0      	movs	r2, #192	; 0xc0
    11ae:	0092      	lsls	r2, r2, #2
    11b0:	4692      	mov	sl, r2
    11b2:	4456      	add	r6, sl
    11b4:	00b6      	lsls	r6, r6, #2
        t3 =
    11b6:	4662      	mov	r2, ip
    11b8:	58bf      	ldr	r7, [r7, r2]
    11ba:	58b6      	ldr	r6, [r6, r2]
    11bc:	4077      	eors	r7, r6
    11be:	464a      	mov	r2, r9
    11c0:	69d2      	ldr	r2, [r2, #28]
    11c2:	4057      	eors	r7, r2
            Td[1][GETBYTE(s2, 2)] ^
    11c4:	0c09      	lsrs	r1, r1, #16
    11c6:	4001      	ands	r1, r0
    11c8:	3101      	adds	r1, #1
    11ca:	31ff      	adds	r1, #255	; 0xff
    11cc:	0089      	lsls	r1, r1, #2
        t3 =
    11ce:	4662      	mov	r2, ip
    11d0:	5889      	ldr	r1, [r1, r2]
    11d2:	404f      	eors	r7, r1
            Td[2][GETBYTE(s1, 1)] ^
    11d4:	0a24      	lsrs	r4, r4, #8
    11d6:	4004      	ands	r4, r0
    11d8:	2280      	movs	r2, #128	; 0x80
    11da:	0092      	lsls	r2, r2, #2
    11dc:	4692      	mov	sl, r2
    11de:	4454      	add	r4, sl
    11e0:	00a4      	lsls	r4, r4, #2
        t3 =
    11e2:	4662      	mov	r2, ip
    11e4:	58a1      	ldr	r1, [r4, r2]
    11e6:	404f      	eors	r7, r1
        rk += 8;
    11e8:	2220      	movs	r2, #32
    11ea:	4692      	mov	sl, r2
    11ec:	44d1      	add	r9, sl
        if (--r == 0) {
    11ee:	9902      	ldr	r1, [sp, #8]
    11f0:	4589      	cmp	r9, r1
    11f2:	d100      	bne.n	11f6 <wc_AesDecrypt+0x20e>
    11f4:	e0a8      	b.n	1348 <wc_AesDecrypt+0x360>
            Td[0][GETBYTE(t0, 3)] ^
    11f6:	9d00      	ldr	r5, [sp, #0]
    11f8:	0e2c      	lsrs	r4, r5, #24
    11fa:	00a4      	lsls	r4, r4, #2
            Td[3][GETBYTE(t1, 0)] ^
    11fc:	0001      	movs	r1, r0
    11fe:	9a01      	ldr	r2, [sp, #4]
    1200:	4011      	ands	r1, r2
    1202:	22c0      	movs	r2, #192	; 0xc0
    1204:	0092      	lsls	r2, r2, #2
    1206:	4692      	mov	sl, r2
    1208:	4451      	add	r1, sl
    120a:	0089      	lsls	r1, r1, #2
    120c:	4642      	mov	r2, r8
    120e:	58a6      	ldr	r6, [r4, r2]
    1210:	5889      	ldr	r1, [r1, r2]
    1212:	404e      	eors	r6, r1
    1214:	464a      	mov	r2, r9
    1216:	6812      	ldr	r2, [r2, #0]
    1218:	4056      	eors	r6, r2
            Td[1][GETBYTE(t3, 2)] ^
    121a:	0c39      	lsrs	r1, r7, #16
    121c:	4001      	ands	r1, r0
    121e:	3101      	adds	r1, #1
    1220:	31ff      	adds	r1, #255	; 0xff
    1222:	0089      	lsls	r1, r1, #2
            Td[3][GETBYTE(t1, 0)] ^
    1224:	4642      	mov	r2, r8
    1226:	5889      	ldr	r1, [r1, r2]
    1228:	404e      	eors	r6, r1
            Td[2][GETBYTE(t2, 1)] ^
    122a:	0a19      	lsrs	r1, r3, #8
    122c:	4001      	ands	r1, r0
    122e:	2280      	movs	r2, #128	; 0x80
    1230:	0092      	lsls	r2, r2, #2
    1232:	4692      	mov	sl, r2
    1234:	4451      	add	r1, sl
    1236:	0089      	lsls	r1, r1, #2
            Td[3][GETBYTE(t1, 0)] ^
    1238:	4642      	mov	r2, r8
    123a:	5889      	ldr	r1, [r1, r2]
    123c:	404e      	eors	r6, r1
            Td[0][GETBYTE(t1, 3)] ^
    123e:	9a01      	ldr	r2, [sp, #4]
    1240:	0e14      	lsrs	r4, r2, #24
    1242:	00a4      	lsls	r4, r4, #2
            Td[3][GETBYTE(t2, 0)] ^
    1244:	0001      	movs	r1, r0
    1246:	4019      	ands	r1, r3
    1248:	22c0      	movs	r2, #192	; 0xc0
    124a:	0092      	lsls	r2, r2, #2
    124c:	4692      	mov	sl, r2
    124e:	4451      	add	r1, sl
    1250:	0089      	lsls	r1, r1, #2
    1252:	4642      	mov	r2, r8
    1254:	58a4      	ldr	r4, [r4, r2]
    1256:	5889      	ldr	r1, [r1, r2]
    1258:	404c      	eors	r4, r1
    125a:	464a      	mov	r2, r9
    125c:	6852      	ldr	r2, [r2, #4]
    125e:	4054      	eors	r4, r2
            Td[1][GETBYTE(t0, 2)] ^
    1260:	0c29      	lsrs	r1, r5, #16
    1262:	4001      	ands	r1, r0
    1264:	3101      	adds	r1, #1
    1266:	31ff      	adds	r1, #255	; 0xff
    1268:	0089      	lsls	r1, r1, #2
            Td[3][GETBYTE(t2, 0)] ^
    126a:	4642      	mov	r2, r8
    126c:	5889      	ldr	r1, [r1, r2]
    126e:	404c      	eors	r4, r1
            Td[2][GETBYTE(t3, 1)] ^
    1270:	0a39      	lsrs	r1, r7, #8
    1272:	4001      	ands	r1, r0
    1274:	2280      	movs	r2, #128	; 0x80
    1276:	0092      	lsls	r2, r2, #2
    1278:	4692      	mov	sl, r2
    127a:	4451      	add	r1, sl
    127c:	0089      	lsls	r1, r1, #2
            Td[3][GETBYTE(t2, 0)] ^
    127e:	4642      	mov	r2, r8
    1280:	5889      	ldr	r1, [r1, r2]
    1282:	404c      	eors	r4, r1
            Td[0][GETBYTE(t2, 3)] ^
    1284:	0e19      	lsrs	r1, r3, #24
    1286:	008a      	lsls	r2, r1, #2
    1288:	4693      	mov	fp, r2
            Td[3][GETBYTE(t3, 0)] ^
    128a:	0001      	movs	r1, r0
    128c:	4039      	ands	r1, r7
    128e:	22c0      	movs	r2, #192	; 0xc0
    1290:	0092      	lsls	r2, r2, #2
    1292:	4692      	mov	sl, r2
    1294:	4451      	add	r1, sl
    1296:	0089      	lsls	r1, r1, #2
    1298:	4642      	mov	r2, r8
    129a:	465d      	mov	r5, fp
    129c:	58aa      	ldr	r2, [r5, r2]
    129e:	4693      	mov	fp, r2
    12a0:	4642      	mov	r2, r8
    12a2:	5889      	ldr	r1, [r1, r2]
    12a4:	465a      	mov	r2, fp
    12a6:	4051      	eors	r1, r2
    12a8:	464a      	mov	r2, r9
    12aa:	6892      	ldr	r2, [r2, #8]
    12ac:	4051      	eors	r1, r2
            Td[1][GETBYTE(t1, 2)] ^
    12ae:	9a01      	ldr	r2, [sp, #4]
    12b0:	0c12      	lsrs	r2, r2, #16
    12b2:	0015      	movs	r5, r2
    12b4:	4005      	ands	r5, r0
    12b6:	46ab      	mov	fp, r5
    12b8:	2280      	movs	r2, #128	; 0x80
    12ba:	0052      	lsls	r2, r2, #1
    12bc:	4692      	mov	sl, r2
    12be:	44d3      	add	fp, sl
    12c0:	465a      	mov	r2, fp
    12c2:	0092      	lsls	r2, r2, #2
    12c4:	4693      	mov	fp, r2
            Td[3][GETBYTE(t3, 0)] ^
    12c6:	4642      	mov	r2, r8
    12c8:	465d      	mov	r5, fp
    12ca:	58aa      	ldr	r2, [r5, r2]
    12cc:	4051      	eors	r1, r2
            Td[2][GETBYTE(t0, 1)] ^
    12ce:	9d00      	ldr	r5, [sp, #0]
    12d0:	0a2a      	lsrs	r2, r5, #8
    12d2:	0015      	movs	r5, r2
    12d4:	4005      	ands	r5, r0
    12d6:	46ab      	mov	fp, r5
    12d8:	2280      	movs	r2, #128	; 0x80
    12da:	0092      	lsls	r2, r2, #2
    12dc:	4692      	mov	sl, r2
    12de:	44d3      	add	fp, sl
    12e0:	465a      	mov	r2, fp
    12e2:	0092      	lsls	r2, r2, #2
    12e4:	4693      	mov	fp, r2
            Td[3][GETBYTE(t3, 0)] ^
    12e6:	4642      	mov	r2, r8
    12e8:	465d      	mov	r5, fp
    12ea:	58aa      	ldr	r2, [r5, r2]
    12ec:	4051      	eors	r1, r2
            Td[0][GETBYTE(t3, 3)] ^
    12ee:	0e3f      	lsrs	r7, r7, #24
    12f0:	00bf      	lsls	r7, r7, #2
            Td[3][GETBYTE(t0, 0)] ^
    12f2:	9d00      	ldr	r5, [sp, #0]
    12f4:	4005      	ands	r5, r0
    12f6:	22c0      	movs	r2, #192	; 0xc0
    12f8:	0092      	lsls	r2, r2, #2
    12fa:	4692      	mov	sl, r2
    12fc:	4455      	add	r5, sl
    12fe:	00ad      	lsls	r5, r5, #2
    1300:	4642      	mov	r2, r8
    1302:	58bf      	ldr	r7, [r7, r2]
    1304:	58ad      	ldr	r5, [r5, r2]
    1306:	406f      	eors	r7, r5
    1308:	464a      	mov	r2, r9
    130a:	68d2      	ldr	r2, [r2, #12]
    130c:	4057      	eors	r7, r2
            Td[1][GETBYTE(t2, 2)] ^
    130e:	0c1b      	lsrs	r3, r3, #16
    1310:	4003      	ands	r3, r0
    1312:	3301      	adds	r3, #1
    1314:	33ff      	adds	r3, #255	; 0xff
    1316:	009b      	lsls	r3, r3, #2
            Td[3][GETBYTE(t0, 0)] ^
    1318:	4642      	mov	r2, r8
    131a:	589b      	ldr	r3, [r3, r2]
    131c:	405f      	eors	r7, r3
            Td[2][GETBYTE(t1, 1)] ^
    131e:	9b01      	ldr	r3, [sp, #4]
    1320:	0a1a      	lsrs	r2, r3, #8
    1322:	4002      	ands	r2, r0
    1324:	2380      	movs	r3, #128	; 0x80
    1326:	009b      	lsls	r3, r3, #2
    1328:	469a      	mov	sl, r3
    132a:	4452      	add	r2, sl
    132c:	0092      	lsls	r2, r2, #2
            Td[3][GETBYTE(t0, 0)] ^
    132e:	4643      	mov	r3, r8
    1330:	58d3      	ldr	r3, [r2, r3]
    1332:	405f      	eors	r7, r3
        t0 =
    1334:	e6c0      	b.n	10b8 <wc_AesDecrypt+0xd0>
    1336:	46c0      	nop			; (mov r8, r8)
    1338:	00001a69 	.word	0x00001a69
    133c:	00ff00ff 	.word	0x00ff00ff
    1340:	ff00ff00 	.word	0xff00ff00
    1344:	00002bd8 	.word	0x00002bd8
    1348:	9d00      	ldr	r5, [sp, #0]
    134a:	9a01      	ldr	r2, [sp, #4]
    134c:	9902      	ldr	r1, [sp, #8]
    134e:	468a      	mov	sl, r1
        ((word32)Td4[GETBYTE(t1, 0)]) ^
    1350:	494a      	ldr	r1, [pc, #296]	; (147c <wc_AesDecrypt+0x494>)
    1352:	20ff      	movs	r0, #255	; 0xff
    1354:	4684      	mov	ip, r0
    1356:	4010      	ands	r0, r2
    1358:	5c0e      	ldrb	r6, [r1, r0]
    135a:	4650      	mov	r0, sl
    135c:	6800      	ldr	r0, [r0, #0]
    135e:	4046      	eors	r6, r0
        ((word32)Td4[GETBYTE(t0, 3)] << 24) ^
    1360:	0e28      	lsrs	r0, r5, #24
    1362:	5c08      	ldrb	r0, [r1, r0]
    1364:	0600      	lsls	r0, r0, #24
        ((word32)Td4[GETBYTE(t1, 0)]) ^
    1366:	4046      	eors	r6, r0
        ((word32)Td4[GETBYTE(t3, 2)] << 16) ^
    1368:	0c38      	lsrs	r0, r7, #16
    136a:	4664      	mov	r4, ip
    136c:	4020      	ands	r0, r4
    136e:	5c08      	ldrb	r0, [r1, r0]
    1370:	0400      	lsls	r0, r0, #16
        ((word32)Td4[GETBYTE(t1, 0)]) ^
    1372:	4046      	eors	r6, r0
        ((word32)Td4[GETBYTE(t2, 1)] <<  8) ^
    1374:	0a18      	lsrs	r0, r3, #8
    1376:	4020      	ands	r0, r4
    1378:	5c08      	ldrb	r0, [r1, r0]
    137a:	0200      	lsls	r0, r0, #8
        ((word32)Td4[GETBYTE(t1, 0)]) ^
    137c:	4046      	eors	r6, r0
    137e:	46b1      	mov	r9, r6
        ((word32)Td4[GETBYTE(t2, 0)]) ^
    1380:	4660      	mov	r0, ip
    1382:	4018      	ands	r0, r3
    1384:	5c0c      	ldrb	r4, [r1, r0]
    1386:	4650      	mov	r0, sl
    1388:	6840      	ldr	r0, [r0, #4]
    138a:	4044      	eors	r4, r0
        ((word32)Td4[GETBYTE(t1, 3)] << 24) ^
    138c:	0e10      	lsrs	r0, r2, #24
    138e:	5c08      	ldrb	r0, [r1, r0]
    1390:	0600      	lsls	r0, r0, #24
        ((word32)Td4[GETBYTE(t2, 0)]) ^
    1392:	4044      	eors	r4, r0
        ((word32)Td4[GETBYTE(t0, 2)] << 16) ^
    1394:	0c28      	lsrs	r0, r5, #16
    1396:	4666      	mov	r6, ip
    1398:	4030      	ands	r0, r6
    139a:	5c08      	ldrb	r0, [r1, r0]
    139c:	0400      	lsls	r0, r0, #16
        ((word32)Td4[GETBYTE(t2, 0)]) ^
    139e:	4044      	eors	r4, r0
        ((word32)Td4[GETBYTE(t3, 1)] <<  8) ^
    13a0:	0a38      	lsrs	r0, r7, #8
    13a2:	4030      	ands	r0, r6
    13a4:	5c08      	ldrb	r0, [r1, r0]
    13a6:	0200      	lsls	r0, r0, #8
        ((word32)Td4[GETBYTE(t2, 0)]) ^
    13a8:	4044      	eors	r4, r0
    13aa:	46a3      	mov	fp, r4
        ((word32)Td4[GETBYTE(t3, 0)]) ^
    13ac:	4660      	mov	r0, ip
    13ae:	4038      	ands	r0, r7
    13b0:	5c08      	ldrb	r0, [r1, r0]
    13b2:	4656      	mov	r6, sl
    13b4:	68b6      	ldr	r6, [r6, #8]
    13b6:	4046      	eors	r6, r0
        ((word32)Td4[GETBYTE(t2, 3)] << 24) ^
    13b8:	0e18      	lsrs	r0, r3, #24
    13ba:	5c08      	ldrb	r0, [r1, r0]
    13bc:	0600      	lsls	r0, r0, #24
        ((word32)Td4[GETBYTE(t3, 0)]) ^
    13be:	4070      	eors	r0, r6
        ((word32)Td4[GETBYTE(t1, 2)] << 16) ^
    13c0:	0c16      	lsrs	r6, r2, #16
    13c2:	4664      	mov	r4, ip
    13c4:	4026      	ands	r6, r4
    13c6:	5d8c      	ldrb	r4, [r1, r6]
    13c8:	0424      	lsls	r4, r4, #16
        ((word32)Td4[GETBYTE(t3, 0)]) ^
    13ca:	4060      	eors	r0, r4
        ((word32)Td4[GETBYTE(t0, 1)] <<  8) ^
    13cc:	0a2c      	lsrs	r4, r5, #8
    13ce:	0026      	movs	r6, r4
    13d0:	4664      	mov	r4, ip
    13d2:	4026      	ands	r6, r4
    13d4:	5d8c      	ldrb	r4, [r1, r6]
    13d6:	0224      	lsls	r4, r4, #8
        ((word32)Td4[GETBYTE(t3, 0)]) ^
    13d8:	4060      	eors	r0, r4
        ((word32)Td4[GETBYTE(t0, 0)]) ^
    13da:	4664      	mov	r4, ip
    13dc:	4025      	ands	r5, r4
    13de:	5d4d      	ldrb	r5, [r1, r5]
    13e0:	4654      	mov	r4, sl
    13e2:	68e4      	ldr	r4, [r4, #12]
    13e4:	4065      	eors	r5, r4
        ((word32)Td4[GETBYTE(t3, 3)] << 24) ^
    13e6:	0e3f      	lsrs	r7, r7, #24
    13e8:	5dcf      	ldrb	r7, [r1, r7]
    13ea:	063f      	lsls	r7, r7, #24
        ((word32)Td4[GETBYTE(t0, 0)]) ^
    13ec:	407d      	eors	r5, r7
        ((word32)Td4[GETBYTE(t2, 2)] << 16) ^
    13ee:	0c1b      	lsrs	r3, r3, #16
    13f0:	4664      	mov	r4, ip
    13f2:	4023      	ands	r3, r4
    13f4:	5ccb      	ldrb	r3, [r1, r3]
    13f6:	041b      	lsls	r3, r3, #16
        ((word32)Td4[GETBYTE(t0, 0)]) ^
    13f8:	406b      	eors	r3, r5
        ((word32)Td4[GETBYTE(t1, 1)] <<  8) ^
    13fa:	0a12      	lsrs	r2, r2, #8
    13fc:	4022      	ands	r2, r4
    13fe:	5c8a      	ldrb	r2, [r1, r2]
    1400:	0212      	lsls	r2, r2, #8
        ((word32)Td4[GETBYTE(t0, 0)]) ^
    1402:	4053      	eors	r3, r2
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
    1404:	464a      	mov	r2, r9
    1406:	0a12      	lsrs	r2, r2, #8
    1408:	491d      	ldr	r1, [pc, #116]	; (1480 <wc_AesDecrypt+0x498>)
    140a:	468c      	mov	ip, r1
    140c:	400a      	ands	r2, r1
    140e:	4649      	mov	r1, r9
    1410:	020e      	lsls	r6, r1, #8
    1412:	4f1c      	ldr	r7, [pc, #112]	; (1484 <wc_AesDecrypt+0x49c>)
    1414:	403e      	ands	r6, r7
    1416:	4332      	orrs	r2, r6
        return (x << y) | (x >> (sizeof(y) * 8 - y));
    1418:	2510      	movs	r5, #16
    141a:	41ea      	rors	r2, r5
    s0 = ByteReverseWord32(s0);
    141c:	9207      	str	r2, [sp, #28]
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
    141e:	465a      	mov	r2, fp
    1420:	0a12      	lsrs	r2, r2, #8
    1422:	4661      	mov	r1, ip
    1424:	400a      	ands	r2, r1
    1426:	4659      	mov	r1, fp
    1428:	020c      	lsls	r4, r1, #8
    142a:	403c      	ands	r4, r7
    142c:	4322      	orrs	r2, r4
        return (x << y) | (x >> (sizeof(y) * 8 - y));
    142e:	41ea      	rors	r2, r5
    s1 = ByteReverseWord32(s1);
    1430:	9206      	str	r2, [sp, #24]
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
    1432:	0a01      	lsrs	r1, r0, #8
    1434:	4662      	mov	r2, ip
    1436:	4011      	ands	r1, r2
    1438:	0200      	lsls	r0, r0, #8
    143a:	4038      	ands	r0, r7
    143c:	4301      	orrs	r1, r0
        return (x << y) | (x >> (sizeof(y) * 8 - y));
    143e:	41e9      	rors	r1, r5
    s2 = ByteReverseWord32(s2);
    1440:	9105      	str	r1, [sp, #20]
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
    1442:	0a1a      	lsrs	r2, r3, #8
    1444:	4661      	mov	r1, ip
    1446:	400a      	ands	r2, r1
    1448:	021b      	lsls	r3, r3, #8
    144a:	403b      	ands	r3, r7
    144c:	4313      	orrs	r3, r2
        return (x << y) | (x >> (sizeof(y) * 8 - y));
    144e:	41eb      	rors	r3, r5
    s3 = ByteReverseWord32(s3);
    1450:	9304      	str	r3, [sp, #16]
    XMEMCPY(outBlock,                  &s0, sizeof(s0));
    1452:	2204      	movs	r2, #4
    1454:	a907      	add	r1, sp, #28
    1456:	9d03      	ldr	r5, [sp, #12]
    1458:	0028      	movs	r0, r5
    145a:	4c0b      	ldr	r4, [pc, #44]	; (1488 <wc_AesDecrypt+0x4a0>)
    145c:	47a0      	blx	r4
    XMEMCPY(outBlock + sizeof(s0),     &s1, sizeof(s1));
    145e:	1d28      	adds	r0, r5, #4
    1460:	2204      	movs	r2, #4
    1462:	a906      	add	r1, sp, #24
    1464:	47a0      	blx	r4
    XMEMCPY(outBlock + 2 * sizeof(s0), &s2, sizeof(s2));
    1466:	0028      	movs	r0, r5
    1468:	3008      	adds	r0, #8
    146a:	2204      	movs	r2, #4
    146c:	a905      	add	r1, sp, #20
    146e:	47a0      	blx	r4
    XMEMCPY(outBlock + 3 * sizeof(s0), &s3, sizeof(s3));
    1470:	0028      	movs	r0, r5
    1472:	300c      	adds	r0, #12
    1474:	2204      	movs	r2, #4
    1476:	a904      	add	r1, sp, #16
    1478:	47a0      	blx	r4
    147a:	e5c5      	b.n	1008 <wc_AesDecrypt+0x20>
    147c:	00003bd8 	.word	0x00003bd8
    1480:	00ff00ff 	.word	0x00ff00ff
    1484:	ff00ff00 	.word	0xff00ff00
    1488:	00001a69 	.word	0x00001a69

0000148c <wc_AesSetIV>:
#endif /* wc_AesSetKey block */


/* wc_AesSetIV is shared between software and hardware */
int wc_AesSetIV(Aes* aes, const byte* iv)
{
    148c:	b510      	push	{r4, lr}
    if (aes == NULL)
    148e:	2800      	cmp	r0, #0
    1490:	d00e      	beq.n	14b0 <wc_AesSetIV+0x24>
        return BAD_FUNC_ARG;

    if (iv)
    1492:	2900      	cmp	r1, #0
    1494:	d005      	beq.n	14a2 <wc_AesSetIV+0x16>
        XMEMCPY(aes->reg, iv, AES_BLOCK_SIZE);
    1496:	30f8      	adds	r0, #248	; 0xf8
    1498:	2210      	movs	r2, #16
    149a:	4b07      	ldr	r3, [pc, #28]	; (14b8 <wc_AesSetIV+0x2c>)
    149c:	4798      	blx	r3
    else
        XMEMSET(aes->reg,  0, AES_BLOCK_SIZE);

    return 0;
    149e:	2000      	movs	r0, #0
}
    14a0:	bd10      	pop	{r4, pc}
        XMEMSET(aes->reg,  0, AES_BLOCK_SIZE);
    14a2:	30f8      	adds	r0, #248	; 0xf8
    14a4:	2210      	movs	r2, #16
    14a6:	2100      	movs	r1, #0
    14a8:	4b04      	ldr	r3, [pc, #16]	; (14bc <wc_AesSetIV+0x30>)
    14aa:	4798      	blx	r3
    return 0;
    14ac:	2000      	movs	r0, #0
    14ae:	e7f7      	b.n	14a0 <wc_AesSetIV+0x14>
        return BAD_FUNC_ARG;
    14b0:	20ad      	movs	r0, #173	; 0xad
    14b2:	4240      	negs	r0, r0
    14b4:	e7f4      	b.n	14a0 <wc_AesSetIV+0x14>
    14b6:	46c0      	nop			; (mov r8, r8)
    14b8:	00001a69 	.word	0x00001a69
    14bc:	00001a7b 	.word	0x00001a7b

000014c0 <wc_AesSetKeyLocal>:
    {
    14c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    14c2:	46de      	mov	lr, fp
    14c4:	4657      	mov	r7, sl
    14c6:	464e      	mov	r6, r9
    14c8:	4645      	mov	r5, r8
    14ca:	b5e0      	push	{r5, r6, r7, lr}
    14cc:	b085      	sub	sp, #20
    14ce:	0007      	movs	r7, r0
    14d0:	4691      	mov	r9, r2
    14d2:	9301      	str	r3, [sp, #4]
        word32 *rk = aes->key;
    14d4:	0005      	movs	r5, r0
        aes->keylen = keylen;
    14d6:	23f4      	movs	r3, #244	; 0xf4
    14d8:	50c2      	str	r2, [r0, r3]
        aes->rounds = (keylen/4) + 6;
    14da:	0896      	lsrs	r6, r2, #2
    14dc:	1db2      	adds	r2, r6, #6
    14de:	23f0      	movs	r3, #240	; 0xf0
    14e0:	50c2      	str	r2, [r0, r3]
        XMEMCPY(rk, userKey, keylen);
    14e2:	464a      	mov	r2, r9
    14e4:	4baa      	ldr	r3, [pc, #680]	; (1790 <wc_AesSetKeyLocal+0x2d0>)
    14e6:	4798      	blx	r3
WC_STATIC WC_INLINE void ByteReverseWords(word32* out, const word32* in,
                                    word32 byteCount)
{
    word32 count = byteCount/(word32)sizeof(word32), i;

    for (i = 0; i < count; i++)
    14e8:	2e00      	cmp	r6, #0
    14ea:	d013      	beq.n	1514 <wc_AesSetKeyLocal+0x54>
    14ec:	003a      	movs	r2, r7
    14ee:	2303      	movs	r3, #3
    14f0:	4649      	mov	r1, r9
    14f2:	4399      	bics	r1, r3
    14f4:	1879      	adds	r1, r7, r1
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
    14f6:	4ca7      	ldr	r4, [pc, #668]	; (1794 <wc_AesSetKeyLocal+0x2d4>)
    14f8:	4ea7      	ldr	r6, [pc, #668]	; (1798 <wc_AesSetKeyLocal+0x2d8>)
        return (x << y) | (x >> (sizeof(y) * 8 - y));
    14fa:	2010      	movs	r0, #16
    14fc:	46bc      	mov	ip, r7
        out[i] = ByteReverseWord32(in[i]);
    14fe:	6815      	ldr	r5, [r2, #0]
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
    1500:	0a2b      	lsrs	r3, r5, #8
    1502:	4023      	ands	r3, r4
    1504:	022d      	lsls	r5, r5, #8
    1506:	4035      	ands	r5, r6
    1508:	432b      	orrs	r3, r5
        return (x << y) | (x >> (sizeof(y) * 8 - y));
    150a:	41c3      	rors	r3, r0
        out[i] = ByteReverseWord32(in[i]);
    150c:	c208      	stmia	r2!, {r3}
    for (i = 0; i < count; i++)
    150e:	428a      	cmp	r2, r1
    1510:	d1f5      	bne.n	14fe <wc_AesSetKeyLocal+0x3e>
    1512:	4665      	mov	r5, ip
        switch (keylen) {
    1514:	464b      	mov	r3, r9
    1516:	2b18      	cmp	r3, #24
    1518:	d04f      	beq.n	15ba <wc_AesSetKeyLocal+0xfa>
    151a:	2b20      	cmp	r3, #32
    151c:	d100      	bne.n	1520 <wc_AesSetKeyLocal+0x60>
    151e:	e0a2      	b.n	1666 <wc_AesSetKeyLocal+0x1a6>
    1520:	2b10      	cmp	r3, #16
    1522:	d002      	beq.n	152a <wc_AesSetKeyLocal+0x6a>
            return BAD_FUNC_ARG;
    1524:	20ad      	movs	r0, #173	; 0xad
    1526:	4240      	negs	r0, r0
    1528:	e125      	b.n	1776 <wc_AesSetKeyLocal+0x2b6>
    152a:	4e9c      	ldr	r6, [pc, #624]	; (179c <wc_AesSetKeyLocal+0x2dc>)
    152c:	3380      	adds	r3, #128	; 0x80
    152e:	4699      	mov	r9, r3
    1530:	44b9      	add	r9, r7
        switch (keylen) {
    1532:	0039      	movs	r1, r7
                    (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
    1534:	4c9a      	ldr	r4, [pc, #616]	; (17a0 <wc_AesSetKeyLocal+0x2e0>)
    1536:	20ff      	movs	r0, #255	; 0xff
    1538:	23ff      	movs	r3, #255	; 0xff
    153a:	021b      	lsls	r3, r3, #8
    153c:	4698      	mov	r8, r3
                    (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
    153e:	23ff      	movs	r3, #255	; 0xff
    1540:	041b      	lsls	r3, r3, #16
    1542:	469c      	mov	ip, r3
    1544:	464b      	mov	r3, r9
    1546:	46a9      	mov	r9, r5
    1548:	46ba      	mov	sl, r7
    154a:	9300      	str	r3, [sp, #0]
                temp  = rk[3];
    154c:	68ca      	ldr	r2, [r1, #12]
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
    154e:	ce80      	ldmia	r6!, {r7}
    1550:	680b      	ldr	r3, [r1, #0]
    1552:	405f      	eors	r7, r3
                    (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
    1554:	0003      	movs	r3, r0
    1556:	4013      	ands	r3, r2
    1558:	009b      	lsls	r3, r3, #2
    155a:	591b      	ldr	r3, [r3, r4]
    155c:	4645      	mov	r5, r8
    155e:	402b      	ands	r3, r5
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
    1560:	407b      	eors	r3, r7
    1562:	0e17      	lsrs	r7, r2, #24
    1564:	3701      	adds	r7, #1
    1566:	37ff      	adds	r7, #255	; 0xff
    1568:	00bf      	lsls	r7, r7, #2
    156a:	593f      	ldr	r7, [r7, r4]
    156c:	4007      	ands	r7, r0
    156e:	407b      	eors	r3, r7
                    (Te[2][GETBYTE(temp, 2)] & 0xff000000) ^
    1570:	0c17      	lsrs	r7, r2, #16
    1572:	4007      	ands	r7, r0
    1574:	2580      	movs	r5, #128	; 0x80
    1576:	00ad      	lsls	r5, r5, #2
    1578:	46ab      	mov	fp, r5
    157a:	445f      	add	r7, fp
    157c:	00bf      	lsls	r7, r7, #2
    157e:	593f      	ldr	r7, [r7, r4]
    1580:	0e3f      	lsrs	r7, r7, #24
    1582:	063f      	lsls	r7, r7, #24
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
    1584:	407b      	eors	r3, r7
                    (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
    1586:	0a17      	lsrs	r7, r2, #8
    1588:	4007      	ands	r7, r0
    158a:	3501      	adds	r5, #1
    158c:	35ff      	adds	r5, #255	; 0xff
    158e:	46ab      	mov	fp, r5
    1590:	445f      	add	r7, fp
    1592:	00bf      	lsls	r7, r7, #2
    1594:	593f      	ldr	r7, [r7, r4]
    1596:	4665      	mov	r5, ip
    1598:	402f      	ands	r7, r5
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
    159a:	407b      	eors	r3, r7
                rk[4] = rk[0] ^
    159c:	610b      	str	r3, [r1, #16]
                rk[5] = rk[1] ^ rk[4];
    159e:	684d      	ldr	r5, [r1, #4]
    15a0:	406b      	eors	r3, r5
    15a2:	614b      	str	r3, [r1, #20]
                rk[6] = rk[2] ^ rk[5];
    15a4:	688d      	ldr	r5, [r1, #8]
    15a6:	406b      	eors	r3, r5
    15a8:	618b      	str	r3, [r1, #24]
                rk[7] = rk[3] ^ rk[6];
    15aa:	4053      	eors	r3, r2
    15ac:	61cb      	str	r3, [r1, #28]
                if (++i == 10)
    15ae:	9b00      	ldr	r3, [sp, #0]
    15b0:	4299      	cmp	r1, r3
    15b2:	d100      	bne.n	15b6 <wc_AesSetKeyLocal+0xf6>
    15b4:	e0d6      	b.n	1764 <wc_AesSetKeyLocal+0x2a4>
                rk += 4;
    15b6:	3110      	adds	r1, #16
                temp  = rk[3];
    15b8:	e7c8      	b.n	154c <wc_AesSetKeyLocal+0x8c>
    15ba:	4e78      	ldr	r6, [pc, #480]	; (179c <wc_AesSetKeyLocal+0x2dc>)
    15bc:	23a8      	movs	r3, #168	; 0xa8
    15be:	4699      	mov	r9, r3
    15c0:	44b9      	add	r9, r7
        switch (keylen) {
    15c2:	0039      	movs	r1, r7
                    (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
    15c4:	4c76      	ldr	r4, [pc, #472]	; (17a0 <wc_AesSetKeyLocal+0x2e0>)
    15c6:	20ff      	movs	r0, #255	; 0xff
    15c8:	23ff      	movs	r3, #255	; 0xff
    15ca:	021b      	lsls	r3, r3, #8
    15cc:	4698      	mov	r8, r3
                    (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
    15ce:	23ff      	movs	r3, #255	; 0xff
    15d0:	041b      	lsls	r3, r3, #16
    15d2:	469c      	mov	ip, r3
    15d4:	464b      	mov	r3, r9
    15d6:	9502      	str	r5, [sp, #8]
    15d8:	46bb      	mov	fp, r7
    15da:	9300      	str	r3, [sp, #0]
                temp = rk[ 5];
    15dc:	694a      	ldr	r2, [r1, #20]
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
    15de:	ce80      	ldmia	r6!, {r7}
    15e0:	680b      	ldr	r3, [r1, #0]
    15e2:	405f      	eors	r7, r3
                    (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
    15e4:	0003      	movs	r3, r0
    15e6:	4013      	ands	r3, r2
    15e8:	009b      	lsls	r3, r3, #2
    15ea:	591b      	ldr	r3, [r3, r4]
    15ec:	4645      	mov	r5, r8
    15ee:	402b      	ands	r3, r5
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
    15f0:	407b      	eors	r3, r7
    15f2:	0e17      	lsrs	r7, r2, #24
    15f4:	1c7d      	adds	r5, r7, #1
    15f6:	35ff      	adds	r5, #255	; 0xff
    15f8:	00ad      	lsls	r5, r5, #2
    15fa:	592d      	ldr	r5, [r5, r4]
    15fc:	002f      	movs	r7, r5
    15fe:	4007      	ands	r7, r0
    1600:	407b      	eors	r3, r7
                    (Te[2][GETBYTE(temp, 2)] & 0xff000000) ^
    1602:	0c15      	lsrs	r5, r2, #16
    1604:	002f      	movs	r7, r5
    1606:	4007      	ands	r7, r0
    1608:	46ba      	mov	sl, r7
    160a:	2580      	movs	r5, #128	; 0x80
    160c:	00ad      	lsls	r5, r5, #2
    160e:	46a9      	mov	r9, r5
    1610:	44ca      	add	sl, r9
    1612:	4655      	mov	r5, sl
    1614:	00ad      	lsls	r5, r5, #2
    1616:	592d      	ldr	r5, [r5, r4]
    1618:	0e2d      	lsrs	r5, r5, #24
    161a:	062d      	lsls	r5, r5, #24
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
    161c:	406b      	eors	r3, r5
                    (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
    161e:	0a15      	lsrs	r5, r2, #8
    1620:	002f      	movs	r7, r5
    1622:	4007      	ands	r7, r0
    1624:	46ba      	mov	sl, r7
    1626:	25c0      	movs	r5, #192	; 0xc0
    1628:	00ad      	lsls	r5, r5, #2
    162a:	46a9      	mov	r9, r5
    162c:	44ca      	add	sl, r9
    162e:	4655      	mov	r5, sl
    1630:	00ad      	lsls	r5, r5, #2
    1632:	592d      	ldr	r5, [r5, r4]
    1634:	002f      	movs	r7, r5
    1636:	4665      	mov	r5, ip
    1638:	402f      	ands	r7, r5
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
    163a:	407b      	eors	r3, r7
                rk[ 6] = rk[ 0] ^
    163c:	618b      	str	r3, [r1, #24]
                rk[ 7] = rk[ 1] ^ rk[ 6];
    163e:	684d      	ldr	r5, [r1, #4]
    1640:	406b      	eors	r3, r5
    1642:	61cb      	str	r3, [r1, #28]
                rk[ 8] = rk[ 2] ^ rk[ 7];
    1644:	688d      	ldr	r5, [r1, #8]
    1646:	406b      	eors	r3, r5
    1648:	620b      	str	r3, [r1, #32]
                rk[ 9] = rk[ 3] ^ rk[ 8];
    164a:	68cd      	ldr	r5, [r1, #12]
    164c:	406b      	eors	r3, r5
    164e:	624b      	str	r3, [r1, #36]	; 0x24
                if (++i == 8)
    1650:	9d00      	ldr	r5, [sp, #0]
    1652:	42a9      	cmp	r1, r5
    1654:	d100      	bne.n	1658 <wc_AesSetKeyLocal+0x198>
    1656:	e095      	b.n	1784 <wc_AesSetKeyLocal+0x2c4>
                rk[10] = rk[ 4] ^ rk[ 9];
    1658:	690d      	ldr	r5, [r1, #16]
    165a:	406b      	eors	r3, r5
    165c:	628b      	str	r3, [r1, #40]	; 0x28
                rk[11] = rk[ 5] ^ rk[10];
    165e:	4053      	eors	r3, r2
    1660:	62cb      	str	r3, [r1, #44]	; 0x2c
                rk += 6;
    1662:	3118      	adds	r1, #24
                temp = rk[ 5];
    1664:	e7ba      	b.n	15dc <wc_AesSetKeyLocal+0x11c>
    1666:	4b4d      	ldr	r3, [pc, #308]	; (179c <wc_AesSetKeyLocal+0x2dc>)
    1668:	4699      	mov	r9, r3
    166a:	23c0      	movs	r3, #192	; 0xc0
    166c:	469c      	mov	ip, r3
    166e:	44bc      	add	ip, r7
    1670:	4663      	mov	r3, ip
        switch (keylen) {
    1672:	003c      	movs	r4, r7
                    (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
    1674:	4a4a      	ldr	r2, [pc, #296]	; (17a0 <wc_AesSetKeyLocal+0x2e0>)
    1676:	4694      	mov	ip, r2
    1678:	26ff      	movs	r6, #255	; 0xff
    167a:	22ff      	movs	r2, #255	; 0xff
    167c:	0212      	lsls	r2, r2, #8
    167e:	4693      	mov	fp, r2
                    (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
    1680:	22ff      	movs	r2, #255	; 0xff
    1682:	0412      	lsls	r2, r2, #16
    1684:	4692      	mov	sl, r2
                    (Te[3][GETBYTE(temp, 2)] & 0x00ff0000) ^
    1686:	46e0      	mov	r8, ip
    1688:	464a      	mov	r2, r9
    168a:	9502      	str	r5, [sp, #8]
    168c:	9703      	str	r7, [sp, #12]
    168e:	001f      	movs	r7, r3
    1690:	9200      	str	r2, [sp, #0]
                temp = rk[ 7];
    1692:	69e1      	ldr	r1, [r4, #28]
                    (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
    1694:	0033      	movs	r3, r6
    1696:	400b      	ands	r3, r1
    1698:	009b      	lsls	r3, r3, #2
    169a:	4662      	mov	r2, ip
    169c:	589b      	ldr	r3, [r3, r2]
    169e:	465a      	mov	r2, fp
    16a0:	4013      	ands	r3, r2
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
    16a2:	9800      	ldr	r0, [sp, #0]
    16a4:	c804      	ldmia	r0!, {r2}
    16a6:	9000      	str	r0, [sp, #0]
    16a8:	6820      	ldr	r0, [r4, #0]
    16aa:	4042      	eors	r2, r0
    16ac:	4053      	eors	r3, r2
    16ae:	0e0a      	lsrs	r2, r1, #24
    16b0:	3201      	adds	r2, #1
    16b2:	32ff      	adds	r2, #255	; 0xff
    16b4:	0092      	lsls	r2, r2, #2
    16b6:	4660      	mov	r0, ip
    16b8:	5812      	ldr	r2, [r2, r0]
    16ba:	4032      	ands	r2, r6
    16bc:	4053      	eors	r3, r2
                    (Te[2][GETBYTE(temp, 2)] & 0xff000000) ^
    16be:	0c0a      	lsrs	r2, r1, #16
    16c0:	4032      	ands	r2, r6
    16c2:	2080      	movs	r0, #128	; 0x80
    16c4:	0080      	lsls	r0, r0, #2
    16c6:	4681      	mov	r9, r0
    16c8:	444a      	add	r2, r9
    16ca:	0092      	lsls	r2, r2, #2
    16cc:	4660      	mov	r0, ip
    16ce:	5812      	ldr	r2, [r2, r0]
    16d0:	0e12      	lsrs	r2, r2, #24
    16d2:	0612      	lsls	r2, r2, #24
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
    16d4:	4053      	eors	r3, r2
                    (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
    16d6:	0a0a      	lsrs	r2, r1, #8
    16d8:	4032      	ands	r2, r6
    16da:	20c0      	movs	r0, #192	; 0xc0
    16dc:	0080      	lsls	r0, r0, #2
    16de:	4681      	mov	r9, r0
    16e0:	444a      	add	r2, r9
    16e2:	0092      	lsls	r2, r2, #2
    16e4:	4660      	mov	r0, ip
    16e6:	5812      	ldr	r2, [r2, r0]
    16e8:	4650      	mov	r0, sl
    16ea:	4002      	ands	r2, r0
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
    16ec:	4053      	eors	r3, r2
                rk[ 8] = rk[ 0] ^
    16ee:	6223      	str	r3, [r4, #32]
                rk[ 9] = rk[ 1] ^ rk[ 8];
    16f0:	6862      	ldr	r2, [r4, #4]
    16f2:	4053      	eors	r3, r2
    16f4:	6263      	str	r3, [r4, #36]	; 0x24
                rk[10] = rk[ 2] ^ rk[ 9];
    16f6:	68a2      	ldr	r2, [r4, #8]
    16f8:	4053      	eors	r3, r2
    16fa:	62a3      	str	r3, [r4, #40]	; 0x28
                rk[11] = rk[ 3] ^ rk[10];
    16fc:	68e2      	ldr	r2, [r4, #12]
    16fe:	4053      	eors	r3, r2
    1700:	62e3      	str	r3, [r4, #44]	; 0x2c
                if (++i == 7)
    1702:	42bc      	cmp	r4, r7
    1704:	d041      	beq.n	178a <wc_AesSetKeyLocal+0x2ca>
                    (Te[3][GETBYTE(temp, 2)] & 0x00ff0000) ^
    1706:	0c1a      	lsrs	r2, r3, #16
    1708:	4032      	ands	r2, r6
    170a:	444a      	add	r2, r9
    170c:	0092      	lsls	r2, r2, #2
    170e:	4640      	mov	r0, r8
    1710:	5812      	ldr	r2, [r2, r0]
    1712:	4650      	mov	r0, sl
    1714:	4002      	ands	r2, r0
                    (Te[0][GETBYTE(temp, 1)] & 0x0000ff00) ^
    1716:	0a18      	lsrs	r0, r3, #8
    1718:	4030      	ands	r0, r6
    171a:	0080      	lsls	r0, r0, #2
    171c:	4645      	mov	r5, r8
    171e:	5940      	ldr	r0, [r0, r5]
    1720:	465d      	mov	r5, fp
    1722:	4028      	ands	r0, r5
    1724:	4302      	orrs	r2, r0
    1726:	6920      	ldr	r0, [r4, #16]
    1728:	4042      	eors	r2, r0
                    (Te[2][GETBYTE(temp, 3)] & 0xff000000) ^
    172a:	0e18      	lsrs	r0, r3, #24
    172c:	2580      	movs	r5, #128	; 0x80
    172e:	00ad      	lsls	r5, r5, #2
    1730:	46a9      	mov	r9, r5
    1732:	4448      	add	r0, r9
    1734:	0080      	lsls	r0, r0, #2
    1736:	4645      	mov	r5, r8
    1738:	5940      	ldr	r0, [r0, r5]
    173a:	0e00      	lsrs	r0, r0, #24
    173c:	0600      	lsls	r0, r0, #24
                    (Te[1][GETBYTE(temp, 0)] & 0x000000ff);
    173e:	4033      	ands	r3, r6
    1740:	3301      	adds	r3, #1
    1742:	33ff      	adds	r3, #255	; 0xff
    1744:	009b      	lsls	r3, r3, #2
    1746:	595b      	ldr	r3, [r3, r5]
    1748:	4033      	ands	r3, r6
                    (Te[0][GETBYTE(temp, 1)] & 0x0000ff00) ^
    174a:	4318      	orrs	r0, r3
    174c:	4042      	eors	r2, r0
                rk[12] = rk[ 4] ^
    174e:	6322      	str	r2, [r4, #48]	; 0x30
                rk[13] = rk[ 5] ^ rk[12];
    1750:	6963      	ldr	r3, [r4, #20]
    1752:	405a      	eors	r2, r3
    1754:	6362      	str	r2, [r4, #52]	; 0x34
                rk[14] = rk[ 6] ^ rk[13];
    1756:	69a3      	ldr	r3, [r4, #24]
    1758:	405a      	eors	r2, r3
    175a:	63a2      	str	r2, [r4, #56]	; 0x38
                rk[15] = rk[ 7] ^ rk[14];
    175c:	4051      	eors	r1, r2
    175e:	63e1      	str	r1, [r4, #60]	; 0x3c
                rk += 8;
    1760:	3420      	adds	r4, #32
                temp = rk[ 7];
    1762:	e796      	b.n	1692 <wc_AesSetKeyLocal+0x1d2>
    1764:	464d      	mov	r5, r9
    1766:	4657      	mov	r7, sl
        if (dir == AES_DECRYPTION) {
    1768:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    176a:	2b01      	cmp	r3, #1
    176c:	d01c      	beq.n	17a8 <wc_AesSetKeyLocal+0x2e8>
        return wc_AesSetIV(aes, iv);
    176e:	9901      	ldr	r1, [sp, #4]
    1770:	0038      	movs	r0, r7
    1772:	4b0c      	ldr	r3, [pc, #48]	; (17a4 <wc_AesSetKeyLocal+0x2e4>)
    1774:	4798      	blx	r3
    }
    1776:	b005      	add	sp, #20
    1778:	bc3c      	pop	{r2, r3, r4, r5}
    177a:	4690      	mov	r8, r2
    177c:	4699      	mov	r9, r3
    177e:	46a2      	mov	sl, r4
    1780:	46ab      	mov	fp, r5
    1782:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1784:	9d02      	ldr	r5, [sp, #8]
    1786:	465f      	mov	r7, fp
    1788:	e7ee      	b.n	1768 <wc_AesSetKeyLocal+0x2a8>
    178a:	9d02      	ldr	r5, [sp, #8]
    178c:	9f03      	ldr	r7, [sp, #12]
    178e:	e7eb      	b.n	1768 <wc_AesSetKeyLocal+0x2a8>
    1790:	00001a69 	.word	0x00001a69
    1794:	00ff00ff 	.word	0x00ff00ff
    1798:	ff00ff00 	.word	0xff00ff00
    179c:	00003cd8 	.word	0x00003cd8
    17a0:	00001bd8 	.word	0x00001bd8
    17a4:	0000148d 	.word	0x0000148d
            for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
    17a8:	33ef      	adds	r3, #239	; 0xef
    17aa:	58fc      	ldr	r4, [r7, r3]
    17ac:	00a4      	lsls	r4, r4, #2
    17ae:	d019      	beq.n	17e4 <wc_AesSetKeyLocal+0x324>
    17b0:	003a      	movs	r2, r7
    17b2:	00a3      	lsls	r3, r4, #2
    17b4:	18fb      	adds	r3, r7, r3
    17b6:	2100      	movs	r1, #0
                temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
    17b8:	6810      	ldr	r0, [r2, #0]
    17ba:	681e      	ldr	r6, [r3, #0]
    17bc:	6016      	str	r6, [r2, #0]
    17be:	6018      	str	r0, [r3, #0]
                temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
    17c0:	6850      	ldr	r0, [r2, #4]
    17c2:	685e      	ldr	r6, [r3, #4]
    17c4:	6056      	str	r6, [r2, #4]
    17c6:	6058      	str	r0, [r3, #4]
                temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
    17c8:	6890      	ldr	r0, [r2, #8]
    17ca:	689e      	ldr	r6, [r3, #8]
    17cc:	6096      	str	r6, [r2, #8]
    17ce:	6098      	str	r0, [r3, #8]
                temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
    17d0:	68d0      	ldr	r0, [r2, #12]
    17d2:	68de      	ldr	r6, [r3, #12]
    17d4:	60d6      	str	r6, [r2, #12]
    17d6:	60d8      	str	r0, [r3, #12]
            for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
    17d8:	3104      	adds	r1, #4
    17da:	3210      	adds	r2, #16
    17dc:	3b10      	subs	r3, #16
    17de:	1a60      	subs	r0, r4, r1
    17e0:	4281      	cmp	r1, r0
    17e2:	d3e9      	bcc.n	17b8 <wc_AesSetKeyLocal+0x2f8>
            for (i = 1; i < aes->rounds; i++) {
    17e4:	23f0      	movs	r3, #240	; 0xf0
    17e6:	58fb      	ldr	r3, [r7, r3]
    17e8:	2b01      	cmp	r3, #1
    17ea:	d9c0      	bls.n	176e <wc_AesSetKeyLocal+0x2ae>
    17ec:	2601      	movs	r6, #1
                    Td[0][Te[1][GETBYTE(rk[0], 3)] & 0xff] ^
    17ee:	496b      	ldr	r1, [pc, #428]	; (199c <wc_AesSetKeyLocal+0x4dc>)
    17f0:	4a6b      	ldr	r2, [pc, #428]	; (19a0 <wc_AesSetKeyLocal+0x4e0>)
    17f2:	23ff      	movs	r3, #255	; 0xff
            for (i = 1; i < aes->rounds; i++) {
    17f4:	20f0      	movs	r0, #240	; 0xf0
    17f6:	4684      	mov	ip, r0
    17f8:	46ba      	mov	sl, r7
                rk += 4;
    17fa:	3510      	adds	r5, #16
                    Td[0][Te[1][GETBYTE(rk[0], 3)] & 0xff] ^
    17fc:	6828      	ldr	r0, [r5, #0]
    17fe:	0e04      	lsrs	r4, r0, #24
    1800:	3401      	adds	r4, #1
    1802:	34ff      	adds	r4, #255	; 0xff
    1804:	00a4      	lsls	r4, r4, #2
    1806:	58a4      	ldr	r4, [r4, r2]
    1808:	401c      	ands	r4, r3
    180a:	00a4      	lsls	r4, r4, #2
    180c:	46a0      	mov	r8, r4
                    Td[3][Te[1][GETBYTE(rk[0], 0)] & 0xff];
    180e:	001c      	movs	r4, r3
    1810:	4004      	ands	r4, r0
    1812:	3401      	adds	r4, #1
    1814:	34ff      	adds	r4, #255	; 0xff
    1816:	00a4      	lsls	r4, r4, #2
    1818:	58a4      	ldr	r4, [r4, r2]
    181a:	401c      	ands	r4, r3
    181c:	27c0      	movs	r7, #192	; 0xc0
    181e:	00bf      	lsls	r7, r7, #2
    1820:	46b9      	mov	r9, r7
    1822:	444c      	add	r4, r9
    1824:	00a4      	lsls	r4, r4, #2
                    Td[2][Te[1][GETBYTE(rk[0], 1)] & 0xff] ^
    1826:	4647      	mov	r7, r8
    1828:	587f      	ldr	r7, [r7, r1]
    182a:	5864      	ldr	r4, [r4, r1]
    182c:	4067      	eors	r7, r4
                    Td[1][Te[1][GETBYTE(rk[0], 2)] & 0xff] ^
    182e:	0c04      	lsrs	r4, r0, #16
    1830:	401c      	ands	r4, r3
    1832:	3401      	adds	r4, #1
    1834:	34ff      	adds	r4, #255	; 0xff
    1836:	00a4      	lsls	r4, r4, #2
    1838:	58a4      	ldr	r4, [r4, r2]
    183a:	401c      	ands	r4, r3
    183c:	3401      	adds	r4, #1
    183e:	34ff      	adds	r4, #255	; 0xff
    1840:	00a4      	lsls	r4, r4, #2
                    Td[2][Te[1][GETBYTE(rk[0], 1)] & 0xff] ^
    1842:	5864      	ldr	r4, [r4, r1]
    1844:	407c      	eors	r4, r7
    1846:	0a00      	lsrs	r0, r0, #8
    1848:	4018      	ands	r0, r3
    184a:	3001      	adds	r0, #1
    184c:	30ff      	adds	r0, #255	; 0xff
    184e:	0080      	lsls	r0, r0, #2
    1850:	5880      	ldr	r0, [r0, r2]
    1852:	4018      	ands	r0, r3
    1854:	2780      	movs	r7, #128	; 0x80
    1856:	00bf      	lsls	r7, r7, #2
    1858:	46b8      	mov	r8, r7
    185a:	4440      	add	r0, r8
    185c:	0080      	lsls	r0, r0, #2
    185e:	5840      	ldr	r0, [r0, r1]
    1860:	4044      	eors	r4, r0
                rk[0] =
    1862:	602c      	str	r4, [r5, #0]
                    Td[0][Te[1][GETBYTE(rk[1], 3)] & 0xff] ^
    1864:	6868      	ldr	r0, [r5, #4]
    1866:	0e04      	lsrs	r4, r0, #24
    1868:	3401      	adds	r4, #1
    186a:	34ff      	adds	r4, #255	; 0xff
    186c:	00a4      	lsls	r4, r4, #2
    186e:	58a4      	ldr	r4, [r4, r2]
    1870:	401c      	ands	r4, r3
    1872:	00a4      	lsls	r4, r4, #2
    1874:	46a0      	mov	r8, r4
                    Td[3][Te[1][GETBYTE(rk[1], 0)] & 0xff];
    1876:	001c      	movs	r4, r3
    1878:	4004      	ands	r4, r0
    187a:	3401      	adds	r4, #1
    187c:	34ff      	adds	r4, #255	; 0xff
    187e:	00a4      	lsls	r4, r4, #2
    1880:	58a4      	ldr	r4, [r4, r2]
    1882:	401c      	ands	r4, r3
    1884:	444c      	add	r4, r9
    1886:	00a4      	lsls	r4, r4, #2
                    Td[2][Te[1][GETBYTE(rk[1], 1)] & 0xff] ^
    1888:	4647      	mov	r7, r8
    188a:	587f      	ldr	r7, [r7, r1]
    188c:	5864      	ldr	r4, [r4, r1]
    188e:	4067      	eors	r7, r4
                    Td[1][Te[1][GETBYTE(rk[1], 2)] & 0xff] ^
    1890:	0c04      	lsrs	r4, r0, #16
    1892:	401c      	ands	r4, r3
    1894:	3401      	adds	r4, #1
    1896:	34ff      	adds	r4, #255	; 0xff
    1898:	00a4      	lsls	r4, r4, #2
    189a:	58a4      	ldr	r4, [r4, r2]
    189c:	401c      	ands	r4, r3
    189e:	3401      	adds	r4, #1
    18a0:	34ff      	adds	r4, #255	; 0xff
    18a2:	00a4      	lsls	r4, r4, #2
                    Td[2][Te[1][GETBYTE(rk[1], 1)] & 0xff] ^
    18a4:	5864      	ldr	r4, [r4, r1]
    18a6:	407c      	eors	r4, r7
    18a8:	0a00      	lsrs	r0, r0, #8
    18aa:	4018      	ands	r0, r3
    18ac:	3001      	adds	r0, #1
    18ae:	30ff      	adds	r0, #255	; 0xff
    18b0:	0080      	lsls	r0, r0, #2
    18b2:	5880      	ldr	r0, [r0, r2]
    18b4:	4018      	ands	r0, r3
    18b6:	2780      	movs	r7, #128	; 0x80
    18b8:	00bf      	lsls	r7, r7, #2
    18ba:	46b8      	mov	r8, r7
    18bc:	4440      	add	r0, r8
    18be:	0080      	lsls	r0, r0, #2
    18c0:	5840      	ldr	r0, [r0, r1]
    18c2:	4044      	eors	r4, r0
                rk[1] =
    18c4:	606c      	str	r4, [r5, #4]
                    Td[0][Te[1][GETBYTE(rk[2], 3)] & 0xff] ^
    18c6:	68a8      	ldr	r0, [r5, #8]
    18c8:	0e04      	lsrs	r4, r0, #24
    18ca:	3401      	adds	r4, #1
    18cc:	34ff      	adds	r4, #255	; 0xff
    18ce:	00a4      	lsls	r4, r4, #2
    18d0:	58a4      	ldr	r4, [r4, r2]
    18d2:	401c      	ands	r4, r3
    18d4:	00a4      	lsls	r4, r4, #2
    18d6:	46a0      	mov	r8, r4
                    Td[3][Te[1][GETBYTE(rk[2], 0)] & 0xff];
    18d8:	001c      	movs	r4, r3
    18da:	4004      	ands	r4, r0
    18dc:	3401      	adds	r4, #1
    18de:	34ff      	adds	r4, #255	; 0xff
    18e0:	00a4      	lsls	r4, r4, #2
    18e2:	58a4      	ldr	r4, [r4, r2]
    18e4:	401c      	ands	r4, r3
    18e6:	444c      	add	r4, r9
    18e8:	00a4      	lsls	r4, r4, #2
                    Td[2][Te[1][GETBYTE(rk[2], 1)] & 0xff] ^
    18ea:	4647      	mov	r7, r8
    18ec:	587f      	ldr	r7, [r7, r1]
    18ee:	5864      	ldr	r4, [r4, r1]
    18f0:	4067      	eors	r7, r4
                    Td[1][Te[1][GETBYTE(rk[2], 2)] & 0xff] ^
    18f2:	0c04      	lsrs	r4, r0, #16
    18f4:	401c      	ands	r4, r3
    18f6:	3401      	adds	r4, #1
    18f8:	34ff      	adds	r4, #255	; 0xff
    18fa:	00a4      	lsls	r4, r4, #2
    18fc:	58a4      	ldr	r4, [r4, r2]
    18fe:	401c      	ands	r4, r3
    1900:	3401      	adds	r4, #1
    1902:	34ff      	adds	r4, #255	; 0xff
    1904:	00a4      	lsls	r4, r4, #2
                    Td[2][Te[1][GETBYTE(rk[2], 1)] & 0xff] ^
    1906:	5864      	ldr	r4, [r4, r1]
    1908:	407c      	eors	r4, r7
    190a:	0a00      	lsrs	r0, r0, #8
    190c:	4018      	ands	r0, r3
    190e:	3001      	adds	r0, #1
    1910:	30ff      	adds	r0, #255	; 0xff
    1912:	0080      	lsls	r0, r0, #2
    1914:	5880      	ldr	r0, [r0, r2]
    1916:	4018      	ands	r0, r3
    1918:	2780      	movs	r7, #128	; 0x80
    191a:	00bf      	lsls	r7, r7, #2
    191c:	46b8      	mov	r8, r7
    191e:	4440      	add	r0, r8
    1920:	0080      	lsls	r0, r0, #2
    1922:	5840      	ldr	r0, [r0, r1]
    1924:	4044      	eors	r4, r0
                rk[2] =
    1926:	60ac      	str	r4, [r5, #8]
                    Td[0][Te[1][GETBYTE(rk[3], 3)] & 0xff] ^
    1928:	68e8      	ldr	r0, [r5, #12]
    192a:	0e04      	lsrs	r4, r0, #24
    192c:	3401      	adds	r4, #1
    192e:	34ff      	adds	r4, #255	; 0xff
    1930:	00a4      	lsls	r4, r4, #2
    1932:	58a4      	ldr	r4, [r4, r2]
    1934:	401c      	ands	r4, r3
    1936:	00a4      	lsls	r4, r4, #2
    1938:	46a0      	mov	r8, r4
                    Td[3][Te[1][GETBYTE(rk[3], 0)] & 0xff];
    193a:	001c      	movs	r4, r3
    193c:	4004      	ands	r4, r0
    193e:	3401      	adds	r4, #1
    1940:	34ff      	adds	r4, #255	; 0xff
    1942:	00a4      	lsls	r4, r4, #2
    1944:	58a4      	ldr	r4, [r4, r2]
    1946:	401c      	ands	r4, r3
    1948:	444c      	add	r4, r9
    194a:	00a4      	lsls	r4, r4, #2
                    Td[2][Te[1][GETBYTE(rk[3], 1)] & 0xff] ^
    194c:	4647      	mov	r7, r8
    194e:	587f      	ldr	r7, [r7, r1]
    1950:	5864      	ldr	r4, [r4, r1]
    1952:	4067      	eors	r7, r4
                    Td[1][Te[1][GETBYTE(rk[3], 2)] & 0xff] ^
    1954:	0c04      	lsrs	r4, r0, #16
    1956:	401c      	ands	r4, r3
    1958:	3401      	adds	r4, #1
    195a:	34ff      	adds	r4, #255	; 0xff
    195c:	00a4      	lsls	r4, r4, #2
    195e:	58a4      	ldr	r4, [r4, r2]
    1960:	401c      	ands	r4, r3
    1962:	3401      	adds	r4, #1
    1964:	34ff      	adds	r4, #255	; 0xff
    1966:	00a4      	lsls	r4, r4, #2
                    Td[2][Te[1][GETBYTE(rk[3], 1)] & 0xff] ^
    1968:	5864      	ldr	r4, [r4, r1]
    196a:	407c      	eors	r4, r7
    196c:	0a00      	lsrs	r0, r0, #8
    196e:	4018      	ands	r0, r3
    1970:	3001      	adds	r0, #1
    1972:	30ff      	adds	r0, #255	; 0xff
    1974:	0080      	lsls	r0, r0, #2
    1976:	5880      	ldr	r0, [r0, r2]
    1978:	4018      	ands	r0, r3
    197a:	2780      	movs	r7, #128	; 0x80
    197c:	00bf      	lsls	r7, r7, #2
    197e:	46b8      	mov	r8, r7
    1980:	4440      	add	r0, r8
    1982:	0080      	lsls	r0, r0, #2
    1984:	5840      	ldr	r0, [r0, r1]
    1986:	4044      	eors	r4, r0
                rk[3] =
    1988:	60ec      	str	r4, [r5, #12]
            for (i = 1; i < aes->rounds; i++) {
    198a:	3601      	adds	r6, #1
    198c:	4660      	mov	r0, ip
    198e:	4654      	mov	r4, sl
    1990:	5820      	ldr	r0, [r4, r0]
    1992:	42b0      	cmp	r0, r6
    1994:	d900      	bls.n	1998 <wc_AesSetKeyLocal+0x4d8>
    1996:	e730      	b.n	17fa <wc_AesSetKeyLocal+0x33a>
    1998:	4657      	mov	r7, sl
    199a:	e6e8      	b.n	176e <wc_AesSetKeyLocal+0x2ae>
    199c:	00002bd8 	.word	0x00002bd8
    19a0:	00001bd8 	.word	0x00001bd8

000019a4 <wc_AesSetKey>:
    {
    19a4:	b530      	push	{r4, r5, lr}
    19a6:	b083      	sub	sp, #12
        if (aes == NULL ||
    19a8:	2800      	cmp	r0, #0
    19aa:	d012      	beq.n	19d2 <wc_AesSetKey+0x2e>
    19ac:	2408      	movs	r4, #8
    19ae:	0015      	movs	r5, r2
    19b0:	43a5      	bics	r5, r4
    19b2:	2d10      	cmp	r5, #16
    19b4:	d001      	beq.n	19ba <wc_AesSetKey+0x16>
                !((keylen == 16) || (keylen == 24) || (keylen == 32))) {
    19b6:	2a20      	cmp	r2, #32
    19b8:	d10e      	bne.n	19d8 <wc_AesSetKey+0x34>
        aes->keylen = keylen;
    19ba:	24f4      	movs	r4, #244	; 0xf4
    19bc:	5102      	str	r2, [r0, r4]
        aes->rounds = keylen/4 + 6;
    19be:	0894      	lsrs	r4, r2, #2
    19c0:	3406      	adds	r4, #6
    19c2:	25f0      	movs	r5, #240	; 0xf0
    19c4:	5144      	str	r4, [r0, r5]
        ret = wc_AesSetKeyLocal(aes, userKey, keylen, iv, dir);
    19c6:	9c06      	ldr	r4, [sp, #24]
    19c8:	9400      	str	r4, [sp, #0]
    19ca:	4c05      	ldr	r4, [pc, #20]	; (19e0 <wc_AesSetKey+0x3c>)
    19cc:	47a0      	blx	r4
    }
    19ce:	b003      	add	sp, #12
    19d0:	bd30      	pop	{r4, r5, pc}
            return BAD_FUNC_ARG;
    19d2:	20ad      	movs	r0, #173	; 0xad
    19d4:	4240      	negs	r0, r0
    19d6:	e7fa      	b.n	19ce <wc_AesSetKey+0x2a>
    19d8:	20ad      	movs	r0, #173	; 0xad
    19da:	4240      	negs	r0, r0
    19dc:	e7f7      	b.n	19ce <wc_AesSetKey+0x2a>
    19de:	46c0      	nop			; (mov r8, r8)
    19e0:	000014c1 	.word	0x000014c1

000019e4 <wc_AesEncryptDirect>:
        #endif /* HAVE_AES_DECRYPT */

    #else
        /* Allow direct access to one block encrypt */
        void wc_AesEncryptDirect(Aes* aes, byte* out, const byte* in)
        {
    19e4:	b510      	push	{r4, lr}
    19e6:	0013      	movs	r3, r2
            wc_AesEncrypt(aes, in, out);
    19e8:	000a      	movs	r2, r1
    19ea:	0019      	movs	r1, r3
    19ec:	4b01      	ldr	r3, [pc, #4]	; (19f4 <wc_AesEncryptDirect+0x10>)
    19ee:	4798      	blx	r3
        }
    19f0:	bd10      	pop	{r4, pc}
    19f2:	46c0      	nop			; (mov r8, r8)
    19f4:	00000a55 	.word	0x00000a55

000019f8 <wc_AesDecryptDirect>:
        #ifdef HAVE_AES_DECRYPT
        /* Allow direct access to one block decrypt */
        void wc_AesDecryptDirect(Aes* aes, byte* out, const byte* in)
        {
    19f8:	b510      	push	{r4, lr}
    19fa:	0013      	movs	r3, r2
            wc_AesDecrypt(aes, in, out);
    19fc:	000a      	movs	r2, r1
    19fe:	0019      	movs	r1, r3
    1a00:	4b01      	ldr	r3, [pc, #4]	; (1a08 <wc_AesDecryptDirect+0x10>)
    1a02:	4798      	blx	r3
        }
    1a04:	bd10      	pop	{r4, pc}
    1a06:	46c0      	nop			; (mov r8, r8)
    1a08:	00000fe9 	.word	0x00000fe9

00001a0c <__libc_init_array>:
    1a0c:	b570      	push	{r4, r5, r6, lr}
    1a0e:	2600      	movs	r6, #0
    1a10:	4d0c      	ldr	r5, [pc, #48]	; (1a44 <__libc_init_array+0x38>)
    1a12:	4c0d      	ldr	r4, [pc, #52]	; (1a48 <__libc_init_array+0x3c>)
    1a14:	1b64      	subs	r4, r4, r5
    1a16:	10a4      	asrs	r4, r4, #2
    1a18:	42a6      	cmp	r6, r4
    1a1a:	d109      	bne.n	1a30 <__libc_init_array+0x24>
    1a1c:	2600      	movs	r6, #0
    1a1e:	f002 f99f 	bl	3d60 <_init>
    1a22:	4d0a      	ldr	r5, [pc, #40]	; (1a4c <__libc_init_array+0x40>)
    1a24:	4c0a      	ldr	r4, [pc, #40]	; (1a50 <__libc_init_array+0x44>)
    1a26:	1b64      	subs	r4, r4, r5
    1a28:	10a4      	asrs	r4, r4, #2
    1a2a:	42a6      	cmp	r6, r4
    1a2c:	d105      	bne.n	1a3a <__libc_init_array+0x2e>
    1a2e:	bd70      	pop	{r4, r5, r6, pc}
    1a30:	00b3      	lsls	r3, r6, #2
    1a32:	58eb      	ldr	r3, [r5, r3]
    1a34:	4798      	blx	r3
    1a36:	3601      	adds	r6, #1
    1a38:	e7ee      	b.n	1a18 <__libc_init_array+0xc>
    1a3a:	00b3      	lsls	r3, r6, #2
    1a3c:	58eb      	ldr	r3, [r5, r3]
    1a3e:	4798      	blx	r3
    1a40:	3601      	adds	r6, #1
    1a42:	e7f2      	b.n	1a2a <__libc_init_array+0x1e>
    1a44:	00003d6c 	.word	0x00003d6c
    1a48:	00003d6c 	.word	0x00003d6c
    1a4c:	00003d6c 	.word	0x00003d6c
    1a50:	00003d70 	.word	0x00003d70

00001a54 <malloc>:
    1a54:	b510      	push	{r4, lr}
    1a56:	4b03      	ldr	r3, [pc, #12]	; (1a64 <malloc+0x10>)
    1a58:	0001      	movs	r1, r0
    1a5a:	6818      	ldr	r0, [r3, #0]
    1a5c:	f000 f816 	bl	1a8c <_malloc_r>
    1a60:	bd10      	pop	{r4, pc}
    1a62:	46c0      	nop			; (mov r8, r8)
    1a64:	20000020 	.word	0x20000020

00001a68 <memcpy>:
    1a68:	2300      	movs	r3, #0
    1a6a:	b510      	push	{r4, lr}
    1a6c:	429a      	cmp	r2, r3
    1a6e:	d100      	bne.n	1a72 <memcpy+0xa>
    1a70:	bd10      	pop	{r4, pc}
    1a72:	5ccc      	ldrb	r4, [r1, r3]
    1a74:	54c4      	strb	r4, [r0, r3]
    1a76:	3301      	adds	r3, #1
    1a78:	e7f8      	b.n	1a6c <memcpy+0x4>

00001a7a <memset>:
    1a7a:	0003      	movs	r3, r0
    1a7c:	1882      	adds	r2, r0, r2
    1a7e:	4293      	cmp	r3, r2
    1a80:	d100      	bne.n	1a84 <memset+0xa>
    1a82:	4770      	bx	lr
    1a84:	7019      	strb	r1, [r3, #0]
    1a86:	3301      	adds	r3, #1
    1a88:	e7f9      	b.n	1a7e <memset+0x4>
	...

00001a8c <_malloc_r>:
    1a8c:	2303      	movs	r3, #3
    1a8e:	b570      	push	{r4, r5, r6, lr}
    1a90:	1ccd      	adds	r5, r1, #3
    1a92:	439d      	bics	r5, r3
    1a94:	3508      	adds	r5, #8
    1a96:	0006      	movs	r6, r0
    1a98:	2d0c      	cmp	r5, #12
    1a9a:	d21e      	bcs.n	1ada <_malloc_r+0x4e>
    1a9c:	250c      	movs	r5, #12
    1a9e:	42a9      	cmp	r1, r5
    1aa0:	d81d      	bhi.n	1ade <_malloc_r+0x52>
    1aa2:	0030      	movs	r0, r6
    1aa4:	f000 f862 	bl	1b6c <__malloc_lock>
    1aa8:	4a25      	ldr	r2, [pc, #148]	; (1b40 <_malloc_r+0xb4>)
    1aaa:	6814      	ldr	r4, [r2, #0]
    1aac:	0021      	movs	r1, r4
    1aae:	2900      	cmp	r1, #0
    1ab0:	d119      	bne.n	1ae6 <_malloc_r+0x5a>
    1ab2:	4c24      	ldr	r4, [pc, #144]	; (1b44 <_malloc_r+0xb8>)
    1ab4:	6823      	ldr	r3, [r4, #0]
    1ab6:	2b00      	cmp	r3, #0
    1ab8:	d103      	bne.n	1ac2 <_malloc_r+0x36>
    1aba:	0030      	movs	r0, r6
    1abc:	f000 f844 	bl	1b48 <_sbrk_r>
    1ac0:	6020      	str	r0, [r4, #0]
    1ac2:	0029      	movs	r1, r5
    1ac4:	0030      	movs	r0, r6
    1ac6:	f000 f83f 	bl	1b48 <_sbrk_r>
    1aca:	1c43      	adds	r3, r0, #1
    1acc:	d12c      	bne.n	1b28 <_malloc_r+0x9c>
    1ace:	230c      	movs	r3, #12
    1ad0:	0030      	movs	r0, r6
    1ad2:	6033      	str	r3, [r6, #0]
    1ad4:	f000 f84b 	bl	1b6e <__malloc_unlock>
    1ad8:	e003      	b.n	1ae2 <_malloc_r+0x56>
    1ada:	2d00      	cmp	r5, #0
    1adc:	dadf      	bge.n	1a9e <_malloc_r+0x12>
    1ade:	230c      	movs	r3, #12
    1ae0:	6033      	str	r3, [r6, #0]
    1ae2:	2000      	movs	r0, #0
    1ae4:	bd70      	pop	{r4, r5, r6, pc}
    1ae6:	680b      	ldr	r3, [r1, #0]
    1ae8:	1b5b      	subs	r3, r3, r5
    1aea:	d41a      	bmi.n	1b22 <_malloc_r+0x96>
    1aec:	2b0b      	cmp	r3, #11
    1aee:	d903      	bls.n	1af8 <_malloc_r+0x6c>
    1af0:	600b      	str	r3, [r1, #0]
    1af2:	18cc      	adds	r4, r1, r3
    1af4:	6025      	str	r5, [r4, #0]
    1af6:	e003      	b.n	1b00 <_malloc_r+0x74>
    1af8:	428c      	cmp	r4, r1
    1afa:	d10e      	bne.n	1b1a <_malloc_r+0x8e>
    1afc:	6863      	ldr	r3, [r4, #4]
    1afe:	6013      	str	r3, [r2, #0]
    1b00:	0030      	movs	r0, r6
    1b02:	f000 f834 	bl	1b6e <__malloc_unlock>
    1b06:	0020      	movs	r0, r4
    1b08:	2207      	movs	r2, #7
    1b0a:	300b      	adds	r0, #11
    1b0c:	1d23      	adds	r3, r4, #4
    1b0e:	4390      	bics	r0, r2
    1b10:	1ac3      	subs	r3, r0, r3
    1b12:	d0e7      	beq.n	1ae4 <_malloc_r+0x58>
    1b14:	425a      	negs	r2, r3
    1b16:	50e2      	str	r2, [r4, r3]
    1b18:	e7e4      	b.n	1ae4 <_malloc_r+0x58>
    1b1a:	684b      	ldr	r3, [r1, #4]
    1b1c:	6063      	str	r3, [r4, #4]
    1b1e:	000c      	movs	r4, r1
    1b20:	e7ee      	b.n	1b00 <_malloc_r+0x74>
    1b22:	000c      	movs	r4, r1
    1b24:	6849      	ldr	r1, [r1, #4]
    1b26:	e7c2      	b.n	1aae <_malloc_r+0x22>
    1b28:	2303      	movs	r3, #3
    1b2a:	1cc4      	adds	r4, r0, #3
    1b2c:	439c      	bics	r4, r3
    1b2e:	42a0      	cmp	r0, r4
    1b30:	d0e0      	beq.n	1af4 <_malloc_r+0x68>
    1b32:	1a21      	subs	r1, r4, r0
    1b34:	0030      	movs	r0, r6
    1b36:	f000 f807 	bl	1b48 <_sbrk_r>
    1b3a:	1c43      	adds	r3, r0, #1
    1b3c:	d1da      	bne.n	1af4 <_malloc_r+0x68>
    1b3e:	e7c6      	b.n	1ace <_malloc_r+0x42>
    1b40:	200000ac 	.word	0x200000ac
    1b44:	200000b0 	.word	0x200000b0

00001b48 <_sbrk_r>:
    1b48:	2300      	movs	r3, #0
    1b4a:	b570      	push	{r4, r5, r6, lr}
    1b4c:	4c06      	ldr	r4, [pc, #24]	; (1b68 <_sbrk_r+0x20>)
    1b4e:	0005      	movs	r5, r0
    1b50:	0008      	movs	r0, r1
    1b52:	6023      	str	r3, [r4, #0]
    1b54:	f7fe fc2a 	bl	3ac <_sbrk>
    1b58:	1c43      	adds	r3, r0, #1
    1b5a:	d103      	bne.n	1b64 <_sbrk_r+0x1c>
    1b5c:	6823      	ldr	r3, [r4, #0]
    1b5e:	2b00      	cmp	r3, #0
    1b60:	d000      	beq.n	1b64 <_sbrk_r+0x1c>
    1b62:	602b      	str	r3, [r5, #0]
    1b64:	bd70      	pop	{r4, r5, r6, pc}
    1b66:	46c0      	nop			; (mov r8, r8)
    1b68:	200000d0 	.word	0x200000d0

00001b6c <__malloc_lock>:
    1b6c:	4770      	bx	lr

00001b6e <__malloc_unlock>:
    1b6e:	4770      	bx	lr
    1b70:	682f2e2e 	.word	0x682f2e2e
    1b74:	732f6c61 	.word	0x732f6c61
    1b78:	682f6372 	.word	0x682f6372
    1b7c:	665f6c61 	.word	0x665f6c61
    1b80:	6873616c 	.word	0x6873616c
    1b84:	0000632e 	.word	0x0000632e
    1b88:	682f2e2e 	.word	0x682f2e2e
    1b8c:	6e2f6c70 	.word	0x6e2f6c70
    1b90:	74636d76 	.word	0x74636d76
    1b94:	682f6c72 	.word	0x682f6c72
    1b98:	6e5f6c70 	.word	0x6e5f6c70
    1b9c:	74636d76 	.word	0x74636d76
    1ba0:	632e6c72 	.word	0x632e6c72
    1ba4:	00000000 	.word	0x00000000

00001ba8 <key_128>:
    1ba8:	10eb3d60 be71ca15 f0ae732b 81777d85     `=....q.+s...}w.

00001bb8 <key_256>:
    1bb8:	10eb3d60 be71ca15 f0ae732b 81777d85     `=....q.+s...}w.
    1bc8:	072c351f d708613b a310982d f4df1409     .5,.;a..-.......

00001bd8 <Te>:
    1bd8:	c66363a5 f87c7c84 ee777799 f67b7b8d     .cc..||..ww..{{.
    1be8:	fff2f20d d66b6bbd de6f6fb1 91c5c554     .....kk..oo.T...
    1bf8:	60303050 02010103 ce6767a9 562b2b7d     P00`.....gg.}++V
    1c08:	e7fefe19 b5d7d762 4dababe6 ec76769a     ....b......M.vv.
    1c18:	8fcaca45 1f82829d 89c9c940 fa7d7d87     E.......@....}}.
    1c28:	effafa15 b25959eb 8e4747c9 fbf0f00b     .....YY..GG.....
    1c38:	41adadec b3d4d467 5fa2a2fd 45afafea     ...Ag......_...E
    1c48:	239c9cbf 53a4a4f7 e4727296 9bc0c05b     ...#...S.rr.[...
    1c58:	75b7b7c2 e1fdfd1c 3d9393ae 4c26266a     ...u.......=j&&L
    1c68:	6c36365a 7e3f3f41 f5f7f702 83cccc4f     Z66lA??~....O...
    1c78:	6834345c 51a5a5f4 d1e5e534 f9f1f108     \44h...Q4.......
    1c88:	e2717193 abd8d873 62313153 2a15153f     .qq.s...S11b?..*
    1c98:	0804040c 95c7c752 46232365 9dc3c35e     ....R...e##F^...
    1ca8:	30181828 379696a1 0a05050f 2f9a9ab5     (..0...7......./
    1cb8:	0e070709 24121236 1b80809b dfe2e23d     ....6..$....=...
    1cc8:	cdebeb26 4e272769 7fb2b2cd ea75759f     &...i''N.....uu.
    1cd8:	1209091b 1d83839e 582c2c74 341a1a2e     ........t,,X...4
    1ce8:	361b1b2d dc6e6eb2 b45a5aee 5ba0a0fb     -..6.nn..ZZ....[
    1cf8:	a45252f6 763b3b4d b7d6d661 7db3b3ce     .RR.M;;va......}
    1d08:	5229297b dde3e33e 5e2f2f71 13848497     {))R>...q//^....
    1d18:	a65353f5 b9d1d168 00000000 c1eded2c     .SS.h.......,...
    1d28:	40202060 e3fcfc1f 79b1b1c8 b65b5bed     `  @.......y.[[.
    1d38:	d46a6abe 8dcbcb46 67bebed9 7239394b     .jj.F......gK99r
    1d48:	944a4ade 984c4cd4 b05858e8 85cfcf4a     .JJ..LL..XX.J...
    1d58:	bbd0d06b c5efef2a 4faaaae5 edfbfb16     k...*......O....
    1d68:	864343c5 9a4d4dd7 66333355 11858594     .CC..MM.U33f....
    1d78:	8a4545cf e9f9f910 04020206 fe7f7f81     .EE.............
    1d88:	a05050f0 783c3c44 259f9fba 4ba8a8e3     .PP.D<<x...%...K
    1d98:	a25151f3 5da3a3fe 804040c0 058f8f8a     .QQ....].@@.....
    1da8:	3f9292ad 219d9dbc 70383848 f1f5f504     ...?...!H88p....
    1db8:	63bcbcdf 77b6b6c1 afdada75 42212163     ...c...wu...c!!B
    1dc8:	20101030 e5ffff1a fdf3f30e bfd2d26d     0.. ........m...
    1dd8:	81cdcd4c 180c0c14 26131335 c3ecec2f     L.......5..&/...
    1de8:	be5f5fe1 359797a2 884444cc 2e171739     .__....5.DD.9...
    1df8:	93c4c457 55a7a7f2 fc7e7e82 7a3d3d47     W......U.~~.G==z
    1e08:	c86464ac ba5d5de7 3219192b e6737395     .dd..]].+..2.ss.
    1e18:	c06060a0 19818198 9e4f4fd1 a3dcdc7f     .``......OO.....
    1e28:	44222266 542a2a7e 3b9090ab 0b888883     f""D~**T...;....
    1e38:	8c4646ca c7eeee29 6bb8b8d3 2814143c     .FF.)......k<..(
    1e48:	a7dede79 bc5e5ee2 160b0b1d addbdb76     y....^^.....v...
    1e58:	dbe0e03b 64323256 743a3a4e 140a0a1e     ;...V22dN::t....
    1e68:	924949db 0c06060a 4824246c b85c5ce4     .II.....l$$H.\\.
    1e78:	9fc2c25d bdd3d36e 43acacef c46262a6     ]...n......C.bb.
    1e88:	399191a8 319595a4 d3e4e437 f279798b     ...9...17....yy.
    1e98:	d5e7e732 8bc8c843 6e373759 da6d6db7     2...C...Y77n.mm.
    1ea8:	018d8d8c b1d5d564 9c4e4ed2 49a9a9e0     ....d....NN....I
    1eb8:	d86c6cb4 ac5656fa f3f4f407 cfeaea25     .ll..VV.....%...
    1ec8:	ca6565af f47a7a8e 47aeaee9 10080818     .ee..zz....G....
    1ed8:	6fbabad5 f0787888 4a25256f 5c2e2e72     ...o.xx.o%%Jr..\
    1ee8:	381c1c24 57a6a6f1 73b4b4c7 97c6c651     $..8...W...sQ...
    1ef8:	cbe8e823 a1dddd7c e874749c 3e1f1f21     #...|....tt.!..>
    1f08:	964b4bdd 61bdbddc 0d8b8b86 0f8a8a85     .KK....a........
    1f18:	e0707090 7c3e3e42 71b5b5c4 cc6666aa     .pp.B>>|...q.ff.
    1f28:	904848d8 06030305 f7f6f601 1c0e0e12     .HH.............
    1f38:	c26161a3 6a35355f ae5757f9 69b9b9d0     .aa._55j.WW....i
    1f48:	17868691 99c1c158 3a1d1d27 279e9eb9     ....X...'..:...'
    1f58:	d9e1e138 ebf8f813 2b9898b3 22111133     8..........+3.."
    1f68:	d26969bb a9d9d970 078e8e89 339494a7     .ii.p..........3
    1f78:	2d9b9bb6 3c1e1e22 15878792 c9e9e920     ...-"..<.... ...
    1f88:	87cece49 aa5555ff 50282878 a5dfdf7a     I....UU.x((Pz...
    1f98:	038c8c8f 59a1a1f8 09898980 1a0d0d17     .......Y........
    1fa8:	65bfbfda d7e6e631 844242c6 d06868b8     ...e1....BB..hh.
    1fb8:	824141c3 299999b0 5a2d2d77 1e0f0f11     .AA....)w--Z....
    1fc8:	7bb0b0cb a85454fc 6dbbbbd6 2c16163a     ...{.TT....m:..,
    1fd8:	a5c66363 84f87c7c 99ee7777 8df67b7b     cc..||..ww..{{..
    1fe8:	0dfff2f2 bdd66b6b b1de6f6f 5491c5c5     ....kk..oo.....T
    1ff8:	50603030 03020101 a9ce6767 7d562b2b     00`P....gg..++V}
    2008:	19e7fefe 62b5d7d7 e64dabab 9aec7676     .......b..M.vv..
    2018:	458fcaca 9d1f8282 4089c9c9 87fa7d7d     ...E.......@}}..
    2028:	15effafa ebb25959 c98e4747 0bfbf0f0     ....YY..GG......
    2038:	ec41adad 67b3d4d4 fd5fa2a2 ea45afaf     ..A....g.._...E.
    2048:	bf239c9c f753a4a4 96e47272 5b9bc0c0     ..#...S.rr.....[
    2058:	c275b7b7 1ce1fdfd ae3d9393 6a4c2626     ..u.......=.&&Lj
    2068:	5a6c3636 417e3f3f 02f5f7f7 4f83cccc     66lZ??~A.......O
    2078:	5c683434 f451a5a5 34d1e5e5 08f9f1f1     44h\..Q....4....
    2088:	93e27171 73abd8d8 53623131 3f2a1515     qq.....s11bS..*?
    2098:	0c080404 5295c7c7 65462323 5e9dc3c3     .......R##Fe...^
    20a8:	28301818 a1379696 0f0a0505 b52f9a9a     ..0(..7......./.
    20b8:	090e0707 36241212 9b1b8080 3ddfe2e2     ......$6.......=
    20c8:	26cdebeb 694e2727 cd7fb2b2 9fea7575     ...&''Ni....uu..
    20d8:	1b120909 9e1d8383 74582c2c 2e341a1a     ........,,Xt..4.
    20e8:	2d361b1b b2dc6e6e eeb45a5a fb5ba0a0     ..6-nn..ZZ....[.
    20f8:	f6a45252 4d763b3b 61b7d6d6 ce7db3b3     RR..;;vM...a..}.
    2108:	7b522929 3edde3e3 715e2f2f 97138484     ))R{...>//^q....
    2118:	f5a65353 68b9d1d1 00000000 2cc1eded     SS.....h.......,
    2128:	60402020 1fe3fcfc c879b1b1 edb65b5b       @`......y.[[..
    2138:	bed46a6a 468dcbcb d967bebe 4b723939     jj.....F..g.99rK
    2148:	de944a4a d4984c4c e8b05858 4a85cfcf     JJ..LL..XX.....J
    2158:	6bbbd0d0 2ac5efef e54faaaa 16edfbfb     ...k...*..O.....
    2168:	c5864343 d79a4d4d 55663333 94118585     CC..MM..33fU....
    2178:	cf8a4545 10e9f9f9 06040202 81fe7f7f     EE..............
    2188:	f0a05050 44783c3c ba259f9f e34ba8a8     PP..<<xD..%...K.
    2198:	f3a25151 fe5da3a3 c0804040 8a058f8f     QQ....].@@......
    21a8:	ad3f9292 bc219d9d 48703838 04f1f5f5     ..?...!.88pH....
    21b8:	df63bcbc c177b6b6 75afdada 63422121     ..c...w....u!!Bc
    21c8:	30201010 1ae5ffff 0efdf3f3 6dbfd2d2     .. 0...........m
    21d8:	4c81cdcd 14180c0c 35261313 2fc3ecec     ...L......&5.../
    21e8:	e1be5f5f a2359797 cc884444 392e1717     __....5.DD.....9
    21f8:	5793c4c4 f255a7a7 82fc7e7e 477a3d3d     ...W..U.~~..==zG
    2208:	acc86464 e7ba5d5d 2b321919 95e67373     dd..]]....2+ss..
    2218:	a0c06060 98198181 d19e4f4f 7fa3dcdc     ``......OO......
    2228:	66442222 7e542a2a ab3b9090 830b8888     ""Df**T~..;.....
    2238:	ca8c4646 29c7eeee d36bb8b8 3c281414     FF.....)..k...(<
    2248:	79a7dede e2bc5e5e 1d160b0b 76addbdb     ...y^^.........v
    2258:	3bdbe0e0 56643232 4e743a3a 1e140a0a     ...;22dV::tN....
    2268:	db924949 0a0c0606 6c482424 e4b85c5c     II......$$Hl\\..
    2278:	5d9fc2c2 6ebdd3d3 ef43acac a6c46262     ...]...n..C.bb..
    2288:	a8399191 a4319595 37d3e4e4 8bf27979     ..9...1....7yy..
    2298:	32d5e7e7 438bc8c8 596e3737 b7da6d6d     ...2...C77nYmm..
    22a8:	8c018d8d 64b1d5d5 d29c4e4e e049a9a9     .......dNN....I.
    22b8:	b4d86c6c faac5656 07f3f4f4 25cfeaea     ll..VV.........%
    22c8:	afca6565 8ef47a7a e947aeae 18100808     ee..zz....G.....
    22d8:	d56fbaba 88f07878 6f4a2525 725c2e2e     ..o.xx..%%Jo..\r
    22e8:	24381c1c f157a6a6 c773b4b4 5197c6c6     ..8$..W...s....Q
    22f8:	23cbe8e8 7ca1dddd 9ce87474 213e1f1f     ...#...|tt....>!
    2308:	dd964b4b dc61bdbd 860d8b8b 850f8a8a     KK....a.........
    2318:	90e07070 427c3e3e c471b5b5 aacc6666     pp..>>|B..q.ff..
    2328:	d8904848 05060303 01f7f6f6 121c0e0e     HH..............
    2338:	a3c26161 5f6a3535 f9ae5757 d069b9b9     aa..55j_WW....i.
    2348:	91178686 5899c1c1 273a1d1d b9279e9e     .......X..:'..'.
    2358:	38d9e1e1 13ebf8f8 b32b9898 33221111     ...8......+..."3
    2368:	bbd26969 70a9d9d9 89078e8e a7339494     ii.....p......3.
    2378:	b62d9b9b 223c1e1e 92158787 20c9e9e9     ..-...<"....... 
    2388:	4987cece ffaa5555 78502828 7aa5dfdf     ...IUU..((Px...z
    2398:	8f038c8c f859a1a1 80098989 171a0d0d     ......Y.........
    23a8:	da65bfbf 31d7e6e6 c6844242 b8d06868     ..e....1BB..hh..
    23b8:	c3824141 b0299999 775a2d2d 111e0f0f     AA....).--Zw....
    23c8:	cb7bb0b0 fca85454 d66dbbbb 3a2c1616     ..{.TT....m...,:
    23d8:	63a5c663 7c84f87c 7799ee77 7b8df67b     c..c|..|w..w{..{
    23e8:	f20dfff2 6bbdd66b 6fb1de6f c55491c5     ....k..ko..o..T.
    23f8:	30506030 01030201 67a9ce67 2b7d562b     0`P0....g..g+V}+
    2408:	fe19e7fe d762b5d7 abe64dab 769aec76     ......b..M..v..v
    2418:	ca458fca 829d1f82 c94089c9 7d87fa7d     ..E.......@.}..}
    2428:	fa15effa 59ebb259 47c98e47 f00bfbf0     ....Y..YG..G....
    2438:	adec41ad d467b3d4 a2fd5fa2 afea45af     .A....g.._...E..
    2448:	9cbf239c a4f753a4 7296e472 c05b9bc0     .#...S..r..r..[.
    2458:	b7c275b7 fd1ce1fd 93ae3d93 266a4c26     .u.......=..&Lj&
    2468:	365a6c36 3f417e3f f702f5f7 cc4f83cc     6lZ6?~A?......O.
    2478:	345c6834 a5f451a5 e534d1e5 f108f9f1     4h\4.Q....4.....
    2488:	7193e271 d873abd8 31536231 153f2a15     q..q..s.1bS1.*?.
    2498:	040c0804 c75295c7 23654623 c35e9dc3     ......R.#Fe#..^.
    24a8:	18283018 96a13796 050f0a05 9ab52f9a     .0(..7......./..
    24b8:	07090e07 12362412 809b1b80 e23ddfe2     .....$6.......=.
    24c8:	eb26cdeb 27694e27 b2cd7fb2 759fea75     ..&.'Ni'....u..u
    24d8:	091b1209 839e1d83 2c74582c 1a2e341a     ........,Xt,.4..
    24e8:	1b2d361b 6eb2dc6e 5aeeb45a a0fb5ba0     .6-.n..nZ..Z.[..
    24f8:	52f6a452 3b4d763b d661b7d6 b3ce7db3     R..R;vM;..a..}..
    2508:	297b5229 e33edde3 2f715e2f 84971384     )R{)..>./^q/....
    2518:	53f5a653 d168b9d1 00000000 ed2cc1ed     S..S..h.......,.
    2528:	20604020 fc1fe3fc b1c879b1 5bedb65b      @` .....y..[..[
    2538:	6abed46a cb468dcb bed967be 394b7239     j..j..F..g..9rK9
    2548:	4ade944a 4cd4984c 58e8b058 cf4a85cf     J..JL..LX..X..J.
    2558:	d06bbbd0 ef2ac5ef aae54faa fb16edfb     ..k...*..O......
    2568:	43c58643 4dd79a4d 33556633 85941185     C..CM..M3fU3....
    2578:	45cf8a45 f910e9f9 02060402 7f81fe7f     E..E............
    2588:	50f0a050 3c44783c 9fba259f a8e34ba8     P..P<xD<.%...K..
    2598:	51f3a251 a3fe5da3 40c08040 8f8a058f     Q..Q.]..@..@....
    25a8:	92ad3f92 9dbc219d 38487038 f504f1f5     .?...!..8pH8....
    25b8:	bcdf63bc b6c177b6 da75afda 21634221     .c...w....u.!Bc!
    25c8:	10302010 ff1ae5ff f30efdf3 d26dbfd2     . 0...........m.
    25d8:	cd4c81cd 0c14180c 13352613 ec2fc3ec     ..L......&5.../.
    25e8:	5fe1be5f 97a23597 44cc8844 17392e17     _.._.5..D..D..9.
    25f8:	c45793c4 a7f255a7 7e82fc7e 3d477a3d     ..W..U..~..~=zG=
    2608:	64acc864 5de7ba5d 192b3219 7395e673     d..d]..].2+.s..s
    2618:	60a0c060 81981981 4fd19e4f dc7fa3dc     `..`....O..O....
    2628:	22664422 2a7e542a 90ab3b90 88830b88     "Df"*T~*.;......
    2638:	46ca8c46 ee29c7ee b8d36bb8 143c2814     F..F..)..k...(<.
    2648:	de79a7de 5ee2bc5e 0b1d160b db76addb     ..y.^..^......v.
    2658:	e03bdbe0 32566432 3a4e743a 0a1e140a     ..;.2dV2:tN:....
    2668:	49db9249 060a0c06 246c4824 5ce4b85c     I..I....$Hl$\..\
    2678:	c25d9fc2 d36ebdd3 acef43ac 62a6c462     ..]...n..C..b..b
    2688:	91a83991 95a43195 e437d3e4 798bf279     .9...1....7.y..y
    2698:	e732d5e7 c8438bc8 37596e37 6db7da6d     ..2...C.7nY7m..m
    26a8:	8d8c018d d564b1d5 4ed29c4e a9e049a9     ......d.N..N.I..
    26b8:	6cb4d86c 56faac56 f407f3f4 ea25cfea     l..lV..V......%.
    26c8:	65afca65 7a8ef47a aee947ae 08181008     e..ez..z.G......
    26d8:	bad56fba 7888f078 256f4a25 2e725c2e     .o..x..x%Jo%.\r.
    26e8:	1c24381c a6f157a6 b4c773b4 c65197c6     .8$..W...s....Q.
    26f8:	e823cbe8 dd7ca1dd 749ce874 1f213e1f     ..#...|.t..t.>!.
    2708:	4bdd964b bddc61bd 8b860d8b 8a850f8a     K..K.a..........
    2718:	7090e070 3e427c3e b5c471b5 66aacc66     p..p>|B>.q..f..f
    2728:	48d89048 03050603 f601f7f6 0e121c0e     H..H............
    2738:	61a3c261 355f6a35 57f9ae57 b9d069b9     a..a5j_5W..W.i..
    2748:	86911786 c15899c1 1d273a1d 9eb9279e     ......X..:'..'..
    2758:	e138d9e1 f813ebf8 98b32b98 11332211     ..8......+..."3.
    2768:	69bbd269 d970a9d9 8e89078e 94a73394     i..i..p......3..
    2778:	9bb62d9b 1e223c1e 87921587 e920c9e9     .-...<"....... .
    2788:	ce4987ce 55ffaa55 28785028 df7aa5df     ..I.U..U(Px(..z.
    2798:	8c8f038c a1f859a1 89800989 0d171a0d     .....Y..........
    27a8:	bfda65bf e631d7e6 42c68442 68b8d068     .e....1.B..Bh..h
    27b8:	41c38241 99b02999 2d775a2d 0f111e0f     A..A.)..-Zw-....
    27c8:	b0cb7bb0 54fca854 bbd66dbb 163a2c16     .{..T..T.m...,:.
    27d8:	6363a5c6 7c7c84f8 777799ee 7b7b8df6     ..cc..||..ww..{{
    27e8:	f2f20dff 6b6bbdd6 6f6fb1de c5c55491     ......kk..oo.T..
    27f8:	30305060 01010302 6767a9ce 2b2b7d56     `P00......ggV}++
    2808:	fefe19e7 d7d762b5 ababe64d 76769aec     .....b..M.....vv
    2818:	caca458f 82829d1f c9c94089 7d7d87fa     .E.......@....}}
    2828:	fafa15ef 5959ebb2 4747c98e f0f00bfb     ......YY..GG....
    2838:	adadec41 d4d467b3 a2a2fd5f afafea45     A....g.._...E...
    2848:	9c9cbf23 a4a4f753 727296e4 c0c05b9b     #...S.....rr.[..
    2858:	b7b7c275 fdfd1ce1 9393ae3d 26266a4c     u.......=...Lj&&
    2868:	36365a6c 3f3f417e f7f702f5 cccc4f83     lZ66~A??.....O..
    2878:	34345c68 a5a5f451 e5e534d1 f1f108f9     h\44Q....4......
    2888:	717193e2 d8d873ab 31315362 15153f2a     ..qq.s..bS11*?..
    2898:	04040c08 c7c75295 23236546 c3c35e9d     .....R..Fe##.^..
    28a8:	18182830 9696a137 05050f0a 9a9ab52f     0(..7......./...
    28b8:	0707090e 12123624 80809b1b e2e23ddf     ....$6.......=..
    28c8:	ebeb26cd 2727694e b2b2cd7f 75759fea     .&..Ni''......uu
    28d8:	09091b12 83839e1d 2c2c7458 1a1a2e34     ........Xt,,4...
    28e8:	1b1b2d36 6e6eb2dc 5a5aeeb4 a0a0fb5b     6-....nn..ZZ[...
    28f8:	5252f6a4 3b3b4d76 d6d661b7 b3b3ce7d     ..RRvM;;.a..}...
    2908:	29297b52 e3e33edd 2f2f715e 84849713     R{)).>..^q//....
    2918:	5353f5a6 d1d168b9 00000000 eded2cc1     ..SS.h.......,..
    2928:	20206040 fcfc1fe3 b1b1c879 5b5bedb6     @`  ....y.....[[
    2938:	6a6abed4 cbcb468d bebed967 39394b72     ..jj.F..g...rK99
    2948:	4a4ade94 4c4cd498 5858e8b0 cfcf4a85     ..JJ..LL..XX.J..
    2958:	d0d06bbb efef2ac5 aaaae54f fbfb16ed     .k...*..O.......
    2968:	4343c586 4d4dd79a 33335566 85859411     ..CC..MMfU33....
    2978:	4545cf8a f9f910e9 02020604 7f7f81fe     ..EE............
    2988:	5050f0a0 3c3c4478 9f9fba25 a8a8e34b     ..PPxD<<%...K...
    2998:	5151f3a2 a3a3fe5d 4040c080 8f8f8a05     ..QQ].....@@....
    29a8:	9292ad3f 9d9dbc21 38384870 f5f504f1     ?...!...pH88....
    29b8:	bcbcdf63 b6b6c177 dada75af 21216342     c...w....u..Bc!!
    29c8:	10103020 ffff1ae5 f3f30efd d2d26dbf      0...........m..
    29d8:	cdcd4c81 0c0c1418 13133526 ecec2fc3     .L......&5.../..
    29e8:	5f5fe1be 9797a235 4444cc88 1717392e     ..__5.....DD.9..
    29f8:	c4c45793 a7a7f255 7e7e82fc 3d3d477a     .W..U.....~~zG==
    2a08:	6464acc8 5d5de7ba 19192b32 737395e6     ..dd..]]2+....ss
    2a18:	6060a0c0 81819819 4f4fd19e dcdc7fa3     ..``......OO....
    2a28:	22226644 2a2a7e54 9090ab3b 8888830b     Df""T~**;.......
    2a38:	4646ca8c eeee29c7 b8b8d36b 14143c28     ..FF.)..k...(<..
    2a48:	dede79a7 5e5ee2bc 0b0b1d16 dbdb76ad     .y....^^.....v..
    2a58:	e0e03bdb 32325664 3a3a4e74 0a0a1e14     .;..dV22tN::....
    2a68:	4949db92 06060a0c 24246c48 5c5ce4b8     ..II....Hl$$..\\
    2a78:	c2c25d9f d3d36ebd acacef43 6262a6c4     .]...n..C.....bb
    2a88:	9191a839 9595a431 e4e437d3 79798bf2     9...1....7....yy
    2a98:	e7e732d5 c8c8438b 3737596e 6d6db7da     .2...C..nY77..mm
    2aa8:	8d8d8c01 d5d564b1 4e4ed29c a9a9e049     .....d....NNI...
    2ab8:	6c6cb4d8 5656faac f4f407f3 eaea25cf     ..ll..VV.....%..
    2ac8:	6565afca 7a7a8ef4 aeaee947 08081810     ..ee..zzG.......
    2ad8:	babad56f 787888f0 25256f4a 2e2e725c     o.....xxJo%%\r..
    2ae8:	1c1c2438 a6a6f157 b4b4c773 c6c65197     8$..W...s....Q..
    2af8:	e8e823cb dddd7ca1 74749ce8 1f1f213e     .#...|....tt>!..
    2b08:	4b4bdd96 bdbddc61 8b8b860d 8a8a850f     ..KKa...........
    2b18:	707090e0 3e3e427c b5b5c471 6666aacc     ..pp|B>>q.....ff
    2b28:	4848d890 03030506 f6f601f7 0e0e121c     ..HH............
    2b38:	6161a3c2 35355f6a 5757f9ae b9b9d069     ..aaj_55..WWi...
    2b48:	86869117 c1c15899 1d1d273a 9e9eb927     .....X..:'..'...
    2b58:	e1e138d9 f8f813eb 9898b32b 11113322     .8......+..."3..
    2b68:	6969bbd2 d9d970a9 8e8e8907 9494a733     ..ii.p......3...
    2b78:	9b9bb62d 1e1e223c 87879215 e9e920c9     -...<"....... ..
    2b88:	cece4987 5555ffaa 28287850 dfdf7aa5     .I....UUPx((.z..
    2b98:	8c8c8f03 a1a1f859 89898009 0d0d171a     ....Y...........
    2ba8:	bfbfda65 e6e631d7 4242c684 6868b8d0     e....1....BB..hh
    2bb8:	4141c382 9999b029 2d2d775a 0f0f111e     ..AA)...Zw--....
    2bc8:	b0b0cb7b 5454fca8 bbbbd66d 16163a2c     {.....TTm...,:..

00002bd8 <Td>:
    2bd8:	51f4a750 7e416553 1a17a4c3 3a275e96     P..QSeA~.....^':
    2be8:	3bab6bcb 1f9d45f1 acfa58ab 4be30393     .k.;.E...X.....K
    2bf8:	2030fa55 ad766df6 88cc7691 f5024c25     U.0 .mv..v..%L..
    2c08:	4fe5d7fc c52acbd7 26354480 b562a38f     ...O..*..D5&..b.
    2c18:	deb15a49 25ba1b67 45ea0e98 5dfec0e1     IZ..g..%...E...]
    2c28:	c32f7502 814cf012 8d4697a3 6bd3f9c6     .u/...L...F....k
    2c38:	038f5fe7 15929c95 bf6d7aeb 955259da     ._.......zm..YR.
    2c48:	d4be832d 587421d3 49e06929 8ec9c844     -....!tX)i.ID...
    2c58:	75c2896a f48e7978 99583e6b 27b971dd     j..uxy..k>X..q.'
    2c68:	bee14fb6 f088ad17 c920ac66 7dce3ab4     .O......f. ..:.}
    2c78:	63df4a18 e51a3182 97513360 62537f45     .J.c.1..`3Q.E.Sb
    2c88:	b16477e0 bb6bae84 fe81a01c f9082b94     .wd...k......+..
    2c98:	70486858 8f45fd19 94de6c87 527bf8b7     XhHp..E..l....{R
    2ca8:	ab73d323 724b02e2 e31f8f57 6655ab2a     #.s...KrW...*.Uf
    2cb8:	b2eb2807 2fb5c203 86c57b9a d33708a5     .(...../.{....7.
    2cc8:	302887f2 23bfa5b2 02036aba ed16825c     ..(0...#.j..\...
    2cd8:	8acf1c2b a779b492 f307f2f0 4e69e2a1     +.....y.......iN
    2ce8:	65daf4cd 0605bed5 d134621f c4a6fe8a     ...e.....b4.....
    2cf8:	342e539d a2f355a0 058ae132 a4f6eb75     .S.4.U..2...u...
    2d08:	0b83ec39 4060efaa 5e719f06 bd6e1051     9.....`@..q^Q.n.
    2d18:	3e218af9 96dd063d dd3e05ae 4de6bd46     ..!>=.....>.F..M
    2d28:	91548db5 71c45d05 0406d46f 605015ff     ..T..].qo.....P`
    2d38:	1998fb24 d6bde997 894043cc 67d99e77     $........C@.w..g
    2d48:	b0e842bd 07898b88 e7195b38 79c8eedb     .B......8[.....y
    2d58:	a17c0a47 7c420fe9 f8841ec9 00000000     G.|...B|........
    2d68:	09808683 322bed48 1e1170ac 6c5a724e     ....H.+2.p..NrZl
    2d78:	fd0efffb 0f853856 3daed51e 362d3927     ....V8.....='9-6
    2d88:	0a0fd964 685ca621 9b5b54d1 24362e3a     d...!.\h.T[.:.6$
    2d98:	0c0a67b1 9357e70f b4ee96d2 1b9b919e     .g....W.........
    2da8:	80c0c54f 61dc20a2 5a774b69 1c121a16     O.... .aiKwZ....
    2db8:	e293ba0a c0a02ae5 3c22e043 121b171d     .....*..C."<....
    2dc8:	0e090d0b f28bc7ad 2db6a8b9 141ea9c8     ...........-....
    2dd8:	57f11985 af75074c ee99ddbb a37f60fd     ...WL.u......`..
    2de8:	f701269f 5c72f5bc 44663bc5 5bfb7e34     .&....r\.;fD4~.[
    2df8:	8b432976 cb23c6dc b6edfc68 b8e4f163     v)C...#.h...c...
    2e08:	d731dcca 42638510 13972240 84c61120     ..1...cB@".. ...
    2e18:	854a247d d2bb3df8 aef93211 c729a16d     }$J..=...2..m.).
    2e28:	1d9e2f4b dcb230f3 0d8652ec 77c1e3d0     K/...0...R.....w
    2e38:	2bb3166c a970b999 119448fa 47e96422     l..+..p..H.."d.G
    2e48:	a8fc8cc4 a0f03f1a 567d2cd8 223390ef     .....?...,}V..3"
    2e58:	87494ec7 d938d1c1 8ccaa2fe 98d40b36     .NI...8.....6...
    2e68:	a6f581cf a57ade28 dab78e26 3fadbfa4     ....(.z.&......?
    2e78:	2c3a9de4 5078920d 6a5fcc9b 547e4662     ..:,..xP.._jbF~T
    2e88:	f68d13c2 90d8b8e8 2e39f75e 82c3aff5     ........^.9.....
    2e98:	9f5d80be 69d0937c 6fd52da9 cf2512b3     ..].|..i.-.o..%.
    2ea8:	c8ac993b 10187da7 e89c636e db3bbb7b     ;....}..nc..{.;.
    2eb8:	cd267809 6e5918f4 ec9ab701 834f9aa8     .x&...Yn......O.
    2ec8:	e6956e65 aaffe67e 21bccf08 ef15e8e6     en..~......!....
    2ed8:	bae79bd9 4a6f36ce ea9f09d4 29b07cd6     .....6oJ.....|.)
    2ee8:	31a4b2af 2a3f2331 c6a59430 35a266c0     ...11#?*0....f.5
    2ef8:	744ebc37 fc82caa6 e090d0b0 33a7d815     7.Nt...........3
    2f08:	f104984a 41ecdaf7 7fcd500e 1791f62f     J......A.P../...
    2f18:	764dd68d 43efb04d ccaa4d54 e49604df     ..MvM..CTM......
    2f28:	9ed1b5e3 4c6a881b c12c1fb8 4665517f     ......jL..,..QeF
    2f38:	9d5eea04 018c355d fa877473 fb0b412e     ..^.]5..st...A..
    2f48:	b3671d5a 92dbd252 e9105633 6dd64713     Z.g.R...3V...G.m
    2f58:	9ad7618c 37a10c7a 59f8148e eb133c89     .a..z..7...Y.<..
    2f68:	cea927ee b761c935 e11ce5ed 7a47b13c     .'..5.a.....<.Gz
    2f78:	9cd2df59 55f2733f 1814ce79 73c737bf     Y...?s.Uy....7.s
    2f88:	53f7cdea 5ffdaa5b df3d6f14 7844db86     ...S[.._.o=...Dx
    2f98:	caaff381 b968c43e 3824342c c2a3405f     ....>.h.,4$8_@..
    2fa8:	161dc372 bce2250c 283c498b ff0d9541     r....%...I<(A...
    2fb8:	39a80171 080cb3de d8b4e49c 6456c190     q..9..........Vd
    2fc8:	7bcb8461 d532b670 486c5c74 d0b85742     a..{p.2.t\lHBW..
    2fd8:	5051f4a7 537e4165 c31a17a4 963a275e     ..QPeA~S....^':.
    2fe8:	cb3bab6b f11f9d45 abacfa58 934be303     k.;.E...X.....K.
    2ff8:	552030fa f6ad766d 9188cc76 25f5024c     .0 Umv..v...L..%
    3008:	fc4fe5d7 d7c52acb 80263544 8fb562a3     ..O..*..D5&..b..
    3018:	49deb15a 6725ba1b 9845ea0e e15dfec0     Z..I..%g..E...].
    3028:	02c32f75 12814cf0 a38d4697 c66bd3f9     u/...L...F....k.
    3038:	e7038f5f 9515929c ebbf6d7a da955259     _.......zm..YR..
    3048:	2dd4be83 d3587421 2949e069 448ec9c8     ...-!tX.i.I)...D
    3058:	6a75c289 78f48e79 6b99583e dd27b971     ..ujy..x>X.kq.'.
    3068:	b6bee14f 17f088ad 66c920ac b47dce3a     O........ .f:.}.
    3078:	1863df4a 82e51a31 60975133 4562537f     J.c.1...3Q.`.SbE
    3088:	e0b16477 84bb6bae 1cfe81a0 94f9082b     wd...k......+...
    3098:	58704868 198f45fd 8794de6c b7527bf8     hHpX.E..l....{R.
    30a8:	23ab73d3 e2724b02 57e31f8f 2a6655ab     .s.#.Kr....W.Uf*
    30b8:	07b2eb28 032fb5c2 9a86c57b a5d33708     (...../.{....7..
    30c8:	f2302887 b223bfa5 ba02036a 5ced1682     .(0...#.j......\
    30d8:	2b8acf1c 92a779b4 f0f307f2 a14e69e2     ...+.y.......iN.
    30e8:	cd65daf4 d50605be 1fd13462 8ac4a6fe     ..e.....b4......
    30f8:	9d342e53 a0a2f355 32058ae1 75a4f6eb     S.4.U......2...u
    3108:	390b83ec aa4060ef 065e719f 51bd6e10     ...9.`@..q^..n.Q
    3118:	f93e218a 3d96dd06 aedd3e05 464de6bd     .!>....=.>....MF
    3128:	b591548d 0571c45d 6f0406d4 ff605015     .T..].q....o.P`.
    3138:	241998fb 97d6bde9 cc894043 7767d99e     ...$....C@....gw
    3148:	bdb0e842 8807898b 38e7195b db79c8ee     B.......[..8..y.
    3158:	47a17c0a e97c420f c9f8841e 00000000     .|.G.B|.........
    3168:	83098086 48322bed ac1e1170 4e6c5a72     .....+2Hp...rZlN
    3178:	fbfd0eff 560f8538 1e3daed5 27362d39     ....8..V..=.9-6'
    3188:	640a0fd9 21685ca6 d19b5b54 3a24362e     ...d.\h!T[...6$:
    3198:	b10c0a67 0f9357e7 d2b4ee96 9e1b9b91     g....W..........
    31a8:	4f80c0c5 a261dc20 695a774b 161c121a     ...O .a.KwZi....
    31b8:	0ae293ba e5c0a02a 433c22e0 1d121b17     ....*...."<C....
    31c8:	0b0e090d adf28bc7 b92db6a8 c8141ea9     ..........-.....
    31d8:	8557f119 4caf7507 bbee99dd fda37f60     ..W..u.L....`...
    31e8:	9ff70126 bc5c72f5 c544663b 345bfb7e     &....r\.;fD.~.[4
    31f8:	768b4329 dccb23c6 68b6edfc 63b8e4f1     )C.v.#.....h...c
    3208:	cad731dc 10426385 40139722 2084c611     .1...cB."..@... 
    3218:	7d854a24 f8d2bb3d 11aef932 6dc729a1     $J.}=...2....).m
    3228:	4b1d9e2f f3dcb230 ec0d8652 d077c1e3     /..K0...R.....w.
    3238:	6c2bb316 99a970b9 fa119448 2247e964     ..+l.p..H...d.G"
    3248:	c4a8fc8c 1aa0f03f d8567d2c ef223390     ....?...,}V..3".
    3258:	c787494e c1d938d1 fe8ccaa2 3698d40b     NI...8.........6
    3268:	cfa6f581 28a57ade 26dab78e a43fadbf     .....z.(...&..?.
    3278:	e42c3a9d 0d507892 9b6a5fcc 62547e46     .:,..xP.._j.F~Tb
    3288:	c2f68d13 e890d8b8 5e2e39f7 f582c3af     .........9.^....
    3298:	be9f5d80 7c69d093 a96fd52d b3cf2512     .]....i|-.o..%..
    32a8:	3bc8ac99 a710187d 6ee89c63 7bdb3bbb     ...;}...c..n.;.{
    32b8:	09cd2678 f46e5918 01ec9ab7 a8834f9a     x&...Yn......O..
    32c8:	65e6956e 7eaaffe6 0821bccf e6ef15e8     n..e...~..!.....
    32d8:	d9bae79b ce4a6f36 d4ea9f09 d629b07c     ....6oJ.....|.).
    32e8:	af31a4b2 312a3f23 30c6a594 c035a266     ..1.#?*1...0f.5.
    32f8:	37744ebc a6fc82ca b0e090d0 1533a7d8     .Nt7..........3.
    3308:	4af10498 f741ecda 0e7fcd50 2f1791f6     ...J..A.P....../
    3318:	8d764dd6 4d43efb0 54ccaa4d dfe49604     .Mv...CMM..T....
    3328:	e39ed1b5 1b4c6a88 b8c12c1f 7f466551     .....jL..,..QeF.
    3338:	049d5eea 5d018c35 73fa8774 2efb0b41     .^..5..]t..sA...
    3348:	5ab3671d 5292dbd2 33e91056 136dd647     .g.Z...RV..3G.m.
    3358:	8c9ad761 7a37a10c 8e59f814 89eb133c     a.....7z..Y.<...
    3368:	eecea927 35b761c9 ede11ce5 3c7a47b1     '....a.5.....Gz<
    3378:	599cd2df 3f55f273 791814ce bf73c737     ...Ys.U?...y7.s.
    3388:	ea53f7cd 5b5ffdaa 14df3d6f 867844db     ..S..._[o=...Dx.
    3398:	81caaff3 3eb968c4 2c382434 5fc2a340     .....h.>4$8,@.._
    33a8:	72161dc3 0cbce225 8b283c49 41ff0d95     ...r%...I<(....A
    33b8:	7139a801 de080cb3 9cd8b4e4 906456c1     ..9q.........Vd.
    33c8:	617bcb84 70d532b6 74486c5c 42d0b857     ..{a.2.p\lHtW..B
    33d8:	a75051f4 65537e41 a4c31a17 5e963a27     .QP.A~Se....':.^
    33e8:	6bcb3bab 45f11f9d 58abacfa 03934be3     .;.k...E...X.K..
    33f8:	fa552030 6df6ad76 769188cc 4c25f502     0 U.v..m...v..%L
    3408:	d7fc4fe5 cbd7c52a 44802635 a38fb562     .O..*...5&.Db...
    3418:	5a49deb1 1b6725ba 0e9845ea c0e15dfe     ..IZ.%g..E...]..
    3428:	7502c32f f012814c 97a38d46 f9c66bd3     /..uL...F....k..
    3438:	5fe7038f 9c951592 7aebbf6d 59da9552     ..._....m..zR..Y
    3448:	832dd4be 21d35874 692949e0 c8448ec9     ..-.tX.!.I)i..D.
    3458:	896a75c2 7978f48e 3e6b9958 71dd27b9     .uj...xyX.k>.'.q
    3468:	4fb6bee1 ad17f088 ac66c920 3ab47dce     ...O.... .f..}.:
    3478:	4a1863df 3182e51a 33609751 7f456253     .c.J...1Q.`3SbE.
    3488:	77e0b164 ae84bb6b a01cfe81 2b94f908     d..wk..........+
    3498:	68587048 fd198f45 6c8794de f8b7527b     HpXhE......l{R..
    34a8:	d323ab73 02e2724b 8f57e31f ab2a6655     s.#.Kr....W.Uf*.
    34b8:	2807b2eb c2032fb5 7b9a86c5 08a5d337     ...(./.....{7...
    34c8:	87f23028 a5b223bf 6aba0203 825ced16     (0...#.....j..\.
    34d8:	1c2b8acf b492a779 f2f0f307 e2a14e69     ..+.y.......iN..
    34e8:	f4cd65da bed50605 621fd134 fe8ac4a6     .e......4..b....
    34f8:	539d342e 55a0a2f3 e132058a eb75a4f6     .4.S...U..2...u.
    3508:	ec390b83 efaa4060 9f065e71 1051bd6e     ..9.`@..q^..n.Q.
    3518:	8af93e21 063d96dd 05aedd3e bd464de6     !>....=.>....MF.
    3528:	8db59154 5d0571c4 d46f0406 15ff6050     T....q.]..o.P`..
    3538:	fb241998 e997d6bd 43cc8940 9e7767d9     ..$.....@..C.gw.
    3548:	42bdb0e8 8b880789 5b38e719 eedb79c8     ...B......8[.y..
    3558:	0a47a17c 0fe97c42 1ec9f884 00000000     |.G.B|..........
    3568:	86830980 ed48322b 70ac1e11 724e6c5a     ....+2H....pZlNr
    3578:	fffbfd0e 38560f85 d51e3dae 3927362d     ......V8.=..-6'9
    3588:	d9640a0f a621685c 54d19b5b 2e3a2436     ..d.\h!.[..T6$:.
    3598:	67b10c0a e70f9357 96d2b4ee 919e1b9b     ...gW...........
    35a8:	c54f80c0 20a261dc 4b695a77 1a161c12     ..O..a. wZiK....
    35b8:	ba0ae293 2ae5c0a0 e0433c22 171d121b     .......*"<C.....
    35c8:	0d0b0e09 c7adf28b a8b92db6 a9c8141e     .........-......
    35d8:	198557f1 074caf75 ddbbee99 60fda37f     .W..u.L........`
    35e8:	269ff701 f5bc5c72 3bc54466 7e345bfb     ...&r\..fD.;.[4~
    35f8:	29768b43 c6dccb23 fc68b6ed f163b8e4     C.v)#.....h...c.
    3608:	dccad731 85104263 22401397 112084c6     1...cB....@".. .
    3618:	247d854a 3df8d2bb 3211aef9 a16dc729     J.}$...=...2).m.
    3628:	2f4b1d9e 30f3dcb2 52ec0d86 e3d077c1     ..K/...0...R.w..
    3638:	166c2bb3 b999a970 48fa1194 642247e9     .+l.p......H.G"d
    3648:	8cc4a8fc 3f1aa0f0 2cd8567d 90ef2233     .......?}V.,3"..
    3658:	4ec78749 d1c1d938 a2fe8cca 0b3698d4     I..N8.........6.
    3668:	81cfa6f5 de28a57a 8e26dab7 bfa43fad     ....z.(...&..?..
    3678:	9de42c3a 920d5078 cc9b6a5f 4662547e     :,..xP.._j..~TbF
    3688:	13c2f68d b8e890d8 f75e2e39 aff582c3     ........9.^.....
    3698:	80be9f5d 937c69d0 2da96fd5 12b3cf25     ]....i|..o.-%...
    36a8:	993bc8ac 7da71018 636ee89c bb7bdb3b     ..;....}..nc;.{.
    36b8:	7809cd26 18f46e59 b701ec9a 9aa8834f     &..xYn......O...
    36c8:	6e65e695 e67eaaff cf0821bc e8e6ef15     ..en..~..!......
    36d8:	9bd9bae7 36ce4a6f 09d4ea9f 7cd629b0     ....oJ.6.....).|
    36e8:	b2af31a4 23312a3f 9430c6a5 66c035a2     .1..?*1#..0..5.f
    36f8:	bc37744e caa6fc82 d0b0e090 d81533a7     Nt7..........3..
    3708:	984af104 daf741ec 500e7fcd f62f1791     ..J..A.....P../.
    3718:	d68d764d b04d43ef 4d54ccaa 04dfe496     Mv...CM...TM....
    3728:	b5e39ed1 881b4c6a 1fb8c12c 517f4665     ....jL..,...eF.Q
    3738:	ea049d5e 355d018c 7473fa87 412efb0b     ^.....]5..st...A
    3748:	1d5ab367 d25292db 5633e910 47136dd6     g.Z...R...3V.m.G
    3758:	618c9ad7 0c7a37a1 148e59f8 3c89eb13     ...a.7z..Y.....<
    3768:	27eecea9 c935b761 e5ede11c b13c7a47     ...'a.5.....Gz<.
    3778:	df599cd2 733f55f2 ce791814 37bf73c7     ..Y..U?s..y..s.7
    3788:	cdea53f7 aa5b5ffd 6f14df3d db867844     .S..._[.=..oDx..
    3798:	f381caaf c43eb968 342c3824 405fc2a3     ....h.>.$8,4.._@
    37a8:	c372161d 250cbce2 498b283c 9541ff0d     ..r....%<(.I..A.
    37b8:	017139a8 b3de080c e49cd8b4 c1906456     .9q.........Vd..
    37c8:	84617bcb b670d532 5c74486c 5742d0b8     .{a.2.p.lHt\..BW
    37d8:	f4a75051 4165537e 17a4c31a 275e963a     QP..~SeA....:.^'
    37e8:	ab6bcb3b 9d45f11f fa58abac e303934b     ;.k...E...X.K...
    37f8:	30fa5520 766df6ad cc769188 024c25f5      U.0..mv..v..%L.
    3808:	e5d7fc4f 2acbd7c5 35448026 62a38fb5     O......*&.D5...b
    3818:	b15a49de ba1b6725 ea0e9845 fec0e15d     .IZ.%g..E...]...
    3828:	2f7502c3 4cf01281 4697a38d d3f9c66b     ..u/...L...Fk...
    3838:	8f5fe703 929c9515 6d7aebbf 5259da95     .._.......zm..YR
    3848:	be832dd4 7421d358 e0692949 c9c8448e     .-..X.!tI)i..D..
    3858:	c2896a75 8e7978f4 583e6b99 b971dd27     uj...xy..k>X'.q.
    3868:	e14fb6be 88ad17f0 20ac66c9 ce3ab47d     ..O......f. }.:.
    3878:	df4a1863 1a3182e5 51336097 537f4562     c.J...1..`3QbE.S
    3888:	6477e0b1 6bae84bb 81a01cfe 082b94f9     ..wd...k......+.
    3898:	48685870 45fd198f de6c8794 7bf8b752     pXhH...E..l.R..{
    38a8:	73d323ab 4b02e272 1f8f57e3 55ab2a66     .#.sr..K.W..f*.U
    38b8:	eb2807b2 b5c2032f c57b9a86 3708a5d3     ..(./.....{....7
    38c8:	2887f230 bfa5b223 036aba02 16825ced     0..(#.....j..\..
    38d8:	cf1c2b8a 79b492a7 07f2f0f3 69e2a14e     .+.....y....N..i
    38e8:	daf4cd65 05bed506 34621fd1 a6fe8ac4     e.........b4....
    38f8:	2e539d34 f355a0a2 8ae13205 f6eb75a4     4.S...U..2...u..
    3908:	83ec390b 60efaa40 719f065e 6e1051bd     .9..@..`^..q.Q.n
    3918:	218af93e dd063d96 3e05aedd e6bd464d     >..!.=.....>MF..
    3928:	548db591 c45d0571 06d46f04 5015ff60     ...Tq.]..o..`..P
    3938:	98fb2419 bde997d6 4043cc89 d99e7767     .$........C@gw..
    3948:	e842bdb0 898b8807 195b38e7 c8eedb79     ..B......8[.y...
    3958:	7c0a47a1 420fe97c 841ec9f8 00000000     .G.||..B........
    3968:	80868309 2bed4832 1170ac1e 5a724e6c     ....2H.+..p.lNrZ
    3978:	0efffbfd 8538560f aed51e3d 2d392736     .....V8.=...6'9-
    3988:	0fd9640a 5ca62168 5b54d19b 362e3a24     .d..h!.\..T[$:.6
    3998:	0a67b10c 57e70f93 ee96d2b4 9b919e1b     ..g....W........
    39a8:	c0c54f80 dc20a261 774b695a 121a161c     .O..a. .ZiKw....
    39b8:	93ba0ae2 a02ae5c0 22e0433c 1b171d12     ......*.<C."....
    39c8:	090d0b0e 8bc7adf2 b6a8b92d 1ea9c814     ........-.......
    39d8:	f1198557 75074caf 99ddbbee 7f60fda3     W....L.u......`.
    39e8:	01269ff7 72f5bc5c 663bc544 fb7e345b     ..&.\..rD.;f[4~.
    39f8:	4329768b 23c6dccb edfc68b6 e4f163b8     .v)C...#.h...c..
    3a08:	31dccad7 63851042 97224013 c6112084     ...1B..c.@".. ..
    3a18:	4a247d85 bb3df8d2 f93211ae 29a16dc7     .}$J..=...2..m.)
    3a28:	9e2f4b1d b230f3dc 8652ec0d c1e3d077     .K/...0...R.w...
    3a38:	b3166c2b 70b999a9 9448fa11 e9642247     +l.....p..H.G"d.
    3a48:	fc8cc4a8 f03f1aa0 7d2cd856 3390ef22     ......?.V.,}"..3
    3a58:	494ec787 38d1c1d9 caa2fe8c d40b3698     ..NI...8.....6..
    3a68:	f581cfa6 7ade28a5 b78e26da adbfa43f     .....(.z.&..?...
    3a78:	3a9de42c 78920d50 5fcc9b6a 7e466254     ,..:P..xj.._TbF~
    3a88:	8d13c2f6 d8b8e890 39f75e2e c3aff582     .........^.9....
    3a98:	5d80be9f d0937c69 d52da96f 2512b3cf     ...]i|..o.-....%
    3aa8:	ac993bc8 187da710 9c636ee8 3bbb7bdb     .;....}..nc..{.;
    3ab8:	267809cd 5918f46e 9ab701ec 4f9aa883     ..x&n..Y.......O
    3ac8:	956e65e6 ffe67eaa bccf0821 15e8e6ef     .en..~..!.......
    3ad8:	e79bd9ba 6f36ce4a 9f09d4ea b07cd629     ....J.6o....).|.
    3ae8:	a4b2af31 3f23312a a59430c6 a266c035     1...*1#?.0..5.f.
    3af8:	4ebc3774 82caa6fc 90d0b0e0 a7d81533     t7.N........3...
    3b08:	04984af1 ecdaf741 cd500e7f 91f62f17     .J..A.....P../..
    3b18:	4dd68d76 efb04d43 aa4d54cc 9604dfe4     v..MCM...TM.....
    3b28:	d1b5e39e 6a881b4c 2c1fb8c1 65517f46     ....L..j...,F.Qe
    3b38:	5eea049d 8c355d01 877473fa 0b412efb     ...^.]5..st...A.
    3b48:	671d5ab3 dbd25292 105633e9 d647136d     .Z.g.R...3V.m.G.
    3b58:	d7618c9a a10c7a37 f8148e59 133c89eb     ..a.7z..Y.....<.
    3b68:	a927eece 61c935b7 1ce5ede1 47b13c7a     ..'..5.a....z<.G
    3b78:	d2df599c f2733f55 14ce7918 c737bf73     .Y..U?s..y..s.7.
    3b88:	f7cdea53 fdaa5b5f 3d6f14df 44db8678     S..._[....o=x..D
    3b98:	aff381ca 68c43eb9 24342c38 a3405fc2     .....>.h8,4$._@.
    3ba8:	1dc37216 e2250cbc 3c498b28 0d9541ff     .r....%.(.I<.A..
    3bb8:	a8017139 0cb3de08 b4e49cd8 56c19064     9q..........d..V
    3bc8:	cb84617b 32b670d5 6c5c7448 b85742d0     {a...p.2Ht\l.BW.

00003bd8 <Td4>:
    3bd8:	d56a0952 38a53630 9ea340bf fbd7f381     R.j.06.8.@......
    3be8:	8239e37c 87ff2f9b 44438e34 cbe9dec4     |.9../..4.CD....
    3bf8:	32947b54 3d23c2a6 0b954cee 4ec3fa42     T{.2..#=.L..B..N
    3c08:	66a12e08 b224d928 49a25b76 25d18b6d     ...f(.$.v[.Im..%
    3c18:	64f6f872 16986886 cc5ca4d4 92b6655d     r..d.h....\.]e..
    3c28:	5048706c dab9edfd 5746155e 849d8da7     lpHP....^.FW....
    3c38:	00abd890 0ad3bc8c 0558e4f7 0645b3b8     ..........X...E.
    3c48:	8f1e2cd0 020f3fca 03bdafc1 6b8a1301     .,...?.........k
    3c58:	4111913a eadc674f cecff297 73e6b4f0     :..AOg.........s
    3c68:	2274ac96 8535ade7 e837f9e2 6edf751c     ..t"..5...7..u.n
    3c78:	711af147 89c5291d 0e62b76f 1bbe18aa     G..q.)..o.b.....
    3c88:	4b3e56fc 2079d2c6 fec0db9a f45acd78     .V>K..y ....x.Z.
    3c98:	33a8dd1f 31c70788 591012b1 5fec8027     ...3...1...Y'.._
    3ca8:	a97f5160 0d4ab519 9f7ae52d ef9cc993     `Q....J.-.z.....
    3cb8:	4d3be0a0 b0f52aae 3cbbebc8 61995383     ..;M.*.....<.S.a
    3cc8:	7e042b17 26d677ba 631469e1 7d0c2155     .+.~.w.&.i.cU!.}

00003cd8 <rcon>:
    3cd8:	01000000 02000000 04000000 08000000     ................
    3ce8:	10000000 20000000 40000000 80000000     ....... ...@....
    3cf8:	1b000000 36000000                       .......6

00003d00 <__sf_fake_stderr>:
	...

00003d20 <__sf_fake_stdin>:
	...

00003d40 <__sf_fake_stdout>:
	...

00003d60 <_init>:
    3d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d62:	46c0      	nop			; (mov r8, r8)
    3d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3d66:	bc08      	pop	{r3}
    3d68:	469e      	mov	lr, r3
    3d6a:	4770      	bx	lr

00003d6c <__init_array_start>:
    3d6c:	000000dd 	.word	0x000000dd

00003d70 <_fini>:
    3d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d72:	46c0      	nop			; (mov r8, r8)
    3d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3d76:	bc08      	pop	{r3}
    3d78:	469e      	mov	lr, r3
    3d7a:	4770      	bx	lr

00003d7c <__fini_array_start>:
    3d7c:	000000b5 	.word	0x000000b5
